
Menu_ssd1306.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ca4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013b8  08008e38  08008e38  00009e38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1f0  0800a1f0  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1f0  0800a1f0  0000b1f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1f8  0800a1f8  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1f8  0800a1f8  0000b1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a1fc  0800a1fc  0000b1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a200  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1d4  2**0
                  CONTENTS
 10 .bss          00000658  200001d4  200001d4  0000c1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000082c  2000082c  0000c1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000beac  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ce7  00000000  00000000  000180b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ae8  00000000  00000000  00019d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000871  00000000  00000000  0001a880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021ac7  00000000  00000000  0001b0f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e47a  00000000  00000000  0003cbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7ddb  00000000  00000000  0004b032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00112e0d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004218  00000000  00000000  00112e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00117068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008e1c 	.word	0x08008e1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08008e1c 	.word	0x08008e1c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <MPU6050_Init>:
int16_t BMP280_dig_P9;
int32_t t_fine;
float t, p;

/* Functions */
void MPU6050_Init(void) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;
// check device ID WHO_AM_I
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x75, 1, &check, 1, 1000);
 8000fea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fee:	9302      	str	r3, [sp, #8]
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	9301      	str	r3, [sp, #4]
 8000ff4:	1dfb      	adds	r3, r7, #7
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	2275      	movs	r2, #117	@ 0x75
 8000ffc:	21d0      	movs	r1, #208	@ 0xd0
 8000ffe:	4823      	ldr	r0, [pc, #140]	@ (800108c <MPU6050_Init+0xa8>)
 8001000:	f001 fc12 	bl	8002828 <HAL_I2C_Mem_Read>
	if (check == 0x68) // 0x68 will be returned by the sensor if OK
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	2b68      	cmp	r3, #104	@ 0x68
 8001008:	d13b      	bne.n	8001082 <MPU6050_Init+0x9e>
			{
// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x6B, 1, &Data, 1, 1000);
 800100e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001012:	9302      	str	r3, [sp, #8]
 8001014:	2301      	movs	r3, #1
 8001016:	9301      	str	r3, [sp, #4]
 8001018:	1dbb      	adds	r3, r7, #6
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2301      	movs	r3, #1
 800101e:	226b      	movs	r2, #107	@ 0x6b
 8001020:	21d0      	movs	r1, #208	@ 0xd0
 8001022:	481a      	ldr	r0, [pc, #104]	@ (800108c <MPU6050_Init+0xa8>)
 8001024:	f001 fb06 	bl	8002634 <HAL_I2C_Mem_Write>
// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8001028:	2307      	movs	r3, #7
 800102a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x19, 1, &Data, 1, 1000);
 800102c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001030:	9302      	str	r3, [sp, #8]
 8001032:	2301      	movs	r3, #1
 8001034:	9301      	str	r3, [sp, #4]
 8001036:	1dbb      	adds	r3, r7, #6
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	2301      	movs	r3, #1
 800103c:	2219      	movs	r2, #25
 800103e:	21d0      	movs	r1, #208	@ 0xd0
 8001040:	4812      	ldr	r0, [pc, #72]	@ (800108c <MPU6050_Init+0xa8>)
 8001042:	f001 faf7 	bl	8002634 <HAL_I2C_Mem_Write>
// Set Gyroscopic configuration in GYRO_CONFIG Register
		Data = 0x00; // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 ̐/s
 8001046:	2300      	movs	r3, #0
 8001048:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x1B, 1, &Data, 1, 1000);
 800104a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800104e:	9302      	str	r3, [sp, #8]
 8001050:	2301      	movs	r3, #1
 8001052:	9301      	str	r3, [sp, #4]
 8001054:	1dbb      	adds	r3, r7, #6
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	221b      	movs	r2, #27
 800105c:	21d0      	movs	r1, #208	@ 0xd0
 800105e:	480b      	ldr	r0, [pc, #44]	@ (800108c <MPU6050_Init+0xa8>)
 8001060:	f001 fae8 	bl	8002634 <HAL_I2C_Mem_Write>
// Set accelerometer configuration in ACCEL_CONFIG Register
		Data = 0x00; // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
 8001064:	2300      	movs	r3, #0
 8001066:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x1C, 1, &Data, 1, 1000);
 8001068:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800106c:	9302      	str	r3, [sp, #8]
 800106e:	2301      	movs	r3, #1
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	1dbb      	adds	r3, r7, #6
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2301      	movs	r3, #1
 8001078:	221c      	movs	r2, #28
 800107a:	21d0      	movs	r1, #208	@ 0xd0
 800107c:	4803      	ldr	r0, [pc, #12]	@ (800108c <MPU6050_Init+0xa8>)
 800107e:	f001 fad9 	bl	8002634 <HAL_I2C_Mem_Write>
	}
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2000022c 	.word	0x2000022c

08001090 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(void) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[12];
// Read 6 BYTES of data starting from ACCEL_XOUT_H (0x3B) register
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x3B, 1, Rec_Data, 12, 1000);
 8001096:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800109a:	9302      	str	r3, [sp, #8]
 800109c:	230c      	movs	r3, #12
 800109e:	9301      	str	r3, [sp, #4]
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2301      	movs	r3, #1
 80010a6:	223b      	movs	r2, #59	@ 0x3b
 80010a8:	21d0      	movs	r1, #208	@ 0xd0
 80010aa:	4848      	ldr	r0, [pc, #288]	@ (80011cc <MPU6050_Read_Accel+0x13c>)
 80010ac:	f001 fbbc 	bl	8002828 <HAL_I2C_Mem_Read>
	Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 80010b0:	793b      	ldrb	r3, [r7, #4]
 80010b2:	021b      	lsls	r3, r3, #8
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	797b      	ldrb	r3, [r7, #5]
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b21a      	sxth	r2, r3
 80010be:	4b44      	ldr	r3, [pc, #272]	@ (80011d0 <MPU6050_Read_Accel+0x140>)
 80010c0:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80010c2:	79bb      	ldrb	r3, [r7, #6]
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	4313      	orrs	r3, r2
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	4b40      	ldr	r3, [pc, #256]	@ (80011d4 <MPU6050_Read_Accel+0x144>)
 80010d2:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 80010d4:	7a3b      	ldrb	r3, [r7, #8]
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	b21a      	sxth	r2, r3
 80010da:	7a7b      	ldrb	r3, [r7, #9]
 80010dc:	b21b      	sxth	r3, r3
 80010de:	4313      	orrs	r3, r2
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	4b3d      	ldr	r3, [pc, #244]	@ (80011d8 <MPU6050_Read_Accel+0x148>)
 80010e4:	801a      	strh	r2, [r3, #0]
	Gyro_X_RAW = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 80010e6:	7abb      	ldrb	r3, [r7, #10]
 80010e8:	021b      	lsls	r3, r3, #8
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	b21b      	sxth	r3, r3
 80010f0:	4313      	orrs	r3, r2
 80010f2:	b21a      	sxth	r2, r3
 80010f4:	4b39      	ldr	r3, [pc, #228]	@ (80011dc <MPU6050_Read_Accel+0x14c>)
 80010f6:	801a      	strh	r2, [r3, #0]
	Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 80010f8:	7b3b      	ldrb	r3, [r7, #12]
 80010fa:	021b      	lsls	r3, r3, #8
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	7b7b      	ldrb	r3, [r7, #13]
 8001100:	b21b      	sxth	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	b21a      	sxth	r2, r3
 8001106:	4b35      	ldr	r3, [pc, #212]	@ (80011dc <MPU6050_Read_Accel+0x14c>)
 8001108:	801a      	strh	r2, [r3, #0]
	Gyro_X_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 800110a:	7bbb      	ldrb	r3, [r7, #14]
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	b21a      	sxth	r2, r3
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	b21b      	sxth	r3, r3
 8001114:	4313      	orrs	r3, r2
 8001116:	b21a      	sxth	r2, r3
 8001118:	4b30      	ldr	r3, [pc, #192]	@ (80011dc <MPU6050_Read_Accel+0x14c>)
 800111a:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	 we have to divide according to the Full scale value set in FS_SEL
	 I have configured FS_SEL = 0. So I am dividing by 16384.0
	 for more details check ACCEL_CONFIG Register ****/
	Ax = (float) Accel_X_RAW / 16384.0;
 800111c:	4b2c      	ldr	r3, [pc, #176]	@ (80011d0 <MPU6050_Read_Accel+0x140>)
 800111e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001122:	ee07 3a90 	vmov	s15, r3
 8001126:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800112a:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 80011e0 <MPU6050_Read_Accel+0x150>
 800112e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001132:	4b2c      	ldr	r3, [pc, #176]	@ (80011e4 <MPU6050_Read_Accel+0x154>)
 8001134:	edc3 7a00 	vstr	s15, [r3]
	Ay = (float) Accel_Y_RAW / 16384.0;
 8001138:	4b26      	ldr	r3, [pc, #152]	@ (80011d4 <MPU6050_Read_Accel+0x144>)
 800113a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113e:	ee07 3a90 	vmov	s15, r3
 8001142:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001146:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80011e0 <MPU6050_Read_Accel+0x150>
 800114a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800114e:	4b26      	ldr	r3, [pc, #152]	@ (80011e8 <MPU6050_Read_Accel+0x158>)
 8001150:	edc3 7a00 	vstr	s15, [r3]
	Az = (float) Accel_Z_RAW / 16384.0;
 8001154:	4b20      	ldr	r3, [pc, #128]	@ (80011d8 <MPU6050_Read_Accel+0x148>)
 8001156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115a:	ee07 3a90 	vmov	s15, r3
 800115e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001162:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80011e0 <MPU6050_Read_Accel+0x150>
 8001166:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800116a:	4b20      	ldr	r3, [pc, #128]	@ (80011ec <MPU6050_Read_Accel+0x15c>)
 800116c:	edc3 7a00 	vstr	s15, [r3]
	gx = (float) Gyro_X_RAW / 131.0;
 8001170:	4b1a      	ldr	r3, [pc, #104]	@ (80011dc <MPU6050_Read_Accel+0x14c>)
 8001172:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001176:	ee07 3a90 	vmov	s15, r3
 800117a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800117e:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 80011f0 <MPU6050_Read_Accel+0x160>
 8001182:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001186:	4b1b      	ldr	r3, [pc, #108]	@ (80011f4 <MPU6050_Read_Accel+0x164>)
 8001188:	edc3 7a00 	vstr	s15, [r3]
	gy = (float) Gyro_Y_RAW / 131.0;
 800118c:	4b1a      	ldr	r3, [pc, #104]	@ (80011f8 <MPU6050_Read_Accel+0x168>)
 800118e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001192:	ee07 3a90 	vmov	s15, r3
 8001196:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800119a:	eddf 6a15 	vldr	s13, [pc, #84]	@ 80011f0 <MPU6050_Read_Accel+0x160>
 800119e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011a2:	4b16      	ldr	r3, [pc, #88]	@ (80011fc <MPU6050_Read_Accel+0x16c>)
 80011a4:	edc3 7a00 	vstr	s15, [r3]
	gz = (float) Gyro_Z_RAW / 131.0;
 80011a8:	4b15      	ldr	r3, [pc, #84]	@ (8001200 <MPU6050_Read_Accel+0x170>)
 80011aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ae:	ee07 3a90 	vmov	s15, r3
 80011b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011b6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80011f0 <MPU6050_Read_Accel+0x160>
 80011ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011be:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <MPU6050_Read_Accel+0x174>)
 80011c0:	edc3 7a00 	vstr	s15, [r3]
}
 80011c4:	bf00      	nop
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	2000022c 	.word	0x2000022c
 80011d0:	200001f0 	.word	0x200001f0
 80011d4:	200001f2 	.word	0x200001f2
 80011d8:	200001f4 	.word	0x200001f4
 80011dc:	200001f6 	.word	0x200001f6
 80011e0:	46800000 	.word	0x46800000
 80011e4:	200001fc 	.word	0x200001fc
 80011e8:	20000200 	.word	0x20000200
 80011ec:	20000204 	.word	0x20000204
 80011f0:	43030000 	.word	0x43030000
 80011f4:	20000208 	.word	0x20000208
 80011f8:	200001f8 	.word	0x200001f8
 80011fc:	2000020c 	.word	0x2000020c
 8001200:	200001fa 	.word	0x200001fa
 8001204:	20000210 	.word	0x20000210

08001208 <BMP280_Init>:

void BMP280_Init(void) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b08c      	sub	sp, #48	@ 0x30
 800120c:	af04      	add	r7, sp, #16

	uint8_t Data;
	HAL_Delay(5);				//aguarda o start-up time (mínimo de 2ms)
 800120e:	2005      	movs	r0, #5
 8001210:	f000 fe0e 	bl	8001e30 <HAL_Delay>

	//Reseta o sensor e aguarda o start-up time novamente (mínimo de 2ms)
	Data = 0xB6;
 8001214:	23b6      	movs	r3, #182	@ 0xb6
 8001216:	77fb      	strb	r3, [r7, #31]
	HAL_I2C_Mem_Write(&hi2c1, BMP280_ADDR, RESET, 1, &Data, 1, 1000);
 8001218:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800121c:	9302      	str	r3, [sp, #8]
 800121e:	2301      	movs	r3, #1
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	f107 031f 	add.w	r3, r7, #31
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2301      	movs	r3, #1
 800122a:	22e0      	movs	r2, #224	@ 0xe0
 800122c:	21ec      	movs	r1, #236	@ 0xec
 800122e:	4852      	ldr	r0, [pc, #328]	@ (8001378 <BMP280_Init+0x170>)
 8001230:	f001 fa00 	bl	8002634 <HAL_I2C_Mem_Write>
	HAL_Delay(5);				//aguarda 5 ms
 8001234:	2005      	movs	r0, #5
 8001236:	f000 fdfb 	bl	8001e30 <HAL_Delay>

	//Coletando os parâmetros de calibração
	uint8_t param[24];
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, CALIB_REGS, 1, param, 24, 1000);
 800123a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800123e:	9302      	str	r3, [sp, #8]
 8001240:	2318      	movs	r3, #24
 8001242:	9301      	str	r3, [sp, #4]
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2301      	movs	r3, #1
 800124a:	2288      	movs	r2, #136	@ 0x88
 800124c:	21d0      	movs	r1, #208	@ 0xd0
 800124e:	484a      	ldr	r0, [pc, #296]	@ (8001378 <BMP280_Init+0x170>)
 8001250:	f001 faea 	bl	8002828 <HAL_I2C_Mem_Read>

	//Extraindo os dados de calibração da temperatura
	BMP280_dig_T1 = (param[0] << 8) | param[1];
 8001254:	793b      	ldrb	r3, [r7, #4]
 8001256:	021b      	lsls	r3, r3, #8
 8001258:	b21a      	sxth	r2, r3
 800125a:	797b      	ldrb	r3, [r7, #5]
 800125c:	b21b      	sxth	r3, r3
 800125e:	4313      	orrs	r3, r2
 8001260:	b21b      	sxth	r3, r3
 8001262:	b29a      	uxth	r2, r3
 8001264:	4b45      	ldr	r3, [pc, #276]	@ (800137c <BMP280_Init+0x174>)
 8001266:	801a      	strh	r2, [r3, #0]
	BMP280_dig_T2 = (param[2] << 8) | param[3];
 8001268:	79bb      	ldrb	r3, [r7, #6]
 800126a:	021b      	lsls	r3, r3, #8
 800126c:	b21a      	sxth	r2, r3
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	b21b      	sxth	r3, r3
 8001272:	4313      	orrs	r3, r2
 8001274:	b21a      	sxth	r2, r3
 8001276:	4b42      	ldr	r3, [pc, #264]	@ (8001380 <BMP280_Init+0x178>)
 8001278:	801a      	strh	r2, [r3, #0]
	BMP280_dig_T3 = (param[4] << 8) | param[5];
 800127a:	7a3b      	ldrb	r3, [r7, #8]
 800127c:	021b      	lsls	r3, r3, #8
 800127e:	b21a      	sxth	r2, r3
 8001280:	7a7b      	ldrb	r3, [r7, #9]
 8001282:	b21b      	sxth	r3, r3
 8001284:	4313      	orrs	r3, r2
 8001286:	b21a      	sxth	r2, r3
 8001288:	4b3e      	ldr	r3, [pc, #248]	@ (8001384 <BMP280_Init+0x17c>)
 800128a:	801a      	strh	r2, [r3, #0]

	//Extraindo os dados de calibração da pressão
	BMP280_dig_P1 = (param[6] << 8) | param[7];
 800128c:	7abb      	ldrb	r3, [r7, #10]
 800128e:	021b      	lsls	r3, r3, #8
 8001290:	b21a      	sxth	r2, r3
 8001292:	7afb      	ldrb	r3, [r7, #11]
 8001294:	b21b      	sxth	r3, r3
 8001296:	4313      	orrs	r3, r2
 8001298:	b21b      	sxth	r3, r3
 800129a:	b29a      	uxth	r2, r3
 800129c:	4b3a      	ldr	r3, [pc, #232]	@ (8001388 <BMP280_Init+0x180>)
 800129e:	801a      	strh	r2, [r3, #0]
	BMP280_dig_P2 = (param[8] << 8) | param[9];
 80012a0:	7b3b      	ldrb	r3, [r7, #12]
 80012a2:	021b      	lsls	r3, r3, #8
 80012a4:	b21a      	sxth	r2, r3
 80012a6:	7b7b      	ldrb	r3, [r7, #13]
 80012a8:	b21b      	sxth	r3, r3
 80012aa:	4313      	orrs	r3, r2
 80012ac:	b21a      	sxth	r2, r3
 80012ae:	4b37      	ldr	r3, [pc, #220]	@ (800138c <BMP280_Init+0x184>)
 80012b0:	801a      	strh	r2, [r3, #0]
	BMP280_dig_P3 = (param[10] << 8) | param[11];
 80012b2:	7bbb      	ldrb	r3, [r7, #14]
 80012b4:	021b      	lsls	r3, r3, #8
 80012b6:	b21a      	sxth	r2, r3
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	b21b      	sxth	r3, r3
 80012bc:	4313      	orrs	r3, r2
 80012be:	b21a      	sxth	r2, r3
 80012c0:	4b33      	ldr	r3, [pc, #204]	@ (8001390 <BMP280_Init+0x188>)
 80012c2:	801a      	strh	r2, [r3, #0]
	BMP280_dig_P4 = (param[12] << 8) | param[13];
 80012c4:	7c3b      	ldrb	r3, [r7, #16]
 80012c6:	021b      	lsls	r3, r3, #8
 80012c8:	b21a      	sxth	r2, r3
 80012ca:	7c7b      	ldrb	r3, [r7, #17]
 80012cc:	b21b      	sxth	r3, r3
 80012ce:	4313      	orrs	r3, r2
 80012d0:	b21a      	sxth	r2, r3
 80012d2:	4b30      	ldr	r3, [pc, #192]	@ (8001394 <BMP280_Init+0x18c>)
 80012d4:	801a      	strh	r2, [r3, #0]
	BMP280_dig_P5 = (param[14] << 8) | param[15];
 80012d6:	7cbb      	ldrb	r3, [r7, #18]
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	b21a      	sxth	r2, r3
 80012dc:	7cfb      	ldrb	r3, [r7, #19]
 80012de:	b21b      	sxth	r3, r3
 80012e0:	4313      	orrs	r3, r2
 80012e2:	b21a      	sxth	r2, r3
 80012e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001398 <BMP280_Init+0x190>)
 80012e6:	801a      	strh	r2, [r3, #0]
	BMP280_dig_P6 = (param[16] << 8) | param[17];
 80012e8:	7d3b      	ldrb	r3, [r7, #20]
 80012ea:	021b      	lsls	r3, r3, #8
 80012ec:	b21a      	sxth	r2, r3
 80012ee:	7d7b      	ldrb	r3, [r7, #21]
 80012f0:	b21b      	sxth	r3, r3
 80012f2:	4313      	orrs	r3, r2
 80012f4:	b21a      	sxth	r2, r3
 80012f6:	4b29      	ldr	r3, [pc, #164]	@ (800139c <BMP280_Init+0x194>)
 80012f8:	801a      	strh	r2, [r3, #0]
	BMP280_dig_P7 = (param[18] << 8) | param[19];
 80012fa:	7dbb      	ldrb	r3, [r7, #22]
 80012fc:	021b      	lsls	r3, r3, #8
 80012fe:	b21a      	sxth	r2, r3
 8001300:	7dfb      	ldrb	r3, [r7, #23]
 8001302:	b21b      	sxth	r3, r3
 8001304:	4313      	orrs	r3, r2
 8001306:	b21a      	sxth	r2, r3
 8001308:	4b25      	ldr	r3, [pc, #148]	@ (80013a0 <BMP280_Init+0x198>)
 800130a:	801a      	strh	r2, [r3, #0]
	BMP280_dig_P8 = (param[20] << 8) | param[21];
 800130c:	7e3b      	ldrb	r3, [r7, #24]
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	b21a      	sxth	r2, r3
 8001312:	7e7b      	ldrb	r3, [r7, #25]
 8001314:	b21b      	sxth	r3, r3
 8001316:	4313      	orrs	r3, r2
 8001318:	b21a      	sxth	r2, r3
 800131a:	4b22      	ldr	r3, [pc, #136]	@ (80013a4 <BMP280_Init+0x19c>)
 800131c:	801a      	strh	r2, [r3, #0]
	BMP280_dig_P9 = (param[22] << 8) | param[23];
 800131e:	7ebb      	ldrb	r3, [r7, #26]
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	b21a      	sxth	r2, r3
 8001324:	7efb      	ldrb	r3, [r7, #27]
 8001326:	b21b      	sxth	r3, r3
 8001328:	4313      	orrs	r3, r2
 800132a:	b21a      	sxth	r2, r3
 800132c:	4b1e      	ldr	r3, [pc, #120]	@ (80013a8 <BMP280_Init+0x1a0>)
 800132e:	801a      	strh	r2, [r3, #0]

	Data = 0x1C;
 8001330:	231c      	movs	r3, #28
 8001332:	77fb      	strb	r3, [r7, #31]
	HAL_I2C_Mem_Write(&hi2c1, BMP280_ADDR, CONFIG, 1, &Data, 1, 1000);
 8001334:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001338:	9302      	str	r3, [sp, #8]
 800133a:	2301      	movs	r3, #1
 800133c:	9301      	str	r3, [sp, #4]
 800133e:	f107 031f 	add.w	r3, r7, #31
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2301      	movs	r3, #1
 8001346:	22f5      	movs	r2, #245	@ 0xf5
 8001348:	21ec      	movs	r1, #236	@ 0xec
 800134a:	480b      	ldr	r0, [pc, #44]	@ (8001378 <BMP280_Init+0x170>)
 800134c:	f001 f972 	bl	8002634 <HAL_I2C_Mem_Write>

	//Sensor output in sleep mode(Standard Mode activity)
	//20 bits de resolução, oversampling x16 na pressão, resolução de 0.16 Pa
	//20 bits de resolução, oversampling x16 na temperatura, resolução de 0.0003 °C

	Data = 0xFF;
 8001350:	23ff      	movs	r3, #255	@ 0xff
 8001352:	77fb      	strb	r3, [r7, #31]
	HAL_I2C_Mem_Write(&hi2c1, BMP280_ADDR, CTRL_MEAS, 1, &Data, 1, 1000);
 8001354:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001358:	9302      	str	r3, [sp, #8]
 800135a:	2301      	movs	r3, #1
 800135c:	9301      	str	r3, [sp, #4]
 800135e:	f107 031f 	add.w	r3, r7, #31
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2301      	movs	r3, #1
 8001366:	22f4      	movs	r2, #244	@ 0xf4
 8001368:	21ec      	movs	r1, #236	@ 0xec
 800136a:	4803      	ldr	r0, [pc, #12]	@ (8001378 <BMP280_Init+0x170>)
 800136c:	f001 f962 	bl	8002634 <HAL_I2C_Mem_Write>
}
 8001370:	bf00      	nop
 8001372:	3720      	adds	r7, #32
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	2000022c 	.word	0x2000022c
 800137c:	20000214 	.word	0x20000214
 8001380:	20000216 	.word	0x20000216
 8001384:	20000218 	.word	0x20000218
 8001388:	2000021a 	.word	0x2000021a
 800138c:	2000021c 	.word	0x2000021c
 8001390:	2000021e 	.word	0x2000021e
 8001394:	20000220 	.word	0x20000220
 8001398:	20000222 	.word	0x20000222
 800139c:	20000224 	.word	0x20000224
 80013a0:	20000226 	.word	0x20000226
 80013a4:	20000228 	.word	0x20000228
 80013a8:	2000022a 	.word	0x2000022a

080013ac <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80013b2:	f000 fccb 	bl	8001d4c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80013b6:	f000 f9a7 	bl	8001708 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80013ba:	f000 fa5b 	bl	8001874 <MX_GPIO_Init>
	MX_I2C1_Init();
 80013be:	f000 fa01 	bl	80017c4 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 80013c2:	f000 fa2d 	bl	8001820 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	ssd1306_Init();
 80013c6:	f002 ff6b 	bl	80042a0 <ssd1306_Init>
	MPU6050_Init();
 80013ca:	f7ff fe0b 	bl	8000fe4 <MPU6050_Init>
	BMP280_Init();
 80013ce:	f7ff ff1b 	bl	8001208 <BMP280_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		if (!current_screen) {
 80013d2:	4bb6      	ldr	r3, [pc, #728]	@ (80016ac <main+0x300>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f040 8084 	bne.w	80014e4 <main+0x138>

			ssd1306_Fill(0);
 80013dc:	2000      	movs	r0, #0
 80013de:	f002 ffc9 	bl	8004374 <ssd1306_Fill>
			ssd1306_DrawBitmap(4, 2, bitmap_icon_dashboard, 16, 16, 1);
 80013e2:	2301      	movs	r3, #1
 80013e4:	9301      	str	r3, [sp, #4]
 80013e6:	2310      	movs	r3, #16
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	2310      	movs	r3, #16
 80013ec:	4ab0      	ldr	r2, [pc, #704]	@ (80016b0 <main+0x304>)
 80013ee:	2102      	movs	r1, #2
 80013f0:	2004      	movs	r0, #4
 80013f2:	f003 f921 	bl	8004638 <ssd1306_DrawBitmap>
			ssd1306_SetCursor(25, 5);
 80013f6:	2105      	movs	r1, #5
 80013f8:	2019      	movs	r0, #25
 80013fa:	f003 f905 	bl	8004608 <ssd1306_SetCursor>
			ssd1306_WriteString("Accelerometer", Font_7x10, 1);
 80013fe:	4bad      	ldr	r3, [pc, #692]	@ (80016b4 <main+0x308>)
 8001400:	2201      	movs	r2, #1
 8001402:	9200      	str	r2, [sp, #0]
 8001404:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001406:	48ac      	ldr	r0, [pc, #688]	@ (80016b8 <main+0x30c>)
 8001408:	f003 f8d8 	bl	80045bc <ssd1306_WriteString>
			ssd1306_DrawBitmap(4, 24, bitmap_icon_parksensor, 16, 16, 1);
 800140c:	2301      	movs	r3, #1
 800140e:	9301      	str	r3, [sp, #4]
 8001410:	2310      	movs	r3, #16
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	2310      	movs	r3, #16
 8001416:	4aa9      	ldr	r2, [pc, #676]	@ (80016bc <main+0x310>)
 8001418:	2118      	movs	r1, #24
 800141a:	2004      	movs	r0, #4
 800141c:	f003 f90c 	bl	8004638 <ssd1306_DrawBitmap>
			ssd1306_SetCursor(25, 5 + 20 + 2);
 8001420:	211b      	movs	r1, #27
 8001422:	2019      	movs	r0, #25
 8001424:	f003 f8f0 	bl	8004608 <ssd1306_SetCursor>
			ssd1306_WriteString("Gyroscope", Font_7x10, 1);
 8001428:	4ba2      	ldr	r3, [pc, #648]	@ (80016b4 <main+0x308>)
 800142a:	2201      	movs	r2, #1
 800142c:	9200      	str	r2, [sp, #0]
 800142e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001430:	48a3      	ldr	r0, [pc, #652]	@ (80016c0 <main+0x314>)
 8001432:	f003 f8c3 	bl	80045bc <ssd1306_WriteString>

			if (!cursor) {
 8001436:	4ba3      	ldr	r3, [pc, #652]	@ (80016c4 <main+0x318>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d114      	bne.n	8001468 <main+0xbc>
				ssd1306_DrawBitmap(0, 22, bitmap_item_sel_outline, 128, 21, 0);
 800143e:	2300      	movs	r3, #0
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	2315      	movs	r3, #21
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2380      	movs	r3, #128	@ 0x80
 8001448:	4a9f      	ldr	r2, [pc, #636]	@ (80016c8 <main+0x31c>)
 800144a:	2116      	movs	r1, #22
 800144c:	2000      	movs	r0, #0
 800144e:	f003 f8f3 	bl	8004638 <ssd1306_DrawBitmap>
				ssd1306_DrawBitmap(0, 1, bitmap_item_sel_outline, 128, 21, 1);
 8001452:	2301      	movs	r3, #1
 8001454:	9301      	str	r3, [sp, #4]
 8001456:	2315      	movs	r3, #21
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	2380      	movs	r3, #128	@ 0x80
 800145c:	4a9a      	ldr	r2, [pc, #616]	@ (80016c8 <main+0x31c>)
 800145e:	2101      	movs	r1, #1
 8001460:	2000      	movs	r0, #0
 8001462:	f003 f8e9 	bl	8004638 <ssd1306_DrawBitmap>
 8001466:	e013      	b.n	8001490 <main+0xe4>
			} else {
				ssd1306_DrawBitmap(0, 22, bitmap_item_sel_outline, 128, 21, 1);
 8001468:	2301      	movs	r3, #1
 800146a:	9301      	str	r3, [sp, #4]
 800146c:	2315      	movs	r3, #21
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	2380      	movs	r3, #128	@ 0x80
 8001472:	4a95      	ldr	r2, [pc, #596]	@ (80016c8 <main+0x31c>)
 8001474:	2116      	movs	r1, #22
 8001476:	2000      	movs	r0, #0
 8001478:	f003 f8de 	bl	8004638 <ssd1306_DrawBitmap>
				ssd1306_DrawBitmap(0, 1, bitmap_item_sel_outline, 128, 21, 0);
 800147c:	2300      	movs	r3, #0
 800147e:	9301      	str	r3, [sp, #4]
 8001480:	2315      	movs	r3, #21
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	2380      	movs	r3, #128	@ 0x80
 8001486:	4a90      	ldr	r2, [pc, #576]	@ (80016c8 <main+0x31c>)
 8001488:	2101      	movs	r1, #1
 800148a:	2000      	movs	r0, #0
 800148c:	f003 f8d4 	bl	8004638 <ssd1306_DrawBitmap>
			}

			if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9)) {
 8001490:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001494:	488d      	ldr	r0, [pc, #564]	@ (80016cc <main+0x320>)
 8001496:	f000 ff71 	bl	800237c <HAL_GPIO_ReadPin>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00c      	beq.n	80014ba <main+0x10e>
				cursor = !cursor;
 80014a0:	4b88      	ldr	r3, [pc, #544]	@ (80016c4 <main+0x318>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	bf0c      	ite	eq
 80014a8:	2301      	moveq	r3, #1
 80014aa:	2300      	movne	r3, #0
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b84      	ldr	r3, [pc, #528]	@ (80016c4 <main+0x318>)
 80014b2:	601a      	str	r2, [r3, #0]
				HAL_Delay(50);
 80014b4:	2032      	movs	r0, #50	@ 0x32
 80014b6:	f000 fcbb 	bl	8001e30 <HAL_Delay>
			}

			if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10)) {
 80014ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014be:	4883      	ldr	r0, [pc, #524]	@ (80016cc <main+0x320>)
 80014c0:	f000 ff5c 	bl	800237c <HAL_GPIO_ReadPin>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00c      	beq.n	80014e4 <main+0x138>
				current_screen = !current_screen;
 80014ca:	4b78      	ldr	r3, [pc, #480]	@ (80016ac <main+0x300>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	bf0c      	ite	eq
 80014d2:	2301      	moveq	r3, #1
 80014d4:	2300      	movne	r3, #0
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	461a      	mov	r2, r3
 80014da:	4b74      	ldr	r3, [pc, #464]	@ (80016ac <main+0x300>)
 80014dc:	601a      	str	r2, [r3, #0]
				HAL_Delay(200);
 80014de:	20c8      	movs	r0, #200	@ 0xc8
 80014e0:	f000 fca6 	bl	8001e30 <HAL_Delay>
			}
		}

		if (current_screen) {
 80014e4:	4b71      	ldr	r3, [pc, #452]	@ (80016ac <main+0x300>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 80db 	beq.w	80016a4 <main+0x2f8>

			ssd1306_Fill(0);
 80014ee:	2000      	movs	r0, #0
 80014f0:	f002 ff40 	bl	8004374 <ssd1306_Fill>

			if (cursor) {
 80014f4:	4b73      	ldr	r3, [pc, #460]	@ (80016c4 <main+0x318>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d062      	beq.n	80015c2 <main+0x216>
				MPU6050_Read_Accel();
 80014fc:	f7ff fdc8 	bl	8001090 <MPU6050_Read_Accel>
				char buffer_floats[7];
				ssd1306_Fill(0); //Seta todos os pixels do buffer para branco
 8001500:	2000      	movs	r0, #0
 8001502:	f002 ff37 	bl	8004374 <ssd1306_Fill>
				ssd1306_SetCursor(5, 16); //Posiciona o "cursor" no pixel correspondente
 8001506:	2110      	movs	r1, #16
 8001508:	2005      	movs	r0, #5
 800150a:	f003 f87d 	bl	8004608 <ssd1306_SetCursor>
				ssd1306_WriteString("Gyro x: ", Font_6x8, 1); //Escreve o texto no buffer
 800150e:	4b70      	ldr	r3, [pc, #448]	@ (80016d0 <main+0x324>)
 8001510:	2201      	movs	r2, #1
 8001512:	9200      	str	r2, [sp, #0]
 8001514:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001516:	486f      	ldr	r0, [pc, #444]	@ (80016d4 <main+0x328>)
 8001518:	f003 f850 	bl	80045bc <ssd1306_WriteString>
				sprintf(buffer_floats, "%.1f", gx);
 800151c:	4b6e      	ldr	r3, [pc, #440]	@ (80016d8 <main+0x32c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff f811 	bl	8000548 <__aeabi_f2d>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	f107 0008 	add.w	r0, r7, #8
 800152e:	496b      	ldr	r1, [pc, #428]	@ (80016dc <main+0x330>)
 8001530:	f004 f83c 	bl	80055ac <siprintf>
				ssd1306_WriteString(buffer_floats, Font_6x8, 1); //Escreve o texto no buffer
 8001534:	4b66      	ldr	r3, [pc, #408]	@ (80016d0 <main+0x324>)
 8001536:	f107 0008 	add.w	r0, r7, #8
 800153a:	2201      	movs	r2, #1
 800153c:	9200      	str	r2, [sp, #0]
 800153e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001540:	f003 f83c 	bl	80045bc <ssd1306_WriteString>
				ssd1306_SetCursor(5, 30); //Posiciona o "cursor" no pixel correspondente
 8001544:	211e      	movs	r1, #30
 8001546:	2005      	movs	r0, #5
 8001548:	f003 f85e 	bl	8004608 <ssd1306_SetCursor>
				ssd1306_WriteString("Gyro y: ", Font_6x8, 1); //Escreve o texto no buffer
 800154c:	4b60      	ldr	r3, [pc, #384]	@ (80016d0 <main+0x324>)
 800154e:	2201      	movs	r2, #1
 8001550:	9200      	str	r2, [sp, #0]
 8001552:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001554:	4862      	ldr	r0, [pc, #392]	@ (80016e0 <main+0x334>)
 8001556:	f003 f831 	bl	80045bc <ssd1306_WriteString>
				sprintf(buffer_floats, "%.1f", gy);
 800155a:	4b62      	ldr	r3, [pc, #392]	@ (80016e4 <main+0x338>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f7fe fff2 	bl	8000548 <__aeabi_f2d>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	f107 0008 	add.w	r0, r7, #8
 800156c:	495b      	ldr	r1, [pc, #364]	@ (80016dc <main+0x330>)
 800156e:	f004 f81d 	bl	80055ac <siprintf>
				ssd1306_WriteString(buffer_floats, Font_6x8, 1); //Escreve o texto no buffer
 8001572:	4b57      	ldr	r3, [pc, #348]	@ (80016d0 <main+0x324>)
 8001574:	f107 0008 	add.w	r0, r7, #8
 8001578:	2201      	movs	r2, #1
 800157a:	9200      	str	r2, [sp, #0]
 800157c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800157e:	f003 f81d 	bl	80045bc <ssd1306_WriteString>
				ssd1306_SetCursor(5, 44); //Posiciona o "cursor" no pixel correspondente
 8001582:	212c      	movs	r1, #44	@ 0x2c
 8001584:	2005      	movs	r0, #5
 8001586:	f003 f83f 	bl	8004608 <ssd1306_SetCursor>
				ssd1306_WriteString("Gyro z: ", Font_6x8, 1); //Escreve o texto no buffer
 800158a:	4b51      	ldr	r3, [pc, #324]	@ (80016d0 <main+0x324>)
 800158c:	2201      	movs	r2, #1
 800158e:	9200      	str	r2, [sp, #0]
 8001590:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001592:	4855      	ldr	r0, [pc, #340]	@ (80016e8 <main+0x33c>)
 8001594:	f003 f812 	bl	80045bc <ssd1306_WriteString>
				sprintf(buffer_floats, "%.1f", gz);
 8001598:	4b54      	ldr	r3, [pc, #336]	@ (80016ec <main+0x340>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe ffd3 	bl	8000548 <__aeabi_f2d>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	f107 0008 	add.w	r0, r7, #8
 80015aa:	494c      	ldr	r1, [pc, #304]	@ (80016dc <main+0x330>)
 80015ac:	f003 fffe 	bl	80055ac <siprintf>
				ssd1306_WriteString(buffer_floats, Font_6x8, 1); //Escreve o texto no bufferr
 80015b0:	4b47      	ldr	r3, [pc, #284]	@ (80016d0 <main+0x324>)
 80015b2:	f107 0008 	add.w	r0, r7, #8
 80015b6:	2201      	movs	r2, #1
 80015b8:	9200      	str	r2, [sp, #0]
 80015ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015bc:	f002 fffe 	bl	80045bc <ssd1306_WriteString>
 80015c0:	e05b      	b.n	800167a <main+0x2ce>
			}

			else {
				MPU6050_Read_Accel();
 80015c2:	f7ff fd65 	bl	8001090 <MPU6050_Read_Accel>
				char buffer_float[7];
				ssd1306_Fill(0); //Seta todos os pixels do buffer para branco
 80015c6:	2000      	movs	r0, #0
 80015c8:	f002 fed4 	bl	8004374 <ssd1306_Fill>
				ssd1306_SetCursor(5, 16); //Posiciona o "cursor" no pixel correspondente
 80015cc:	2110      	movs	r1, #16
 80015ce:	2005      	movs	r0, #5
 80015d0:	f003 f81a 	bl	8004608 <ssd1306_SetCursor>
				ssd1306_WriteString("Accel x: ", Font_6x8, 1); //Escreve o texto no buffer
 80015d4:	4b3e      	ldr	r3, [pc, #248]	@ (80016d0 <main+0x324>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	9200      	str	r2, [sp, #0]
 80015da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015dc:	4844      	ldr	r0, [pc, #272]	@ (80016f0 <main+0x344>)
 80015de:	f002 ffed 	bl	80045bc <ssd1306_WriteString>
				sprintf(buffer_float, "%.1f", Ax);
 80015e2:	4b44      	ldr	r3, [pc, #272]	@ (80016f4 <main+0x348>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7fe ffae 	bl	8000548 <__aeabi_f2d>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4638      	mov	r0, r7
 80015f2:	493a      	ldr	r1, [pc, #232]	@ (80016dc <main+0x330>)
 80015f4:	f003 ffda 	bl	80055ac <siprintf>
				ssd1306_WriteString(buffer_float, Font_6x8, 1); //Escreve o texto no buffer
 80015f8:	4b35      	ldr	r3, [pc, #212]	@ (80016d0 <main+0x324>)
 80015fa:	4638      	mov	r0, r7
 80015fc:	2201      	movs	r2, #1
 80015fe:	9200      	str	r2, [sp, #0]
 8001600:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001602:	f002 ffdb 	bl	80045bc <ssd1306_WriteString>
				ssd1306_SetCursor(5, 30); //Posiciona o "cursor" no pixel correspondente
 8001606:	211e      	movs	r1, #30
 8001608:	2005      	movs	r0, #5
 800160a:	f002 fffd 	bl	8004608 <ssd1306_SetCursor>
				ssd1306_WriteString("Accel y: ", Font_6x8, 1); //Escreve o texto no buffer
 800160e:	4b30      	ldr	r3, [pc, #192]	@ (80016d0 <main+0x324>)
 8001610:	2201      	movs	r2, #1
 8001612:	9200      	str	r2, [sp, #0]
 8001614:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001616:	4838      	ldr	r0, [pc, #224]	@ (80016f8 <main+0x34c>)
 8001618:	f002 ffd0 	bl	80045bc <ssd1306_WriteString>
				sprintf(buffer_float, "%.1f", Ay);
 800161c:	4b37      	ldr	r3, [pc, #220]	@ (80016fc <main+0x350>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f7fe ff91 	bl	8000548 <__aeabi_f2d>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	4638      	mov	r0, r7
 800162c:	492b      	ldr	r1, [pc, #172]	@ (80016dc <main+0x330>)
 800162e:	f003 ffbd 	bl	80055ac <siprintf>
				ssd1306_WriteString(buffer_float, Font_6x8, 1); //Escreve o texto no buffer
 8001632:	4b27      	ldr	r3, [pc, #156]	@ (80016d0 <main+0x324>)
 8001634:	4638      	mov	r0, r7
 8001636:	2201      	movs	r2, #1
 8001638:	9200      	str	r2, [sp, #0]
 800163a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800163c:	f002 ffbe 	bl	80045bc <ssd1306_WriteString>
				ssd1306_SetCursor(5, 44); //Posiciona o "cursor" no pixel correspondente
 8001640:	212c      	movs	r1, #44	@ 0x2c
 8001642:	2005      	movs	r0, #5
 8001644:	f002 ffe0 	bl	8004608 <ssd1306_SetCursor>
				ssd1306_WriteString("Accel z: ", Font_6x8, 1); //Escreve o texto no buffer
 8001648:	4b21      	ldr	r3, [pc, #132]	@ (80016d0 <main+0x324>)
 800164a:	2201      	movs	r2, #1
 800164c:	9200      	str	r2, [sp, #0]
 800164e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001650:	482b      	ldr	r0, [pc, #172]	@ (8001700 <main+0x354>)
 8001652:	f002 ffb3 	bl	80045bc <ssd1306_WriteString>
				sprintf(buffer_float, "%.1f", Az);
 8001656:	4b2b      	ldr	r3, [pc, #172]	@ (8001704 <main+0x358>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe ff74 	bl	8000548 <__aeabi_f2d>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4638      	mov	r0, r7
 8001666:	491d      	ldr	r1, [pc, #116]	@ (80016dc <main+0x330>)
 8001668:	f003 ffa0 	bl	80055ac <siprintf>
				ssd1306_WriteString(buffer_float, Font_6x8, 1); //Escreve o texto no buffer
 800166c:	4b18      	ldr	r3, [pc, #96]	@ (80016d0 <main+0x324>)
 800166e:	4638      	mov	r0, r7
 8001670:	2201      	movs	r2, #1
 8001672:	9200      	str	r2, [sp, #0]
 8001674:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001676:	f002 ffa1 	bl	80045bc <ssd1306_WriteString>
			}

			if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10)) {
 800167a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800167e:	4813      	ldr	r0, [pc, #76]	@ (80016cc <main+0x320>)
 8001680:	f000 fe7c 	bl	800237c <HAL_GPIO_ReadPin>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d00c      	beq.n	80016a4 <main+0x2f8>
				current_screen = !current_screen;
 800168a:	4b08      	ldr	r3, [pc, #32]	@ (80016ac <main+0x300>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	bf0c      	ite	eq
 8001692:	2301      	moveq	r3, #1
 8001694:	2300      	movne	r3, #0
 8001696:	b2db      	uxtb	r3, r3
 8001698:	461a      	mov	r2, r3
 800169a:	4b04      	ldr	r3, [pc, #16]	@ (80016ac <main+0x300>)
 800169c:	601a      	str	r2, [r3, #0]
				HAL_Delay(200);
 800169e:	20c8      	movs	r0, #200	@ 0xc8
 80016a0:	f000 fbc6 	bl	8001e30 <HAL_Delay>
			}
		}

		ssd1306_UpdateScreen();
 80016a4:	f002 fe7e 	bl	80043a4 <ssd1306_UpdateScreen>
		if (!current_screen) {
 80016a8:	e693      	b.n	80013d2 <main+0x26>
 80016aa:	bf00      	nop
 80016ac:	200002c8 	.word	0x200002c8
 80016b0:	08008ea4 	.word	0x08008ea4
 80016b4:	08009db4 	.word	0x08009db4
 80016b8:	08008e38 	.word	0x08008e38
 80016bc:	08009014 	.word	0x08009014
 80016c0:	08008e48 	.word	0x08008e48
 80016c4:	200002cc 	.word	0x200002cc
 80016c8:	08008ec4 	.word	0x08008ec4
 80016cc:	40021000 	.word	0x40021000
 80016d0:	08009da8 	.word	0x08009da8
 80016d4:	08008e54 	.word	0x08008e54
 80016d8:	20000208 	.word	0x20000208
 80016dc:	08008e60 	.word	0x08008e60
 80016e0:	08008e68 	.word	0x08008e68
 80016e4:	2000020c 	.word	0x2000020c
 80016e8:	08008e74 	.word	0x08008e74
 80016ec:	20000210 	.word	0x20000210
 80016f0:	08008e80 	.word	0x08008e80
 80016f4:	200001fc 	.word	0x200001fc
 80016f8:	08008e8c 	.word	0x08008e8c
 80016fc:	20000200 	.word	0x20000200
 8001700:	08008e98 	.word	0x08008e98
 8001704:	20000204 	.word	0x20000204

08001708 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b094      	sub	sp, #80	@ 0x50
 800170c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800170e:	f107 0320 	add.w	r3, r7, #32
 8001712:	2230      	movs	r2, #48	@ 0x30
 8001714:	2100      	movs	r1, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f003 ffc5 	bl	80056a6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800171c:	f107 030c 	add.w	r3, r7, #12
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800172c:	2300      	movs	r3, #0
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	4b22      	ldr	r3, [pc, #136]	@ (80017bc <SystemClock_Config+0xb4>)
 8001732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001734:	4a21      	ldr	r2, [pc, #132]	@ (80017bc <SystemClock_Config+0xb4>)
 8001736:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800173a:	6413      	str	r3, [r2, #64]	@ 0x40
 800173c:	4b1f      	ldr	r3, [pc, #124]	@ (80017bc <SystemClock_Config+0xb4>)
 800173e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001740:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001748:	2300      	movs	r3, #0
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	4b1c      	ldr	r3, [pc, #112]	@ (80017c0 <SystemClock_Config+0xb8>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a1b      	ldr	r2, [pc, #108]	@ (80017c0 <SystemClock_Config+0xb8>)
 8001752:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	4b19      	ldr	r3, [pc, #100]	@ (80017c0 <SystemClock_Config+0xb8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001764:	2302      	movs	r3, #2
 8001766:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001768:	2301      	movs	r3, #1
 800176a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800176c:	2310      	movs	r3, #16
 800176e:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001770:	2300      	movs	r3, #0
 8001772:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001774:	f107 0320 	add.w	r3, r7, #32
 8001778:	4618      	mov	r0, r3
 800177a:	f001 fe3b 	bl	80033f4 <HAL_RCC_OscConfig>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <SystemClock_Config+0x80>
		Error_Handler();
 8001784:	f000 f8f2 	bl	800196c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001788:	230f      	movs	r3, #15
 800178a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800178c:	2300      	movs	r3, #0
 800178e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001794:	2300      	movs	r3, #0
 8001796:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001798:	2300      	movs	r3, #0
 800179a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	2100      	movs	r1, #0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f002 f89e 	bl	80038e4 <HAL_RCC_ClockConfig>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <SystemClock_Config+0xaa>
		Error_Handler();
 80017ae:	f000 f8dd 	bl	800196c <Error_Handler>
	}
}
 80017b2:	bf00      	nop
 80017b4:	3750      	adds	r7, #80	@ 0x50
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40007000 	.word	0x40007000

080017c4 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80017c8:	4b12      	ldr	r3, [pc, #72]	@ (8001814 <MX_I2C1_Init+0x50>)
 80017ca:	4a13      	ldr	r2, [pc, #76]	@ (8001818 <MX_I2C1_Init+0x54>)
 80017cc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80017ce:	4b11      	ldr	r3, [pc, #68]	@ (8001814 <MX_I2C1_Init+0x50>)
 80017d0:	4a12      	ldr	r2, [pc, #72]	@ (800181c <MX_I2C1_Init+0x58>)
 80017d2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001814 <MX_I2C1_Init+0x50>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80017da:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <MX_I2C1_Init+0x50>)
 80017dc:	2200      	movs	r2, #0
 80017de:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001814 <MX_I2C1_Init+0x50>)
 80017e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017e6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001814 <MX_I2C1_Init+0x50>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80017ee:	4b09      	ldr	r3, [pc, #36]	@ (8001814 <MX_I2C1_Init+0x50>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017f4:	4b07      	ldr	r3, [pc, #28]	@ (8001814 <MX_I2C1_Init+0x50>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017fa:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <MX_I2C1_Init+0x50>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001800:	4804      	ldr	r0, [pc, #16]	@ (8001814 <MX_I2C1_Init+0x50>)
 8001802:	f000 fdd3 	bl	80023ac <HAL_I2C_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_I2C1_Init+0x4c>
		Error_Handler();
 800180c:	f000 f8ae 	bl	800196c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	2000022c 	.word	0x2000022c
 8001818:	40005400 	.word	0x40005400
 800181c:	000186a0 	.word	0x000186a0

08001820 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001824:	4b10      	ldr	r3, [pc, #64]	@ (8001868 <MX_USART1_UART_Init+0x48>)
 8001826:	4a11      	ldr	r2, [pc, #68]	@ (800186c <MX_USART1_UART_Init+0x4c>)
 8001828:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 1000000;
 800182a:	4b0f      	ldr	r3, [pc, #60]	@ (8001868 <MX_USART1_UART_Init+0x48>)
 800182c:	4a10      	ldr	r2, [pc, #64]	@ (8001870 <MX_USART1_UART_Init+0x50>)
 800182e:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001830:	4b0d      	ldr	r3, [pc, #52]	@ (8001868 <MX_USART1_UART_Init+0x48>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001836:	4b0c      	ldr	r3, [pc, #48]	@ (8001868 <MX_USART1_UART_Init+0x48>)
 8001838:	2200      	movs	r2, #0
 800183a:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800183c:	4b0a      	ldr	r3, [pc, #40]	@ (8001868 <MX_USART1_UART_Init+0x48>)
 800183e:	2200      	movs	r2, #0
 8001840:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001842:	4b09      	ldr	r3, [pc, #36]	@ (8001868 <MX_USART1_UART_Init+0x48>)
 8001844:	220c      	movs	r2, #12
 8001846:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001848:	4b07      	ldr	r3, [pc, #28]	@ (8001868 <MX_USART1_UART_Init+0x48>)
 800184a:	2200      	movs	r2, #0
 800184c:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800184e:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <MX_USART1_UART_Init+0x48>)
 8001850:	2200      	movs	r2, #0
 8001852:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001854:	4804      	ldr	r0, [pc, #16]	@ (8001868 <MX_USART1_UART_Init+0x48>)
 8001856:	f002 fa25 	bl	8003ca4 <HAL_UART_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_USART1_UART_Init+0x44>
		Error_Handler();
 8001860:	f000 f884 	bl	800196c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000280 	.word	0x20000280
 800186c:	40011000 	.word	0x40011000
 8001870:	000f4240 	.word	0x000f4240

08001874 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b088      	sub	sp, #32
 8001878:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800187a:	f107 030c 	add.w	r3, r7, #12
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	609a      	str	r2, [r3, #8]
 8001886:	60da      	str	r2, [r3, #12]
 8001888:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	4b1c      	ldr	r3, [pc, #112]	@ (8001900 <MX_GPIO_Init+0x8c>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	4a1b      	ldr	r2, [pc, #108]	@ (8001900 <MX_GPIO_Init+0x8c>)
 8001894:	f043 0310 	orr.w	r3, r3, #16
 8001898:	6313      	str	r3, [r2, #48]	@ 0x30
 800189a:	4b19      	ldr	r3, [pc, #100]	@ (8001900 <MX_GPIO_Init+0x8c>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	f003 0310 	and.w	r3, r3, #16
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	4b15      	ldr	r3, [pc, #84]	@ (8001900 <MX_GPIO_Init+0x8c>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ae:	4a14      	ldr	r2, [pc, #80]	@ (8001900 <MX_GPIO_Init+0x8c>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b6:	4b12      	ldr	r3, [pc, #72]	@ (8001900 <MX_GPIO_Init+0x8c>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	603b      	str	r3, [r7, #0]
 80018c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001900 <MX_GPIO_Init+0x8c>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	4a0d      	ldr	r2, [pc, #52]	@ (8001900 <MX_GPIO_Init+0x8c>)
 80018cc:	f043 0302 	orr.w	r3, r3, #2
 80018d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001900 <MX_GPIO_Init+0x8c>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	603b      	str	r3, [r7, #0]
 80018dc:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pins : PE9 PE10 */
	GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 80018de:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80018e2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e4:	2300      	movs	r3, #0
 80018e6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018ec:	f107 030c 	add.w	r3, r7, #12
 80018f0:	4619      	mov	r1, r3
 80018f2:	4804      	ldr	r0, [pc, #16]	@ (8001904 <MX_GPIO_Init+0x90>)
 80018f4:	f000 fba6 	bl	8002044 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80018f8:	bf00      	nop
 80018fa:	3720      	adds	r7, #32
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40023800 	.word	0x40023800
 8001904:	40021000 	.word	0x40021000

08001908 <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch) {
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	USART1->DR = (ch & (uint16_t) 0x01FF);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a09      	ldr	r2, [pc, #36]	@ (8001938 <__io_putchar+0x30>)
 8001914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001918:	6053      	str	r3, [r2, #4]
	while (!(USART1->SR & USART_SR_TXE))
 800191a:	bf00      	nop
 800191c:	4b06      	ldr	r3, [pc, #24]	@ (8001938 <__io_putchar+0x30>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0f9      	beq.n	800191c <__io_putchar+0x14>
		; //espera pelo fim da transmissão do caractere para evitar a segunda transmissão antes da primeira ser concluída
	return ch;
 8001928:	687b      	ldr	r3, [r7, #4]
}
 800192a:	4618      	mov	r0, r3
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40011000 	.word	0x40011000

0800193c <__io_getchar>:
int __io_getchar(void) {
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
	return (uint16_t) (USART1->DR & (uint16_t) 0x01FF);
 8001940:	4b04      	ldr	r3, [pc, #16]	@ (8001954 <__io_getchar+0x18>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	b29b      	uxth	r3, r3
 8001946:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800194a:	4618      	mov	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	40011000 	.word	0x40011000

08001958 <USART1_IRQHandler>:
//ISR da USART1. Todas as ISR's estão definidas no arquivo startup_stm32.s
void USART1_IRQHandler(void) {
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
	__io_putchar(__io_getchar());
 800195c:	f7ff ffee 	bl	800193c <__io_getchar>
 8001960:	4603      	mov	r3, r0
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff ffd0 	bl	8001908 <__io_putchar>
}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}

0800196c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001970:	b672      	cpsid	i
}
 8001972:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001974:	bf00      	nop
 8001976:	e7fd      	b.n	8001974 <Error_Handler+0x8>

08001978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	4b10      	ldr	r3, [pc, #64]	@ (80019c4 <HAL_MspInit+0x4c>)
 8001984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001986:	4a0f      	ldr	r2, [pc, #60]	@ (80019c4 <HAL_MspInit+0x4c>)
 8001988:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800198c:	6453      	str	r3, [r2, #68]	@ 0x44
 800198e:	4b0d      	ldr	r3, [pc, #52]	@ (80019c4 <HAL_MspInit+0x4c>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001992:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	603b      	str	r3, [r7, #0]
 800199e:	4b09      	ldr	r3, [pc, #36]	@ (80019c4 <HAL_MspInit+0x4c>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	4a08      	ldr	r2, [pc, #32]	@ (80019c4 <HAL_MspInit+0x4c>)
 80019a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019aa:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <HAL_MspInit+0x4c>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b2:	603b      	str	r3, [r7, #0]
 80019b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800

080019c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08a      	sub	sp, #40	@ 0x28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a19      	ldr	r2, [pc, #100]	@ (8001a4c <HAL_I2C_MspInit+0x84>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d12c      	bne.n	8001a44 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	4b18      	ldr	r3, [pc, #96]	@ (8001a50 <HAL_I2C_MspInit+0x88>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	4a17      	ldr	r2, [pc, #92]	@ (8001a50 <HAL_I2C_MspInit+0x88>)
 80019f4:	f043 0302 	orr.w	r3, r3, #2
 80019f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fa:	4b15      	ldr	r3, [pc, #84]	@ (8001a50 <HAL_I2C_MspInit+0x88>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001a06:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a0c:	2312      	movs	r3, #18
 8001a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a14:	2303      	movs	r3, #3
 8001a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a18:	2304      	movs	r3, #4
 8001a1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	4619      	mov	r1, r3
 8001a22:	480c      	ldr	r0, [pc, #48]	@ (8001a54 <HAL_I2C_MspInit+0x8c>)
 8001a24:	f000 fb0e 	bl	8002044 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	4b08      	ldr	r3, [pc, #32]	@ (8001a50 <HAL_I2C_MspInit+0x88>)
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a30:	4a07      	ldr	r2, [pc, #28]	@ (8001a50 <HAL_I2C_MspInit+0x88>)
 8001a32:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a36:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a38:	4b05      	ldr	r3, [pc, #20]	@ (8001a50 <HAL_I2C_MspInit+0x88>)
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001a44:	bf00      	nop
 8001a46:	3728      	adds	r7, #40	@ 0x28
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40005400 	.word	0x40005400
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40020400 	.word	0x40020400

08001a58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	@ 0x28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a19      	ldr	r2, [pc, #100]	@ (8001adc <HAL_UART_MspInit+0x84>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d12c      	bne.n	8001ad4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	4b18      	ldr	r3, [pc, #96]	@ (8001ae0 <HAL_UART_MspInit+0x88>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a82:	4a17      	ldr	r2, [pc, #92]	@ (8001ae0 <HAL_UART_MspInit+0x88>)
 8001a84:	f043 0310 	orr.w	r3, r3, #16
 8001a88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ae0 <HAL_UART_MspInit+0x88>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8e:	f003 0310 	and.w	r3, r3, #16
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ae0 <HAL_UART_MspInit+0x88>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9e:	4a10      	ldr	r2, [pc, #64]	@ (8001ae0 <HAL_UART_MspInit+0x88>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae0 <HAL_UART_MspInit+0x88>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ab2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ac4:	2307      	movs	r3, #7
 8001ac6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	4619      	mov	r1, r3
 8001ace:	4805      	ldr	r0, [pc, #20]	@ (8001ae4 <HAL_UART_MspInit+0x8c>)
 8001ad0:	f000 fab8 	bl	8002044 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001ad4:	bf00      	nop
 8001ad6:	3728      	adds	r7, #40	@ 0x28
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40011000 	.word	0x40011000
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	40020000 	.word	0x40020000

08001ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001aec:	bf00      	nop
 8001aee:	e7fd      	b.n	8001aec <NMI_Handler+0x4>

08001af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <HardFault_Handler+0x4>

08001af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <MemManage_Handler+0x4>

08001b00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b04:	bf00      	nop
 8001b06:	e7fd      	b.n	8001b04 <BusFault_Handler+0x4>

08001b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <UsageFault_Handler+0x4>

08001b10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b3e:	f000 f957 	bl	8001df0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0
  return 1;
 8001b4a:	2301      	movs	r3, #1
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <_kill>:

int _kill(int pid, int sig)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b60:	f003 fdf4 	bl	800574c <__errno>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2216      	movs	r2, #22
 8001b68:	601a      	str	r2, [r3, #0]
  return -1;
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <_exit>:

void _exit (int status)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b7e:	f04f 31ff 	mov.w	r1, #4294967295
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ffe7 	bl	8001b56 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b88:	bf00      	nop
 8001b8a:	e7fd      	b.n	8001b88 <_exit+0x12>

08001b8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	e00a      	b.n	8001bb4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b9e:	f7ff fecd 	bl	800193c <__io_getchar>
 8001ba2:	4601      	mov	r1, r0
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	60ba      	str	r2, [r7, #8]
 8001baa:	b2ca      	uxtb	r2, r1
 8001bac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	dbf0      	blt.n	8001b9e <_read+0x12>
  }

  return len;
 8001bbc:	687b      	ldr	r3, [r7, #4]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b086      	sub	sp, #24
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	60f8      	str	r0, [r7, #12]
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	e009      	b.n	8001bec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	60ba      	str	r2, [r7, #8]
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff fe91 	bl	8001908 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	3301      	adds	r3, #1
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	dbf1      	blt.n	8001bd8 <_write+0x12>
  }
  return len;
 8001bf4:	687b      	ldr	r3, [r7, #4]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <_close>:

int _close(int file)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c26:	605a      	str	r2, [r3, #4]
  return 0;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <_isatty>:

int _isatty(int file)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c3e:	2301      	movs	r3, #1
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c70:	4a14      	ldr	r2, [pc, #80]	@ (8001cc4 <_sbrk+0x5c>)
 8001c72:	4b15      	ldr	r3, [pc, #84]	@ (8001cc8 <_sbrk+0x60>)
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c7c:	4b13      	ldr	r3, [pc, #76]	@ (8001ccc <_sbrk+0x64>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d102      	bne.n	8001c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c84:	4b11      	ldr	r3, [pc, #68]	@ (8001ccc <_sbrk+0x64>)
 8001c86:	4a12      	ldr	r2, [pc, #72]	@ (8001cd0 <_sbrk+0x68>)
 8001c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c8a:	4b10      	ldr	r3, [pc, #64]	@ (8001ccc <_sbrk+0x64>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d207      	bcs.n	8001ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c98:	f003 fd58 	bl	800574c <__errno>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca6:	e009      	b.n	8001cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ca8:	4b08      	ldr	r3, [pc, #32]	@ (8001ccc <_sbrk+0x64>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cae:	4b07      	ldr	r3, [pc, #28]	@ (8001ccc <_sbrk+0x64>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	4a05      	ldr	r2, [pc, #20]	@ (8001ccc <_sbrk+0x64>)
 8001cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cba:	68fb      	ldr	r3, [r7, #12]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20020000 	.word	0x20020000
 8001cc8:	00000400 	.word	0x00000400
 8001ccc:	200002d0 	.word	0x200002d0
 8001cd0:	20000830 	.word	0x20000830

08001cd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cd8:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <SystemInit+0x20>)
 8001cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cde:	4a05      	ldr	r2, [pc, #20]	@ (8001cf4 <SystemInit+0x20>)
 8001ce0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ce4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001cf8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d30 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001cfc:	f7ff ffea 	bl	8001cd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d00:	480c      	ldr	r0, [pc, #48]	@ (8001d34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d02:	490d      	ldr	r1, [pc, #52]	@ (8001d38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d04:	4a0d      	ldr	r2, [pc, #52]	@ (8001d3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d08:	e002      	b.n	8001d10 <LoopCopyDataInit>

08001d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d0e:	3304      	adds	r3, #4

08001d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d14:	d3f9      	bcc.n	8001d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d16:	4a0a      	ldr	r2, [pc, #40]	@ (8001d40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d18:	4c0a      	ldr	r4, [pc, #40]	@ (8001d44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d1c:	e001      	b.n	8001d22 <LoopFillZerobss>

08001d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d20:	3204      	adds	r2, #4

08001d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d24:	d3fb      	bcc.n	8001d1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d26:	f003 fd17 	bl	8005758 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d2a:	f7ff fb3f 	bl	80013ac <main>
  bx  lr    
 8001d2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d38:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001d3c:	0800a200 	.word	0x0800a200
  ldr r2, =_sbss
 8001d40:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001d44:	2000082c 	.word	0x2000082c

08001d48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d48:	e7fe      	b.n	8001d48 <ADC_IRQHandler>
	...

08001d4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d50:	4b0e      	ldr	r3, [pc, #56]	@ (8001d8c <HAL_Init+0x40>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a0d      	ldr	r2, [pc, #52]	@ (8001d8c <HAL_Init+0x40>)
 8001d56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d8c <HAL_Init+0x40>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a0a      	ldr	r2, [pc, #40]	@ (8001d8c <HAL_Init+0x40>)
 8001d62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d68:	4b08      	ldr	r3, [pc, #32]	@ (8001d8c <HAL_Init+0x40>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a07      	ldr	r2, [pc, #28]	@ (8001d8c <HAL_Init+0x40>)
 8001d6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d74:	2003      	movs	r0, #3
 8001d76:	f000 f931 	bl	8001fdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d7a:	200f      	movs	r0, #15
 8001d7c:	f000 f808 	bl	8001d90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d80:	f7ff fdfa 	bl	8001978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40023c00 	.word	0x40023c00

08001d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d98:	4b12      	ldr	r3, [pc, #72]	@ (8001de4 <HAL_InitTick+0x54>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4b12      	ldr	r3, [pc, #72]	@ (8001de8 <HAL_InitTick+0x58>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	4619      	mov	r1, r3
 8001da2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dae:	4618      	mov	r0, r3
 8001db0:	f000 f93b 	bl	800202a <HAL_SYSTICK_Config>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e00e      	b.n	8001ddc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b0f      	cmp	r3, #15
 8001dc2:	d80a      	bhi.n	8001dda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dcc:	f000 f911 	bl	8001ff2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dd0:	4a06      	ldr	r2, [pc, #24]	@ (8001dec <HAL_InitTick+0x5c>)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	e000      	b.n	8001ddc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20000000 	.word	0x20000000
 8001de8:	20000008 	.word	0x20000008
 8001dec:	20000004 	.word	0x20000004

08001df0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001df4:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <HAL_IncTick+0x20>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <HAL_IncTick+0x24>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4413      	add	r3, r2
 8001e00:	4a04      	ldr	r2, [pc, #16]	@ (8001e14 <HAL_IncTick+0x24>)
 8001e02:	6013      	str	r3, [r2, #0]
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	20000008 	.word	0x20000008
 8001e14:	200002d4 	.word	0x200002d4

08001e18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e1c:	4b03      	ldr	r3, [pc, #12]	@ (8001e2c <HAL_GetTick+0x14>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	200002d4 	.word	0x200002d4

08001e30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e38:	f7ff ffee 	bl	8001e18 <HAL_GetTick>
 8001e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e48:	d005      	beq.n	8001e56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e74 <HAL_Delay+0x44>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4413      	add	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e56:	bf00      	nop
 8001e58:	f7ff ffde 	bl	8001e18 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d8f7      	bhi.n	8001e58 <HAL_Delay+0x28>
  {
  }
}
 8001e68:	bf00      	nop
 8001e6a:	bf00      	nop
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000008 	.word	0x20000008

08001e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e88:	4b0c      	ldr	r3, [pc, #48]	@ (8001ebc <__NVIC_SetPriorityGrouping+0x44>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e94:	4013      	ands	r3, r2
 8001e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ea0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eaa:	4a04      	ldr	r2, [pc, #16]	@ (8001ebc <__NVIC_SetPriorityGrouping+0x44>)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	60d3      	str	r3, [r2, #12]
}
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec4:	4b04      	ldr	r3, [pc, #16]	@ (8001ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	0a1b      	lsrs	r3, r3, #8
 8001eca:	f003 0307 	and.w	r3, r3, #7
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	6039      	str	r1, [r7, #0]
 8001ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	db0a      	blt.n	8001f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	490c      	ldr	r1, [pc, #48]	@ (8001f28 <__NVIC_SetPriority+0x4c>)
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	0112      	lsls	r2, r2, #4
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	440b      	add	r3, r1
 8001f00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f04:	e00a      	b.n	8001f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	4908      	ldr	r1, [pc, #32]	@ (8001f2c <__NVIC_SetPriority+0x50>)
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	3b04      	subs	r3, #4
 8001f14:	0112      	lsls	r2, r2, #4
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	440b      	add	r3, r1
 8001f1a:	761a      	strb	r2, [r3, #24]
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000e100 	.word	0xe000e100
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b089      	sub	sp, #36	@ 0x24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f1c3 0307 	rsb	r3, r3, #7
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	bf28      	it	cs
 8001f4e:	2304      	movcs	r3, #4
 8001f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3304      	adds	r3, #4
 8001f56:	2b06      	cmp	r3, #6
 8001f58:	d902      	bls.n	8001f60 <NVIC_EncodePriority+0x30>
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3b03      	subs	r3, #3
 8001f5e:	e000      	b.n	8001f62 <NVIC_EncodePriority+0x32>
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f64:	f04f 32ff 	mov.w	r2, #4294967295
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43da      	mvns	r2, r3
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	401a      	ands	r2, r3
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f78:	f04f 31ff 	mov.w	r1, #4294967295
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f82:	43d9      	mvns	r1, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f88:	4313      	orrs	r3, r2
         );
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3724      	adds	r7, #36	@ 0x24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fa8:	d301      	bcc.n	8001fae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001faa:	2301      	movs	r3, #1
 8001fac:	e00f      	b.n	8001fce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fae:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd8 <SysTick_Config+0x40>)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fb6:	210f      	movs	r1, #15
 8001fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fbc:	f7ff ff8e 	bl	8001edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fc0:	4b05      	ldr	r3, [pc, #20]	@ (8001fd8 <SysTick_Config+0x40>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fc6:	4b04      	ldr	r3, [pc, #16]	@ (8001fd8 <SysTick_Config+0x40>)
 8001fc8:	2207      	movs	r2, #7
 8001fca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	e000e010 	.word	0xe000e010

08001fdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff ff47 	bl	8001e78 <__NVIC_SetPriorityGrouping>
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b086      	sub	sp, #24
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	60b9      	str	r1, [r7, #8]
 8001ffc:	607a      	str	r2, [r7, #4]
 8001ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002004:	f7ff ff5c 	bl	8001ec0 <__NVIC_GetPriorityGrouping>
 8002008:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	68b9      	ldr	r1, [r7, #8]
 800200e:	6978      	ldr	r0, [r7, #20]
 8002010:	f7ff ff8e 	bl	8001f30 <NVIC_EncodePriority>
 8002014:	4602      	mov	r2, r0
 8002016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800201a:	4611      	mov	r1, r2
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff5d 	bl	8001edc <__NVIC_SetPriority>
}
 8002022:	bf00      	nop
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff ffb0 	bl	8001f98 <SysTick_Config>
 8002038:	4603      	mov	r3, r0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002044:	b480      	push	{r7}
 8002046:	b089      	sub	sp, #36	@ 0x24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002056:	2300      	movs	r3, #0
 8002058:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
 800205e:	e16b      	b.n	8002338 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002060:	2201      	movs	r2, #1
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	4013      	ands	r3, r2
 8002072:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	429a      	cmp	r2, r3
 800207a:	f040 815a 	bne.w	8002332 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	2b01      	cmp	r3, #1
 8002088:	d005      	beq.n	8002096 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002092:	2b02      	cmp	r3, #2
 8002094:	d130      	bne.n	80020f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	2203      	movs	r2, #3
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4313      	orrs	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020cc:	2201      	movs	r2, #1
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	091b      	lsrs	r3, r3, #4
 80020e2:	f003 0201 	and.w	r2, r3, #1
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	2b03      	cmp	r3, #3
 8002102:	d017      	beq.n	8002134 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	2203      	movs	r2, #3
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 0303 	and.w	r3, r3, #3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d123      	bne.n	8002188 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	08da      	lsrs	r2, r3, #3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3208      	adds	r2, #8
 8002148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800214c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	220f      	movs	r2, #15
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	691a      	ldr	r2, [r3, #16]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	08da      	lsrs	r2, r3, #3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3208      	adds	r2, #8
 8002182:	69b9      	ldr	r1, [r7, #24]
 8002184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	2203      	movs	r2, #3
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 0203 	and.w	r2, r3, #3
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 80b4 	beq.w	8002332 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	4b60      	ldr	r3, [pc, #384]	@ (8002350 <HAL_GPIO_Init+0x30c>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d2:	4a5f      	ldr	r2, [pc, #380]	@ (8002350 <HAL_GPIO_Init+0x30c>)
 80021d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80021da:	4b5d      	ldr	r3, [pc, #372]	@ (8002350 <HAL_GPIO_Init+0x30c>)
 80021dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021e6:	4a5b      	ldr	r2, [pc, #364]	@ (8002354 <HAL_GPIO_Init+0x310>)
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	089b      	lsrs	r3, r3, #2
 80021ec:	3302      	adds	r3, #2
 80021ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	220f      	movs	r2, #15
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4013      	ands	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a52      	ldr	r2, [pc, #328]	@ (8002358 <HAL_GPIO_Init+0x314>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d02b      	beq.n	800226a <HAL_GPIO_Init+0x226>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a51      	ldr	r2, [pc, #324]	@ (800235c <HAL_GPIO_Init+0x318>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d025      	beq.n	8002266 <HAL_GPIO_Init+0x222>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a50      	ldr	r2, [pc, #320]	@ (8002360 <HAL_GPIO_Init+0x31c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d01f      	beq.n	8002262 <HAL_GPIO_Init+0x21e>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a4f      	ldr	r2, [pc, #316]	@ (8002364 <HAL_GPIO_Init+0x320>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d019      	beq.n	800225e <HAL_GPIO_Init+0x21a>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a4e      	ldr	r2, [pc, #312]	@ (8002368 <HAL_GPIO_Init+0x324>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d013      	beq.n	800225a <HAL_GPIO_Init+0x216>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a4d      	ldr	r2, [pc, #308]	@ (800236c <HAL_GPIO_Init+0x328>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d00d      	beq.n	8002256 <HAL_GPIO_Init+0x212>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a4c      	ldr	r2, [pc, #304]	@ (8002370 <HAL_GPIO_Init+0x32c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d007      	beq.n	8002252 <HAL_GPIO_Init+0x20e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a4b      	ldr	r2, [pc, #300]	@ (8002374 <HAL_GPIO_Init+0x330>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d101      	bne.n	800224e <HAL_GPIO_Init+0x20a>
 800224a:	2307      	movs	r3, #7
 800224c:	e00e      	b.n	800226c <HAL_GPIO_Init+0x228>
 800224e:	2308      	movs	r3, #8
 8002250:	e00c      	b.n	800226c <HAL_GPIO_Init+0x228>
 8002252:	2306      	movs	r3, #6
 8002254:	e00a      	b.n	800226c <HAL_GPIO_Init+0x228>
 8002256:	2305      	movs	r3, #5
 8002258:	e008      	b.n	800226c <HAL_GPIO_Init+0x228>
 800225a:	2304      	movs	r3, #4
 800225c:	e006      	b.n	800226c <HAL_GPIO_Init+0x228>
 800225e:	2303      	movs	r3, #3
 8002260:	e004      	b.n	800226c <HAL_GPIO_Init+0x228>
 8002262:	2302      	movs	r3, #2
 8002264:	e002      	b.n	800226c <HAL_GPIO_Init+0x228>
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <HAL_GPIO_Init+0x228>
 800226a:	2300      	movs	r3, #0
 800226c:	69fa      	ldr	r2, [r7, #28]
 800226e:	f002 0203 	and.w	r2, r2, #3
 8002272:	0092      	lsls	r2, r2, #2
 8002274:	4093      	lsls	r3, r2
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4313      	orrs	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800227c:	4935      	ldr	r1, [pc, #212]	@ (8002354 <HAL_GPIO_Init+0x310>)
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	089b      	lsrs	r3, r3, #2
 8002282:	3302      	adds	r3, #2
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800228a:	4b3b      	ldr	r3, [pc, #236]	@ (8002378 <HAL_GPIO_Init+0x334>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	43db      	mvns	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ae:	4a32      	ldr	r2, [pc, #200]	@ (8002378 <HAL_GPIO_Init+0x334>)
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022b4:	4b30      	ldr	r3, [pc, #192]	@ (8002378 <HAL_GPIO_Init+0x334>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022d8:	4a27      	ldr	r2, [pc, #156]	@ (8002378 <HAL_GPIO_Init+0x334>)
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022de:	4b26      	ldr	r3, [pc, #152]	@ (8002378 <HAL_GPIO_Init+0x334>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	43db      	mvns	r3, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4013      	ands	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002302:	4a1d      	ldr	r2, [pc, #116]	@ (8002378 <HAL_GPIO_Init+0x334>)
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002308:	4b1b      	ldr	r3, [pc, #108]	@ (8002378 <HAL_GPIO_Init+0x334>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800232c:	4a12      	ldr	r2, [pc, #72]	@ (8002378 <HAL_GPIO_Init+0x334>)
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3301      	adds	r3, #1
 8002336:	61fb      	str	r3, [r7, #28]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	2b0f      	cmp	r3, #15
 800233c:	f67f ae90 	bls.w	8002060 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002340:	bf00      	nop
 8002342:	bf00      	nop
 8002344:	3724      	adds	r7, #36	@ 0x24
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40023800 	.word	0x40023800
 8002354:	40013800 	.word	0x40013800
 8002358:	40020000 	.word	0x40020000
 800235c:	40020400 	.word	0x40020400
 8002360:	40020800 	.word	0x40020800
 8002364:	40020c00 	.word	0x40020c00
 8002368:	40021000 	.word	0x40021000
 800236c:	40021400 	.word	0x40021400
 8002370:	40021800 	.word	0x40021800
 8002374:	40021c00 	.word	0x40021c00
 8002378:	40013c00 	.word	0x40013c00

0800237c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	460b      	mov	r3, r1
 8002386:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691a      	ldr	r2, [r3, #16]
 800238c:	887b      	ldrh	r3, [r7, #2]
 800238e:	4013      	ands	r3, r2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002394:	2301      	movs	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
 8002398:	e001      	b.n	800239e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800239a:	2300      	movs	r3, #0
 800239c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800239e:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e12b      	b.n	8002616 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d106      	bne.n	80023d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff faf8 	bl	80019c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2224      	movs	r2, #36	@ 0x24
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0201 	bic.w	r2, r2, #1
 80023ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800240e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002410:	f001 fc20 	bl	8003c54 <HAL_RCC_GetPCLK1Freq>
 8002414:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	4a81      	ldr	r2, [pc, #516]	@ (8002620 <HAL_I2C_Init+0x274>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d807      	bhi.n	8002430 <HAL_I2C_Init+0x84>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4a80      	ldr	r2, [pc, #512]	@ (8002624 <HAL_I2C_Init+0x278>)
 8002424:	4293      	cmp	r3, r2
 8002426:	bf94      	ite	ls
 8002428:	2301      	movls	r3, #1
 800242a:	2300      	movhi	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	e006      	b.n	800243e <HAL_I2C_Init+0x92>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4a7d      	ldr	r2, [pc, #500]	@ (8002628 <HAL_I2C_Init+0x27c>)
 8002434:	4293      	cmp	r3, r2
 8002436:	bf94      	ite	ls
 8002438:	2301      	movls	r3, #1
 800243a:	2300      	movhi	r3, #0
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e0e7      	b.n	8002616 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	4a78      	ldr	r2, [pc, #480]	@ (800262c <HAL_I2C_Init+0x280>)
 800244a:	fba2 2303 	umull	r2, r3, r2, r3
 800244e:	0c9b      	lsrs	r3, r3, #18
 8002450:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	430a      	orrs	r2, r1
 8002464:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	4a6a      	ldr	r2, [pc, #424]	@ (8002620 <HAL_I2C_Init+0x274>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d802      	bhi.n	8002480 <HAL_I2C_Init+0xd4>
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	3301      	adds	r3, #1
 800247e:	e009      	b.n	8002494 <HAL_I2C_Init+0xe8>
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002486:	fb02 f303 	mul.w	r3, r2, r3
 800248a:	4a69      	ldr	r2, [pc, #420]	@ (8002630 <HAL_I2C_Init+0x284>)
 800248c:	fba2 2303 	umull	r2, r3, r2, r3
 8002490:	099b      	lsrs	r3, r3, #6
 8002492:	3301      	adds	r3, #1
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	430b      	orrs	r3, r1
 800249a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80024a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	495c      	ldr	r1, [pc, #368]	@ (8002620 <HAL_I2C_Init+0x274>)
 80024b0:	428b      	cmp	r3, r1
 80024b2:	d819      	bhi.n	80024e8 <HAL_I2C_Init+0x13c>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	1e59      	subs	r1, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	fbb1 f3f3 	udiv	r3, r1, r3
 80024c2:	1c59      	adds	r1, r3, #1
 80024c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80024c8:	400b      	ands	r3, r1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00a      	beq.n	80024e4 <HAL_I2C_Init+0x138>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1e59      	subs	r1, r3, #1
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80024dc:	3301      	adds	r3, #1
 80024de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e2:	e051      	b.n	8002588 <HAL_I2C_Init+0x1dc>
 80024e4:	2304      	movs	r3, #4
 80024e6:	e04f      	b.n	8002588 <HAL_I2C_Init+0x1dc>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d111      	bne.n	8002514 <HAL_I2C_Init+0x168>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	1e58      	subs	r0, r3, #1
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6859      	ldr	r1, [r3, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	440b      	add	r3, r1
 80024fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002502:	3301      	adds	r3, #1
 8002504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002508:	2b00      	cmp	r3, #0
 800250a:	bf0c      	ite	eq
 800250c:	2301      	moveq	r3, #1
 800250e:	2300      	movne	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	e012      	b.n	800253a <HAL_I2C_Init+0x18e>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	1e58      	subs	r0, r3, #1
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6859      	ldr	r1, [r3, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	0099      	lsls	r1, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	fbb0 f3f3 	udiv	r3, r0, r3
 800252a:	3301      	adds	r3, #1
 800252c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002530:	2b00      	cmp	r3, #0
 8002532:	bf0c      	ite	eq
 8002534:	2301      	moveq	r3, #1
 8002536:	2300      	movne	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_I2C_Init+0x196>
 800253e:	2301      	movs	r3, #1
 8002540:	e022      	b.n	8002588 <HAL_I2C_Init+0x1dc>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10e      	bne.n	8002568 <HAL_I2C_Init+0x1bc>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	1e58      	subs	r0, r3, #1
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6859      	ldr	r1, [r3, #4]
 8002552:	460b      	mov	r3, r1
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	440b      	add	r3, r1
 8002558:	fbb0 f3f3 	udiv	r3, r0, r3
 800255c:	3301      	adds	r3, #1
 800255e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002562:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002566:	e00f      	b.n	8002588 <HAL_I2C_Init+0x1dc>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	1e58      	subs	r0, r3, #1
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6859      	ldr	r1, [r3, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	0099      	lsls	r1, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	fbb0 f3f3 	udiv	r3, r0, r3
 800257e:	3301      	adds	r3, #1
 8002580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002584:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	6809      	ldr	r1, [r1, #0]
 800258c:	4313      	orrs	r3, r2
 800258e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69da      	ldr	r2, [r3, #28]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80025b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6911      	ldr	r1, [r2, #16]
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	68d2      	ldr	r2, [r2, #12]
 80025c2:	4311      	orrs	r1, r2
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6812      	ldr	r2, [r2, #0]
 80025c8:	430b      	orrs	r3, r1
 80025ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	695a      	ldr	r2, [r3, #20]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0201 	orr.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2220      	movs	r2, #32
 8002602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	000186a0 	.word	0x000186a0
 8002624:	001e847f 	.word	0x001e847f
 8002628:	003d08ff 	.word	0x003d08ff
 800262c:	431bde83 	.word	0x431bde83
 8002630:	10624dd3 	.word	0x10624dd3

08002634 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af02      	add	r7, sp, #8
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	4608      	mov	r0, r1
 800263e:	4611      	mov	r1, r2
 8002640:	461a      	mov	r2, r3
 8002642:	4603      	mov	r3, r0
 8002644:	817b      	strh	r3, [r7, #10]
 8002646:	460b      	mov	r3, r1
 8002648:	813b      	strh	r3, [r7, #8]
 800264a:	4613      	mov	r3, r2
 800264c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800264e:	f7ff fbe3 	bl	8001e18 <HAL_GetTick>
 8002652:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b20      	cmp	r3, #32
 800265e:	f040 80d9 	bne.w	8002814 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	2319      	movs	r3, #25
 8002668:	2201      	movs	r2, #1
 800266a:	496d      	ldr	r1, [pc, #436]	@ (8002820 <HAL_I2C_Mem_Write+0x1ec>)
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f000 fc8b 	bl	8002f88 <I2C_WaitOnFlagUntilTimeout>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002678:	2302      	movs	r3, #2
 800267a:	e0cc      	b.n	8002816 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <HAL_I2C_Mem_Write+0x56>
 8002686:	2302      	movs	r3, #2
 8002688:	e0c5      	b.n	8002816 <HAL_I2C_Mem_Write+0x1e2>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b01      	cmp	r3, #1
 800269e:	d007      	beq.n	80026b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 0201 	orr.w	r2, r2, #1
 80026ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2221      	movs	r2, #33	@ 0x21
 80026c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2240      	movs	r2, #64	@ 0x40
 80026cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6a3a      	ldr	r2, [r7, #32]
 80026da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80026e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4a4d      	ldr	r2, [pc, #308]	@ (8002824 <HAL_I2C_Mem_Write+0x1f0>)
 80026f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026f2:	88f8      	ldrh	r0, [r7, #6]
 80026f4:	893a      	ldrh	r2, [r7, #8]
 80026f6:	8979      	ldrh	r1, [r7, #10]
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	9301      	str	r3, [sp, #4]
 80026fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	4603      	mov	r3, r0
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f000 fac2 	bl	8002c8c <I2C_RequestMemoryWrite>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d052      	beq.n	80027b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e081      	b.n	8002816 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 fd50 	bl	80031bc <I2C_WaitOnTXEFlagUntilTimeout>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00d      	beq.n	800273e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002726:	2b04      	cmp	r3, #4
 8002728:	d107      	bne.n	800273a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002738:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e06b      	b.n	8002816 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002742:	781a      	ldrb	r2, [r3, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274e:	1c5a      	adds	r2, r3, #1
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002758:	3b01      	subs	r3, #1
 800275a:	b29a      	uxth	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002764:	b29b      	uxth	r3, r3
 8002766:	3b01      	subs	r3, #1
 8002768:	b29a      	uxth	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b04      	cmp	r3, #4
 800277a:	d11b      	bne.n	80027b4 <HAL_I2C_Mem_Write+0x180>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002780:	2b00      	cmp	r3, #0
 8002782:	d017      	beq.n	80027b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002788:	781a      	ldrb	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002794:	1c5a      	adds	r2, r3, #1
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800279e:	3b01      	subs	r3, #1
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	3b01      	subs	r3, #1
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1aa      	bne.n	8002712 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 fd43 	bl	800324c <I2C_WaitOnBTFFlagUntilTimeout>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00d      	beq.n	80027e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d0:	2b04      	cmp	r3, #4
 80027d2:	d107      	bne.n	80027e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e016      	b.n	8002816 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2220      	movs	r2, #32
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	e000      	b.n	8002816 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002814:	2302      	movs	r3, #2
  }
}
 8002816:	4618      	mov	r0, r3
 8002818:	3718      	adds	r7, #24
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	00100002 	.word	0x00100002
 8002824:	ffff0000 	.word	0xffff0000

08002828 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08c      	sub	sp, #48	@ 0x30
 800282c:	af02      	add	r7, sp, #8
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	4608      	mov	r0, r1
 8002832:	4611      	mov	r1, r2
 8002834:	461a      	mov	r2, r3
 8002836:	4603      	mov	r3, r0
 8002838:	817b      	strh	r3, [r7, #10]
 800283a:	460b      	mov	r3, r1
 800283c:	813b      	strh	r3, [r7, #8]
 800283e:	4613      	mov	r3, r2
 8002840:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002842:	f7ff fae9 	bl	8001e18 <HAL_GetTick>
 8002846:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b20      	cmp	r3, #32
 8002852:	f040 8214 	bne.w	8002c7e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	2319      	movs	r3, #25
 800285c:	2201      	movs	r2, #1
 800285e:	497b      	ldr	r1, [pc, #492]	@ (8002a4c <HAL_I2C_Mem_Read+0x224>)
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 fb91 	bl	8002f88 <I2C_WaitOnFlagUntilTimeout>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800286c:	2302      	movs	r3, #2
 800286e:	e207      	b.n	8002c80 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002876:	2b01      	cmp	r3, #1
 8002878:	d101      	bne.n	800287e <HAL_I2C_Mem_Read+0x56>
 800287a:	2302      	movs	r3, #2
 800287c:	e200      	b.n	8002c80 <HAL_I2C_Mem_Read+0x458>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b01      	cmp	r3, #1
 8002892:	d007      	beq.n	80028a4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0201 	orr.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2222      	movs	r2, #34	@ 0x22
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2240      	movs	r2, #64	@ 0x40
 80028c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80028d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028da:	b29a      	uxth	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	4a5b      	ldr	r2, [pc, #364]	@ (8002a50 <HAL_I2C_Mem_Read+0x228>)
 80028e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028e6:	88f8      	ldrh	r0, [r7, #6]
 80028e8:	893a      	ldrh	r2, [r7, #8]
 80028ea:	8979      	ldrh	r1, [r7, #10]
 80028ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ee:	9301      	str	r3, [sp, #4]
 80028f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	4603      	mov	r3, r0
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 fa5e 	bl	8002db8 <I2C_RequestMemoryRead>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e1bc      	b.n	8002c80 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800290a:	2b00      	cmp	r3, #0
 800290c:	d113      	bne.n	8002936 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800290e:	2300      	movs	r3, #0
 8002910:	623b      	str	r3, [r7, #32]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	623b      	str	r3, [r7, #32]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	623b      	str	r3, [r7, #32]
 8002922:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	e190      	b.n	8002c58 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800293a:	2b01      	cmp	r3, #1
 800293c:	d11b      	bne.n	8002976 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800294c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800294e:	2300      	movs	r3, #0
 8002950:	61fb      	str	r3, [r7, #28]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	61fb      	str	r3, [r7, #28]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	61fb      	str	r3, [r7, #28]
 8002962:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	e170      	b.n	8002c58 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800297a:	2b02      	cmp	r3, #2
 800297c:	d11b      	bne.n	80029b6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800298c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800299c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800299e:	2300      	movs	r3, #0
 80029a0:	61bb      	str	r3, [r7, #24]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	61bb      	str	r3, [r7, #24]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	61bb      	str	r3, [r7, #24]
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	e150      	b.n	8002c58 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	617b      	str	r3, [r7, #20]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	617b      	str	r3, [r7, #20]
 80029ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80029cc:	e144      	b.n	8002c58 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d2:	2b03      	cmp	r3, #3
 80029d4:	f200 80f1 	bhi.w	8002bba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d123      	bne.n	8002a28 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029e2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f000 fc79 	bl	80032dc <I2C_WaitOnRXNEFlagUntilTimeout>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e145      	b.n	8002c80 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	691a      	ldr	r2, [r3, #16]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a06:	1c5a      	adds	r2, r3, #1
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a26:	e117      	b.n	8002c58 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d14e      	bne.n	8002ace <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a36:	2200      	movs	r2, #0
 8002a38:	4906      	ldr	r1, [pc, #24]	@ (8002a54 <HAL_I2C_Mem_Read+0x22c>)
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f000 faa4 	bl	8002f88 <I2C_WaitOnFlagUntilTimeout>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d008      	beq.n	8002a58 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e11a      	b.n	8002c80 <HAL_I2C_Mem_Read+0x458>
 8002a4a:	bf00      	nop
 8002a4c:	00100002 	.word	0x00100002
 8002a50:	ffff0000 	.word	0xffff0000
 8002a54:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	691a      	ldr	r2, [r3, #16]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a84:	3b01      	subs	r3, #1
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002acc:	e0c4      	b.n	8002c58 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	496c      	ldr	r1, [pc, #432]	@ (8002c88 <HAL_I2C_Mem_Read+0x460>)
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 fa55 	bl	8002f88 <I2C_WaitOnFlagUntilTimeout>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e0cb      	b.n	8002c80 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002af6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	691a      	ldr	r2, [r3, #16]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0a:	1c5a      	adds	r2, r3, #1
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	3b01      	subs	r3, #1
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b30:	2200      	movs	r2, #0
 8002b32:	4955      	ldr	r1, [pc, #340]	@ (8002c88 <HAL_I2C_Mem_Read+0x460>)
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 fa27 	bl	8002f88 <I2C_WaitOnFlagUntilTimeout>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e09d      	b.n	8002c80 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	691a      	ldr	r2, [r3, #16]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b66:	1c5a      	adds	r2, r3, #1
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	691a      	ldr	r2, [r3, #16]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b90:	b2d2      	uxtb	r2, r2
 8002b92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b98:	1c5a      	adds	r2, r3, #1
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002bb8:	e04e      	b.n	8002c58 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bbc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 fb8c 	bl	80032dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e058      	b.n	8002c80 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	691a      	ldr	r2, [r3, #16]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	f003 0304 	and.w	r3, r3, #4
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d124      	bne.n	8002c58 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c12:	2b03      	cmp	r3, #3
 8002c14:	d107      	bne.n	8002c26 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c24:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	691a      	ldr	r2, [r3, #16]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f47f aeb6 	bne.w	80029ce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2220      	movs	r2, #32
 8002c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	e000      	b.n	8002c80 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002c7e:	2302      	movs	r3, #2
  }
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3728      	adds	r7, #40	@ 0x28
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	00010004 	.word	0x00010004

08002c8c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	4608      	mov	r0, r1
 8002c96:	4611      	mov	r1, r2
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	817b      	strh	r3, [r7, #10]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	813b      	strh	r3, [r7, #8]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 f960 	bl	8002f88 <I2C_WaitOnFlagUntilTimeout>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00d      	beq.n	8002cea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cdc:	d103      	bne.n	8002ce6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ce4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e05f      	b.n	8002daa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cea:	897b      	ldrh	r3, [r7, #10]
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	461a      	mov	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002cf8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfc:	6a3a      	ldr	r2, [r7, #32]
 8002cfe:	492d      	ldr	r1, [pc, #180]	@ (8002db4 <I2C_RequestMemoryWrite+0x128>)
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 f9bb 	bl	800307c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e04c      	b.n	8002daa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	617b      	str	r3, [r7, #20]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d28:	6a39      	ldr	r1, [r7, #32]
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f000 fa46 	bl	80031bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00d      	beq.n	8002d52 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d107      	bne.n	8002d4e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e02b      	b.n	8002daa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d52:	88fb      	ldrh	r3, [r7, #6]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d105      	bne.n	8002d64 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d58:	893b      	ldrh	r3, [r7, #8]
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	611a      	str	r2, [r3, #16]
 8002d62:	e021      	b.n	8002da8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d64:	893b      	ldrh	r3, [r7, #8]
 8002d66:	0a1b      	lsrs	r3, r3, #8
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d74:	6a39      	ldr	r1, [r7, #32]
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 fa20 	bl	80031bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00d      	beq.n	8002d9e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d107      	bne.n	8002d9a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e005      	b.n	8002daa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d9e:	893b      	ldrh	r3, [r7, #8]
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	00010002 	.word	0x00010002

08002db8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b088      	sub	sp, #32
 8002dbc:	af02      	add	r7, sp, #8
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	4608      	mov	r0, r1
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	817b      	strh	r3, [r7, #10]
 8002dca:	460b      	mov	r3, r1
 8002dcc:	813b      	strh	r3, [r7, #8]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002de0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002df0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 f8c2 	bl	8002f88 <I2C_WaitOnFlagUntilTimeout>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00d      	beq.n	8002e26 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e18:	d103      	bne.n	8002e22 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e20:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e0aa      	b.n	8002f7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e26:	897b      	ldrh	r3, [r7, #10]
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e38:	6a3a      	ldr	r2, [r7, #32]
 8002e3a:	4952      	ldr	r1, [pc, #328]	@ (8002f84 <I2C_RequestMemoryRead+0x1cc>)
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 f91d 	bl	800307c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e097      	b.n	8002f7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	617b      	str	r3, [r7, #20]
 8002e60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e64:	6a39      	ldr	r1, [r7, #32]
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 f9a8 	bl	80031bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00d      	beq.n	8002e8e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d107      	bne.n	8002e8a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e076      	b.n	8002f7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e8e:	88fb      	ldrh	r3, [r7, #6]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d105      	bne.n	8002ea0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e94:	893b      	ldrh	r3, [r7, #8]
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	611a      	str	r2, [r3, #16]
 8002e9e:	e021      	b.n	8002ee4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ea0:	893b      	ldrh	r3, [r7, #8]
 8002ea2:	0a1b      	lsrs	r3, r3, #8
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eb0:	6a39      	ldr	r1, [r7, #32]
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 f982 	bl	80031bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00d      	beq.n	8002eda <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d107      	bne.n	8002ed6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ed4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e050      	b.n	8002f7c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002eda:	893b      	ldrh	r3, [r7, #8]
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ee4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ee6:	6a39      	ldr	r1, [r7, #32]
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 f967 	bl	80031bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00d      	beq.n	8002f10 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef8:	2b04      	cmp	r3, #4
 8002efa:	d107      	bne.n	8002f0c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f0a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e035      	b.n	8002f7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f1e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 f82b 	bl	8002f88 <I2C_WaitOnFlagUntilTimeout>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00d      	beq.n	8002f54 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f46:	d103      	bne.n	8002f50 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f4e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e013      	b.n	8002f7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f54:	897b      	ldrh	r3, [r7, #10]
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f66:	6a3a      	ldr	r2, [r7, #32]
 8002f68:	4906      	ldr	r1, [pc, #24]	@ (8002f84 <I2C_RequestMemoryRead+0x1cc>)
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 f886 	bl	800307c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3718      	adds	r7, #24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	00010002 	.word	0x00010002

08002f88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	603b      	str	r3, [r7, #0]
 8002f94:	4613      	mov	r3, r2
 8002f96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f98:	e048      	b.n	800302c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa0:	d044      	beq.n	800302c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa2:	f7fe ff39 	bl	8001e18 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d302      	bcc.n	8002fb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d139      	bne.n	800302c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	0c1b      	lsrs	r3, r3, #16
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d10d      	bne.n	8002fde <I2C_WaitOnFlagUntilTimeout+0x56>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	43da      	mvns	r2, r3
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	bf0c      	ite	eq
 8002fd4:	2301      	moveq	r3, #1
 8002fd6:	2300      	movne	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	461a      	mov	r2, r3
 8002fdc:	e00c      	b.n	8002ff8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	43da      	mvns	r2, r3
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	bf0c      	ite	eq
 8002ff0:	2301      	moveq	r3, #1
 8002ff2:	2300      	movne	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	79fb      	ldrb	r3, [r7, #7]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d116      	bne.n	800302c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2220      	movs	r2, #32
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003018:	f043 0220 	orr.w	r2, r3, #32
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e023      	b.n	8003074 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	0c1b      	lsrs	r3, r3, #16
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b01      	cmp	r3, #1
 8003034:	d10d      	bne.n	8003052 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	43da      	mvns	r2, r3
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	4013      	ands	r3, r2
 8003042:	b29b      	uxth	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	bf0c      	ite	eq
 8003048:	2301      	moveq	r3, #1
 800304a:	2300      	movne	r3, #0
 800304c:	b2db      	uxtb	r3, r3
 800304e:	461a      	mov	r2, r3
 8003050:	e00c      	b.n	800306c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	43da      	mvns	r2, r3
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	4013      	ands	r3, r2
 800305e:	b29b      	uxth	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	bf0c      	ite	eq
 8003064:	2301      	moveq	r3, #1
 8003066:	2300      	movne	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	461a      	mov	r2, r3
 800306c:	79fb      	ldrb	r3, [r7, #7]
 800306e:	429a      	cmp	r2, r3
 8003070:	d093      	beq.n	8002f9a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
 8003088:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800308a:	e071      	b.n	8003170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003096:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800309a:	d123      	bne.n	80030e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2220      	movs	r2, #32
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d0:	f043 0204 	orr.w	r2, r3, #4
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e067      	b.n	80031b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ea:	d041      	beq.n	8003170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ec:	f7fe fe94 	bl	8001e18 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d302      	bcc.n	8003102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d136      	bne.n	8003170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	0c1b      	lsrs	r3, r3, #16
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b01      	cmp	r3, #1
 800310a:	d10c      	bne.n	8003126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	43da      	mvns	r2, r3
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	4013      	ands	r3, r2
 8003118:	b29b      	uxth	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	bf14      	ite	ne
 800311e:	2301      	movne	r3, #1
 8003120:	2300      	moveq	r3, #0
 8003122:	b2db      	uxtb	r3, r3
 8003124:	e00b      	b.n	800313e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	43da      	mvns	r2, r3
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	4013      	ands	r3, r2
 8003132:	b29b      	uxth	r3, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	bf14      	ite	ne
 8003138:	2301      	movne	r3, #1
 800313a:	2300      	moveq	r3, #0
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d016      	beq.n	8003170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315c:	f043 0220 	orr.w	r2, r3, #32
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e021      	b.n	80031b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	0c1b      	lsrs	r3, r3, #16
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b01      	cmp	r3, #1
 8003178:	d10c      	bne.n	8003194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	43da      	mvns	r2, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	4013      	ands	r3, r2
 8003186:	b29b      	uxth	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	bf14      	ite	ne
 800318c:	2301      	movne	r3, #1
 800318e:	2300      	moveq	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	e00b      	b.n	80031ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	43da      	mvns	r2, r3
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	4013      	ands	r3, r2
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	bf14      	ite	ne
 80031a6:	2301      	movne	r3, #1
 80031a8:	2300      	moveq	r3, #0
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f47f af6d 	bne.w	800308c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031c8:	e034      	b.n	8003234 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 f8e3 	bl	8003396 <I2C_IsAcknowledgeFailed>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e034      	b.n	8003244 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e0:	d028      	beq.n	8003234 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e2:	f7fe fe19 	bl	8001e18 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d302      	bcc.n	80031f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d11d      	bne.n	8003234 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003202:	2b80      	cmp	r3, #128	@ 0x80
 8003204:	d016      	beq.n	8003234 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2220      	movs	r2, #32
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003220:	f043 0220 	orr.w	r2, r3, #32
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e007      	b.n	8003244 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800323e:	2b80      	cmp	r3, #128	@ 0x80
 8003240:	d1c3      	bne.n	80031ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003258:	e034      	b.n	80032c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 f89b 	bl	8003396 <I2C_IsAcknowledgeFailed>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e034      	b.n	80032d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003270:	d028      	beq.n	80032c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003272:	f7fe fdd1 	bl	8001e18 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	429a      	cmp	r2, r3
 8003280:	d302      	bcc.n	8003288 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d11d      	bne.n	80032c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	f003 0304 	and.w	r3, r3, #4
 8003292:	2b04      	cmp	r3, #4
 8003294:	d016      	beq.n	80032c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b0:	f043 0220 	orr.w	r2, r3, #32
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e007      	b.n	80032d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	f003 0304 	and.w	r3, r3, #4
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	d1c3      	bne.n	800325a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032e8:	e049      	b.n	800337e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	f003 0310 	and.w	r3, r3, #16
 80032f4:	2b10      	cmp	r3, #16
 80032f6:	d119      	bne.n	800332c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f06f 0210 	mvn.w	r2, #16
 8003300:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2220      	movs	r2, #32
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e030      	b.n	800338e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332c:	f7fe fd74 	bl	8001e18 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	429a      	cmp	r2, r3
 800333a:	d302      	bcc.n	8003342 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d11d      	bne.n	800337e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800334c:	2b40      	cmp	r3, #64	@ 0x40
 800334e:	d016      	beq.n	800337e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2220      	movs	r2, #32
 800335a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336a:	f043 0220 	orr.w	r2, r3, #32
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e007      	b.n	800338e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003388:	2b40      	cmp	r3, #64	@ 0x40
 800338a:	d1ae      	bne.n	80032ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033ac:	d11b      	bne.n	80033e6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80033b6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2220      	movs	r2, #32
 80033c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d2:	f043 0204 	orr.w	r2, r3, #4
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e267      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d075      	beq.n	80034fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003412:	4b88      	ldr	r3, [pc, #544]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 030c 	and.w	r3, r3, #12
 800341a:	2b04      	cmp	r3, #4
 800341c:	d00c      	beq.n	8003438 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800341e:	4b85      	ldr	r3, [pc, #532]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003426:	2b08      	cmp	r3, #8
 8003428:	d112      	bne.n	8003450 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800342a:	4b82      	ldr	r3, [pc, #520]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003432:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003436:	d10b      	bne.n	8003450 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003438:	4b7e      	ldr	r3, [pc, #504]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d05b      	beq.n	80034fc <HAL_RCC_OscConfig+0x108>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d157      	bne.n	80034fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e242      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003458:	d106      	bne.n	8003468 <HAL_RCC_OscConfig+0x74>
 800345a:	4b76      	ldr	r3, [pc, #472]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a75      	ldr	r2, [pc, #468]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003460:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	e01d      	b.n	80034a4 <HAL_RCC_OscConfig+0xb0>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003470:	d10c      	bne.n	800348c <HAL_RCC_OscConfig+0x98>
 8003472:	4b70      	ldr	r3, [pc, #448]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a6f      	ldr	r2, [pc, #444]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003478:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800347c:	6013      	str	r3, [r2, #0]
 800347e:	4b6d      	ldr	r3, [pc, #436]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a6c      	ldr	r2, [pc, #432]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003484:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003488:	6013      	str	r3, [r2, #0]
 800348a:	e00b      	b.n	80034a4 <HAL_RCC_OscConfig+0xb0>
 800348c:	4b69      	ldr	r3, [pc, #420]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a68      	ldr	r2, [pc, #416]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003492:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	4b66      	ldr	r3, [pc, #408]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a65      	ldr	r2, [pc, #404]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 800349e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d013      	beq.n	80034d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ac:	f7fe fcb4 	bl	8001e18 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034b4:	f7fe fcb0 	bl	8001e18 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b64      	cmp	r3, #100	@ 0x64
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e207      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c6:	4b5b      	ldr	r3, [pc, #364]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCC_OscConfig+0xc0>
 80034d2:	e014      	b.n	80034fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d4:	f7fe fca0 	bl	8001e18 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034dc:	f7fe fc9c 	bl	8001e18 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b64      	cmp	r3, #100	@ 0x64
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e1f3      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ee:	4b51      	ldr	r3, [pc, #324]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1f0      	bne.n	80034dc <HAL_RCC_OscConfig+0xe8>
 80034fa:	e000      	b.n	80034fe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d063      	beq.n	80035d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800350a:	4b4a      	ldr	r3, [pc, #296]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 030c 	and.w	r3, r3, #12
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00b      	beq.n	800352e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003516:	4b47      	ldr	r3, [pc, #284]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800351e:	2b08      	cmp	r3, #8
 8003520:	d11c      	bne.n	800355c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003522:	4b44      	ldr	r3, [pc, #272]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d116      	bne.n	800355c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800352e:	4b41      	ldr	r3, [pc, #260]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d005      	beq.n	8003546 <HAL_RCC_OscConfig+0x152>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d001      	beq.n	8003546 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e1c7      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003546:	4b3b      	ldr	r3, [pc, #236]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	4937      	ldr	r1, [pc, #220]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003556:	4313      	orrs	r3, r2
 8003558:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800355a:	e03a      	b.n	80035d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d020      	beq.n	80035a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003564:	4b34      	ldr	r3, [pc, #208]	@ (8003638 <HAL_RCC_OscConfig+0x244>)
 8003566:	2201      	movs	r2, #1
 8003568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356a:	f7fe fc55 	bl	8001e18 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003572:	f7fe fc51 	bl	8001e18 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e1a8      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003584:	4b2b      	ldr	r3, [pc, #172]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0f0      	beq.n	8003572 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003590:	4b28      	ldr	r3, [pc, #160]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	4925      	ldr	r1, [pc, #148]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	600b      	str	r3, [r1, #0]
 80035a4:	e015      	b.n	80035d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035a6:	4b24      	ldr	r3, [pc, #144]	@ (8003638 <HAL_RCC_OscConfig+0x244>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ac:	f7fe fc34 	bl	8001e18 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035b4:	f7fe fc30 	bl	8001e18 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e187      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f0      	bne.n	80035b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d036      	beq.n	800364c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d016      	beq.n	8003614 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035e6:	4b15      	ldr	r3, [pc, #84]	@ (800363c <HAL_RCC_OscConfig+0x248>)
 80035e8:	2201      	movs	r2, #1
 80035ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ec:	f7fe fc14 	bl	8001e18 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035f4:	f7fe fc10 	bl	8001e18 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e167      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003606:	4b0b      	ldr	r3, [pc, #44]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003608:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0f0      	beq.n	80035f4 <HAL_RCC_OscConfig+0x200>
 8003612:	e01b      	b.n	800364c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003614:	4b09      	ldr	r3, [pc, #36]	@ (800363c <HAL_RCC_OscConfig+0x248>)
 8003616:	2200      	movs	r2, #0
 8003618:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800361a:	f7fe fbfd 	bl	8001e18 <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003620:	e00e      	b.n	8003640 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003622:	f7fe fbf9 	bl	8001e18 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d907      	bls.n	8003640 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e150      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
 8003634:	40023800 	.word	0x40023800
 8003638:	42470000 	.word	0x42470000
 800363c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003640:	4b88      	ldr	r3, [pc, #544]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003642:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1ea      	bne.n	8003622 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 8097 	beq.w	8003788 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800365a:	2300      	movs	r3, #0
 800365c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800365e:	4b81      	ldr	r3, [pc, #516]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10f      	bne.n	800368a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800366a:	2300      	movs	r3, #0
 800366c:	60bb      	str	r3, [r7, #8]
 800366e:	4b7d      	ldr	r3, [pc, #500]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003672:	4a7c      	ldr	r2, [pc, #496]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003674:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003678:	6413      	str	r3, [r2, #64]	@ 0x40
 800367a:	4b7a      	ldr	r3, [pc, #488]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003682:	60bb      	str	r3, [r7, #8]
 8003684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003686:	2301      	movs	r3, #1
 8003688:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368a:	4b77      	ldr	r3, [pc, #476]	@ (8003868 <HAL_RCC_OscConfig+0x474>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003692:	2b00      	cmp	r3, #0
 8003694:	d118      	bne.n	80036c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003696:	4b74      	ldr	r3, [pc, #464]	@ (8003868 <HAL_RCC_OscConfig+0x474>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a73      	ldr	r2, [pc, #460]	@ (8003868 <HAL_RCC_OscConfig+0x474>)
 800369c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036a2:	f7fe fbb9 	bl	8001e18 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036aa:	f7fe fbb5 	bl	8001e18 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e10c      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036bc:	4b6a      	ldr	r3, [pc, #424]	@ (8003868 <HAL_RCC_OscConfig+0x474>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f0      	beq.n	80036aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d106      	bne.n	80036de <HAL_RCC_OscConfig+0x2ea>
 80036d0:	4b64      	ldr	r3, [pc, #400]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 80036d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d4:	4a63      	ldr	r2, [pc, #396]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	6713      	str	r3, [r2, #112]	@ 0x70
 80036dc:	e01c      	b.n	8003718 <HAL_RCC_OscConfig+0x324>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2b05      	cmp	r3, #5
 80036e4:	d10c      	bne.n	8003700 <HAL_RCC_OscConfig+0x30c>
 80036e6:	4b5f      	ldr	r3, [pc, #380]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 80036e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ea:	4a5e      	ldr	r2, [pc, #376]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 80036ec:	f043 0304 	orr.w	r3, r3, #4
 80036f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80036f2:	4b5c      	ldr	r3, [pc, #368]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 80036f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f6:	4a5b      	ldr	r2, [pc, #364]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 80036f8:	f043 0301 	orr.w	r3, r3, #1
 80036fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80036fe:	e00b      	b.n	8003718 <HAL_RCC_OscConfig+0x324>
 8003700:	4b58      	ldr	r3, [pc, #352]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003704:	4a57      	ldr	r2, [pc, #348]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003706:	f023 0301 	bic.w	r3, r3, #1
 800370a:	6713      	str	r3, [r2, #112]	@ 0x70
 800370c:	4b55      	ldr	r3, [pc, #340]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 800370e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003710:	4a54      	ldr	r2, [pc, #336]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003712:	f023 0304 	bic.w	r3, r3, #4
 8003716:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d015      	beq.n	800374c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003720:	f7fe fb7a 	bl	8001e18 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003726:	e00a      	b.n	800373e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003728:	f7fe fb76 	bl	8001e18 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003736:	4293      	cmp	r3, r2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e0cb      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800373e:	4b49      	ldr	r3, [pc, #292]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0ee      	beq.n	8003728 <HAL_RCC_OscConfig+0x334>
 800374a:	e014      	b.n	8003776 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800374c:	f7fe fb64 	bl	8001e18 <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003752:	e00a      	b.n	800376a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003754:	f7fe fb60 	bl	8001e18 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003762:	4293      	cmp	r3, r2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e0b5      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800376a:	4b3e      	ldr	r3, [pc, #248]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 800376c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1ee      	bne.n	8003754 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003776:	7dfb      	ldrb	r3, [r7, #23]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d105      	bne.n	8003788 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800377c:	4b39      	ldr	r3, [pc, #228]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 800377e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003780:	4a38      	ldr	r2, [pc, #224]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003782:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003786:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 80a1 	beq.w	80038d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003792:	4b34      	ldr	r3, [pc, #208]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 030c 	and.w	r3, r3, #12
 800379a:	2b08      	cmp	r3, #8
 800379c:	d05c      	beq.n	8003858 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d141      	bne.n	800382a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a6:	4b31      	ldr	r3, [pc, #196]	@ (800386c <HAL_RCC_OscConfig+0x478>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ac:	f7fe fb34 	bl	8001e18 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b4:	f7fe fb30 	bl	8001e18 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e087      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c6:	4b27      	ldr	r3, [pc, #156]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f0      	bne.n	80037b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69da      	ldr	r2, [r3, #28]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e0:	019b      	lsls	r3, r3, #6
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e8:	085b      	lsrs	r3, r3, #1
 80037ea:	3b01      	subs	r3, #1
 80037ec:	041b      	lsls	r3, r3, #16
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f4:	061b      	lsls	r3, r3, #24
 80037f6:	491b      	ldr	r1, [pc, #108]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037fc:	4b1b      	ldr	r3, [pc, #108]	@ (800386c <HAL_RCC_OscConfig+0x478>)
 80037fe:	2201      	movs	r2, #1
 8003800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003802:	f7fe fb09 	bl	8001e18 <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003808:	e008      	b.n	800381c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800380a:	f7fe fb05 	bl	8001e18 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e05c      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800381c:	4b11      	ldr	r3, [pc, #68]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0f0      	beq.n	800380a <HAL_RCC_OscConfig+0x416>
 8003828:	e054      	b.n	80038d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800382a:	4b10      	ldr	r3, [pc, #64]	@ (800386c <HAL_RCC_OscConfig+0x478>)
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003830:	f7fe faf2 	bl	8001e18 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003838:	f7fe faee 	bl	8001e18 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e045      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800384a:	4b06      	ldr	r3, [pc, #24]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f0      	bne.n	8003838 <HAL_RCC_OscConfig+0x444>
 8003856:	e03d      	b.n	80038d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d107      	bne.n	8003870 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e038      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
 8003864:	40023800 	.word	0x40023800
 8003868:	40007000 	.word	0x40007000
 800386c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003870:	4b1b      	ldr	r3, [pc, #108]	@ (80038e0 <HAL_RCC_OscConfig+0x4ec>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d028      	beq.n	80038d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003888:	429a      	cmp	r2, r3
 800388a:	d121      	bne.n	80038d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003896:	429a      	cmp	r2, r3
 8003898:	d11a      	bne.n	80038d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80038a0:	4013      	ands	r3, r2
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d111      	bne.n	80038d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b6:	085b      	lsrs	r3, r3, #1
 80038b8:	3b01      	subs	r3, #1
 80038ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038bc:	429a      	cmp	r2, r3
 80038be:	d107      	bne.n	80038d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d001      	beq.n	80038d4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e000      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40023800 	.word	0x40023800

080038e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e0cc      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038f8:	4b68      	ldr	r3, [pc, #416]	@ (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d90c      	bls.n	8003920 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003906:	4b65      	ldr	r3, [pc, #404]	@ (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800390e:	4b63      	ldr	r3, [pc, #396]	@ (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	429a      	cmp	r2, r3
 800391a:	d001      	beq.n	8003920 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e0b8      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d020      	beq.n	800396e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b00      	cmp	r3, #0
 8003936:	d005      	beq.n	8003944 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003938:	4b59      	ldr	r3, [pc, #356]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	4a58      	ldr	r2, [pc, #352]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800393e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003942:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0308 	and.w	r3, r3, #8
 800394c:	2b00      	cmp	r3, #0
 800394e:	d005      	beq.n	800395c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003950:	4b53      	ldr	r3, [pc, #332]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	4a52      	ldr	r2, [pc, #328]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003956:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800395a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800395c:	4b50      	ldr	r3, [pc, #320]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	494d      	ldr	r1, [pc, #308]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	4313      	orrs	r3, r2
 800396c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d044      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d107      	bne.n	8003992 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003982:	4b47      	ldr	r3, [pc, #284]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d119      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e07f      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b02      	cmp	r3, #2
 8003998:	d003      	beq.n	80039a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800399e:	2b03      	cmp	r3, #3
 80039a0:	d107      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a2:	4b3f      	ldr	r3, [pc, #252]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d109      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e06f      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b2:	4b3b      	ldr	r3, [pc, #236]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e067      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039c2:	4b37      	ldr	r3, [pc, #220]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f023 0203 	bic.w	r2, r3, #3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	4934      	ldr	r1, [pc, #208]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039d4:	f7fe fa20 	bl	8001e18 <HAL_GetTick>
 80039d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039da:	e00a      	b.n	80039f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039dc:	f7fe fa1c 	bl	8001e18 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e04f      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f2:	4b2b      	ldr	r3, [pc, #172]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 020c 	and.w	r2, r3, #12
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d1eb      	bne.n	80039dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a04:	4b25      	ldr	r3, [pc, #148]	@ (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d20c      	bcs.n	8003a2c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a12:	4b22      	ldr	r3, [pc, #136]	@ (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1a:	4b20      	ldr	r3, [pc, #128]	@ (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0307 	and.w	r3, r3, #7
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d001      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e032      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d008      	beq.n	8003a4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a38:	4b19      	ldr	r3, [pc, #100]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	4916      	ldr	r1, [pc, #88]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0308 	and.w	r3, r3, #8
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d009      	beq.n	8003a6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a56:	4b12      	ldr	r3, [pc, #72]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	490e      	ldr	r1, [pc, #56]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a6a:	f000 f821 	bl	8003ab0 <HAL_RCC_GetSysClockFreq>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	091b      	lsrs	r3, r3, #4
 8003a76:	f003 030f 	and.w	r3, r3, #15
 8003a7a:	490a      	ldr	r1, [pc, #40]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a7c:	5ccb      	ldrb	r3, [r1, r3]
 8003a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a82:	4a09      	ldr	r2, [pc, #36]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003a86:	4b09      	ldr	r3, [pc, #36]	@ (8003aac <HAL_RCC_ClockConfig+0x1c8>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fe f980 	bl	8001d90 <HAL_InitTick>

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40023c00 	.word	0x40023c00
 8003aa0:	40023800 	.word	0x40023800
 8003aa4:	08009034 	.word	0x08009034
 8003aa8:	20000000 	.word	0x20000000
 8003aac:	20000004 	.word	0x20000004

08003ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ab4:	b090      	sub	sp, #64	@ 0x40
 8003ab6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ac8:	4b59      	ldr	r3, [pc, #356]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f003 030c 	and.w	r3, r3, #12
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d00d      	beq.n	8003af0 <HAL_RCC_GetSysClockFreq+0x40>
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	f200 80a1 	bhi.w	8003c1c <HAL_RCC_GetSysClockFreq+0x16c>
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x34>
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d003      	beq.n	8003aea <HAL_RCC_GetSysClockFreq+0x3a>
 8003ae2:	e09b      	b.n	8003c1c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ae4:	4b53      	ldr	r3, [pc, #332]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ae8:	e09b      	b.n	8003c22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aea:	4b53      	ldr	r3, [pc, #332]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0x188>)
 8003aec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003aee:	e098      	b.n	8003c22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003af0:	4b4f      	ldr	r3, [pc, #316]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003af8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003afa:	4b4d      	ldr	r3, [pc, #308]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d028      	beq.n	8003b58 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b06:	4b4a      	ldr	r3, [pc, #296]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	099b      	lsrs	r3, r3, #6
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	623b      	str	r3, [r7, #32]
 8003b10:	627a      	str	r2, [r7, #36]	@ 0x24
 8003b12:	6a3b      	ldr	r3, [r7, #32]
 8003b14:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b18:	2100      	movs	r1, #0
 8003b1a:	4b47      	ldr	r3, [pc, #284]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b1c:	fb03 f201 	mul.w	r2, r3, r1
 8003b20:	2300      	movs	r3, #0
 8003b22:	fb00 f303 	mul.w	r3, r0, r3
 8003b26:	4413      	add	r3, r2
 8003b28:	4a43      	ldr	r2, [pc, #268]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b2a:	fba0 1202 	umull	r1, r2, r0, r2
 8003b2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b30:	460a      	mov	r2, r1
 8003b32:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003b34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b36:	4413      	add	r3, r2
 8003b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	61bb      	str	r3, [r7, #24]
 8003b40:	61fa      	str	r2, [r7, #28]
 8003b42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003b4a:	f7fd f89d 	bl	8000c88 <__aeabi_uldivmod>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	460b      	mov	r3, r1
 8003b52:	4613      	mov	r3, r2
 8003b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b56:	e053      	b.n	8003c00 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b58:	4b35      	ldr	r3, [pc, #212]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	099b      	lsrs	r3, r3, #6
 8003b5e:	2200      	movs	r2, #0
 8003b60:	613b      	str	r3, [r7, #16]
 8003b62:	617a      	str	r2, [r7, #20]
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b6a:	f04f 0b00 	mov.w	fp, #0
 8003b6e:	4652      	mov	r2, sl
 8003b70:	465b      	mov	r3, fp
 8003b72:	f04f 0000 	mov.w	r0, #0
 8003b76:	f04f 0100 	mov.w	r1, #0
 8003b7a:	0159      	lsls	r1, r3, #5
 8003b7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b80:	0150      	lsls	r0, r2, #5
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
 8003b86:	ebb2 080a 	subs.w	r8, r2, sl
 8003b8a:	eb63 090b 	sbc.w	r9, r3, fp
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	f04f 0300 	mov.w	r3, #0
 8003b96:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b9a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b9e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003ba2:	ebb2 0408 	subs.w	r4, r2, r8
 8003ba6:	eb63 0509 	sbc.w	r5, r3, r9
 8003baa:	f04f 0200 	mov.w	r2, #0
 8003bae:	f04f 0300 	mov.w	r3, #0
 8003bb2:	00eb      	lsls	r3, r5, #3
 8003bb4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bb8:	00e2      	lsls	r2, r4, #3
 8003bba:	4614      	mov	r4, r2
 8003bbc:	461d      	mov	r5, r3
 8003bbe:	eb14 030a 	adds.w	r3, r4, sl
 8003bc2:	603b      	str	r3, [r7, #0]
 8003bc4:	eb45 030b 	adc.w	r3, r5, fp
 8003bc8:	607b      	str	r3, [r7, #4]
 8003bca:	f04f 0200 	mov.w	r2, #0
 8003bce:	f04f 0300 	mov.w	r3, #0
 8003bd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bd6:	4629      	mov	r1, r5
 8003bd8:	028b      	lsls	r3, r1, #10
 8003bda:	4621      	mov	r1, r4
 8003bdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003be0:	4621      	mov	r1, r4
 8003be2:	028a      	lsls	r2, r1, #10
 8003be4:	4610      	mov	r0, r2
 8003be6:	4619      	mov	r1, r3
 8003be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bea:	2200      	movs	r2, #0
 8003bec:	60bb      	str	r3, [r7, #8]
 8003bee:	60fa      	str	r2, [r7, #12]
 8003bf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bf4:	f7fd f848 	bl	8000c88 <__aeabi_uldivmod>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003c00:	4b0b      	ldr	r3, [pc, #44]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	0c1b      	lsrs	r3, r3, #16
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003c10:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c18:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c1a:	e002      	b.n	8003c22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c1c:	4b05      	ldr	r3, [pc, #20]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3740      	adds	r7, #64	@ 0x40
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c2e:	bf00      	nop
 8003c30:	40023800 	.word	0x40023800
 8003c34:	00f42400 	.word	0x00f42400
 8003c38:	017d7840 	.word	0x017d7840

08003c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c40:	4b03      	ldr	r3, [pc, #12]	@ (8003c50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c42:	681b      	ldr	r3, [r3, #0]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	20000000 	.word	0x20000000

08003c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c58:	f7ff fff0 	bl	8003c3c <HAL_RCC_GetHCLKFreq>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	4b05      	ldr	r3, [pc, #20]	@ (8003c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	0a9b      	lsrs	r3, r3, #10
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	4903      	ldr	r1, [pc, #12]	@ (8003c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c6a:	5ccb      	ldrb	r3, [r1, r3]
 8003c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	40023800 	.word	0x40023800
 8003c78:	08009044 	.word	0x08009044

08003c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c80:	f7ff ffdc 	bl	8003c3c <HAL_RCC_GetHCLKFreq>
 8003c84:	4602      	mov	r2, r0
 8003c86:	4b05      	ldr	r3, [pc, #20]	@ (8003c9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	0b5b      	lsrs	r3, r3, #13
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	4903      	ldr	r1, [pc, #12]	@ (8003ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c92:	5ccb      	ldrb	r3, [r1, r3]
 8003c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	08009044 	.word	0x08009044

08003ca4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e042      	b.n	8003d3c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d106      	bne.n	8003cd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7fd fec4 	bl	8001a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2224      	movs	r2, #36	@ 0x24
 8003cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68da      	ldr	r2, [r3, #12]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ce6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 f82b 	bl	8003d44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	691a      	ldr	r2, [r3, #16]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695a      	ldr	r2, [r3, #20]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68da      	ldr	r2, [r3, #12]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d48:	b0c0      	sub	sp, #256	@ 0x100
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d60:	68d9      	ldr	r1, [r3, #12]
 8003d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	ea40 0301 	orr.w	r3, r0, r1
 8003d6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	431a      	orrs	r2, r3
 8003d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003d9c:	f021 010c 	bic.w	r1, r1, #12
 8003da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003daa:	430b      	orrs	r3, r1
 8003dac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dbe:	6999      	ldr	r1, [r3, #24]
 8003dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	ea40 0301 	orr.w	r3, r0, r1
 8003dca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	4b8f      	ldr	r3, [pc, #572]	@ (8004010 <UART_SetConfig+0x2cc>)
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d005      	beq.n	8003de4 <UART_SetConfig+0xa0>
 8003dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	4b8d      	ldr	r3, [pc, #564]	@ (8004014 <UART_SetConfig+0x2d0>)
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d104      	bne.n	8003dee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003de4:	f7ff ff4a 	bl	8003c7c <HAL_RCC_GetPCLK2Freq>
 8003de8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003dec:	e003      	b.n	8003df6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dee:	f7ff ff31 	bl	8003c54 <HAL_RCC_GetPCLK1Freq>
 8003df2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e00:	f040 810c 	bne.w	800401c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e0e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e16:	4622      	mov	r2, r4
 8003e18:	462b      	mov	r3, r5
 8003e1a:	1891      	adds	r1, r2, r2
 8003e1c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e1e:	415b      	adcs	r3, r3
 8003e20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e26:	4621      	mov	r1, r4
 8003e28:	eb12 0801 	adds.w	r8, r2, r1
 8003e2c:	4629      	mov	r1, r5
 8003e2e:	eb43 0901 	adc.w	r9, r3, r1
 8003e32:	f04f 0200 	mov.w	r2, #0
 8003e36:	f04f 0300 	mov.w	r3, #0
 8003e3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e46:	4690      	mov	r8, r2
 8003e48:	4699      	mov	r9, r3
 8003e4a:	4623      	mov	r3, r4
 8003e4c:	eb18 0303 	adds.w	r3, r8, r3
 8003e50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e54:	462b      	mov	r3, r5
 8003e56:	eb49 0303 	adc.w	r3, r9, r3
 8003e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e6a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e72:	460b      	mov	r3, r1
 8003e74:	18db      	adds	r3, r3, r3
 8003e76:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e78:	4613      	mov	r3, r2
 8003e7a:	eb42 0303 	adc.w	r3, r2, r3
 8003e7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003e84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003e88:	f7fc fefe 	bl	8000c88 <__aeabi_uldivmod>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4b61      	ldr	r3, [pc, #388]	@ (8004018 <UART_SetConfig+0x2d4>)
 8003e92:	fba3 2302 	umull	r2, r3, r3, r2
 8003e96:	095b      	lsrs	r3, r3, #5
 8003e98:	011c      	lsls	r4, r3, #4
 8003e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ea4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003ea8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003eac:	4642      	mov	r2, r8
 8003eae:	464b      	mov	r3, r9
 8003eb0:	1891      	adds	r1, r2, r2
 8003eb2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003eb4:	415b      	adcs	r3, r3
 8003eb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003eb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ebc:	4641      	mov	r1, r8
 8003ebe:	eb12 0a01 	adds.w	sl, r2, r1
 8003ec2:	4649      	mov	r1, r9
 8003ec4:	eb43 0b01 	adc.w	fp, r3, r1
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	f04f 0300 	mov.w	r3, #0
 8003ed0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ed4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ed8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003edc:	4692      	mov	sl, r2
 8003ede:	469b      	mov	fp, r3
 8003ee0:	4643      	mov	r3, r8
 8003ee2:	eb1a 0303 	adds.w	r3, sl, r3
 8003ee6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003eea:	464b      	mov	r3, r9
 8003eec:	eb4b 0303 	adc.w	r3, fp, r3
 8003ef0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f00:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	18db      	adds	r3, r3, r3
 8003f0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f0e:	4613      	mov	r3, r2
 8003f10:	eb42 0303 	adc.w	r3, r2, r3
 8003f14:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003f1e:	f7fc feb3 	bl	8000c88 <__aeabi_uldivmod>
 8003f22:	4602      	mov	r2, r0
 8003f24:	460b      	mov	r3, r1
 8003f26:	4611      	mov	r1, r2
 8003f28:	4b3b      	ldr	r3, [pc, #236]	@ (8004018 <UART_SetConfig+0x2d4>)
 8003f2a:	fba3 2301 	umull	r2, r3, r3, r1
 8003f2e:	095b      	lsrs	r3, r3, #5
 8003f30:	2264      	movs	r2, #100	@ 0x64
 8003f32:	fb02 f303 	mul.w	r3, r2, r3
 8003f36:	1acb      	subs	r3, r1, r3
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003f3e:	4b36      	ldr	r3, [pc, #216]	@ (8004018 <UART_SetConfig+0x2d4>)
 8003f40:	fba3 2302 	umull	r2, r3, r3, r2
 8003f44:	095b      	lsrs	r3, r3, #5
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f4c:	441c      	add	r4, r3
 8003f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f52:	2200      	movs	r2, #0
 8003f54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f58:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f60:	4642      	mov	r2, r8
 8003f62:	464b      	mov	r3, r9
 8003f64:	1891      	adds	r1, r2, r2
 8003f66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f68:	415b      	adcs	r3, r3
 8003f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003f70:	4641      	mov	r1, r8
 8003f72:	1851      	adds	r1, r2, r1
 8003f74:	6339      	str	r1, [r7, #48]	@ 0x30
 8003f76:	4649      	mov	r1, r9
 8003f78:	414b      	adcs	r3, r1
 8003f7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	f04f 0300 	mov.w	r3, #0
 8003f84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003f88:	4659      	mov	r1, fp
 8003f8a:	00cb      	lsls	r3, r1, #3
 8003f8c:	4651      	mov	r1, sl
 8003f8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f92:	4651      	mov	r1, sl
 8003f94:	00ca      	lsls	r2, r1, #3
 8003f96:	4610      	mov	r0, r2
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	4642      	mov	r2, r8
 8003f9e:	189b      	adds	r3, r3, r2
 8003fa0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fa4:	464b      	mov	r3, r9
 8003fa6:	460a      	mov	r2, r1
 8003fa8:	eb42 0303 	adc.w	r3, r2, r3
 8003fac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003fbc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003fc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	18db      	adds	r3, r3, r3
 8003fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fca:	4613      	mov	r3, r2
 8003fcc:	eb42 0303 	adc.w	r3, r2, r3
 8003fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003fd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003fda:	f7fc fe55 	bl	8000c88 <__aeabi_uldivmod>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8004018 <UART_SetConfig+0x2d4>)
 8003fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fe8:	095b      	lsrs	r3, r3, #5
 8003fea:	2164      	movs	r1, #100	@ 0x64
 8003fec:	fb01 f303 	mul.w	r3, r1, r3
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	3332      	adds	r3, #50	@ 0x32
 8003ff6:	4a08      	ldr	r2, [pc, #32]	@ (8004018 <UART_SetConfig+0x2d4>)
 8003ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffc:	095b      	lsrs	r3, r3, #5
 8003ffe:	f003 0207 	and.w	r2, r3, #7
 8004002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4422      	add	r2, r4
 800400a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800400c:	e106      	b.n	800421c <UART_SetConfig+0x4d8>
 800400e:	bf00      	nop
 8004010:	40011000 	.word	0x40011000
 8004014:	40011400 	.word	0x40011400
 8004018:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800401c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004020:	2200      	movs	r2, #0
 8004022:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004026:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800402a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800402e:	4642      	mov	r2, r8
 8004030:	464b      	mov	r3, r9
 8004032:	1891      	adds	r1, r2, r2
 8004034:	6239      	str	r1, [r7, #32]
 8004036:	415b      	adcs	r3, r3
 8004038:	627b      	str	r3, [r7, #36]	@ 0x24
 800403a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800403e:	4641      	mov	r1, r8
 8004040:	1854      	adds	r4, r2, r1
 8004042:	4649      	mov	r1, r9
 8004044:	eb43 0501 	adc.w	r5, r3, r1
 8004048:	f04f 0200 	mov.w	r2, #0
 800404c:	f04f 0300 	mov.w	r3, #0
 8004050:	00eb      	lsls	r3, r5, #3
 8004052:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004056:	00e2      	lsls	r2, r4, #3
 8004058:	4614      	mov	r4, r2
 800405a:	461d      	mov	r5, r3
 800405c:	4643      	mov	r3, r8
 800405e:	18e3      	adds	r3, r4, r3
 8004060:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004064:	464b      	mov	r3, r9
 8004066:	eb45 0303 	adc.w	r3, r5, r3
 800406a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800406e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800407a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	f04f 0300 	mov.w	r3, #0
 8004086:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800408a:	4629      	mov	r1, r5
 800408c:	008b      	lsls	r3, r1, #2
 800408e:	4621      	mov	r1, r4
 8004090:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004094:	4621      	mov	r1, r4
 8004096:	008a      	lsls	r2, r1, #2
 8004098:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800409c:	f7fc fdf4 	bl	8000c88 <__aeabi_uldivmod>
 80040a0:	4602      	mov	r2, r0
 80040a2:	460b      	mov	r3, r1
 80040a4:	4b60      	ldr	r3, [pc, #384]	@ (8004228 <UART_SetConfig+0x4e4>)
 80040a6:	fba3 2302 	umull	r2, r3, r3, r2
 80040aa:	095b      	lsrs	r3, r3, #5
 80040ac:	011c      	lsls	r4, r3, #4
 80040ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040b2:	2200      	movs	r2, #0
 80040b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80040bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80040c0:	4642      	mov	r2, r8
 80040c2:	464b      	mov	r3, r9
 80040c4:	1891      	adds	r1, r2, r2
 80040c6:	61b9      	str	r1, [r7, #24]
 80040c8:	415b      	adcs	r3, r3
 80040ca:	61fb      	str	r3, [r7, #28]
 80040cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040d0:	4641      	mov	r1, r8
 80040d2:	1851      	adds	r1, r2, r1
 80040d4:	6139      	str	r1, [r7, #16]
 80040d6:	4649      	mov	r1, r9
 80040d8:	414b      	adcs	r3, r1
 80040da:	617b      	str	r3, [r7, #20]
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	f04f 0300 	mov.w	r3, #0
 80040e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040e8:	4659      	mov	r1, fp
 80040ea:	00cb      	lsls	r3, r1, #3
 80040ec:	4651      	mov	r1, sl
 80040ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040f2:	4651      	mov	r1, sl
 80040f4:	00ca      	lsls	r2, r1, #3
 80040f6:	4610      	mov	r0, r2
 80040f8:	4619      	mov	r1, r3
 80040fa:	4603      	mov	r3, r0
 80040fc:	4642      	mov	r2, r8
 80040fe:	189b      	adds	r3, r3, r2
 8004100:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004104:	464b      	mov	r3, r9
 8004106:	460a      	mov	r2, r1
 8004108:	eb42 0303 	adc.w	r3, r2, r3
 800410c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	67bb      	str	r3, [r7, #120]	@ 0x78
 800411a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800411c:	f04f 0200 	mov.w	r2, #0
 8004120:	f04f 0300 	mov.w	r3, #0
 8004124:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004128:	4649      	mov	r1, r9
 800412a:	008b      	lsls	r3, r1, #2
 800412c:	4641      	mov	r1, r8
 800412e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004132:	4641      	mov	r1, r8
 8004134:	008a      	lsls	r2, r1, #2
 8004136:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800413a:	f7fc fda5 	bl	8000c88 <__aeabi_uldivmod>
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	4611      	mov	r1, r2
 8004144:	4b38      	ldr	r3, [pc, #224]	@ (8004228 <UART_SetConfig+0x4e4>)
 8004146:	fba3 2301 	umull	r2, r3, r3, r1
 800414a:	095b      	lsrs	r3, r3, #5
 800414c:	2264      	movs	r2, #100	@ 0x64
 800414e:	fb02 f303 	mul.w	r3, r2, r3
 8004152:	1acb      	subs	r3, r1, r3
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	3332      	adds	r3, #50	@ 0x32
 8004158:	4a33      	ldr	r2, [pc, #204]	@ (8004228 <UART_SetConfig+0x4e4>)
 800415a:	fba2 2303 	umull	r2, r3, r2, r3
 800415e:	095b      	lsrs	r3, r3, #5
 8004160:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004164:	441c      	add	r4, r3
 8004166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800416a:	2200      	movs	r2, #0
 800416c:	673b      	str	r3, [r7, #112]	@ 0x70
 800416e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004170:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004174:	4642      	mov	r2, r8
 8004176:	464b      	mov	r3, r9
 8004178:	1891      	adds	r1, r2, r2
 800417a:	60b9      	str	r1, [r7, #8]
 800417c:	415b      	adcs	r3, r3
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004184:	4641      	mov	r1, r8
 8004186:	1851      	adds	r1, r2, r1
 8004188:	6039      	str	r1, [r7, #0]
 800418a:	4649      	mov	r1, r9
 800418c:	414b      	adcs	r3, r1
 800418e:	607b      	str	r3, [r7, #4]
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	f04f 0300 	mov.w	r3, #0
 8004198:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800419c:	4659      	mov	r1, fp
 800419e:	00cb      	lsls	r3, r1, #3
 80041a0:	4651      	mov	r1, sl
 80041a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041a6:	4651      	mov	r1, sl
 80041a8:	00ca      	lsls	r2, r1, #3
 80041aa:	4610      	mov	r0, r2
 80041ac:	4619      	mov	r1, r3
 80041ae:	4603      	mov	r3, r0
 80041b0:	4642      	mov	r2, r8
 80041b2:	189b      	adds	r3, r3, r2
 80041b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041b6:	464b      	mov	r3, r9
 80041b8:	460a      	mov	r2, r1
 80041ba:	eb42 0303 	adc.w	r3, r2, r3
 80041be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80041ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80041d8:	4649      	mov	r1, r9
 80041da:	008b      	lsls	r3, r1, #2
 80041dc:	4641      	mov	r1, r8
 80041de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041e2:	4641      	mov	r1, r8
 80041e4:	008a      	lsls	r2, r1, #2
 80041e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80041ea:	f7fc fd4d 	bl	8000c88 <__aeabi_uldivmod>
 80041ee:	4602      	mov	r2, r0
 80041f0:	460b      	mov	r3, r1
 80041f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004228 <UART_SetConfig+0x4e4>)
 80041f4:	fba3 1302 	umull	r1, r3, r3, r2
 80041f8:	095b      	lsrs	r3, r3, #5
 80041fa:	2164      	movs	r1, #100	@ 0x64
 80041fc:	fb01 f303 	mul.w	r3, r1, r3
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	3332      	adds	r3, #50	@ 0x32
 8004206:	4a08      	ldr	r2, [pc, #32]	@ (8004228 <UART_SetConfig+0x4e4>)
 8004208:	fba2 2303 	umull	r2, r3, r2, r3
 800420c:	095b      	lsrs	r3, r3, #5
 800420e:	f003 020f 	and.w	r2, r3, #15
 8004212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4422      	add	r2, r4
 800421a:	609a      	str	r2, [r3, #8]
}
 800421c:	bf00      	nop
 800421e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004222:	46bd      	mov	sp, r7
 8004224:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004228:	51eb851f 	.word	0x51eb851f

0800422c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8004230:	bf00      	nop
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
	...

0800423c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af04      	add	r7, sp, #16
 8004242:	4603      	mov	r3, r0
 8004244:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004246:	f04f 33ff 	mov.w	r3, #4294967295
 800424a:	9302      	str	r3, [sp, #8]
 800424c:	2301      	movs	r3, #1
 800424e:	9301      	str	r3, [sp, #4]
 8004250:	1dfb      	adds	r3, r7, #7
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	2301      	movs	r3, #1
 8004256:	2200      	movs	r2, #0
 8004258:	2178      	movs	r1, #120	@ 0x78
 800425a:	4803      	ldr	r0, [pc, #12]	@ (8004268 <ssd1306_WriteCommand+0x2c>)
 800425c:	f7fe f9ea 	bl	8002634 <HAL_I2C_Mem_Write>
}
 8004260:	bf00      	nop
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	2000022c 	.word	0x2000022c

0800426c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af04      	add	r7, sp, #16
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	b29b      	uxth	r3, r3
 800427a:	f04f 32ff 	mov.w	r2, #4294967295
 800427e:	9202      	str	r2, [sp, #8]
 8004280:	9301      	str	r3, [sp, #4]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	2301      	movs	r3, #1
 8004288:	2240      	movs	r2, #64	@ 0x40
 800428a:	2178      	movs	r1, #120	@ 0x78
 800428c:	4803      	ldr	r0, [pc, #12]	@ (800429c <ssd1306_WriteData+0x30>)
 800428e:	f7fe f9d1 	bl	8002634 <HAL_I2C_Mem_Write>
}
 8004292:	bf00      	nop
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	2000022c 	.word	0x2000022c

080042a0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80042a4:	f7ff ffc2 	bl	800422c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80042a8:	2064      	movs	r0, #100	@ 0x64
 80042aa:	f7fd fdc1 	bl	8001e30 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80042ae:	2000      	movs	r0, #0
 80042b0:	f000 fa30 	bl	8004714 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80042b4:	2020      	movs	r0, #32
 80042b6:	f7ff ffc1 	bl	800423c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80042ba:	2000      	movs	r0, #0
 80042bc:	f7ff ffbe 	bl	800423c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80042c0:	20b0      	movs	r0, #176	@ 0xb0
 80042c2:	f7ff ffbb 	bl	800423c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80042c6:	20c8      	movs	r0, #200	@ 0xc8
 80042c8:	f7ff ffb8 	bl	800423c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80042cc:	2000      	movs	r0, #0
 80042ce:	f7ff ffb5 	bl	800423c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80042d2:	2010      	movs	r0, #16
 80042d4:	f7ff ffb2 	bl	800423c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80042d8:	2040      	movs	r0, #64	@ 0x40
 80042da:	f7ff ffaf 	bl	800423c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80042de:	20ff      	movs	r0, #255	@ 0xff
 80042e0:	f000 fa05 	bl	80046ee <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80042e4:	20a1      	movs	r0, #161	@ 0xa1
 80042e6:	f7ff ffa9 	bl	800423c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80042ea:	20a6      	movs	r0, #166	@ 0xa6
 80042ec:	f7ff ffa6 	bl	800423c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80042f0:	20a8      	movs	r0, #168	@ 0xa8
 80042f2:	f7ff ffa3 	bl	800423c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80042f6:	203f      	movs	r0, #63	@ 0x3f
 80042f8:	f7ff ffa0 	bl	800423c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80042fc:	20a4      	movs	r0, #164	@ 0xa4
 80042fe:	f7ff ff9d 	bl	800423c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8004302:	20d3      	movs	r0, #211	@ 0xd3
 8004304:	f7ff ff9a 	bl	800423c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8004308:	2000      	movs	r0, #0
 800430a:	f7ff ff97 	bl	800423c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800430e:	20d5      	movs	r0, #213	@ 0xd5
 8004310:	f7ff ff94 	bl	800423c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8004314:	20f0      	movs	r0, #240	@ 0xf0
 8004316:	f7ff ff91 	bl	800423c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800431a:	20d9      	movs	r0, #217	@ 0xd9
 800431c:	f7ff ff8e 	bl	800423c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8004320:	2022      	movs	r0, #34	@ 0x22
 8004322:	f7ff ff8b 	bl	800423c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8004326:	20da      	movs	r0, #218	@ 0xda
 8004328:	f7ff ff88 	bl	800423c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800432c:	2012      	movs	r0, #18
 800432e:	f7ff ff85 	bl	800423c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8004332:	20db      	movs	r0, #219	@ 0xdb
 8004334:	f7ff ff82 	bl	800423c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8004338:	2020      	movs	r0, #32
 800433a:	f7ff ff7f 	bl	800423c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800433e:	208d      	movs	r0, #141	@ 0x8d
 8004340:	f7ff ff7c 	bl	800423c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8004344:	2014      	movs	r0, #20
 8004346:	f7ff ff79 	bl	800423c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800434a:	2001      	movs	r0, #1
 800434c:	f000 f9e2 	bl	8004714 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8004350:	2000      	movs	r0, #0
 8004352:	f000 f80f 	bl	8004374 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8004356:	f000 f825 	bl	80043a4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800435a:	4b05      	ldr	r3, [pc, #20]	@ (8004370 <ssd1306_Init+0xd0>)
 800435c:	2200      	movs	r2, #0
 800435e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8004360:	4b03      	ldr	r3, [pc, #12]	@ (8004370 <ssd1306_Init+0xd0>)
 8004362:	2200      	movs	r2, #0
 8004364:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8004366:	4b02      	ldr	r3, [pc, #8]	@ (8004370 <ssd1306_Init+0xd0>)
 8004368:	2201      	movs	r2, #1
 800436a:	711a      	strb	r2, [r3, #4]
}
 800436c:	bf00      	nop
 800436e:	bd80      	pop	{r7, pc}
 8004370:	200006d8 	.word	0x200006d8

08004374 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	4603      	mov	r3, r0
 800437c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800437e:	79fb      	ldrb	r3, [r7, #7]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d101      	bne.n	8004388 <ssd1306_Fill+0x14>
 8004384:	2300      	movs	r3, #0
 8004386:	e000      	b.n	800438a <ssd1306_Fill+0x16>
 8004388:	23ff      	movs	r3, #255	@ 0xff
 800438a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800438e:	4619      	mov	r1, r3
 8004390:	4803      	ldr	r0, [pc, #12]	@ (80043a0 <ssd1306_Fill+0x2c>)
 8004392:	f001 f988 	bl	80056a6 <memset>
}
 8004396:	bf00      	nop
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	200002d8 	.word	0x200002d8

080043a4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80043aa:	2300      	movs	r3, #0
 80043ac:	71fb      	strb	r3, [r7, #7]
 80043ae:	e016      	b.n	80043de <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80043b0:	79fb      	ldrb	r3, [r7, #7]
 80043b2:	3b50      	subs	r3, #80	@ 0x50
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff ff40 	bl	800423c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80043bc:	2000      	movs	r0, #0
 80043be:	f7ff ff3d 	bl	800423c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80043c2:	2010      	movs	r0, #16
 80043c4:	f7ff ff3a 	bl	800423c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80043c8:	79fb      	ldrb	r3, [r7, #7]
 80043ca:	01db      	lsls	r3, r3, #7
 80043cc:	4a08      	ldr	r2, [pc, #32]	@ (80043f0 <ssd1306_UpdateScreen+0x4c>)
 80043ce:	4413      	add	r3, r2
 80043d0:	2180      	movs	r1, #128	@ 0x80
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7ff ff4a 	bl	800426c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80043d8:	79fb      	ldrb	r3, [r7, #7]
 80043da:	3301      	adds	r3, #1
 80043dc:	71fb      	strb	r3, [r7, #7]
 80043de:	79fb      	ldrb	r3, [r7, #7]
 80043e0:	2b07      	cmp	r3, #7
 80043e2:	d9e5      	bls.n	80043b0 <ssd1306_UpdateScreen+0xc>
    }
}
 80043e4:	bf00      	nop
 80043e6:	bf00      	nop
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	200002d8 	.word	0x200002d8

080043f4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	4603      	mov	r3, r0
 80043fc:	71fb      	strb	r3, [r7, #7]
 80043fe:	460b      	mov	r3, r1
 8004400:	71bb      	strb	r3, [r7, #6]
 8004402:	4613      	mov	r3, r2
 8004404:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800440a:	2b00      	cmp	r3, #0
 800440c:	db3d      	blt.n	800448a <ssd1306_DrawPixel+0x96>
 800440e:	79bb      	ldrb	r3, [r7, #6]
 8004410:	2b3f      	cmp	r3, #63	@ 0x3f
 8004412:	d83a      	bhi.n	800448a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8004414:	797b      	ldrb	r3, [r7, #5]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d11a      	bne.n	8004450 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800441a:	79fa      	ldrb	r2, [r7, #7]
 800441c:	79bb      	ldrb	r3, [r7, #6]
 800441e:	08db      	lsrs	r3, r3, #3
 8004420:	b2d8      	uxtb	r0, r3
 8004422:	4603      	mov	r3, r0
 8004424:	01db      	lsls	r3, r3, #7
 8004426:	4413      	add	r3, r2
 8004428:	4a1b      	ldr	r2, [pc, #108]	@ (8004498 <ssd1306_DrawPixel+0xa4>)
 800442a:	5cd3      	ldrb	r3, [r2, r3]
 800442c:	b25a      	sxtb	r2, r3
 800442e:	79bb      	ldrb	r3, [r7, #6]
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	2101      	movs	r1, #1
 8004436:	fa01 f303 	lsl.w	r3, r1, r3
 800443a:	b25b      	sxtb	r3, r3
 800443c:	4313      	orrs	r3, r2
 800443e:	b259      	sxtb	r1, r3
 8004440:	79fa      	ldrb	r2, [r7, #7]
 8004442:	4603      	mov	r3, r0
 8004444:	01db      	lsls	r3, r3, #7
 8004446:	4413      	add	r3, r2
 8004448:	b2c9      	uxtb	r1, r1
 800444a:	4a13      	ldr	r2, [pc, #76]	@ (8004498 <ssd1306_DrawPixel+0xa4>)
 800444c:	54d1      	strb	r1, [r2, r3]
 800444e:	e01d      	b.n	800448c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004450:	79fa      	ldrb	r2, [r7, #7]
 8004452:	79bb      	ldrb	r3, [r7, #6]
 8004454:	08db      	lsrs	r3, r3, #3
 8004456:	b2d8      	uxtb	r0, r3
 8004458:	4603      	mov	r3, r0
 800445a:	01db      	lsls	r3, r3, #7
 800445c:	4413      	add	r3, r2
 800445e:	4a0e      	ldr	r2, [pc, #56]	@ (8004498 <ssd1306_DrawPixel+0xa4>)
 8004460:	5cd3      	ldrb	r3, [r2, r3]
 8004462:	b25a      	sxtb	r2, r3
 8004464:	79bb      	ldrb	r3, [r7, #6]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	2101      	movs	r1, #1
 800446c:	fa01 f303 	lsl.w	r3, r1, r3
 8004470:	b25b      	sxtb	r3, r3
 8004472:	43db      	mvns	r3, r3
 8004474:	b25b      	sxtb	r3, r3
 8004476:	4013      	ands	r3, r2
 8004478:	b259      	sxtb	r1, r3
 800447a:	79fa      	ldrb	r2, [r7, #7]
 800447c:	4603      	mov	r3, r0
 800447e:	01db      	lsls	r3, r3, #7
 8004480:	4413      	add	r3, r2
 8004482:	b2c9      	uxtb	r1, r1
 8004484:	4a04      	ldr	r2, [pc, #16]	@ (8004498 <ssd1306_DrawPixel+0xa4>)
 8004486:	54d1      	strb	r1, [r2, r3]
 8004488:	e000      	b.n	800448c <ssd1306_DrawPixel+0x98>
        return;
 800448a:	bf00      	nop
    }
}
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	200002d8 	.word	0x200002d8

0800449c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800449c:	b590      	push	{r4, r7, lr}
 800449e:	b089      	sub	sp, #36	@ 0x24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	4604      	mov	r4, r0
 80044a4:	4638      	mov	r0, r7
 80044a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80044aa:	4623      	mov	r3, r4
 80044ac:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
 80044b0:	2b1f      	cmp	r3, #31
 80044b2:	d902      	bls.n	80044ba <ssd1306_WriteChar+0x1e>
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
 80044b6:	2b7e      	cmp	r3, #126	@ 0x7e
 80044b8:	d901      	bls.n	80044be <ssd1306_WriteChar+0x22>
        return 0;
 80044ba:	2300      	movs	r3, #0
 80044bc:	e077      	b.n	80045ae <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80044be:	4b3e      	ldr	r3, [pc, #248]	@ (80045b8 <ssd1306_WriteChar+0x11c>)
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	461a      	mov	r2, r3
 80044c4:	783b      	ldrb	r3, [r7, #0]
 80044c6:	4413      	add	r3, r2
 80044c8:	2b80      	cmp	r3, #128	@ 0x80
 80044ca:	dc06      	bgt.n	80044da <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80044cc:	4b3a      	ldr	r3, [pc, #232]	@ (80045b8 <ssd1306_WriteChar+0x11c>)
 80044ce:	885b      	ldrh	r3, [r3, #2]
 80044d0:	461a      	mov	r2, r3
 80044d2:	787b      	ldrb	r3, [r7, #1]
 80044d4:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80044d6:	2b40      	cmp	r3, #64	@ 0x40
 80044d8:	dd01      	ble.n	80044de <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 80044da:	2300      	movs	r3, #0
 80044dc:	e067      	b.n	80045ae <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
 80044e2:	e04e      	b.n	8004582 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	7bfb      	ldrb	r3, [r7, #15]
 80044e8:	3b20      	subs	r3, #32
 80044ea:	7879      	ldrb	r1, [r7, #1]
 80044ec:	fb01 f303 	mul.w	r3, r1, r3
 80044f0:	4619      	mov	r1, r3
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	440b      	add	r3, r1
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	4413      	add	r3, r2
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 80044fe:	2300      	movs	r3, #0
 8004500:	61bb      	str	r3, [r7, #24]
 8004502:	e036      	b.n	8004572 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	fa02 f303 	lsl.w	r3, r2, r3
 800450c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d013      	beq.n	800453c <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8004514:	4b28      	ldr	r3, [pc, #160]	@ (80045b8 <ssd1306_WriteChar+0x11c>)
 8004516:	881b      	ldrh	r3, [r3, #0]
 8004518:	b2da      	uxtb	r2, r3
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	b2db      	uxtb	r3, r3
 800451e:	4413      	add	r3, r2
 8004520:	b2d8      	uxtb	r0, r3
 8004522:	4b25      	ldr	r3, [pc, #148]	@ (80045b8 <ssd1306_WriteChar+0x11c>)
 8004524:	885b      	ldrh	r3, [r3, #2]
 8004526:	b2da      	uxtb	r2, r3
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	b2db      	uxtb	r3, r3
 800452c:	4413      	add	r3, r2
 800452e:	b2db      	uxtb	r3, r3
 8004530:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8004534:	4619      	mov	r1, r3
 8004536:	f7ff ff5d 	bl	80043f4 <ssd1306_DrawPixel>
 800453a:	e017      	b.n	800456c <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800453c:	4b1e      	ldr	r3, [pc, #120]	@ (80045b8 <ssd1306_WriteChar+0x11c>)
 800453e:	881b      	ldrh	r3, [r3, #0]
 8004540:	b2da      	uxtb	r2, r3
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	b2db      	uxtb	r3, r3
 8004546:	4413      	add	r3, r2
 8004548:	b2d8      	uxtb	r0, r3
 800454a:	4b1b      	ldr	r3, [pc, #108]	@ (80045b8 <ssd1306_WriteChar+0x11c>)
 800454c:	885b      	ldrh	r3, [r3, #2]
 800454e:	b2da      	uxtb	r2, r3
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	b2db      	uxtb	r3, r3
 8004554:	4413      	add	r3, r2
 8004556:	b2d9      	uxtb	r1, r3
 8004558:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800455c:	2b00      	cmp	r3, #0
 800455e:	bf0c      	ite	eq
 8004560:	2301      	moveq	r3, #1
 8004562:	2300      	movne	r3, #0
 8004564:	b2db      	uxtb	r3, r3
 8004566:	461a      	mov	r2, r3
 8004568:	f7ff ff44 	bl	80043f4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	3301      	adds	r3, #1
 8004570:	61bb      	str	r3, [r7, #24]
 8004572:	783b      	ldrb	r3, [r7, #0]
 8004574:	461a      	mov	r2, r3
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	4293      	cmp	r3, r2
 800457a:	d3c3      	bcc.n	8004504 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	3301      	adds	r3, #1
 8004580:	61fb      	str	r3, [r7, #28]
 8004582:	787b      	ldrb	r3, [r7, #1]
 8004584:	461a      	mov	r2, r3
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	4293      	cmp	r3, r2
 800458a:	d3ab      	bcc.n	80044e4 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 800458c:	4b0a      	ldr	r3, [pc, #40]	@ (80045b8 <ssd1306_WriteChar+0x11c>)
 800458e:	881b      	ldrh	r3, [r3, #0]
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	2a00      	cmp	r2, #0
 8004594:	d005      	beq.n	80045a2 <ssd1306_WriteChar+0x106>
 8004596:	68b9      	ldr	r1, [r7, #8]
 8004598:	7bfa      	ldrb	r2, [r7, #15]
 800459a:	3a20      	subs	r2, #32
 800459c:	440a      	add	r2, r1
 800459e:	7812      	ldrb	r2, [r2, #0]
 80045a0:	e000      	b.n	80045a4 <ssd1306_WriteChar+0x108>
 80045a2:	783a      	ldrb	r2, [r7, #0]
 80045a4:	4413      	add	r3, r2
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	4b03      	ldr	r3, [pc, #12]	@ (80045b8 <ssd1306_WriteChar+0x11c>)
 80045aa:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80045ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3724      	adds	r7, #36	@ 0x24
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd90      	pop	{r4, r7, pc}
 80045b6:	bf00      	nop
 80045b8:	200006d8 	.word	0x200006d8

080045bc <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af02      	add	r7, sp, #8
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	4638      	mov	r0, r7
 80045c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80045ca:	e013      	b.n	80045f4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	7818      	ldrb	r0, [r3, #0]
 80045d0:	7e3b      	ldrb	r3, [r7, #24]
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	463b      	mov	r3, r7
 80045d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045d8:	f7ff ff60 	bl	800449c <ssd1306_WriteChar>
 80045dc:	4603      	mov	r3, r0
 80045de:	461a      	mov	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d002      	beq.n	80045ee <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	e008      	b.n	8004600 <ssd1306_WriteString+0x44>
        }
        str++;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	3301      	adds	r3, #1
 80045f2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e7      	bne.n	80045cc <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	781b      	ldrb	r3, [r3, #0]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	4603      	mov	r3, r0
 8004610:	460a      	mov	r2, r1
 8004612:	71fb      	strb	r3, [r7, #7]
 8004614:	4613      	mov	r3, r2
 8004616:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8004618:	79fb      	ldrb	r3, [r7, #7]
 800461a:	b29a      	uxth	r2, r3
 800461c:	4b05      	ldr	r3, [pc, #20]	@ (8004634 <ssd1306_SetCursor+0x2c>)
 800461e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8004620:	79bb      	ldrb	r3, [r7, #6]
 8004622:	b29a      	uxth	r2, r3
 8004624:	4b03      	ldr	r3, [pc, #12]	@ (8004634 <ssd1306_SetCursor+0x2c>)
 8004626:	805a      	strh	r2, [r3, #2]
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	200006d8 	.word	0x200006d8

08004638 <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	603a      	str	r2, [r7, #0]
 8004640:	461a      	mov	r2, r3
 8004642:	4603      	mov	r3, r0
 8004644:	71fb      	strb	r3, [r7, #7]
 8004646:	460b      	mov	r3, r1
 8004648:	71bb      	strb	r3, [r7, #6]
 800464a:	4613      	mov	r3, r2
 800464c:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800464e:	797b      	ldrb	r3, [r7, #5]
 8004650:	3307      	adds	r3, #7
 8004652:	2b00      	cmp	r3, #0
 8004654:	da00      	bge.n	8004658 <ssd1306_DrawBitmap+0x20>
 8004656:	3307      	adds	r3, #7
 8004658:	10db      	asrs	r3, r3, #3
 800465a:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 800465c:	2300      	movs	r3, #0
 800465e:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004664:	2b00      	cmp	r3, #0
 8004666:	db3e      	blt.n	80046e6 <ssd1306_DrawBitmap+0xae>
 8004668:	79bb      	ldrb	r3, [r7, #6]
 800466a:	2b3f      	cmp	r3, #63	@ 0x3f
 800466c:	d83b      	bhi.n	80046e6 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 800466e:	2300      	movs	r3, #0
 8004670:	73bb      	strb	r3, [r7, #14]
 8004672:	e033      	b.n	80046dc <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8004674:	2300      	movs	r3, #0
 8004676:	737b      	strb	r3, [r7, #13]
 8004678:	e026      	b.n	80046c8 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 800467a:	7b7b      	ldrb	r3, [r7, #13]
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8004684:	7bfb      	ldrb	r3, [r7, #15]
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	73fb      	strb	r3, [r7, #15]
 800468a:	e00d      	b.n	80046a8 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 800468c:	7bbb      	ldrb	r3, [r7, #14]
 800468e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004692:	fb02 f303 	mul.w	r3, r2, r3
 8004696:	7b7a      	ldrb	r2, [r7, #13]
 8004698:	08d2      	lsrs	r2, r2, #3
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	4413      	add	r3, r2
 800469e:	461a      	mov	r2, r3
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	4413      	add	r3, r2
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 80046a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	da08      	bge.n	80046c2 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 80046b0:	79fa      	ldrb	r2, [r7, #7]
 80046b2:	7b7b      	ldrb	r3, [r7, #13]
 80046b4:	4413      	add	r3, r2
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	7f3a      	ldrb	r2, [r7, #28]
 80046ba:	79b9      	ldrb	r1, [r7, #6]
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff fe99 	bl	80043f4 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 80046c2:	7b7b      	ldrb	r3, [r7, #13]
 80046c4:	3301      	adds	r3, #1
 80046c6:	737b      	strb	r3, [r7, #13]
 80046c8:	7b7a      	ldrb	r2, [r7, #13]
 80046ca:	797b      	ldrb	r3, [r7, #5]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d3d4      	bcc.n	800467a <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 80046d0:	7bbb      	ldrb	r3, [r7, #14]
 80046d2:	3301      	adds	r3, #1
 80046d4:	73bb      	strb	r3, [r7, #14]
 80046d6:	79bb      	ldrb	r3, [r7, #6]
 80046d8:	3301      	adds	r3, #1
 80046da:	71bb      	strb	r3, [r7, #6]
 80046dc:	7bba      	ldrb	r2, [r7, #14]
 80046de:	7e3b      	ldrb	r3, [r7, #24]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d3c7      	bcc.n	8004674 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 80046e4:	e000      	b.n	80046e8 <ssd1306_DrawBitmap+0xb0>
        return;
 80046e6:	bf00      	nop
}
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b084      	sub	sp, #16
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	4603      	mov	r3, r0
 80046f6:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80046f8:	2381      	movs	r3, #129	@ 0x81
 80046fa:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
 80046fe:	4618      	mov	r0, r3
 8004700:	f7ff fd9c 	bl	800423c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8004704:	79fb      	ldrb	r3, [r7, #7]
 8004706:	4618      	mov	r0, r3
 8004708:	f7ff fd98 	bl	800423c <ssd1306_WriteCommand>
}
 800470c:	bf00      	nop
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	4603      	mov	r3, r0
 800471c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800471e:	79fb      	ldrb	r3, [r7, #7]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d005      	beq.n	8004730 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8004724:	23af      	movs	r3, #175	@ 0xaf
 8004726:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8004728:	4b08      	ldr	r3, [pc, #32]	@ (800474c <ssd1306_SetDisplayOn+0x38>)
 800472a:	2201      	movs	r2, #1
 800472c:	715a      	strb	r2, [r3, #5]
 800472e:	e004      	b.n	800473a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8004730:	23ae      	movs	r3, #174	@ 0xae
 8004732:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8004734:	4b05      	ldr	r3, [pc, #20]	@ (800474c <ssd1306_SetDisplayOn+0x38>)
 8004736:	2200      	movs	r2, #0
 8004738:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800473a:	7bfb      	ldrb	r3, [r7, #15]
 800473c:	4618      	mov	r0, r3
 800473e:	f7ff fd7d 	bl	800423c <ssd1306_WriteCommand>
}
 8004742:	bf00      	nop
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	200006d8 	.word	0x200006d8

08004750 <__cvt>:
 8004750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004754:	ec57 6b10 	vmov	r6, r7, d0
 8004758:	2f00      	cmp	r7, #0
 800475a:	460c      	mov	r4, r1
 800475c:	4619      	mov	r1, r3
 800475e:	463b      	mov	r3, r7
 8004760:	bfbb      	ittet	lt
 8004762:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004766:	461f      	movlt	r7, r3
 8004768:	2300      	movge	r3, #0
 800476a:	232d      	movlt	r3, #45	@ 0x2d
 800476c:	700b      	strb	r3, [r1, #0]
 800476e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004770:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004774:	4691      	mov	r9, r2
 8004776:	f023 0820 	bic.w	r8, r3, #32
 800477a:	bfbc      	itt	lt
 800477c:	4632      	movlt	r2, r6
 800477e:	4616      	movlt	r6, r2
 8004780:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004784:	d005      	beq.n	8004792 <__cvt+0x42>
 8004786:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800478a:	d100      	bne.n	800478e <__cvt+0x3e>
 800478c:	3401      	adds	r4, #1
 800478e:	2102      	movs	r1, #2
 8004790:	e000      	b.n	8004794 <__cvt+0x44>
 8004792:	2103      	movs	r1, #3
 8004794:	ab03      	add	r3, sp, #12
 8004796:	9301      	str	r3, [sp, #4]
 8004798:	ab02      	add	r3, sp, #8
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	ec47 6b10 	vmov	d0, r6, r7
 80047a0:	4653      	mov	r3, sl
 80047a2:	4622      	mov	r2, r4
 80047a4:	f001 f89c 	bl	80058e0 <_dtoa_r>
 80047a8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80047ac:	4605      	mov	r5, r0
 80047ae:	d119      	bne.n	80047e4 <__cvt+0x94>
 80047b0:	f019 0f01 	tst.w	r9, #1
 80047b4:	d00e      	beq.n	80047d4 <__cvt+0x84>
 80047b6:	eb00 0904 	add.w	r9, r0, r4
 80047ba:	2200      	movs	r2, #0
 80047bc:	2300      	movs	r3, #0
 80047be:	4630      	mov	r0, r6
 80047c0:	4639      	mov	r1, r7
 80047c2:	f7fc f981 	bl	8000ac8 <__aeabi_dcmpeq>
 80047c6:	b108      	cbz	r0, 80047cc <__cvt+0x7c>
 80047c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80047cc:	2230      	movs	r2, #48	@ 0x30
 80047ce:	9b03      	ldr	r3, [sp, #12]
 80047d0:	454b      	cmp	r3, r9
 80047d2:	d31e      	bcc.n	8004812 <__cvt+0xc2>
 80047d4:	9b03      	ldr	r3, [sp, #12]
 80047d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80047d8:	1b5b      	subs	r3, r3, r5
 80047da:	4628      	mov	r0, r5
 80047dc:	6013      	str	r3, [r2, #0]
 80047de:	b004      	add	sp, #16
 80047e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80047e8:	eb00 0904 	add.w	r9, r0, r4
 80047ec:	d1e5      	bne.n	80047ba <__cvt+0x6a>
 80047ee:	7803      	ldrb	r3, [r0, #0]
 80047f0:	2b30      	cmp	r3, #48	@ 0x30
 80047f2:	d10a      	bne.n	800480a <__cvt+0xba>
 80047f4:	2200      	movs	r2, #0
 80047f6:	2300      	movs	r3, #0
 80047f8:	4630      	mov	r0, r6
 80047fa:	4639      	mov	r1, r7
 80047fc:	f7fc f964 	bl	8000ac8 <__aeabi_dcmpeq>
 8004800:	b918      	cbnz	r0, 800480a <__cvt+0xba>
 8004802:	f1c4 0401 	rsb	r4, r4, #1
 8004806:	f8ca 4000 	str.w	r4, [sl]
 800480a:	f8da 3000 	ldr.w	r3, [sl]
 800480e:	4499      	add	r9, r3
 8004810:	e7d3      	b.n	80047ba <__cvt+0x6a>
 8004812:	1c59      	adds	r1, r3, #1
 8004814:	9103      	str	r1, [sp, #12]
 8004816:	701a      	strb	r2, [r3, #0]
 8004818:	e7d9      	b.n	80047ce <__cvt+0x7e>

0800481a <__exponent>:
 800481a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800481c:	2900      	cmp	r1, #0
 800481e:	bfba      	itte	lt
 8004820:	4249      	neglt	r1, r1
 8004822:	232d      	movlt	r3, #45	@ 0x2d
 8004824:	232b      	movge	r3, #43	@ 0x2b
 8004826:	2909      	cmp	r1, #9
 8004828:	7002      	strb	r2, [r0, #0]
 800482a:	7043      	strb	r3, [r0, #1]
 800482c:	dd29      	ble.n	8004882 <__exponent+0x68>
 800482e:	f10d 0307 	add.w	r3, sp, #7
 8004832:	461d      	mov	r5, r3
 8004834:	270a      	movs	r7, #10
 8004836:	461a      	mov	r2, r3
 8004838:	fbb1 f6f7 	udiv	r6, r1, r7
 800483c:	fb07 1416 	mls	r4, r7, r6, r1
 8004840:	3430      	adds	r4, #48	@ 0x30
 8004842:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004846:	460c      	mov	r4, r1
 8004848:	2c63      	cmp	r4, #99	@ 0x63
 800484a:	f103 33ff 	add.w	r3, r3, #4294967295
 800484e:	4631      	mov	r1, r6
 8004850:	dcf1      	bgt.n	8004836 <__exponent+0x1c>
 8004852:	3130      	adds	r1, #48	@ 0x30
 8004854:	1e94      	subs	r4, r2, #2
 8004856:	f803 1c01 	strb.w	r1, [r3, #-1]
 800485a:	1c41      	adds	r1, r0, #1
 800485c:	4623      	mov	r3, r4
 800485e:	42ab      	cmp	r3, r5
 8004860:	d30a      	bcc.n	8004878 <__exponent+0x5e>
 8004862:	f10d 0309 	add.w	r3, sp, #9
 8004866:	1a9b      	subs	r3, r3, r2
 8004868:	42ac      	cmp	r4, r5
 800486a:	bf88      	it	hi
 800486c:	2300      	movhi	r3, #0
 800486e:	3302      	adds	r3, #2
 8004870:	4403      	add	r3, r0
 8004872:	1a18      	subs	r0, r3, r0
 8004874:	b003      	add	sp, #12
 8004876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004878:	f813 6b01 	ldrb.w	r6, [r3], #1
 800487c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004880:	e7ed      	b.n	800485e <__exponent+0x44>
 8004882:	2330      	movs	r3, #48	@ 0x30
 8004884:	3130      	adds	r1, #48	@ 0x30
 8004886:	7083      	strb	r3, [r0, #2]
 8004888:	70c1      	strb	r1, [r0, #3]
 800488a:	1d03      	adds	r3, r0, #4
 800488c:	e7f1      	b.n	8004872 <__exponent+0x58>
	...

08004890 <_printf_float>:
 8004890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004894:	b08d      	sub	sp, #52	@ 0x34
 8004896:	460c      	mov	r4, r1
 8004898:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800489c:	4616      	mov	r6, r2
 800489e:	461f      	mov	r7, r3
 80048a0:	4605      	mov	r5, r0
 80048a2:	f000 ff09 	bl	80056b8 <_localeconv_r>
 80048a6:	6803      	ldr	r3, [r0, #0]
 80048a8:	9304      	str	r3, [sp, #16]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fb fce0 	bl	8000270 <strlen>
 80048b0:	2300      	movs	r3, #0
 80048b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80048b4:	f8d8 3000 	ldr.w	r3, [r8]
 80048b8:	9005      	str	r0, [sp, #20]
 80048ba:	3307      	adds	r3, #7
 80048bc:	f023 0307 	bic.w	r3, r3, #7
 80048c0:	f103 0208 	add.w	r2, r3, #8
 80048c4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80048c8:	f8d4 b000 	ldr.w	fp, [r4]
 80048cc:	f8c8 2000 	str.w	r2, [r8]
 80048d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80048d4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80048d8:	9307      	str	r3, [sp, #28]
 80048da:	f8cd 8018 	str.w	r8, [sp, #24]
 80048de:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80048e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048e6:	4b9c      	ldr	r3, [pc, #624]	@ (8004b58 <_printf_float+0x2c8>)
 80048e8:	f04f 32ff 	mov.w	r2, #4294967295
 80048ec:	f7fc f91e 	bl	8000b2c <__aeabi_dcmpun>
 80048f0:	bb70      	cbnz	r0, 8004950 <_printf_float+0xc0>
 80048f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048f6:	4b98      	ldr	r3, [pc, #608]	@ (8004b58 <_printf_float+0x2c8>)
 80048f8:	f04f 32ff 	mov.w	r2, #4294967295
 80048fc:	f7fc f8f8 	bl	8000af0 <__aeabi_dcmple>
 8004900:	bb30      	cbnz	r0, 8004950 <_printf_float+0xc0>
 8004902:	2200      	movs	r2, #0
 8004904:	2300      	movs	r3, #0
 8004906:	4640      	mov	r0, r8
 8004908:	4649      	mov	r1, r9
 800490a:	f7fc f8e7 	bl	8000adc <__aeabi_dcmplt>
 800490e:	b110      	cbz	r0, 8004916 <_printf_float+0x86>
 8004910:	232d      	movs	r3, #45	@ 0x2d
 8004912:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004916:	4a91      	ldr	r2, [pc, #580]	@ (8004b5c <_printf_float+0x2cc>)
 8004918:	4b91      	ldr	r3, [pc, #580]	@ (8004b60 <_printf_float+0x2d0>)
 800491a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800491e:	bf94      	ite	ls
 8004920:	4690      	movls	r8, r2
 8004922:	4698      	movhi	r8, r3
 8004924:	2303      	movs	r3, #3
 8004926:	6123      	str	r3, [r4, #16]
 8004928:	f02b 0304 	bic.w	r3, fp, #4
 800492c:	6023      	str	r3, [r4, #0]
 800492e:	f04f 0900 	mov.w	r9, #0
 8004932:	9700      	str	r7, [sp, #0]
 8004934:	4633      	mov	r3, r6
 8004936:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004938:	4621      	mov	r1, r4
 800493a:	4628      	mov	r0, r5
 800493c:	f000 f9d2 	bl	8004ce4 <_printf_common>
 8004940:	3001      	adds	r0, #1
 8004942:	f040 808d 	bne.w	8004a60 <_printf_float+0x1d0>
 8004946:	f04f 30ff 	mov.w	r0, #4294967295
 800494a:	b00d      	add	sp, #52	@ 0x34
 800494c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004950:	4642      	mov	r2, r8
 8004952:	464b      	mov	r3, r9
 8004954:	4640      	mov	r0, r8
 8004956:	4649      	mov	r1, r9
 8004958:	f7fc f8e8 	bl	8000b2c <__aeabi_dcmpun>
 800495c:	b140      	cbz	r0, 8004970 <_printf_float+0xe0>
 800495e:	464b      	mov	r3, r9
 8004960:	2b00      	cmp	r3, #0
 8004962:	bfbc      	itt	lt
 8004964:	232d      	movlt	r3, #45	@ 0x2d
 8004966:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800496a:	4a7e      	ldr	r2, [pc, #504]	@ (8004b64 <_printf_float+0x2d4>)
 800496c:	4b7e      	ldr	r3, [pc, #504]	@ (8004b68 <_printf_float+0x2d8>)
 800496e:	e7d4      	b.n	800491a <_printf_float+0x8a>
 8004970:	6863      	ldr	r3, [r4, #4]
 8004972:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004976:	9206      	str	r2, [sp, #24]
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	d13b      	bne.n	80049f4 <_printf_float+0x164>
 800497c:	2306      	movs	r3, #6
 800497e:	6063      	str	r3, [r4, #4]
 8004980:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004984:	2300      	movs	r3, #0
 8004986:	6022      	str	r2, [r4, #0]
 8004988:	9303      	str	r3, [sp, #12]
 800498a:	ab0a      	add	r3, sp, #40	@ 0x28
 800498c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004990:	ab09      	add	r3, sp, #36	@ 0x24
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	6861      	ldr	r1, [r4, #4]
 8004996:	ec49 8b10 	vmov	d0, r8, r9
 800499a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800499e:	4628      	mov	r0, r5
 80049a0:	f7ff fed6 	bl	8004750 <__cvt>
 80049a4:	9b06      	ldr	r3, [sp, #24]
 80049a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80049a8:	2b47      	cmp	r3, #71	@ 0x47
 80049aa:	4680      	mov	r8, r0
 80049ac:	d129      	bne.n	8004a02 <_printf_float+0x172>
 80049ae:	1cc8      	adds	r0, r1, #3
 80049b0:	db02      	blt.n	80049b8 <_printf_float+0x128>
 80049b2:	6863      	ldr	r3, [r4, #4]
 80049b4:	4299      	cmp	r1, r3
 80049b6:	dd41      	ble.n	8004a3c <_printf_float+0x1ac>
 80049b8:	f1aa 0a02 	sub.w	sl, sl, #2
 80049bc:	fa5f fa8a 	uxtb.w	sl, sl
 80049c0:	3901      	subs	r1, #1
 80049c2:	4652      	mov	r2, sl
 80049c4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80049c8:	9109      	str	r1, [sp, #36]	@ 0x24
 80049ca:	f7ff ff26 	bl	800481a <__exponent>
 80049ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80049d0:	1813      	adds	r3, r2, r0
 80049d2:	2a01      	cmp	r2, #1
 80049d4:	4681      	mov	r9, r0
 80049d6:	6123      	str	r3, [r4, #16]
 80049d8:	dc02      	bgt.n	80049e0 <_printf_float+0x150>
 80049da:	6822      	ldr	r2, [r4, #0]
 80049dc:	07d2      	lsls	r2, r2, #31
 80049de:	d501      	bpl.n	80049e4 <_printf_float+0x154>
 80049e0:	3301      	adds	r3, #1
 80049e2:	6123      	str	r3, [r4, #16]
 80049e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0a2      	beq.n	8004932 <_printf_float+0xa2>
 80049ec:	232d      	movs	r3, #45	@ 0x2d
 80049ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049f2:	e79e      	b.n	8004932 <_printf_float+0xa2>
 80049f4:	9a06      	ldr	r2, [sp, #24]
 80049f6:	2a47      	cmp	r2, #71	@ 0x47
 80049f8:	d1c2      	bne.n	8004980 <_printf_float+0xf0>
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1c0      	bne.n	8004980 <_printf_float+0xf0>
 80049fe:	2301      	movs	r3, #1
 8004a00:	e7bd      	b.n	800497e <_printf_float+0xee>
 8004a02:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004a06:	d9db      	bls.n	80049c0 <_printf_float+0x130>
 8004a08:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004a0c:	d118      	bne.n	8004a40 <_printf_float+0x1b0>
 8004a0e:	2900      	cmp	r1, #0
 8004a10:	6863      	ldr	r3, [r4, #4]
 8004a12:	dd0b      	ble.n	8004a2c <_printf_float+0x19c>
 8004a14:	6121      	str	r1, [r4, #16]
 8004a16:	b913      	cbnz	r3, 8004a1e <_printf_float+0x18e>
 8004a18:	6822      	ldr	r2, [r4, #0]
 8004a1a:	07d0      	lsls	r0, r2, #31
 8004a1c:	d502      	bpl.n	8004a24 <_printf_float+0x194>
 8004a1e:	3301      	adds	r3, #1
 8004a20:	440b      	add	r3, r1
 8004a22:	6123      	str	r3, [r4, #16]
 8004a24:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004a26:	f04f 0900 	mov.w	r9, #0
 8004a2a:	e7db      	b.n	80049e4 <_printf_float+0x154>
 8004a2c:	b913      	cbnz	r3, 8004a34 <_printf_float+0x1a4>
 8004a2e:	6822      	ldr	r2, [r4, #0]
 8004a30:	07d2      	lsls	r2, r2, #31
 8004a32:	d501      	bpl.n	8004a38 <_printf_float+0x1a8>
 8004a34:	3302      	adds	r3, #2
 8004a36:	e7f4      	b.n	8004a22 <_printf_float+0x192>
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e7f2      	b.n	8004a22 <_printf_float+0x192>
 8004a3c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004a40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a42:	4299      	cmp	r1, r3
 8004a44:	db05      	blt.n	8004a52 <_printf_float+0x1c2>
 8004a46:	6823      	ldr	r3, [r4, #0]
 8004a48:	6121      	str	r1, [r4, #16]
 8004a4a:	07d8      	lsls	r0, r3, #31
 8004a4c:	d5ea      	bpl.n	8004a24 <_printf_float+0x194>
 8004a4e:	1c4b      	adds	r3, r1, #1
 8004a50:	e7e7      	b.n	8004a22 <_printf_float+0x192>
 8004a52:	2900      	cmp	r1, #0
 8004a54:	bfd4      	ite	le
 8004a56:	f1c1 0202 	rsble	r2, r1, #2
 8004a5a:	2201      	movgt	r2, #1
 8004a5c:	4413      	add	r3, r2
 8004a5e:	e7e0      	b.n	8004a22 <_printf_float+0x192>
 8004a60:	6823      	ldr	r3, [r4, #0]
 8004a62:	055a      	lsls	r2, r3, #21
 8004a64:	d407      	bmi.n	8004a76 <_printf_float+0x1e6>
 8004a66:	6923      	ldr	r3, [r4, #16]
 8004a68:	4642      	mov	r2, r8
 8004a6a:	4631      	mov	r1, r6
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	47b8      	blx	r7
 8004a70:	3001      	adds	r0, #1
 8004a72:	d12b      	bne.n	8004acc <_printf_float+0x23c>
 8004a74:	e767      	b.n	8004946 <_printf_float+0xb6>
 8004a76:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004a7a:	f240 80dd 	bls.w	8004c38 <_printf_float+0x3a8>
 8004a7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004a82:	2200      	movs	r2, #0
 8004a84:	2300      	movs	r3, #0
 8004a86:	f7fc f81f 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a8a:	2800      	cmp	r0, #0
 8004a8c:	d033      	beq.n	8004af6 <_printf_float+0x266>
 8004a8e:	4a37      	ldr	r2, [pc, #220]	@ (8004b6c <_printf_float+0x2dc>)
 8004a90:	2301      	movs	r3, #1
 8004a92:	4631      	mov	r1, r6
 8004a94:	4628      	mov	r0, r5
 8004a96:	47b8      	blx	r7
 8004a98:	3001      	adds	r0, #1
 8004a9a:	f43f af54 	beq.w	8004946 <_printf_float+0xb6>
 8004a9e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004aa2:	4543      	cmp	r3, r8
 8004aa4:	db02      	blt.n	8004aac <_printf_float+0x21c>
 8004aa6:	6823      	ldr	r3, [r4, #0]
 8004aa8:	07d8      	lsls	r0, r3, #31
 8004aaa:	d50f      	bpl.n	8004acc <_printf_float+0x23c>
 8004aac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ab0:	4631      	mov	r1, r6
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	47b8      	blx	r7
 8004ab6:	3001      	adds	r0, #1
 8004ab8:	f43f af45 	beq.w	8004946 <_printf_float+0xb6>
 8004abc:	f04f 0900 	mov.w	r9, #0
 8004ac0:	f108 38ff 	add.w	r8, r8, #4294967295
 8004ac4:	f104 0a1a 	add.w	sl, r4, #26
 8004ac8:	45c8      	cmp	r8, r9
 8004aca:	dc09      	bgt.n	8004ae0 <_printf_float+0x250>
 8004acc:	6823      	ldr	r3, [r4, #0]
 8004ace:	079b      	lsls	r3, r3, #30
 8004ad0:	f100 8103 	bmi.w	8004cda <_printf_float+0x44a>
 8004ad4:	68e0      	ldr	r0, [r4, #12]
 8004ad6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ad8:	4298      	cmp	r0, r3
 8004ada:	bfb8      	it	lt
 8004adc:	4618      	movlt	r0, r3
 8004ade:	e734      	b.n	800494a <_printf_float+0xba>
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	4652      	mov	r2, sl
 8004ae4:	4631      	mov	r1, r6
 8004ae6:	4628      	mov	r0, r5
 8004ae8:	47b8      	blx	r7
 8004aea:	3001      	adds	r0, #1
 8004aec:	f43f af2b 	beq.w	8004946 <_printf_float+0xb6>
 8004af0:	f109 0901 	add.w	r9, r9, #1
 8004af4:	e7e8      	b.n	8004ac8 <_printf_float+0x238>
 8004af6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	dc39      	bgt.n	8004b70 <_printf_float+0x2e0>
 8004afc:	4a1b      	ldr	r2, [pc, #108]	@ (8004b6c <_printf_float+0x2dc>)
 8004afe:	2301      	movs	r3, #1
 8004b00:	4631      	mov	r1, r6
 8004b02:	4628      	mov	r0, r5
 8004b04:	47b8      	blx	r7
 8004b06:	3001      	adds	r0, #1
 8004b08:	f43f af1d 	beq.w	8004946 <_printf_float+0xb6>
 8004b0c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004b10:	ea59 0303 	orrs.w	r3, r9, r3
 8004b14:	d102      	bne.n	8004b1c <_printf_float+0x28c>
 8004b16:	6823      	ldr	r3, [r4, #0]
 8004b18:	07d9      	lsls	r1, r3, #31
 8004b1a:	d5d7      	bpl.n	8004acc <_printf_float+0x23c>
 8004b1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b20:	4631      	mov	r1, r6
 8004b22:	4628      	mov	r0, r5
 8004b24:	47b8      	blx	r7
 8004b26:	3001      	adds	r0, #1
 8004b28:	f43f af0d 	beq.w	8004946 <_printf_float+0xb6>
 8004b2c:	f04f 0a00 	mov.w	sl, #0
 8004b30:	f104 0b1a 	add.w	fp, r4, #26
 8004b34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b36:	425b      	negs	r3, r3
 8004b38:	4553      	cmp	r3, sl
 8004b3a:	dc01      	bgt.n	8004b40 <_printf_float+0x2b0>
 8004b3c:	464b      	mov	r3, r9
 8004b3e:	e793      	b.n	8004a68 <_printf_float+0x1d8>
 8004b40:	2301      	movs	r3, #1
 8004b42:	465a      	mov	r2, fp
 8004b44:	4631      	mov	r1, r6
 8004b46:	4628      	mov	r0, r5
 8004b48:	47b8      	blx	r7
 8004b4a:	3001      	adds	r0, #1
 8004b4c:	f43f aefb 	beq.w	8004946 <_printf_float+0xb6>
 8004b50:	f10a 0a01 	add.w	sl, sl, #1
 8004b54:	e7ee      	b.n	8004b34 <_printf_float+0x2a4>
 8004b56:	bf00      	nop
 8004b58:	7fefffff 	.word	0x7fefffff
 8004b5c:	08009dc0 	.word	0x08009dc0
 8004b60:	08009dc4 	.word	0x08009dc4
 8004b64:	08009dc8 	.word	0x08009dc8
 8004b68:	08009dcc 	.word	0x08009dcc
 8004b6c:	08009dd0 	.word	0x08009dd0
 8004b70:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004b72:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004b76:	4553      	cmp	r3, sl
 8004b78:	bfa8      	it	ge
 8004b7a:	4653      	movge	r3, sl
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	4699      	mov	r9, r3
 8004b80:	dc36      	bgt.n	8004bf0 <_printf_float+0x360>
 8004b82:	f04f 0b00 	mov.w	fp, #0
 8004b86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b8a:	f104 021a 	add.w	r2, r4, #26
 8004b8e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004b90:	9306      	str	r3, [sp, #24]
 8004b92:	eba3 0309 	sub.w	r3, r3, r9
 8004b96:	455b      	cmp	r3, fp
 8004b98:	dc31      	bgt.n	8004bfe <_printf_float+0x36e>
 8004b9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b9c:	459a      	cmp	sl, r3
 8004b9e:	dc3a      	bgt.n	8004c16 <_printf_float+0x386>
 8004ba0:	6823      	ldr	r3, [r4, #0]
 8004ba2:	07da      	lsls	r2, r3, #31
 8004ba4:	d437      	bmi.n	8004c16 <_printf_float+0x386>
 8004ba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ba8:	ebaa 0903 	sub.w	r9, sl, r3
 8004bac:	9b06      	ldr	r3, [sp, #24]
 8004bae:	ebaa 0303 	sub.w	r3, sl, r3
 8004bb2:	4599      	cmp	r9, r3
 8004bb4:	bfa8      	it	ge
 8004bb6:	4699      	movge	r9, r3
 8004bb8:	f1b9 0f00 	cmp.w	r9, #0
 8004bbc:	dc33      	bgt.n	8004c26 <_printf_float+0x396>
 8004bbe:	f04f 0800 	mov.w	r8, #0
 8004bc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004bc6:	f104 0b1a 	add.w	fp, r4, #26
 8004bca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bcc:	ebaa 0303 	sub.w	r3, sl, r3
 8004bd0:	eba3 0309 	sub.w	r3, r3, r9
 8004bd4:	4543      	cmp	r3, r8
 8004bd6:	f77f af79 	ble.w	8004acc <_printf_float+0x23c>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	465a      	mov	r2, fp
 8004bde:	4631      	mov	r1, r6
 8004be0:	4628      	mov	r0, r5
 8004be2:	47b8      	blx	r7
 8004be4:	3001      	adds	r0, #1
 8004be6:	f43f aeae 	beq.w	8004946 <_printf_float+0xb6>
 8004bea:	f108 0801 	add.w	r8, r8, #1
 8004bee:	e7ec      	b.n	8004bca <_printf_float+0x33a>
 8004bf0:	4642      	mov	r2, r8
 8004bf2:	4631      	mov	r1, r6
 8004bf4:	4628      	mov	r0, r5
 8004bf6:	47b8      	blx	r7
 8004bf8:	3001      	adds	r0, #1
 8004bfa:	d1c2      	bne.n	8004b82 <_printf_float+0x2f2>
 8004bfc:	e6a3      	b.n	8004946 <_printf_float+0xb6>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	4631      	mov	r1, r6
 8004c02:	4628      	mov	r0, r5
 8004c04:	9206      	str	r2, [sp, #24]
 8004c06:	47b8      	blx	r7
 8004c08:	3001      	adds	r0, #1
 8004c0a:	f43f ae9c 	beq.w	8004946 <_printf_float+0xb6>
 8004c0e:	9a06      	ldr	r2, [sp, #24]
 8004c10:	f10b 0b01 	add.w	fp, fp, #1
 8004c14:	e7bb      	b.n	8004b8e <_printf_float+0x2fe>
 8004c16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c1a:	4631      	mov	r1, r6
 8004c1c:	4628      	mov	r0, r5
 8004c1e:	47b8      	blx	r7
 8004c20:	3001      	adds	r0, #1
 8004c22:	d1c0      	bne.n	8004ba6 <_printf_float+0x316>
 8004c24:	e68f      	b.n	8004946 <_printf_float+0xb6>
 8004c26:	9a06      	ldr	r2, [sp, #24]
 8004c28:	464b      	mov	r3, r9
 8004c2a:	4442      	add	r2, r8
 8004c2c:	4631      	mov	r1, r6
 8004c2e:	4628      	mov	r0, r5
 8004c30:	47b8      	blx	r7
 8004c32:	3001      	adds	r0, #1
 8004c34:	d1c3      	bne.n	8004bbe <_printf_float+0x32e>
 8004c36:	e686      	b.n	8004946 <_printf_float+0xb6>
 8004c38:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004c3c:	f1ba 0f01 	cmp.w	sl, #1
 8004c40:	dc01      	bgt.n	8004c46 <_printf_float+0x3b6>
 8004c42:	07db      	lsls	r3, r3, #31
 8004c44:	d536      	bpl.n	8004cb4 <_printf_float+0x424>
 8004c46:	2301      	movs	r3, #1
 8004c48:	4642      	mov	r2, r8
 8004c4a:	4631      	mov	r1, r6
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	47b8      	blx	r7
 8004c50:	3001      	adds	r0, #1
 8004c52:	f43f ae78 	beq.w	8004946 <_printf_float+0xb6>
 8004c56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c5a:	4631      	mov	r1, r6
 8004c5c:	4628      	mov	r0, r5
 8004c5e:	47b8      	blx	r7
 8004c60:	3001      	adds	r0, #1
 8004c62:	f43f ae70 	beq.w	8004946 <_printf_float+0xb6>
 8004c66:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c72:	f7fb ff29 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c76:	b9c0      	cbnz	r0, 8004caa <_printf_float+0x41a>
 8004c78:	4653      	mov	r3, sl
 8004c7a:	f108 0201 	add.w	r2, r8, #1
 8004c7e:	4631      	mov	r1, r6
 8004c80:	4628      	mov	r0, r5
 8004c82:	47b8      	blx	r7
 8004c84:	3001      	adds	r0, #1
 8004c86:	d10c      	bne.n	8004ca2 <_printf_float+0x412>
 8004c88:	e65d      	b.n	8004946 <_printf_float+0xb6>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	465a      	mov	r2, fp
 8004c8e:	4631      	mov	r1, r6
 8004c90:	4628      	mov	r0, r5
 8004c92:	47b8      	blx	r7
 8004c94:	3001      	adds	r0, #1
 8004c96:	f43f ae56 	beq.w	8004946 <_printf_float+0xb6>
 8004c9a:	f108 0801 	add.w	r8, r8, #1
 8004c9e:	45d0      	cmp	r8, sl
 8004ca0:	dbf3      	blt.n	8004c8a <_printf_float+0x3fa>
 8004ca2:	464b      	mov	r3, r9
 8004ca4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004ca8:	e6df      	b.n	8004a6a <_printf_float+0x1da>
 8004caa:	f04f 0800 	mov.w	r8, #0
 8004cae:	f104 0b1a 	add.w	fp, r4, #26
 8004cb2:	e7f4      	b.n	8004c9e <_printf_float+0x40e>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	4642      	mov	r2, r8
 8004cb8:	e7e1      	b.n	8004c7e <_printf_float+0x3ee>
 8004cba:	2301      	movs	r3, #1
 8004cbc:	464a      	mov	r2, r9
 8004cbe:	4631      	mov	r1, r6
 8004cc0:	4628      	mov	r0, r5
 8004cc2:	47b8      	blx	r7
 8004cc4:	3001      	adds	r0, #1
 8004cc6:	f43f ae3e 	beq.w	8004946 <_printf_float+0xb6>
 8004cca:	f108 0801 	add.w	r8, r8, #1
 8004cce:	68e3      	ldr	r3, [r4, #12]
 8004cd0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004cd2:	1a5b      	subs	r3, r3, r1
 8004cd4:	4543      	cmp	r3, r8
 8004cd6:	dcf0      	bgt.n	8004cba <_printf_float+0x42a>
 8004cd8:	e6fc      	b.n	8004ad4 <_printf_float+0x244>
 8004cda:	f04f 0800 	mov.w	r8, #0
 8004cde:	f104 0919 	add.w	r9, r4, #25
 8004ce2:	e7f4      	b.n	8004cce <_printf_float+0x43e>

08004ce4 <_printf_common>:
 8004ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ce8:	4616      	mov	r6, r2
 8004cea:	4698      	mov	r8, r3
 8004cec:	688a      	ldr	r2, [r1, #8]
 8004cee:	690b      	ldr	r3, [r1, #16]
 8004cf0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	bfb8      	it	lt
 8004cf8:	4613      	movlt	r3, r2
 8004cfa:	6033      	str	r3, [r6, #0]
 8004cfc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d00:	4607      	mov	r7, r0
 8004d02:	460c      	mov	r4, r1
 8004d04:	b10a      	cbz	r2, 8004d0a <_printf_common+0x26>
 8004d06:	3301      	adds	r3, #1
 8004d08:	6033      	str	r3, [r6, #0]
 8004d0a:	6823      	ldr	r3, [r4, #0]
 8004d0c:	0699      	lsls	r1, r3, #26
 8004d0e:	bf42      	ittt	mi
 8004d10:	6833      	ldrmi	r3, [r6, #0]
 8004d12:	3302      	addmi	r3, #2
 8004d14:	6033      	strmi	r3, [r6, #0]
 8004d16:	6825      	ldr	r5, [r4, #0]
 8004d18:	f015 0506 	ands.w	r5, r5, #6
 8004d1c:	d106      	bne.n	8004d2c <_printf_common+0x48>
 8004d1e:	f104 0a19 	add.w	sl, r4, #25
 8004d22:	68e3      	ldr	r3, [r4, #12]
 8004d24:	6832      	ldr	r2, [r6, #0]
 8004d26:	1a9b      	subs	r3, r3, r2
 8004d28:	42ab      	cmp	r3, r5
 8004d2a:	dc26      	bgt.n	8004d7a <_printf_common+0x96>
 8004d2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d30:	6822      	ldr	r2, [r4, #0]
 8004d32:	3b00      	subs	r3, #0
 8004d34:	bf18      	it	ne
 8004d36:	2301      	movne	r3, #1
 8004d38:	0692      	lsls	r2, r2, #26
 8004d3a:	d42b      	bmi.n	8004d94 <_printf_common+0xb0>
 8004d3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d40:	4641      	mov	r1, r8
 8004d42:	4638      	mov	r0, r7
 8004d44:	47c8      	blx	r9
 8004d46:	3001      	adds	r0, #1
 8004d48:	d01e      	beq.n	8004d88 <_printf_common+0xa4>
 8004d4a:	6823      	ldr	r3, [r4, #0]
 8004d4c:	6922      	ldr	r2, [r4, #16]
 8004d4e:	f003 0306 	and.w	r3, r3, #6
 8004d52:	2b04      	cmp	r3, #4
 8004d54:	bf02      	ittt	eq
 8004d56:	68e5      	ldreq	r5, [r4, #12]
 8004d58:	6833      	ldreq	r3, [r6, #0]
 8004d5a:	1aed      	subeq	r5, r5, r3
 8004d5c:	68a3      	ldr	r3, [r4, #8]
 8004d5e:	bf0c      	ite	eq
 8004d60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d64:	2500      	movne	r5, #0
 8004d66:	4293      	cmp	r3, r2
 8004d68:	bfc4      	itt	gt
 8004d6a:	1a9b      	subgt	r3, r3, r2
 8004d6c:	18ed      	addgt	r5, r5, r3
 8004d6e:	2600      	movs	r6, #0
 8004d70:	341a      	adds	r4, #26
 8004d72:	42b5      	cmp	r5, r6
 8004d74:	d11a      	bne.n	8004dac <_printf_common+0xc8>
 8004d76:	2000      	movs	r0, #0
 8004d78:	e008      	b.n	8004d8c <_printf_common+0xa8>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	4652      	mov	r2, sl
 8004d7e:	4641      	mov	r1, r8
 8004d80:	4638      	mov	r0, r7
 8004d82:	47c8      	blx	r9
 8004d84:	3001      	adds	r0, #1
 8004d86:	d103      	bne.n	8004d90 <_printf_common+0xac>
 8004d88:	f04f 30ff 	mov.w	r0, #4294967295
 8004d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d90:	3501      	adds	r5, #1
 8004d92:	e7c6      	b.n	8004d22 <_printf_common+0x3e>
 8004d94:	18e1      	adds	r1, r4, r3
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	2030      	movs	r0, #48	@ 0x30
 8004d9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004d9e:	4422      	add	r2, r4
 8004da0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004da4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004da8:	3302      	adds	r3, #2
 8004daa:	e7c7      	b.n	8004d3c <_printf_common+0x58>
 8004dac:	2301      	movs	r3, #1
 8004dae:	4622      	mov	r2, r4
 8004db0:	4641      	mov	r1, r8
 8004db2:	4638      	mov	r0, r7
 8004db4:	47c8      	blx	r9
 8004db6:	3001      	adds	r0, #1
 8004db8:	d0e6      	beq.n	8004d88 <_printf_common+0xa4>
 8004dba:	3601      	adds	r6, #1
 8004dbc:	e7d9      	b.n	8004d72 <_printf_common+0x8e>
	...

08004dc0 <_printf_i>:
 8004dc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dc4:	7e0f      	ldrb	r7, [r1, #24]
 8004dc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004dc8:	2f78      	cmp	r7, #120	@ 0x78
 8004dca:	4691      	mov	r9, r2
 8004dcc:	4680      	mov	r8, r0
 8004dce:	460c      	mov	r4, r1
 8004dd0:	469a      	mov	sl, r3
 8004dd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004dd6:	d807      	bhi.n	8004de8 <_printf_i+0x28>
 8004dd8:	2f62      	cmp	r7, #98	@ 0x62
 8004dda:	d80a      	bhi.n	8004df2 <_printf_i+0x32>
 8004ddc:	2f00      	cmp	r7, #0
 8004dde:	f000 80d2 	beq.w	8004f86 <_printf_i+0x1c6>
 8004de2:	2f58      	cmp	r7, #88	@ 0x58
 8004de4:	f000 80b9 	beq.w	8004f5a <_printf_i+0x19a>
 8004de8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004dec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004df0:	e03a      	b.n	8004e68 <_printf_i+0xa8>
 8004df2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004df6:	2b15      	cmp	r3, #21
 8004df8:	d8f6      	bhi.n	8004de8 <_printf_i+0x28>
 8004dfa:	a101      	add	r1, pc, #4	@ (adr r1, 8004e00 <_printf_i+0x40>)
 8004dfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e00:	08004e59 	.word	0x08004e59
 8004e04:	08004e6d 	.word	0x08004e6d
 8004e08:	08004de9 	.word	0x08004de9
 8004e0c:	08004de9 	.word	0x08004de9
 8004e10:	08004de9 	.word	0x08004de9
 8004e14:	08004de9 	.word	0x08004de9
 8004e18:	08004e6d 	.word	0x08004e6d
 8004e1c:	08004de9 	.word	0x08004de9
 8004e20:	08004de9 	.word	0x08004de9
 8004e24:	08004de9 	.word	0x08004de9
 8004e28:	08004de9 	.word	0x08004de9
 8004e2c:	08004f6d 	.word	0x08004f6d
 8004e30:	08004e97 	.word	0x08004e97
 8004e34:	08004f27 	.word	0x08004f27
 8004e38:	08004de9 	.word	0x08004de9
 8004e3c:	08004de9 	.word	0x08004de9
 8004e40:	08004f8f 	.word	0x08004f8f
 8004e44:	08004de9 	.word	0x08004de9
 8004e48:	08004e97 	.word	0x08004e97
 8004e4c:	08004de9 	.word	0x08004de9
 8004e50:	08004de9 	.word	0x08004de9
 8004e54:	08004f2f 	.word	0x08004f2f
 8004e58:	6833      	ldr	r3, [r6, #0]
 8004e5a:	1d1a      	adds	r2, r3, #4
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	6032      	str	r2, [r6, #0]
 8004e60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e09d      	b.n	8004fa8 <_printf_i+0x1e8>
 8004e6c:	6833      	ldr	r3, [r6, #0]
 8004e6e:	6820      	ldr	r0, [r4, #0]
 8004e70:	1d19      	adds	r1, r3, #4
 8004e72:	6031      	str	r1, [r6, #0]
 8004e74:	0606      	lsls	r6, r0, #24
 8004e76:	d501      	bpl.n	8004e7c <_printf_i+0xbc>
 8004e78:	681d      	ldr	r5, [r3, #0]
 8004e7a:	e003      	b.n	8004e84 <_printf_i+0xc4>
 8004e7c:	0645      	lsls	r5, r0, #25
 8004e7e:	d5fb      	bpl.n	8004e78 <_printf_i+0xb8>
 8004e80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004e84:	2d00      	cmp	r5, #0
 8004e86:	da03      	bge.n	8004e90 <_printf_i+0xd0>
 8004e88:	232d      	movs	r3, #45	@ 0x2d
 8004e8a:	426d      	negs	r5, r5
 8004e8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e90:	4859      	ldr	r0, [pc, #356]	@ (8004ff8 <_printf_i+0x238>)
 8004e92:	230a      	movs	r3, #10
 8004e94:	e011      	b.n	8004eba <_printf_i+0xfa>
 8004e96:	6821      	ldr	r1, [r4, #0]
 8004e98:	6833      	ldr	r3, [r6, #0]
 8004e9a:	0608      	lsls	r0, r1, #24
 8004e9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ea0:	d402      	bmi.n	8004ea8 <_printf_i+0xe8>
 8004ea2:	0649      	lsls	r1, r1, #25
 8004ea4:	bf48      	it	mi
 8004ea6:	b2ad      	uxthmi	r5, r5
 8004ea8:	2f6f      	cmp	r7, #111	@ 0x6f
 8004eaa:	4853      	ldr	r0, [pc, #332]	@ (8004ff8 <_printf_i+0x238>)
 8004eac:	6033      	str	r3, [r6, #0]
 8004eae:	bf14      	ite	ne
 8004eb0:	230a      	movne	r3, #10
 8004eb2:	2308      	moveq	r3, #8
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004eba:	6866      	ldr	r6, [r4, #4]
 8004ebc:	60a6      	str	r6, [r4, #8]
 8004ebe:	2e00      	cmp	r6, #0
 8004ec0:	bfa2      	ittt	ge
 8004ec2:	6821      	ldrge	r1, [r4, #0]
 8004ec4:	f021 0104 	bicge.w	r1, r1, #4
 8004ec8:	6021      	strge	r1, [r4, #0]
 8004eca:	b90d      	cbnz	r5, 8004ed0 <_printf_i+0x110>
 8004ecc:	2e00      	cmp	r6, #0
 8004ece:	d04b      	beq.n	8004f68 <_printf_i+0x1a8>
 8004ed0:	4616      	mov	r6, r2
 8004ed2:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ed6:	fb03 5711 	mls	r7, r3, r1, r5
 8004eda:	5dc7      	ldrb	r7, [r0, r7]
 8004edc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ee0:	462f      	mov	r7, r5
 8004ee2:	42bb      	cmp	r3, r7
 8004ee4:	460d      	mov	r5, r1
 8004ee6:	d9f4      	bls.n	8004ed2 <_printf_i+0x112>
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	d10b      	bne.n	8004f04 <_printf_i+0x144>
 8004eec:	6823      	ldr	r3, [r4, #0]
 8004eee:	07df      	lsls	r7, r3, #31
 8004ef0:	d508      	bpl.n	8004f04 <_printf_i+0x144>
 8004ef2:	6923      	ldr	r3, [r4, #16]
 8004ef4:	6861      	ldr	r1, [r4, #4]
 8004ef6:	4299      	cmp	r1, r3
 8004ef8:	bfde      	ittt	le
 8004efa:	2330      	movle	r3, #48	@ 0x30
 8004efc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f00:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f04:	1b92      	subs	r2, r2, r6
 8004f06:	6122      	str	r2, [r4, #16]
 8004f08:	f8cd a000 	str.w	sl, [sp]
 8004f0c:	464b      	mov	r3, r9
 8004f0e:	aa03      	add	r2, sp, #12
 8004f10:	4621      	mov	r1, r4
 8004f12:	4640      	mov	r0, r8
 8004f14:	f7ff fee6 	bl	8004ce4 <_printf_common>
 8004f18:	3001      	adds	r0, #1
 8004f1a:	d14a      	bne.n	8004fb2 <_printf_i+0x1f2>
 8004f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f20:	b004      	add	sp, #16
 8004f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f26:	6823      	ldr	r3, [r4, #0]
 8004f28:	f043 0320 	orr.w	r3, r3, #32
 8004f2c:	6023      	str	r3, [r4, #0]
 8004f2e:	4833      	ldr	r0, [pc, #204]	@ (8004ffc <_printf_i+0x23c>)
 8004f30:	2778      	movs	r7, #120	@ 0x78
 8004f32:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f36:	6823      	ldr	r3, [r4, #0]
 8004f38:	6831      	ldr	r1, [r6, #0]
 8004f3a:	061f      	lsls	r7, r3, #24
 8004f3c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f40:	d402      	bmi.n	8004f48 <_printf_i+0x188>
 8004f42:	065f      	lsls	r7, r3, #25
 8004f44:	bf48      	it	mi
 8004f46:	b2ad      	uxthmi	r5, r5
 8004f48:	6031      	str	r1, [r6, #0]
 8004f4a:	07d9      	lsls	r1, r3, #31
 8004f4c:	bf44      	itt	mi
 8004f4e:	f043 0320 	orrmi.w	r3, r3, #32
 8004f52:	6023      	strmi	r3, [r4, #0]
 8004f54:	b11d      	cbz	r5, 8004f5e <_printf_i+0x19e>
 8004f56:	2310      	movs	r3, #16
 8004f58:	e7ac      	b.n	8004eb4 <_printf_i+0xf4>
 8004f5a:	4827      	ldr	r0, [pc, #156]	@ (8004ff8 <_printf_i+0x238>)
 8004f5c:	e7e9      	b.n	8004f32 <_printf_i+0x172>
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	f023 0320 	bic.w	r3, r3, #32
 8004f64:	6023      	str	r3, [r4, #0]
 8004f66:	e7f6      	b.n	8004f56 <_printf_i+0x196>
 8004f68:	4616      	mov	r6, r2
 8004f6a:	e7bd      	b.n	8004ee8 <_printf_i+0x128>
 8004f6c:	6833      	ldr	r3, [r6, #0]
 8004f6e:	6825      	ldr	r5, [r4, #0]
 8004f70:	6961      	ldr	r1, [r4, #20]
 8004f72:	1d18      	adds	r0, r3, #4
 8004f74:	6030      	str	r0, [r6, #0]
 8004f76:	062e      	lsls	r6, r5, #24
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	d501      	bpl.n	8004f80 <_printf_i+0x1c0>
 8004f7c:	6019      	str	r1, [r3, #0]
 8004f7e:	e002      	b.n	8004f86 <_printf_i+0x1c6>
 8004f80:	0668      	lsls	r0, r5, #25
 8004f82:	d5fb      	bpl.n	8004f7c <_printf_i+0x1bc>
 8004f84:	8019      	strh	r1, [r3, #0]
 8004f86:	2300      	movs	r3, #0
 8004f88:	6123      	str	r3, [r4, #16]
 8004f8a:	4616      	mov	r6, r2
 8004f8c:	e7bc      	b.n	8004f08 <_printf_i+0x148>
 8004f8e:	6833      	ldr	r3, [r6, #0]
 8004f90:	1d1a      	adds	r2, r3, #4
 8004f92:	6032      	str	r2, [r6, #0]
 8004f94:	681e      	ldr	r6, [r3, #0]
 8004f96:	6862      	ldr	r2, [r4, #4]
 8004f98:	2100      	movs	r1, #0
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	f7fb f918 	bl	80001d0 <memchr>
 8004fa0:	b108      	cbz	r0, 8004fa6 <_printf_i+0x1e6>
 8004fa2:	1b80      	subs	r0, r0, r6
 8004fa4:	6060      	str	r0, [r4, #4]
 8004fa6:	6863      	ldr	r3, [r4, #4]
 8004fa8:	6123      	str	r3, [r4, #16]
 8004faa:	2300      	movs	r3, #0
 8004fac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fb0:	e7aa      	b.n	8004f08 <_printf_i+0x148>
 8004fb2:	6923      	ldr	r3, [r4, #16]
 8004fb4:	4632      	mov	r2, r6
 8004fb6:	4649      	mov	r1, r9
 8004fb8:	4640      	mov	r0, r8
 8004fba:	47d0      	blx	sl
 8004fbc:	3001      	adds	r0, #1
 8004fbe:	d0ad      	beq.n	8004f1c <_printf_i+0x15c>
 8004fc0:	6823      	ldr	r3, [r4, #0]
 8004fc2:	079b      	lsls	r3, r3, #30
 8004fc4:	d413      	bmi.n	8004fee <_printf_i+0x22e>
 8004fc6:	68e0      	ldr	r0, [r4, #12]
 8004fc8:	9b03      	ldr	r3, [sp, #12]
 8004fca:	4298      	cmp	r0, r3
 8004fcc:	bfb8      	it	lt
 8004fce:	4618      	movlt	r0, r3
 8004fd0:	e7a6      	b.n	8004f20 <_printf_i+0x160>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	4632      	mov	r2, r6
 8004fd6:	4649      	mov	r1, r9
 8004fd8:	4640      	mov	r0, r8
 8004fda:	47d0      	blx	sl
 8004fdc:	3001      	adds	r0, #1
 8004fde:	d09d      	beq.n	8004f1c <_printf_i+0x15c>
 8004fe0:	3501      	adds	r5, #1
 8004fe2:	68e3      	ldr	r3, [r4, #12]
 8004fe4:	9903      	ldr	r1, [sp, #12]
 8004fe6:	1a5b      	subs	r3, r3, r1
 8004fe8:	42ab      	cmp	r3, r5
 8004fea:	dcf2      	bgt.n	8004fd2 <_printf_i+0x212>
 8004fec:	e7eb      	b.n	8004fc6 <_printf_i+0x206>
 8004fee:	2500      	movs	r5, #0
 8004ff0:	f104 0619 	add.w	r6, r4, #25
 8004ff4:	e7f5      	b.n	8004fe2 <_printf_i+0x222>
 8004ff6:	bf00      	nop
 8004ff8:	08009dd2 	.word	0x08009dd2
 8004ffc:	08009de3 	.word	0x08009de3

08005000 <_scanf_float>:
 8005000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005004:	b087      	sub	sp, #28
 8005006:	4617      	mov	r7, r2
 8005008:	9303      	str	r3, [sp, #12]
 800500a:	688b      	ldr	r3, [r1, #8]
 800500c:	1e5a      	subs	r2, r3, #1
 800500e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005012:	bf81      	itttt	hi
 8005014:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005018:	eb03 0b05 	addhi.w	fp, r3, r5
 800501c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005020:	608b      	strhi	r3, [r1, #8]
 8005022:	680b      	ldr	r3, [r1, #0]
 8005024:	460a      	mov	r2, r1
 8005026:	f04f 0500 	mov.w	r5, #0
 800502a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800502e:	f842 3b1c 	str.w	r3, [r2], #28
 8005032:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005036:	4680      	mov	r8, r0
 8005038:	460c      	mov	r4, r1
 800503a:	bf98      	it	ls
 800503c:	f04f 0b00 	movls.w	fp, #0
 8005040:	9201      	str	r2, [sp, #4]
 8005042:	4616      	mov	r6, r2
 8005044:	46aa      	mov	sl, r5
 8005046:	46a9      	mov	r9, r5
 8005048:	9502      	str	r5, [sp, #8]
 800504a:	68a2      	ldr	r2, [r4, #8]
 800504c:	b152      	cbz	r2, 8005064 <_scanf_float+0x64>
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	2b4e      	cmp	r3, #78	@ 0x4e
 8005054:	d864      	bhi.n	8005120 <_scanf_float+0x120>
 8005056:	2b40      	cmp	r3, #64	@ 0x40
 8005058:	d83c      	bhi.n	80050d4 <_scanf_float+0xd4>
 800505a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800505e:	b2c8      	uxtb	r0, r1
 8005060:	280e      	cmp	r0, #14
 8005062:	d93a      	bls.n	80050da <_scanf_float+0xda>
 8005064:	f1b9 0f00 	cmp.w	r9, #0
 8005068:	d003      	beq.n	8005072 <_scanf_float+0x72>
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005070:	6023      	str	r3, [r4, #0]
 8005072:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005076:	f1ba 0f01 	cmp.w	sl, #1
 800507a:	f200 8117 	bhi.w	80052ac <_scanf_float+0x2ac>
 800507e:	9b01      	ldr	r3, [sp, #4]
 8005080:	429e      	cmp	r6, r3
 8005082:	f200 8108 	bhi.w	8005296 <_scanf_float+0x296>
 8005086:	2001      	movs	r0, #1
 8005088:	b007      	add	sp, #28
 800508a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800508e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005092:	2a0d      	cmp	r2, #13
 8005094:	d8e6      	bhi.n	8005064 <_scanf_float+0x64>
 8005096:	a101      	add	r1, pc, #4	@ (adr r1, 800509c <_scanf_float+0x9c>)
 8005098:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800509c:	080051e3 	.word	0x080051e3
 80050a0:	08005065 	.word	0x08005065
 80050a4:	08005065 	.word	0x08005065
 80050a8:	08005065 	.word	0x08005065
 80050ac:	08005243 	.word	0x08005243
 80050b0:	0800521b 	.word	0x0800521b
 80050b4:	08005065 	.word	0x08005065
 80050b8:	08005065 	.word	0x08005065
 80050bc:	080051f1 	.word	0x080051f1
 80050c0:	08005065 	.word	0x08005065
 80050c4:	08005065 	.word	0x08005065
 80050c8:	08005065 	.word	0x08005065
 80050cc:	08005065 	.word	0x08005065
 80050d0:	080051a9 	.word	0x080051a9
 80050d4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80050d8:	e7db      	b.n	8005092 <_scanf_float+0x92>
 80050da:	290e      	cmp	r1, #14
 80050dc:	d8c2      	bhi.n	8005064 <_scanf_float+0x64>
 80050de:	a001      	add	r0, pc, #4	@ (adr r0, 80050e4 <_scanf_float+0xe4>)
 80050e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80050e4:	08005199 	.word	0x08005199
 80050e8:	08005065 	.word	0x08005065
 80050ec:	08005199 	.word	0x08005199
 80050f0:	0800522f 	.word	0x0800522f
 80050f4:	08005065 	.word	0x08005065
 80050f8:	08005141 	.word	0x08005141
 80050fc:	0800517f 	.word	0x0800517f
 8005100:	0800517f 	.word	0x0800517f
 8005104:	0800517f 	.word	0x0800517f
 8005108:	0800517f 	.word	0x0800517f
 800510c:	0800517f 	.word	0x0800517f
 8005110:	0800517f 	.word	0x0800517f
 8005114:	0800517f 	.word	0x0800517f
 8005118:	0800517f 	.word	0x0800517f
 800511c:	0800517f 	.word	0x0800517f
 8005120:	2b6e      	cmp	r3, #110	@ 0x6e
 8005122:	d809      	bhi.n	8005138 <_scanf_float+0x138>
 8005124:	2b60      	cmp	r3, #96	@ 0x60
 8005126:	d8b2      	bhi.n	800508e <_scanf_float+0x8e>
 8005128:	2b54      	cmp	r3, #84	@ 0x54
 800512a:	d07b      	beq.n	8005224 <_scanf_float+0x224>
 800512c:	2b59      	cmp	r3, #89	@ 0x59
 800512e:	d199      	bne.n	8005064 <_scanf_float+0x64>
 8005130:	2d07      	cmp	r5, #7
 8005132:	d197      	bne.n	8005064 <_scanf_float+0x64>
 8005134:	2508      	movs	r5, #8
 8005136:	e02c      	b.n	8005192 <_scanf_float+0x192>
 8005138:	2b74      	cmp	r3, #116	@ 0x74
 800513a:	d073      	beq.n	8005224 <_scanf_float+0x224>
 800513c:	2b79      	cmp	r3, #121	@ 0x79
 800513e:	e7f6      	b.n	800512e <_scanf_float+0x12e>
 8005140:	6821      	ldr	r1, [r4, #0]
 8005142:	05c8      	lsls	r0, r1, #23
 8005144:	d51b      	bpl.n	800517e <_scanf_float+0x17e>
 8005146:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800514a:	6021      	str	r1, [r4, #0]
 800514c:	f109 0901 	add.w	r9, r9, #1
 8005150:	f1bb 0f00 	cmp.w	fp, #0
 8005154:	d003      	beq.n	800515e <_scanf_float+0x15e>
 8005156:	3201      	adds	r2, #1
 8005158:	f10b 3bff 	add.w	fp, fp, #4294967295
 800515c:	60a2      	str	r2, [r4, #8]
 800515e:	68a3      	ldr	r3, [r4, #8]
 8005160:	3b01      	subs	r3, #1
 8005162:	60a3      	str	r3, [r4, #8]
 8005164:	6923      	ldr	r3, [r4, #16]
 8005166:	3301      	adds	r3, #1
 8005168:	6123      	str	r3, [r4, #16]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	3b01      	subs	r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	607b      	str	r3, [r7, #4]
 8005172:	f340 8087 	ble.w	8005284 <_scanf_float+0x284>
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	3301      	adds	r3, #1
 800517a:	603b      	str	r3, [r7, #0]
 800517c:	e765      	b.n	800504a <_scanf_float+0x4a>
 800517e:	eb1a 0105 	adds.w	r1, sl, r5
 8005182:	f47f af6f 	bne.w	8005064 <_scanf_float+0x64>
 8005186:	6822      	ldr	r2, [r4, #0]
 8005188:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800518c:	6022      	str	r2, [r4, #0]
 800518e:	460d      	mov	r5, r1
 8005190:	468a      	mov	sl, r1
 8005192:	f806 3b01 	strb.w	r3, [r6], #1
 8005196:	e7e2      	b.n	800515e <_scanf_float+0x15e>
 8005198:	6822      	ldr	r2, [r4, #0]
 800519a:	0610      	lsls	r0, r2, #24
 800519c:	f57f af62 	bpl.w	8005064 <_scanf_float+0x64>
 80051a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80051a4:	6022      	str	r2, [r4, #0]
 80051a6:	e7f4      	b.n	8005192 <_scanf_float+0x192>
 80051a8:	f1ba 0f00 	cmp.w	sl, #0
 80051ac:	d10e      	bne.n	80051cc <_scanf_float+0x1cc>
 80051ae:	f1b9 0f00 	cmp.w	r9, #0
 80051b2:	d10e      	bne.n	80051d2 <_scanf_float+0x1d2>
 80051b4:	6822      	ldr	r2, [r4, #0]
 80051b6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80051ba:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80051be:	d108      	bne.n	80051d2 <_scanf_float+0x1d2>
 80051c0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80051c4:	6022      	str	r2, [r4, #0]
 80051c6:	f04f 0a01 	mov.w	sl, #1
 80051ca:	e7e2      	b.n	8005192 <_scanf_float+0x192>
 80051cc:	f1ba 0f02 	cmp.w	sl, #2
 80051d0:	d055      	beq.n	800527e <_scanf_float+0x27e>
 80051d2:	2d01      	cmp	r5, #1
 80051d4:	d002      	beq.n	80051dc <_scanf_float+0x1dc>
 80051d6:	2d04      	cmp	r5, #4
 80051d8:	f47f af44 	bne.w	8005064 <_scanf_float+0x64>
 80051dc:	3501      	adds	r5, #1
 80051de:	b2ed      	uxtb	r5, r5
 80051e0:	e7d7      	b.n	8005192 <_scanf_float+0x192>
 80051e2:	f1ba 0f01 	cmp.w	sl, #1
 80051e6:	f47f af3d 	bne.w	8005064 <_scanf_float+0x64>
 80051ea:	f04f 0a02 	mov.w	sl, #2
 80051ee:	e7d0      	b.n	8005192 <_scanf_float+0x192>
 80051f0:	b97d      	cbnz	r5, 8005212 <_scanf_float+0x212>
 80051f2:	f1b9 0f00 	cmp.w	r9, #0
 80051f6:	f47f af38 	bne.w	800506a <_scanf_float+0x6a>
 80051fa:	6822      	ldr	r2, [r4, #0]
 80051fc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005200:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005204:	f040 8108 	bne.w	8005418 <_scanf_float+0x418>
 8005208:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800520c:	6022      	str	r2, [r4, #0]
 800520e:	2501      	movs	r5, #1
 8005210:	e7bf      	b.n	8005192 <_scanf_float+0x192>
 8005212:	2d03      	cmp	r5, #3
 8005214:	d0e2      	beq.n	80051dc <_scanf_float+0x1dc>
 8005216:	2d05      	cmp	r5, #5
 8005218:	e7de      	b.n	80051d8 <_scanf_float+0x1d8>
 800521a:	2d02      	cmp	r5, #2
 800521c:	f47f af22 	bne.w	8005064 <_scanf_float+0x64>
 8005220:	2503      	movs	r5, #3
 8005222:	e7b6      	b.n	8005192 <_scanf_float+0x192>
 8005224:	2d06      	cmp	r5, #6
 8005226:	f47f af1d 	bne.w	8005064 <_scanf_float+0x64>
 800522a:	2507      	movs	r5, #7
 800522c:	e7b1      	b.n	8005192 <_scanf_float+0x192>
 800522e:	6822      	ldr	r2, [r4, #0]
 8005230:	0591      	lsls	r1, r2, #22
 8005232:	f57f af17 	bpl.w	8005064 <_scanf_float+0x64>
 8005236:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800523a:	6022      	str	r2, [r4, #0]
 800523c:	f8cd 9008 	str.w	r9, [sp, #8]
 8005240:	e7a7      	b.n	8005192 <_scanf_float+0x192>
 8005242:	6822      	ldr	r2, [r4, #0]
 8005244:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005248:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800524c:	d006      	beq.n	800525c <_scanf_float+0x25c>
 800524e:	0550      	lsls	r0, r2, #21
 8005250:	f57f af08 	bpl.w	8005064 <_scanf_float+0x64>
 8005254:	f1b9 0f00 	cmp.w	r9, #0
 8005258:	f000 80de 	beq.w	8005418 <_scanf_float+0x418>
 800525c:	0591      	lsls	r1, r2, #22
 800525e:	bf58      	it	pl
 8005260:	9902      	ldrpl	r1, [sp, #8]
 8005262:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005266:	bf58      	it	pl
 8005268:	eba9 0101 	subpl.w	r1, r9, r1
 800526c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005270:	bf58      	it	pl
 8005272:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005276:	6022      	str	r2, [r4, #0]
 8005278:	f04f 0900 	mov.w	r9, #0
 800527c:	e789      	b.n	8005192 <_scanf_float+0x192>
 800527e:	f04f 0a03 	mov.w	sl, #3
 8005282:	e786      	b.n	8005192 <_scanf_float+0x192>
 8005284:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005288:	4639      	mov	r1, r7
 800528a:	4640      	mov	r0, r8
 800528c:	4798      	blx	r3
 800528e:	2800      	cmp	r0, #0
 8005290:	f43f aedb 	beq.w	800504a <_scanf_float+0x4a>
 8005294:	e6e6      	b.n	8005064 <_scanf_float+0x64>
 8005296:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800529a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800529e:	463a      	mov	r2, r7
 80052a0:	4640      	mov	r0, r8
 80052a2:	4798      	blx	r3
 80052a4:	6923      	ldr	r3, [r4, #16]
 80052a6:	3b01      	subs	r3, #1
 80052a8:	6123      	str	r3, [r4, #16]
 80052aa:	e6e8      	b.n	800507e <_scanf_float+0x7e>
 80052ac:	1e6b      	subs	r3, r5, #1
 80052ae:	2b06      	cmp	r3, #6
 80052b0:	d824      	bhi.n	80052fc <_scanf_float+0x2fc>
 80052b2:	2d02      	cmp	r5, #2
 80052b4:	d836      	bhi.n	8005324 <_scanf_float+0x324>
 80052b6:	9b01      	ldr	r3, [sp, #4]
 80052b8:	429e      	cmp	r6, r3
 80052ba:	f67f aee4 	bls.w	8005086 <_scanf_float+0x86>
 80052be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80052c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80052c6:	463a      	mov	r2, r7
 80052c8:	4640      	mov	r0, r8
 80052ca:	4798      	blx	r3
 80052cc:	6923      	ldr	r3, [r4, #16]
 80052ce:	3b01      	subs	r3, #1
 80052d0:	6123      	str	r3, [r4, #16]
 80052d2:	e7f0      	b.n	80052b6 <_scanf_float+0x2b6>
 80052d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80052d8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80052dc:	463a      	mov	r2, r7
 80052de:	4640      	mov	r0, r8
 80052e0:	4798      	blx	r3
 80052e2:	6923      	ldr	r3, [r4, #16]
 80052e4:	3b01      	subs	r3, #1
 80052e6:	6123      	str	r3, [r4, #16]
 80052e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80052ec:	fa5f fa8a 	uxtb.w	sl, sl
 80052f0:	f1ba 0f02 	cmp.w	sl, #2
 80052f4:	d1ee      	bne.n	80052d4 <_scanf_float+0x2d4>
 80052f6:	3d03      	subs	r5, #3
 80052f8:	b2ed      	uxtb	r5, r5
 80052fa:	1b76      	subs	r6, r6, r5
 80052fc:	6823      	ldr	r3, [r4, #0]
 80052fe:	05da      	lsls	r2, r3, #23
 8005300:	d530      	bpl.n	8005364 <_scanf_float+0x364>
 8005302:	055b      	lsls	r3, r3, #21
 8005304:	d511      	bpl.n	800532a <_scanf_float+0x32a>
 8005306:	9b01      	ldr	r3, [sp, #4]
 8005308:	429e      	cmp	r6, r3
 800530a:	f67f aebc 	bls.w	8005086 <_scanf_float+0x86>
 800530e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005312:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005316:	463a      	mov	r2, r7
 8005318:	4640      	mov	r0, r8
 800531a:	4798      	blx	r3
 800531c:	6923      	ldr	r3, [r4, #16]
 800531e:	3b01      	subs	r3, #1
 8005320:	6123      	str	r3, [r4, #16]
 8005322:	e7f0      	b.n	8005306 <_scanf_float+0x306>
 8005324:	46aa      	mov	sl, r5
 8005326:	46b3      	mov	fp, r6
 8005328:	e7de      	b.n	80052e8 <_scanf_float+0x2e8>
 800532a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800532e:	6923      	ldr	r3, [r4, #16]
 8005330:	2965      	cmp	r1, #101	@ 0x65
 8005332:	f103 33ff 	add.w	r3, r3, #4294967295
 8005336:	f106 35ff 	add.w	r5, r6, #4294967295
 800533a:	6123      	str	r3, [r4, #16]
 800533c:	d00c      	beq.n	8005358 <_scanf_float+0x358>
 800533e:	2945      	cmp	r1, #69	@ 0x45
 8005340:	d00a      	beq.n	8005358 <_scanf_float+0x358>
 8005342:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005346:	463a      	mov	r2, r7
 8005348:	4640      	mov	r0, r8
 800534a:	4798      	blx	r3
 800534c:	6923      	ldr	r3, [r4, #16]
 800534e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005352:	3b01      	subs	r3, #1
 8005354:	1eb5      	subs	r5, r6, #2
 8005356:	6123      	str	r3, [r4, #16]
 8005358:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800535c:	463a      	mov	r2, r7
 800535e:	4640      	mov	r0, r8
 8005360:	4798      	blx	r3
 8005362:	462e      	mov	r6, r5
 8005364:	6822      	ldr	r2, [r4, #0]
 8005366:	f012 0210 	ands.w	r2, r2, #16
 800536a:	d001      	beq.n	8005370 <_scanf_float+0x370>
 800536c:	2000      	movs	r0, #0
 800536e:	e68b      	b.n	8005088 <_scanf_float+0x88>
 8005370:	7032      	strb	r2, [r6, #0]
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005378:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800537c:	d11c      	bne.n	80053b8 <_scanf_float+0x3b8>
 800537e:	9b02      	ldr	r3, [sp, #8]
 8005380:	454b      	cmp	r3, r9
 8005382:	eba3 0209 	sub.w	r2, r3, r9
 8005386:	d123      	bne.n	80053d0 <_scanf_float+0x3d0>
 8005388:	9901      	ldr	r1, [sp, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	4640      	mov	r0, r8
 800538e:	f002 fc1f 	bl	8007bd0 <_strtod_r>
 8005392:	9b03      	ldr	r3, [sp, #12]
 8005394:	6821      	ldr	r1, [r4, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f011 0f02 	tst.w	r1, #2
 800539c:	ec57 6b10 	vmov	r6, r7, d0
 80053a0:	f103 0204 	add.w	r2, r3, #4
 80053a4:	d01f      	beq.n	80053e6 <_scanf_float+0x3e6>
 80053a6:	9903      	ldr	r1, [sp, #12]
 80053a8:	600a      	str	r2, [r1, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	e9c3 6700 	strd	r6, r7, [r3]
 80053b0:	68e3      	ldr	r3, [r4, #12]
 80053b2:	3301      	adds	r3, #1
 80053b4:	60e3      	str	r3, [r4, #12]
 80053b6:	e7d9      	b.n	800536c <_scanf_float+0x36c>
 80053b8:	9b04      	ldr	r3, [sp, #16]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d0e4      	beq.n	8005388 <_scanf_float+0x388>
 80053be:	9905      	ldr	r1, [sp, #20]
 80053c0:	230a      	movs	r3, #10
 80053c2:	3101      	adds	r1, #1
 80053c4:	4640      	mov	r0, r8
 80053c6:	f002 fc83 	bl	8007cd0 <_strtol_r>
 80053ca:	9b04      	ldr	r3, [sp, #16]
 80053cc:	9e05      	ldr	r6, [sp, #20]
 80053ce:	1ac2      	subs	r2, r0, r3
 80053d0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80053d4:	429e      	cmp	r6, r3
 80053d6:	bf28      	it	cs
 80053d8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80053dc:	4910      	ldr	r1, [pc, #64]	@ (8005420 <_scanf_float+0x420>)
 80053de:	4630      	mov	r0, r6
 80053e0:	f000 f8e4 	bl	80055ac <siprintf>
 80053e4:	e7d0      	b.n	8005388 <_scanf_float+0x388>
 80053e6:	f011 0f04 	tst.w	r1, #4
 80053ea:	9903      	ldr	r1, [sp, #12]
 80053ec:	600a      	str	r2, [r1, #0]
 80053ee:	d1dc      	bne.n	80053aa <_scanf_float+0x3aa>
 80053f0:	681d      	ldr	r5, [r3, #0]
 80053f2:	4632      	mov	r2, r6
 80053f4:	463b      	mov	r3, r7
 80053f6:	4630      	mov	r0, r6
 80053f8:	4639      	mov	r1, r7
 80053fa:	f7fb fb97 	bl	8000b2c <__aeabi_dcmpun>
 80053fe:	b128      	cbz	r0, 800540c <_scanf_float+0x40c>
 8005400:	4808      	ldr	r0, [pc, #32]	@ (8005424 <_scanf_float+0x424>)
 8005402:	f000 f9df 	bl	80057c4 <nanf>
 8005406:	ed85 0a00 	vstr	s0, [r5]
 800540a:	e7d1      	b.n	80053b0 <_scanf_float+0x3b0>
 800540c:	4630      	mov	r0, r6
 800540e:	4639      	mov	r1, r7
 8005410:	f7fb fbea 	bl	8000be8 <__aeabi_d2f>
 8005414:	6028      	str	r0, [r5, #0]
 8005416:	e7cb      	b.n	80053b0 <_scanf_float+0x3b0>
 8005418:	f04f 0900 	mov.w	r9, #0
 800541c:	e629      	b.n	8005072 <_scanf_float+0x72>
 800541e:	bf00      	nop
 8005420:	08009df4 	.word	0x08009df4
 8005424:	0800a18d 	.word	0x0800a18d

08005428 <std>:
 8005428:	2300      	movs	r3, #0
 800542a:	b510      	push	{r4, lr}
 800542c:	4604      	mov	r4, r0
 800542e:	e9c0 3300 	strd	r3, r3, [r0]
 8005432:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005436:	6083      	str	r3, [r0, #8]
 8005438:	8181      	strh	r1, [r0, #12]
 800543a:	6643      	str	r3, [r0, #100]	@ 0x64
 800543c:	81c2      	strh	r2, [r0, #14]
 800543e:	6183      	str	r3, [r0, #24]
 8005440:	4619      	mov	r1, r3
 8005442:	2208      	movs	r2, #8
 8005444:	305c      	adds	r0, #92	@ 0x5c
 8005446:	f000 f92e 	bl	80056a6 <memset>
 800544a:	4b0d      	ldr	r3, [pc, #52]	@ (8005480 <std+0x58>)
 800544c:	6263      	str	r3, [r4, #36]	@ 0x24
 800544e:	4b0d      	ldr	r3, [pc, #52]	@ (8005484 <std+0x5c>)
 8005450:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005452:	4b0d      	ldr	r3, [pc, #52]	@ (8005488 <std+0x60>)
 8005454:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005456:	4b0d      	ldr	r3, [pc, #52]	@ (800548c <std+0x64>)
 8005458:	6323      	str	r3, [r4, #48]	@ 0x30
 800545a:	4b0d      	ldr	r3, [pc, #52]	@ (8005490 <std+0x68>)
 800545c:	6224      	str	r4, [r4, #32]
 800545e:	429c      	cmp	r4, r3
 8005460:	d006      	beq.n	8005470 <std+0x48>
 8005462:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005466:	4294      	cmp	r4, r2
 8005468:	d002      	beq.n	8005470 <std+0x48>
 800546a:	33d0      	adds	r3, #208	@ 0xd0
 800546c:	429c      	cmp	r4, r3
 800546e:	d105      	bne.n	800547c <std+0x54>
 8005470:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005478:	f000 b992 	b.w	80057a0 <__retarget_lock_init_recursive>
 800547c:	bd10      	pop	{r4, pc}
 800547e:	bf00      	nop
 8005480:	080055ed 	.word	0x080055ed
 8005484:	0800560f 	.word	0x0800560f
 8005488:	08005647 	.word	0x08005647
 800548c:	0800566b 	.word	0x0800566b
 8005490:	200006e0 	.word	0x200006e0

08005494 <stdio_exit_handler>:
 8005494:	4a02      	ldr	r2, [pc, #8]	@ (80054a0 <stdio_exit_handler+0xc>)
 8005496:	4903      	ldr	r1, [pc, #12]	@ (80054a4 <stdio_exit_handler+0x10>)
 8005498:	4803      	ldr	r0, [pc, #12]	@ (80054a8 <stdio_exit_handler+0x14>)
 800549a:	f000 b869 	b.w	8005570 <_fwalk_sglue>
 800549e:	bf00      	nop
 80054a0:	2000000c 	.word	0x2000000c
 80054a4:	0800808d 	.word	0x0800808d
 80054a8:	2000001c 	.word	0x2000001c

080054ac <cleanup_stdio>:
 80054ac:	6841      	ldr	r1, [r0, #4]
 80054ae:	4b0c      	ldr	r3, [pc, #48]	@ (80054e0 <cleanup_stdio+0x34>)
 80054b0:	4299      	cmp	r1, r3
 80054b2:	b510      	push	{r4, lr}
 80054b4:	4604      	mov	r4, r0
 80054b6:	d001      	beq.n	80054bc <cleanup_stdio+0x10>
 80054b8:	f002 fde8 	bl	800808c <_fflush_r>
 80054bc:	68a1      	ldr	r1, [r4, #8]
 80054be:	4b09      	ldr	r3, [pc, #36]	@ (80054e4 <cleanup_stdio+0x38>)
 80054c0:	4299      	cmp	r1, r3
 80054c2:	d002      	beq.n	80054ca <cleanup_stdio+0x1e>
 80054c4:	4620      	mov	r0, r4
 80054c6:	f002 fde1 	bl	800808c <_fflush_r>
 80054ca:	68e1      	ldr	r1, [r4, #12]
 80054cc:	4b06      	ldr	r3, [pc, #24]	@ (80054e8 <cleanup_stdio+0x3c>)
 80054ce:	4299      	cmp	r1, r3
 80054d0:	d004      	beq.n	80054dc <cleanup_stdio+0x30>
 80054d2:	4620      	mov	r0, r4
 80054d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054d8:	f002 bdd8 	b.w	800808c <_fflush_r>
 80054dc:	bd10      	pop	{r4, pc}
 80054de:	bf00      	nop
 80054e0:	200006e0 	.word	0x200006e0
 80054e4:	20000748 	.word	0x20000748
 80054e8:	200007b0 	.word	0x200007b0

080054ec <global_stdio_init.part.0>:
 80054ec:	b510      	push	{r4, lr}
 80054ee:	4b0b      	ldr	r3, [pc, #44]	@ (800551c <global_stdio_init.part.0+0x30>)
 80054f0:	4c0b      	ldr	r4, [pc, #44]	@ (8005520 <global_stdio_init.part.0+0x34>)
 80054f2:	4a0c      	ldr	r2, [pc, #48]	@ (8005524 <global_stdio_init.part.0+0x38>)
 80054f4:	601a      	str	r2, [r3, #0]
 80054f6:	4620      	mov	r0, r4
 80054f8:	2200      	movs	r2, #0
 80054fa:	2104      	movs	r1, #4
 80054fc:	f7ff ff94 	bl	8005428 <std>
 8005500:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005504:	2201      	movs	r2, #1
 8005506:	2109      	movs	r1, #9
 8005508:	f7ff ff8e 	bl	8005428 <std>
 800550c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005510:	2202      	movs	r2, #2
 8005512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005516:	2112      	movs	r1, #18
 8005518:	f7ff bf86 	b.w	8005428 <std>
 800551c:	20000818 	.word	0x20000818
 8005520:	200006e0 	.word	0x200006e0
 8005524:	08005495 	.word	0x08005495

08005528 <__sfp_lock_acquire>:
 8005528:	4801      	ldr	r0, [pc, #4]	@ (8005530 <__sfp_lock_acquire+0x8>)
 800552a:	f000 b93a 	b.w	80057a2 <__retarget_lock_acquire_recursive>
 800552e:	bf00      	nop
 8005530:	20000821 	.word	0x20000821

08005534 <__sfp_lock_release>:
 8005534:	4801      	ldr	r0, [pc, #4]	@ (800553c <__sfp_lock_release+0x8>)
 8005536:	f000 b935 	b.w	80057a4 <__retarget_lock_release_recursive>
 800553a:	bf00      	nop
 800553c:	20000821 	.word	0x20000821

08005540 <__sinit>:
 8005540:	b510      	push	{r4, lr}
 8005542:	4604      	mov	r4, r0
 8005544:	f7ff fff0 	bl	8005528 <__sfp_lock_acquire>
 8005548:	6a23      	ldr	r3, [r4, #32]
 800554a:	b11b      	cbz	r3, 8005554 <__sinit+0x14>
 800554c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005550:	f7ff bff0 	b.w	8005534 <__sfp_lock_release>
 8005554:	4b04      	ldr	r3, [pc, #16]	@ (8005568 <__sinit+0x28>)
 8005556:	6223      	str	r3, [r4, #32]
 8005558:	4b04      	ldr	r3, [pc, #16]	@ (800556c <__sinit+0x2c>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1f5      	bne.n	800554c <__sinit+0xc>
 8005560:	f7ff ffc4 	bl	80054ec <global_stdio_init.part.0>
 8005564:	e7f2      	b.n	800554c <__sinit+0xc>
 8005566:	bf00      	nop
 8005568:	080054ad 	.word	0x080054ad
 800556c:	20000818 	.word	0x20000818

08005570 <_fwalk_sglue>:
 8005570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005574:	4607      	mov	r7, r0
 8005576:	4688      	mov	r8, r1
 8005578:	4614      	mov	r4, r2
 800557a:	2600      	movs	r6, #0
 800557c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005580:	f1b9 0901 	subs.w	r9, r9, #1
 8005584:	d505      	bpl.n	8005592 <_fwalk_sglue+0x22>
 8005586:	6824      	ldr	r4, [r4, #0]
 8005588:	2c00      	cmp	r4, #0
 800558a:	d1f7      	bne.n	800557c <_fwalk_sglue+0xc>
 800558c:	4630      	mov	r0, r6
 800558e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005592:	89ab      	ldrh	r3, [r5, #12]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d907      	bls.n	80055a8 <_fwalk_sglue+0x38>
 8005598:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800559c:	3301      	adds	r3, #1
 800559e:	d003      	beq.n	80055a8 <_fwalk_sglue+0x38>
 80055a0:	4629      	mov	r1, r5
 80055a2:	4638      	mov	r0, r7
 80055a4:	47c0      	blx	r8
 80055a6:	4306      	orrs	r6, r0
 80055a8:	3568      	adds	r5, #104	@ 0x68
 80055aa:	e7e9      	b.n	8005580 <_fwalk_sglue+0x10>

080055ac <siprintf>:
 80055ac:	b40e      	push	{r1, r2, r3}
 80055ae:	b500      	push	{lr}
 80055b0:	b09c      	sub	sp, #112	@ 0x70
 80055b2:	ab1d      	add	r3, sp, #116	@ 0x74
 80055b4:	9002      	str	r0, [sp, #8]
 80055b6:	9006      	str	r0, [sp, #24]
 80055b8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80055bc:	4809      	ldr	r0, [pc, #36]	@ (80055e4 <siprintf+0x38>)
 80055be:	9107      	str	r1, [sp, #28]
 80055c0:	9104      	str	r1, [sp, #16]
 80055c2:	4909      	ldr	r1, [pc, #36]	@ (80055e8 <siprintf+0x3c>)
 80055c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80055c8:	9105      	str	r1, [sp, #20]
 80055ca:	6800      	ldr	r0, [r0, #0]
 80055cc:	9301      	str	r3, [sp, #4]
 80055ce:	a902      	add	r1, sp, #8
 80055d0:	f002 fbdc 	bl	8007d8c <_svfiprintf_r>
 80055d4:	9b02      	ldr	r3, [sp, #8]
 80055d6:	2200      	movs	r2, #0
 80055d8:	701a      	strb	r2, [r3, #0]
 80055da:	b01c      	add	sp, #112	@ 0x70
 80055dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80055e0:	b003      	add	sp, #12
 80055e2:	4770      	bx	lr
 80055e4:	20000018 	.word	0x20000018
 80055e8:	ffff0208 	.word	0xffff0208

080055ec <__sread>:
 80055ec:	b510      	push	{r4, lr}
 80055ee:	460c      	mov	r4, r1
 80055f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055f4:	f000 f886 	bl	8005704 <_read_r>
 80055f8:	2800      	cmp	r0, #0
 80055fa:	bfab      	itete	ge
 80055fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80055fe:	89a3      	ldrhlt	r3, [r4, #12]
 8005600:	181b      	addge	r3, r3, r0
 8005602:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005606:	bfac      	ite	ge
 8005608:	6563      	strge	r3, [r4, #84]	@ 0x54
 800560a:	81a3      	strhlt	r3, [r4, #12]
 800560c:	bd10      	pop	{r4, pc}

0800560e <__swrite>:
 800560e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005612:	461f      	mov	r7, r3
 8005614:	898b      	ldrh	r3, [r1, #12]
 8005616:	05db      	lsls	r3, r3, #23
 8005618:	4605      	mov	r5, r0
 800561a:	460c      	mov	r4, r1
 800561c:	4616      	mov	r6, r2
 800561e:	d505      	bpl.n	800562c <__swrite+0x1e>
 8005620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005624:	2302      	movs	r3, #2
 8005626:	2200      	movs	r2, #0
 8005628:	f000 f85a 	bl	80056e0 <_lseek_r>
 800562c:	89a3      	ldrh	r3, [r4, #12]
 800562e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005632:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005636:	81a3      	strh	r3, [r4, #12]
 8005638:	4632      	mov	r2, r6
 800563a:	463b      	mov	r3, r7
 800563c:	4628      	mov	r0, r5
 800563e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005642:	f000 b871 	b.w	8005728 <_write_r>

08005646 <__sseek>:
 8005646:	b510      	push	{r4, lr}
 8005648:	460c      	mov	r4, r1
 800564a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800564e:	f000 f847 	bl	80056e0 <_lseek_r>
 8005652:	1c43      	adds	r3, r0, #1
 8005654:	89a3      	ldrh	r3, [r4, #12]
 8005656:	bf15      	itete	ne
 8005658:	6560      	strne	r0, [r4, #84]	@ 0x54
 800565a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800565e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005662:	81a3      	strheq	r3, [r4, #12]
 8005664:	bf18      	it	ne
 8005666:	81a3      	strhne	r3, [r4, #12]
 8005668:	bd10      	pop	{r4, pc}

0800566a <__sclose>:
 800566a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800566e:	f000 b827 	b.w	80056c0 <_close_r>

08005672 <memmove>:
 8005672:	4288      	cmp	r0, r1
 8005674:	b510      	push	{r4, lr}
 8005676:	eb01 0402 	add.w	r4, r1, r2
 800567a:	d902      	bls.n	8005682 <memmove+0x10>
 800567c:	4284      	cmp	r4, r0
 800567e:	4623      	mov	r3, r4
 8005680:	d807      	bhi.n	8005692 <memmove+0x20>
 8005682:	1e43      	subs	r3, r0, #1
 8005684:	42a1      	cmp	r1, r4
 8005686:	d008      	beq.n	800569a <memmove+0x28>
 8005688:	f811 2b01 	ldrb.w	r2, [r1], #1
 800568c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005690:	e7f8      	b.n	8005684 <memmove+0x12>
 8005692:	4402      	add	r2, r0
 8005694:	4601      	mov	r1, r0
 8005696:	428a      	cmp	r2, r1
 8005698:	d100      	bne.n	800569c <memmove+0x2a>
 800569a:	bd10      	pop	{r4, pc}
 800569c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056a0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80056a4:	e7f7      	b.n	8005696 <memmove+0x24>

080056a6 <memset>:
 80056a6:	4402      	add	r2, r0
 80056a8:	4603      	mov	r3, r0
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d100      	bne.n	80056b0 <memset+0xa>
 80056ae:	4770      	bx	lr
 80056b0:	f803 1b01 	strb.w	r1, [r3], #1
 80056b4:	e7f9      	b.n	80056aa <memset+0x4>
	...

080056b8 <_localeconv_r>:
 80056b8:	4800      	ldr	r0, [pc, #0]	@ (80056bc <_localeconv_r+0x4>)
 80056ba:	4770      	bx	lr
 80056bc:	20000158 	.word	0x20000158

080056c0 <_close_r>:
 80056c0:	b538      	push	{r3, r4, r5, lr}
 80056c2:	4d06      	ldr	r5, [pc, #24]	@ (80056dc <_close_r+0x1c>)
 80056c4:	2300      	movs	r3, #0
 80056c6:	4604      	mov	r4, r0
 80056c8:	4608      	mov	r0, r1
 80056ca:	602b      	str	r3, [r5, #0]
 80056cc:	f7fc fa97 	bl	8001bfe <_close>
 80056d0:	1c43      	adds	r3, r0, #1
 80056d2:	d102      	bne.n	80056da <_close_r+0x1a>
 80056d4:	682b      	ldr	r3, [r5, #0]
 80056d6:	b103      	cbz	r3, 80056da <_close_r+0x1a>
 80056d8:	6023      	str	r3, [r4, #0]
 80056da:	bd38      	pop	{r3, r4, r5, pc}
 80056dc:	2000081c 	.word	0x2000081c

080056e0 <_lseek_r>:
 80056e0:	b538      	push	{r3, r4, r5, lr}
 80056e2:	4d07      	ldr	r5, [pc, #28]	@ (8005700 <_lseek_r+0x20>)
 80056e4:	4604      	mov	r4, r0
 80056e6:	4608      	mov	r0, r1
 80056e8:	4611      	mov	r1, r2
 80056ea:	2200      	movs	r2, #0
 80056ec:	602a      	str	r2, [r5, #0]
 80056ee:	461a      	mov	r2, r3
 80056f0:	f7fc faac 	bl	8001c4c <_lseek>
 80056f4:	1c43      	adds	r3, r0, #1
 80056f6:	d102      	bne.n	80056fe <_lseek_r+0x1e>
 80056f8:	682b      	ldr	r3, [r5, #0]
 80056fa:	b103      	cbz	r3, 80056fe <_lseek_r+0x1e>
 80056fc:	6023      	str	r3, [r4, #0]
 80056fe:	bd38      	pop	{r3, r4, r5, pc}
 8005700:	2000081c 	.word	0x2000081c

08005704 <_read_r>:
 8005704:	b538      	push	{r3, r4, r5, lr}
 8005706:	4d07      	ldr	r5, [pc, #28]	@ (8005724 <_read_r+0x20>)
 8005708:	4604      	mov	r4, r0
 800570a:	4608      	mov	r0, r1
 800570c:	4611      	mov	r1, r2
 800570e:	2200      	movs	r2, #0
 8005710:	602a      	str	r2, [r5, #0]
 8005712:	461a      	mov	r2, r3
 8005714:	f7fc fa3a 	bl	8001b8c <_read>
 8005718:	1c43      	adds	r3, r0, #1
 800571a:	d102      	bne.n	8005722 <_read_r+0x1e>
 800571c:	682b      	ldr	r3, [r5, #0]
 800571e:	b103      	cbz	r3, 8005722 <_read_r+0x1e>
 8005720:	6023      	str	r3, [r4, #0]
 8005722:	bd38      	pop	{r3, r4, r5, pc}
 8005724:	2000081c 	.word	0x2000081c

08005728 <_write_r>:
 8005728:	b538      	push	{r3, r4, r5, lr}
 800572a:	4d07      	ldr	r5, [pc, #28]	@ (8005748 <_write_r+0x20>)
 800572c:	4604      	mov	r4, r0
 800572e:	4608      	mov	r0, r1
 8005730:	4611      	mov	r1, r2
 8005732:	2200      	movs	r2, #0
 8005734:	602a      	str	r2, [r5, #0]
 8005736:	461a      	mov	r2, r3
 8005738:	f7fc fa45 	bl	8001bc6 <_write>
 800573c:	1c43      	adds	r3, r0, #1
 800573e:	d102      	bne.n	8005746 <_write_r+0x1e>
 8005740:	682b      	ldr	r3, [r5, #0]
 8005742:	b103      	cbz	r3, 8005746 <_write_r+0x1e>
 8005744:	6023      	str	r3, [r4, #0]
 8005746:	bd38      	pop	{r3, r4, r5, pc}
 8005748:	2000081c 	.word	0x2000081c

0800574c <__errno>:
 800574c:	4b01      	ldr	r3, [pc, #4]	@ (8005754 <__errno+0x8>)
 800574e:	6818      	ldr	r0, [r3, #0]
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	20000018 	.word	0x20000018

08005758 <__libc_init_array>:
 8005758:	b570      	push	{r4, r5, r6, lr}
 800575a:	4d0d      	ldr	r5, [pc, #52]	@ (8005790 <__libc_init_array+0x38>)
 800575c:	4c0d      	ldr	r4, [pc, #52]	@ (8005794 <__libc_init_array+0x3c>)
 800575e:	1b64      	subs	r4, r4, r5
 8005760:	10a4      	asrs	r4, r4, #2
 8005762:	2600      	movs	r6, #0
 8005764:	42a6      	cmp	r6, r4
 8005766:	d109      	bne.n	800577c <__libc_init_array+0x24>
 8005768:	4d0b      	ldr	r5, [pc, #44]	@ (8005798 <__libc_init_array+0x40>)
 800576a:	4c0c      	ldr	r4, [pc, #48]	@ (800579c <__libc_init_array+0x44>)
 800576c:	f003 fb56 	bl	8008e1c <_init>
 8005770:	1b64      	subs	r4, r4, r5
 8005772:	10a4      	asrs	r4, r4, #2
 8005774:	2600      	movs	r6, #0
 8005776:	42a6      	cmp	r6, r4
 8005778:	d105      	bne.n	8005786 <__libc_init_array+0x2e>
 800577a:	bd70      	pop	{r4, r5, r6, pc}
 800577c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005780:	4798      	blx	r3
 8005782:	3601      	adds	r6, #1
 8005784:	e7ee      	b.n	8005764 <__libc_init_array+0xc>
 8005786:	f855 3b04 	ldr.w	r3, [r5], #4
 800578a:	4798      	blx	r3
 800578c:	3601      	adds	r6, #1
 800578e:	e7f2      	b.n	8005776 <__libc_init_array+0x1e>
 8005790:	0800a1f8 	.word	0x0800a1f8
 8005794:	0800a1f8 	.word	0x0800a1f8
 8005798:	0800a1f8 	.word	0x0800a1f8
 800579c:	0800a1fc 	.word	0x0800a1fc

080057a0 <__retarget_lock_init_recursive>:
 80057a0:	4770      	bx	lr

080057a2 <__retarget_lock_acquire_recursive>:
 80057a2:	4770      	bx	lr

080057a4 <__retarget_lock_release_recursive>:
 80057a4:	4770      	bx	lr

080057a6 <memcpy>:
 80057a6:	440a      	add	r2, r1
 80057a8:	4291      	cmp	r1, r2
 80057aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80057ae:	d100      	bne.n	80057b2 <memcpy+0xc>
 80057b0:	4770      	bx	lr
 80057b2:	b510      	push	{r4, lr}
 80057b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057bc:	4291      	cmp	r1, r2
 80057be:	d1f9      	bne.n	80057b4 <memcpy+0xe>
 80057c0:	bd10      	pop	{r4, pc}
	...

080057c4 <nanf>:
 80057c4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80057cc <nanf+0x8>
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	7fc00000 	.word	0x7fc00000

080057d0 <quorem>:
 80057d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057d4:	6903      	ldr	r3, [r0, #16]
 80057d6:	690c      	ldr	r4, [r1, #16]
 80057d8:	42a3      	cmp	r3, r4
 80057da:	4607      	mov	r7, r0
 80057dc:	db7e      	blt.n	80058dc <quorem+0x10c>
 80057de:	3c01      	subs	r4, #1
 80057e0:	f101 0814 	add.w	r8, r1, #20
 80057e4:	00a3      	lsls	r3, r4, #2
 80057e6:	f100 0514 	add.w	r5, r0, #20
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80057f0:	9301      	str	r3, [sp, #4]
 80057f2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80057f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80057fa:	3301      	adds	r3, #1
 80057fc:	429a      	cmp	r2, r3
 80057fe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005802:	fbb2 f6f3 	udiv	r6, r2, r3
 8005806:	d32e      	bcc.n	8005866 <quorem+0x96>
 8005808:	f04f 0a00 	mov.w	sl, #0
 800580c:	46c4      	mov	ip, r8
 800580e:	46ae      	mov	lr, r5
 8005810:	46d3      	mov	fp, sl
 8005812:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005816:	b298      	uxth	r0, r3
 8005818:	fb06 a000 	mla	r0, r6, r0, sl
 800581c:	0c02      	lsrs	r2, r0, #16
 800581e:	0c1b      	lsrs	r3, r3, #16
 8005820:	fb06 2303 	mla	r3, r6, r3, r2
 8005824:	f8de 2000 	ldr.w	r2, [lr]
 8005828:	b280      	uxth	r0, r0
 800582a:	b292      	uxth	r2, r2
 800582c:	1a12      	subs	r2, r2, r0
 800582e:	445a      	add	r2, fp
 8005830:	f8de 0000 	ldr.w	r0, [lr]
 8005834:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005838:	b29b      	uxth	r3, r3
 800583a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800583e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005842:	b292      	uxth	r2, r2
 8005844:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005848:	45e1      	cmp	r9, ip
 800584a:	f84e 2b04 	str.w	r2, [lr], #4
 800584e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005852:	d2de      	bcs.n	8005812 <quorem+0x42>
 8005854:	9b00      	ldr	r3, [sp, #0]
 8005856:	58eb      	ldr	r3, [r5, r3]
 8005858:	b92b      	cbnz	r3, 8005866 <quorem+0x96>
 800585a:	9b01      	ldr	r3, [sp, #4]
 800585c:	3b04      	subs	r3, #4
 800585e:	429d      	cmp	r5, r3
 8005860:	461a      	mov	r2, r3
 8005862:	d32f      	bcc.n	80058c4 <quorem+0xf4>
 8005864:	613c      	str	r4, [r7, #16]
 8005866:	4638      	mov	r0, r7
 8005868:	f001 f9c2 	bl	8006bf0 <__mcmp>
 800586c:	2800      	cmp	r0, #0
 800586e:	db25      	blt.n	80058bc <quorem+0xec>
 8005870:	4629      	mov	r1, r5
 8005872:	2000      	movs	r0, #0
 8005874:	f858 2b04 	ldr.w	r2, [r8], #4
 8005878:	f8d1 c000 	ldr.w	ip, [r1]
 800587c:	fa1f fe82 	uxth.w	lr, r2
 8005880:	fa1f f38c 	uxth.w	r3, ip
 8005884:	eba3 030e 	sub.w	r3, r3, lr
 8005888:	4403      	add	r3, r0
 800588a:	0c12      	lsrs	r2, r2, #16
 800588c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005890:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005894:	b29b      	uxth	r3, r3
 8005896:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800589a:	45c1      	cmp	r9, r8
 800589c:	f841 3b04 	str.w	r3, [r1], #4
 80058a0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80058a4:	d2e6      	bcs.n	8005874 <quorem+0xa4>
 80058a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80058aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058ae:	b922      	cbnz	r2, 80058ba <quorem+0xea>
 80058b0:	3b04      	subs	r3, #4
 80058b2:	429d      	cmp	r5, r3
 80058b4:	461a      	mov	r2, r3
 80058b6:	d30b      	bcc.n	80058d0 <quorem+0x100>
 80058b8:	613c      	str	r4, [r7, #16]
 80058ba:	3601      	adds	r6, #1
 80058bc:	4630      	mov	r0, r6
 80058be:	b003      	add	sp, #12
 80058c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058c4:	6812      	ldr	r2, [r2, #0]
 80058c6:	3b04      	subs	r3, #4
 80058c8:	2a00      	cmp	r2, #0
 80058ca:	d1cb      	bne.n	8005864 <quorem+0x94>
 80058cc:	3c01      	subs	r4, #1
 80058ce:	e7c6      	b.n	800585e <quorem+0x8e>
 80058d0:	6812      	ldr	r2, [r2, #0]
 80058d2:	3b04      	subs	r3, #4
 80058d4:	2a00      	cmp	r2, #0
 80058d6:	d1ef      	bne.n	80058b8 <quorem+0xe8>
 80058d8:	3c01      	subs	r4, #1
 80058da:	e7ea      	b.n	80058b2 <quorem+0xe2>
 80058dc:	2000      	movs	r0, #0
 80058de:	e7ee      	b.n	80058be <quorem+0xee>

080058e0 <_dtoa_r>:
 80058e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e4:	69c7      	ldr	r7, [r0, #28]
 80058e6:	b099      	sub	sp, #100	@ 0x64
 80058e8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80058ec:	ec55 4b10 	vmov	r4, r5, d0
 80058f0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80058f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80058f4:	4683      	mov	fp, r0
 80058f6:	920e      	str	r2, [sp, #56]	@ 0x38
 80058f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80058fa:	b97f      	cbnz	r7, 800591c <_dtoa_r+0x3c>
 80058fc:	2010      	movs	r0, #16
 80058fe:	f000 fdfd 	bl	80064fc <malloc>
 8005902:	4602      	mov	r2, r0
 8005904:	f8cb 001c 	str.w	r0, [fp, #28]
 8005908:	b920      	cbnz	r0, 8005914 <_dtoa_r+0x34>
 800590a:	4ba7      	ldr	r3, [pc, #668]	@ (8005ba8 <_dtoa_r+0x2c8>)
 800590c:	21ef      	movs	r1, #239	@ 0xef
 800590e:	48a7      	ldr	r0, [pc, #668]	@ (8005bac <_dtoa_r+0x2cc>)
 8005910:	f002 fc0e 	bl	8008130 <__assert_func>
 8005914:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005918:	6007      	str	r7, [r0, #0]
 800591a:	60c7      	str	r7, [r0, #12]
 800591c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005920:	6819      	ldr	r1, [r3, #0]
 8005922:	b159      	cbz	r1, 800593c <_dtoa_r+0x5c>
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	604a      	str	r2, [r1, #4]
 8005928:	2301      	movs	r3, #1
 800592a:	4093      	lsls	r3, r2
 800592c:	608b      	str	r3, [r1, #8]
 800592e:	4658      	mov	r0, fp
 8005930:	f000 feda 	bl	80066e8 <_Bfree>
 8005934:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005938:	2200      	movs	r2, #0
 800593a:	601a      	str	r2, [r3, #0]
 800593c:	1e2b      	subs	r3, r5, #0
 800593e:	bfb9      	ittee	lt
 8005940:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005944:	9303      	strlt	r3, [sp, #12]
 8005946:	2300      	movge	r3, #0
 8005948:	6033      	strge	r3, [r6, #0]
 800594a:	9f03      	ldr	r7, [sp, #12]
 800594c:	4b98      	ldr	r3, [pc, #608]	@ (8005bb0 <_dtoa_r+0x2d0>)
 800594e:	bfbc      	itt	lt
 8005950:	2201      	movlt	r2, #1
 8005952:	6032      	strlt	r2, [r6, #0]
 8005954:	43bb      	bics	r3, r7
 8005956:	d112      	bne.n	800597e <_dtoa_r+0x9e>
 8005958:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800595a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800595e:	6013      	str	r3, [r2, #0]
 8005960:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005964:	4323      	orrs	r3, r4
 8005966:	f000 854d 	beq.w	8006404 <_dtoa_r+0xb24>
 800596a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800596c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005bc4 <_dtoa_r+0x2e4>
 8005970:	2b00      	cmp	r3, #0
 8005972:	f000 854f 	beq.w	8006414 <_dtoa_r+0xb34>
 8005976:	f10a 0303 	add.w	r3, sl, #3
 800597a:	f000 bd49 	b.w	8006410 <_dtoa_r+0xb30>
 800597e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005982:	2200      	movs	r2, #0
 8005984:	ec51 0b17 	vmov	r0, r1, d7
 8005988:	2300      	movs	r3, #0
 800598a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800598e:	f7fb f89b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005992:	4680      	mov	r8, r0
 8005994:	b158      	cbz	r0, 80059ae <_dtoa_r+0xce>
 8005996:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005998:	2301      	movs	r3, #1
 800599a:	6013      	str	r3, [r2, #0]
 800599c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800599e:	b113      	cbz	r3, 80059a6 <_dtoa_r+0xc6>
 80059a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80059a2:	4b84      	ldr	r3, [pc, #528]	@ (8005bb4 <_dtoa_r+0x2d4>)
 80059a4:	6013      	str	r3, [r2, #0]
 80059a6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005bc8 <_dtoa_r+0x2e8>
 80059aa:	f000 bd33 	b.w	8006414 <_dtoa_r+0xb34>
 80059ae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80059b2:	aa16      	add	r2, sp, #88	@ 0x58
 80059b4:	a917      	add	r1, sp, #92	@ 0x5c
 80059b6:	4658      	mov	r0, fp
 80059b8:	f001 fa3a 	bl	8006e30 <__d2b>
 80059bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80059c0:	4681      	mov	r9, r0
 80059c2:	2e00      	cmp	r6, #0
 80059c4:	d077      	beq.n	8005ab6 <_dtoa_r+0x1d6>
 80059c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80059c8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80059cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80059d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80059dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80059e0:	4619      	mov	r1, r3
 80059e2:	2200      	movs	r2, #0
 80059e4:	4b74      	ldr	r3, [pc, #464]	@ (8005bb8 <_dtoa_r+0x2d8>)
 80059e6:	f7fa fc4f 	bl	8000288 <__aeabi_dsub>
 80059ea:	a369      	add	r3, pc, #420	@ (adr r3, 8005b90 <_dtoa_r+0x2b0>)
 80059ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f0:	f7fa fe02 	bl	80005f8 <__aeabi_dmul>
 80059f4:	a368      	add	r3, pc, #416	@ (adr r3, 8005b98 <_dtoa_r+0x2b8>)
 80059f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fa:	f7fa fc47 	bl	800028c <__adddf3>
 80059fe:	4604      	mov	r4, r0
 8005a00:	4630      	mov	r0, r6
 8005a02:	460d      	mov	r5, r1
 8005a04:	f7fa fd8e 	bl	8000524 <__aeabi_i2d>
 8005a08:	a365      	add	r3, pc, #404	@ (adr r3, 8005ba0 <_dtoa_r+0x2c0>)
 8005a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0e:	f7fa fdf3 	bl	80005f8 <__aeabi_dmul>
 8005a12:	4602      	mov	r2, r0
 8005a14:	460b      	mov	r3, r1
 8005a16:	4620      	mov	r0, r4
 8005a18:	4629      	mov	r1, r5
 8005a1a:	f7fa fc37 	bl	800028c <__adddf3>
 8005a1e:	4604      	mov	r4, r0
 8005a20:	460d      	mov	r5, r1
 8005a22:	f7fb f899 	bl	8000b58 <__aeabi_d2iz>
 8005a26:	2200      	movs	r2, #0
 8005a28:	4607      	mov	r7, r0
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	4629      	mov	r1, r5
 8005a30:	f7fb f854 	bl	8000adc <__aeabi_dcmplt>
 8005a34:	b140      	cbz	r0, 8005a48 <_dtoa_r+0x168>
 8005a36:	4638      	mov	r0, r7
 8005a38:	f7fa fd74 	bl	8000524 <__aeabi_i2d>
 8005a3c:	4622      	mov	r2, r4
 8005a3e:	462b      	mov	r3, r5
 8005a40:	f7fb f842 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a44:	b900      	cbnz	r0, 8005a48 <_dtoa_r+0x168>
 8005a46:	3f01      	subs	r7, #1
 8005a48:	2f16      	cmp	r7, #22
 8005a4a:	d851      	bhi.n	8005af0 <_dtoa_r+0x210>
 8005a4c:	4b5b      	ldr	r3, [pc, #364]	@ (8005bbc <_dtoa_r+0x2dc>)
 8005a4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a5a:	f7fb f83f 	bl	8000adc <__aeabi_dcmplt>
 8005a5e:	2800      	cmp	r0, #0
 8005a60:	d048      	beq.n	8005af4 <_dtoa_r+0x214>
 8005a62:	3f01      	subs	r7, #1
 8005a64:	2300      	movs	r3, #0
 8005a66:	9312      	str	r3, [sp, #72]	@ 0x48
 8005a68:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005a6a:	1b9b      	subs	r3, r3, r6
 8005a6c:	1e5a      	subs	r2, r3, #1
 8005a6e:	bf44      	itt	mi
 8005a70:	f1c3 0801 	rsbmi	r8, r3, #1
 8005a74:	2300      	movmi	r3, #0
 8005a76:	9208      	str	r2, [sp, #32]
 8005a78:	bf54      	ite	pl
 8005a7a:	f04f 0800 	movpl.w	r8, #0
 8005a7e:	9308      	strmi	r3, [sp, #32]
 8005a80:	2f00      	cmp	r7, #0
 8005a82:	db39      	blt.n	8005af8 <_dtoa_r+0x218>
 8005a84:	9b08      	ldr	r3, [sp, #32]
 8005a86:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005a88:	443b      	add	r3, r7
 8005a8a:	9308      	str	r3, [sp, #32]
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a92:	2b09      	cmp	r3, #9
 8005a94:	d864      	bhi.n	8005b60 <_dtoa_r+0x280>
 8005a96:	2b05      	cmp	r3, #5
 8005a98:	bfc4      	itt	gt
 8005a9a:	3b04      	subgt	r3, #4
 8005a9c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005a9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005aa0:	f1a3 0302 	sub.w	r3, r3, #2
 8005aa4:	bfcc      	ite	gt
 8005aa6:	2400      	movgt	r4, #0
 8005aa8:	2401      	movle	r4, #1
 8005aaa:	2b03      	cmp	r3, #3
 8005aac:	d863      	bhi.n	8005b76 <_dtoa_r+0x296>
 8005aae:	e8df f003 	tbb	[pc, r3]
 8005ab2:	372a      	.short	0x372a
 8005ab4:	5535      	.short	0x5535
 8005ab6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005aba:	441e      	add	r6, r3
 8005abc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005ac0:	2b20      	cmp	r3, #32
 8005ac2:	bfc1      	itttt	gt
 8005ac4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005ac8:	409f      	lslgt	r7, r3
 8005aca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005ace:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005ad2:	bfd6      	itet	le
 8005ad4:	f1c3 0320 	rsble	r3, r3, #32
 8005ad8:	ea47 0003 	orrgt.w	r0, r7, r3
 8005adc:	fa04 f003 	lslle.w	r0, r4, r3
 8005ae0:	f7fa fd10 	bl	8000504 <__aeabi_ui2d>
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005aea:	3e01      	subs	r6, #1
 8005aec:	9214      	str	r2, [sp, #80]	@ 0x50
 8005aee:	e777      	b.n	80059e0 <_dtoa_r+0x100>
 8005af0:	2301      	movs	r3, #1
 8005af2:	e7b8      	b.n	8005a66 <_dtoa_r+0x186>
 8005af4:	9012      	str	r0, [sp, #72]	@ 0x48
 8005af6:	e7b7      	b.n	8005a68 <_dtoa_r+0x188>
 8005af8:	427b      	negs	r3, r7
 8005afa:	930a      	str	r3, [sp, #40]	@ 0x28
 8005afc:	2300      	movs	r3, #0
 8005afe:	eba8 0807 	sub.w	r8, r8, r7
 8005b02:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005b04:	e7c4      	b.n	8005a90 <_dtoa_r+0x1b0>
 8005b06:	2300      	movs	r3, #0
 8005b08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	dc35      	bgt.n	8005b7c <_dtoa_r+0x29c>
 8005b10:	2301      	movs	r3, #1
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	9307      	str	r3, [sp, #28]
 8005b16:	461a      	mov	r2, r3
 8005b18:	920e      	str	r2, [sp, #56]	@ 0x38
 8005b1a:	e00b      	b.n	8005b34 <_dtoa_r+0x254>
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e7f3      	b.n	8005b08 <_dtoa_r+0x228>
 8005b20:	2300      	movs	r3, #0
 8005b22:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b26:	18fb      	adds	r3, r7, r3
 8005b28:	9300      	str	r3, [sp, #0]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	9307      	str	r3, [sp, #28]
 8005b30:	bfb8      	it	lt
 8005b32:	2301      	movlt	r3, #1
 8005b34:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005b38:	2100      	movs	r1, #0
 8005b3a:	2204      	movs	r2, #4
 8005b3c:	f102 0514 	add.w	r5, r2, #20
 8005b40:	429d      	cmp	r5, r3
 8005b42:	d91f      	bls.n	8005b84 <_dtoa_r+0x2a4>
 8005b44:	6041      	str	r1, [r0, #4]
 8005b46:	4658      	mov	r0, fp
 8005b48:	f000 fd8e 	bl	8006668 <_Balloc>
 8005b4c:	4682      	mov	sl, r0
 8005b4e:	2800      	cmp	r0, #0
 8005b50:	d13c      	bne.n	8005bcc <_dtoa_r+0x2ec>
 8005b52:	4b1b      	ldr	r3, [pc, #108]	@ (8005bc0 <_dtoa_r+0x2e0>)
 8005b54:	4602      	mov	r2, r0
 8005b56:	f240 11af 	movw	r1, #431	@ 0x1af
 8005b5a:	e6d8      	b.n	800590e <_dtoa_r+0x2e>
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e7e0      	b.n	8005b22 <_dtoa_r+0x242>
 8005b60:	2401      	movs	r4, #1
 8005b62:	2300      	movs	r3, #0
 8005b64:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b66:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005b68:	f04f 33ff 	mov.w	r3, #4294967295
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	9307      	str	r3, [sp, #28]
 8005b70:	2200      	movs	r2, #0
 8005b72:	2312      	movs	r3, #18
 8005b74:	e7d0      	b.n	8005b18 <_dtoa_r+0x238>
 8005b76:	2301      	movs	r3, #1
 8005b78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b7a:	e7f5      	b.n	8005b68 <_dtoa_r+0x288>
 8005b7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b7e:	9300      	str	r3, [sp, #0]
 8005b80:	9307      	str	r3, [sp, #28]
 8005b82:	e7d7      	b.n	8005b34 <_dtoa_r+0x254>
 8005b84:	3101      	adds	r1, #1
 8005b86:	0052      	lsls	r2, r2, #1
 8005b88:	e7d8      	b.n	8005b3c <_dtoa_r+0x25c>
 8005b8a:	bf00      	nop
 8005b8c:	f3af 8000 	nop.w
 8005b90:	636f4361 	.word	0x636f4361
 8005b94:	3fd287a7 	.word	0x3fd287a7
 8005b98:	8b60c8b3 	.word	0x8b60c8b3
 8005b9c:	3fc68a28 	.word	0x3fc68a28
 8005ba0:	509f79fb 	.word	0x509f79fb
 8005ba4:	3fd34413 	.word	0x3fd34413
 8005ba8:	08009e06 	.word	0x08009e06
 8005bac:	08009e1d 	.word	0x08009e1d
 8005bb0:	7ff00000 	.word	0x7ff00000
 8005bb4:	08009dd1 	.word	0x08009dd1
 8005bb8:	3ff80000 	.word	0x3ff80000
 8005bbc:	08009f18 	.word	0x08009f18
 8005bc0:	08009e75 	.word	0x08009e75
 8005bc4:	08009e02 	.word	0x08009e02
 8005bc8:	08009dd0 	.word	0x08009dd0
 8005bcc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005bd0:	6018      	str	r0, [r3, #0]
 8005bd2:	9b07      	ldr	r3, [sp, #28]
 8005bd4:	2b0e      	cmp	r3, #14
 8005bd6:	f200 80a4 	bhi.w	8005d22 <_dtoa_r+0x442>
 8005bda:	2c00      	cmp	r4, #0
 8005bdc:	f000 80a1 	beq.w	8005d22 <_dtoa_r+0x442>
 8005be0:	2f00      	cmp	r7, #0
 8005be2:	dd33      	ble.n	8005c4c <_dtoa_r+0x36c>
 8005be4:	4bad      	ldr	r3, [pc, #692]	@ (8005e9c <_dtoa_r+0x5bc>)
 8005be6:	f007 020f 	and.w	r2, r7, #15
 8005bea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bee:	ed93 7b00 	vldr	d7, [r3]
 8005bf2:	05f8      	lsls	r0, r7, #23
 8005bf4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005bf8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005bfc:	d516      	bpl.n	8005c2c <_dtoa_r+0x34c>
 8005bfe:	4ba8      	ldr	r3, [pc, #672]	@ (8005ea0 <_dtoa_r+0x5c0>)
 8005c00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c08:	f7fa fe20 	bl	800084c <__aeabi_ddiv>
 8005c0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c10:	f004 040f 	and.w	r4, r4, #15
 8005c14:	2603      	movs	r6, #3
 8005c16:	4da2      	ldr	r5, [pc, #648]	@ (8005ea0 <_dtoa_r+0x5c0>)
 8005c18:	b954      	cbnz	r4, 8005c30 <_dtoa_r+0x350>
 8005c1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c22:	f7fa fe13 	bl	800084c <__aeabi_ddiv>
 8005c26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c2a:	e028      	b.n	8005c7e <_dtoa_r+0x39e>
 8005c2c:	2602      	movs	r6, #2
 8005c2e:	e7f2      	b.n	8005c16 <_dtoa_r+0x336>
 8005c30:	07e1      	lsls	r1, r4, #31
 8005c32:	d508      	bpl.n	8005c46 <_dtoa_r+0x366>
 8005c34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c38:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005c3c:	f7fa fcdc 	bl	80005f8 <__aeabi_dmul>
 8005c40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c44:	3601      	adds	r6, #1
 8005c46:	1064      	asrs	r4, r4, #1
 8005c48:	3508      	adds	r5, #8
 8005c4a:	e7e5      	b.n	8005c18 <_dtoa_r+0x338>
 8005c4c:	f000 80d2 	beq.w	8005df4 <_dtoa_r+0x514>
 8005c50:	427c      	negs	r4, r7
 8005c52:	4b92      	ldr	r3, [pc, #584]	@ (8005e9c <_dtoa_r+0x5bc>)
 8005c54:	4d92      	ldr	r5, [pc, #584]	@ (8005ea0 <_dtoa_r+0x5c0>)
 8005c56:	f004 020f 	and.w	r2, r4, #15
 8005c5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c66:	f7fa fcc7 	bl	80005f8 <__aeabi_dmul>
 8005c6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c6e:	1124      	asrs	r4, r4, #4
 8005c70:	2300      	movs	r3, #0
 8005c72:	2602      	movs	r6, #2
 8005c74:	2c00      	cmp	r4, #0
 8005c76:	f040 80b2 	bne.w	8005dde <_dtoa_r+0x4fe>
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1d3      	bne.n	8005c26 <_dtoa_r+0x346>
 8005c7e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005c80:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f000 80b7 	beq.w	8005df8 <_dtoa_r+0x518>
 8005c8a:	4b86      	ldr	r3, [pc, #536]	@ (8005ea4 <_dtoa_r+0x5c4>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	4620      	mov	r0, r4
 8005c90:	4629      	mov	r1, r5
 8005c92:	f7fa ff23 	bl	8000adc <__aeabi_dcmplt>
 8005c96:	2800      	cmp	r0, #0
 8005c98:	f000 80ae 	beq.w	8005df8 <_dtoa_r+0x518>
 8005c9c:	9b07      	ldr	r3, [sp, #28]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f000 80aa 	beq.w	8005df8 <_dtoa_r+0x518>
 8005ca4:	9b00      	ldr	r3, [sp, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	dd37      	ble.n	8005d1a <_dtoa_r+0x43a>
 8005caa:	1e7b      	subs	r3, r7, #1
 8005cac:	9304      	str	r3, [sp, #16]
 8005cae:	4620      	mov	r0, r4
 8005cb0:	4b7d      	ldr	r3, [pc, #500]	@ (8005ea8 <_dtoa_r+0x5c8>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	4629      	mov	r1, r5
 8005cb6:	f7fa fc9f 	bl	80005f8 <__aeabi_dmul>
 8005cba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cbe:	9c00      	ldr	r4, [sp, #0]
 8005cc0:	3601      	adds	r6, #1
 8005cc2:	4630      	mov	r0, r6
 8005cc4:	f7fa fc2e 	bl	8000524 <__aeabi_i2d>
 8005cc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ccc:	f7fa fc94 	bl	80005f8 <__aeabi_dmul>
 8005cd0:	4b76      	ldr	r3, [pc, #472]	@ (8005eac <_dtoa_r+0x5cc>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f7fa fada 	bl	800028c <__adddf3>
 8005cd8:	4605      	mov	r5, r0
 8005cda:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005cde:	2c00      	cmp	r4, #0
 8005ce0:	f040 808d 	bne.w	8005dfe <_dtoa_r+0x51e>
 8005ce4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ce8:	4b71      	ldr	r3, [pc, #452]	@ (8005eb0 <_dtoa_r+0x5d0>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	f7fa facc 	bl	8000288 <__aeabi_dsub>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005cf8:	462a      	mov	r2, r5
 8005cfa:	4633      	mov	r3, r6
 8005cfc:	f7fa ff0c 	bl	8000b18 <__aeabi_dcmpgt>
 8005d00:	2800      	cmp	r0, #0
 8005d02:	f040 828b 	bne.w	800621c <_dtoa_r+0x93c>
 8005d06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d0a:	462a      	mov	r2, r5
 8005d0c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005d10:	f7fa fee4 	bl	8000adc <__aeabi_dcmplt>
 8005d14:	2800      	cmp	r0, #0
 8005d16:	f040 8128 	bne.w	8005f6a <_dtoa_r+0x68a>
 8005d1a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005d1e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005d22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f2c0 815a 	blt.w	8005fde <_dtoa_r+0x6fe>
 8005d2a:	2f0e      	cmp	r7, #14
 8005d2c:	f300 8157 	bgt.w	8005fde <_dtoa_r+0x6fe>
 8005d30:	4b5a      	ldr	r3, [pc, #360]	@ (8005e9c <_dtoa_r+0x5bc>)
 8005d32:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005d36:	ed93 7b00 	vldr	d7, [r3]
 8005d3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	ed8d 7b00 	vstr	d7, [sp]
 8005d42:	da03      	bge.n	8005d4c <_dtoa_r+0x46c>
 8005d44:	9b07      	ldr	r3, [sp, #28]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f340 8101 	ble.w	8005f4e <_dtoa_r+0x66e>
 8005d4c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005d50:	4656      	mov	r6, sl
 8005d52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d56:	4620      	mov	r0, r4
 8005d58:	4629      	mov	r1, r5
 8005d5a:	f7fa fd77 	bl	800084c <__aeabi_ddiv>
 8005d5e:	f7fa fefb 	bl	8000b58 <__aeabi_d2iz>
 8005d62:	4680      	mov	r8, r0
 8005d64:	f7fa fbde 	bl	8000524 <__aeabi_i2d>
 8005d68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d6c:	f7fa fc44 	bl	80005f8 <__aeabi_dmul>
 8005d70:	4602      	mov	r2, r0
 8005d72:	460b      	mov	r3, r1
 8005d74:	4620      	mov	r0, r4
 8005d76:	4629      	mov	r1, r5
 8005d78:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005d7c:	f7fa fa84 	bl	8000288 <__aeabi_dsub>
 8005d80:	f806 4b01 	strb.w	r4, [r6], #1
 8005d84:	9d07      	ldr	r5, [sp, #28]
 8005d86:	eba6 040a 	sub.w	r4, r6, sl
 8005d8a:	42a5      	cmp	r5, r4
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	460b      	mov	r3, r1
 8005d90:	f040 8117 	bne.w	8005fc2 <_dtoa_r+0x6e2>
 8005d94:	f7fa fa7a 	bl	800028c <__adddf3>
 8005d98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d9c:	4604      	mov	r4, r0
 8005d9e:	460d      	mov	r5, r1
 8005da0:	f7fa feba 	bl	8000b18 <__aeabi_dcmpgt>
 8005da4:	2800      	cmp	r0, #0
 8005da6:	f040 80f9 	bne.w	8005f9c <_dtoa_r+0x6bc>
 8005daa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005dae:	4620      	mov	r0, r4
 8005db0:	4629      	mov	r1, r5
 8005db2:	f7fa fe89 	bl	8000ac8 <__aeabi_dcmpeq>
 8005db6:	b118      	cbz	r0, 8005dc0 <_dtoa_r+0x4e0>
 8005db8:	f018 0f01 	tst.w	r8, #1
 8005dbc:	f040 80ee 	bne.w	8005f9c <_dtoa_r+0x6bc>
 8005dc0:	4649      	mov	r1, r9
 8005dc2:	4658      	mov	r0, fp
 8005dc4:	f000 fc90 	bl	80066e8 <_Bfree>
 8005dc8:	2300      	movs	r3, #0
 8005dca:	7033      	strb	r3, [r6, #0]
 8005dcc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005dce:	3701      	adds	r7, #1
 8005dd0:	601f      	str	r7, [r3, #0]
 8005dd2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 831d 	beq.w	8006414 <_dtoa_r+0xb34>
 8005dda:	601e      	str	r6, [r3, #0]
 8005ddc:	e31a      	b.n	8006414 <_dtoa_r+0xb34>
 8005dde:	07e2      	lsls	r2, r4, #31
 8005de0:	d505      	bpl.n	8005dee <_dtoa_r+0x50e>
 8005de2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005de6:	f7fa fc07 	bl	80005f8 <__aeabi_dmul>
 8005dea:	3601      	adds	r6, #1
 8005dec:	2301      	movs	r3, #1
 8005dee:	1064      	asrs	r4, r4, #1
 8005df0:	3508      	adds	r5, #8
 8005df2:	e73f      	b.n	8005c74 <_dtoa_r+0x394>
 8005df4:	2602      	movs	r6, #2
 8005df6:	e742      	b.n	8005c7e <_dtoa_r+0x39e>
 8005df8:	9c07      	ldr	r4, [sp, #28]
 8005dfa:	9704      	str	r7, [sp, #16]
 8005dfc:	e761      	b.n	8005cc2 <_dtoa_r+0x3e2>
 8005dfe:	4b27      	ldr	r3, [pc, #156]	@ (8005e9c <_dtoa_r+0x5bc>)
 8005e00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005e02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005e06:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005e0a:	4454      	add	r4, sl
 8005e0c:	2900      	cmp	r1, #0
 8005e0e:	d053      	beq.n	8005eb8 <_dtoa_r+0x5d8>
 8005e10:	4928      	ldr	r1, [pc, #160]	@ (8005eb4 <_dtoa_r+0x5d4>)
 8005e12:	2000      	movs	r0, #0
 8005e14:	f7fa fd1a 	bl	800084c <__aeabi_ddiv>
 8005e18:	4633      	mov	r3, r6
 8005e1a:	462a      	mov	r2, r5
 8005e1c:	f7fa fa34 	bl	8000288 <__aeabi_dsub>
 8005e20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005e24:	4656      	mov	r6, sl
 8005e26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e2a:	f7fa fe95 	bl	8000b58 <__aeabi_d2iz>
 8005e2e:	4605      	mov	r5, r0
 8005e30:	f7fa fb78 	bl	8000524 <__aeabi_i2d>
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e3c:	f7fa fa24 	bl	8000288 <__aeabi_dsub>
 8005e40:	3530      	adds	r5, #48	@ 0x30
 8005e42:	4602      	mov	r2, r0
 8005e44:	460b      	mov	r3, r1
 8005e46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e4a:	f806 5b01 	strb.w	r5, [r6], #1
 8005e4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005e52:	f7fa fe43 	bl	8000adc <__aeabi_dcmplt>
 8005e56:	2800      	cmp	r0, #0
 8005e58:	d171      	bne.n	8005f3e <_dtoa_r+0x65e>
 8005e5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e5e:	4911      	ldr	r1, [pc, #68]	@ (8005ea4 <_dtoa_r+0x5c4>)
 8005e60:	2000      	movs	r0, #0
 8005e62:	f7fa fa11 	bl	8000288 <__aeabi_dsub>
 8005e66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005e6a:	f7fa fe37 	bl	8000adc <__aeabi_dcmplt>
 8005e6e:	2800      	cmp	r0, #0
 8005e70:	f040 8095 	bne.w	8005f9e <_dtoa_r+0x6be>
 8005e74:	42a6      	cmp	r6, r4
 8005e76:	f43f af50 	beq.w	8005d1a <_dtoa_r+0x43a>
 8005e7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8005ea8 <_dtoa_r+0x5c8>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	f7fa fbb9 	bl	80005f8 <__aeabi_dmul>
 8005e86:	4b08      	ldr	r3, [pc, #32]	@ (8005ea8 <_dtoa_r+0x5c8>)
 8005e88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e92:	f7fa fbb1 	bl	80005f8 <__aeabi_dmul>
 8005e96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e9a:	e7c4      	b.n	8005e26 <_dtoa_r+0x546>
 8005e9c:	08009f18 	.word	0x08009f18
 8005ea0:	08009ef0 	.word	0x08009ef0
 8005ea4:	3ff00000 	.word	0x3ff00000
 8005ea8:	40240000 	.word	0x40240000
 8005eac:	401c0000 	.word	0x401c0000
 8005eb0:	40140000 	.word	0x40140000
 8005eb4:	3fe00000 	.word	0x3fe00000
 8005eb8:	4631      	mov	r1, r6
 8005eba:	4628      	mov	r0, r5
 8005ebc:	f7fa fb9c 	bl	80005f8 <__aeabi_dmul>
 8005ec0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005ec4:	9415      	str	r4, [sp, #84]	@ 0x54
 8005ec6:	4656      	mov	r6, sl
 8005ec8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ecc:	f7fa fe44 	bl	8000b58 <__aeabi_d2iz>
 8005ed0:	4605      	mov	r5, r0
 8005ed2:	f7fa fb27 	bl	8000524 <__aeabi_i2d>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	460b      	mov	r3, r1
 8005eda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ede:	f7fa f9d3 	bl	8000288 <__aeabi_dsub>
 8005ee2:	3530      	adds	r5, #48	@ 0x30
 8005ee4:	f806 5b01 	strb.w	r5, [r6], #1
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	42a6      	cmp	r6, r4
 8005eee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ef2:	f04f 0200 	mov.w	r2, #0
 8005ef6:	d124      	bne.n	8005f42 <_dtoa_r+0x662>
 8005ef8:	4bac      	ldr	r3, [pc, #688]	@ (80061ac <_dtoa_r+0x8cc>)
 8005efa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005efe:	f7fa f9c5 	bl	800028c <__adddf3>
 8005f02:	4602      	mov	r2, r0
 8005f04:	460b      	mov	r3, r1
 8005f06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f0a:	f7fa fe05 	bl	8000b18 <__aeabi_dcmpgt>
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	d145      	bne.n	8005f9e <_dtoa_r+0x6be>
 8005f12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005f16:	49a5      	ldr	r1, [pc, #660]	@ (80061ac <_dtoa_r+0x8cc>)
 8005f18:	2000      	movs	r0, #0
 8005f1a:	f7fa f9b5 	bl	8000288 <__aeabi_dsub>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	460b      	mov	r3, r1
 8005f22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f26:	f7fa fdd9 	bl	8000adc <__aeabi_dcmplt>
 8005f2a:	2800      	cmp	r0, #0
 8005f2c:	f43f aef5 	beq.w	8005d1a <_dtoa_r+0x43a>
 8005f30:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005f32:	1e73      	subs	r3, r6, #1
 8005f34:	9315      	str	r3, [sp, #84]	@ 0x54
 8005f36:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005f3a:	2b30      	cmp	r3, #48	@ 0x30
 8005f3c:	d0f8      	beq.n	8005f30 <_dtoa_r+0x650>
 8005f3e:	9f04      	ldr	r7, [sp, #16]
 8005f40:	e73e      	b.n	8005dc0 <_dtoa_r+0x4e0>
 8005f42:	4b9b      	ldr	r3, [pc, #620]	@ (80061b0 <_dtoa_r+0x8d0>)
 8005f44:	f7fa fb58 	bl	80005f8 <__aeabi_dmul>
 8005f48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f4c:	e7bc      	b.n	8005ec8 <_dtoa_r+0x5e8>
 8005f4e:	d10c      	bne.n	8005f6a <_dtoa_r+0x68a>
 8005f50:	4b98      	ldr	r3, [pc, #608]	@ (80061b4 <_dtoa_r+0x8d4>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f58:	f7fa fb4e 	bl	80005f8 <__aeabi_dmul>
 8005f5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f60:	f7fa fdd0 	bl	8000b04 <__aeabi_dcmpge>
 8005f64:	2800      	cmp	r0, #0
 8005f66:	f000 8157 	beq.w	8006218 <_dtoa_r+0x938>
 8005f6a:	2400      	movs	r4, #0
 8005f6c:	4625      	mov	r5, r4
 8005f6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f70:	43db      	mvns	r3, r3
 8005f72:	9304      	str	r3, [sp, #16]
 8005f74:	4656      	mov	r6, sl
 8005f76:	2700      	movs	r7, #0
 8005f78:	4621      	mov	r1, r4
 8005f7a:	4658      	mov	r0, fp
 8005f7c:	f000 fbb4 	bl	80066e8 <_Bfree>
 8005f80:	2d00      	cmp	r5, #0
 8005f82:	d0dc      	beq.n	8005f3e <_dtoa_r+0x65e>
 8005f84:	b12f      	cbz	r7, 8005f92 <_dtoa_r+0x6b2>
 8005f86:	42af      	cmp	r7, r5
 8005f88:	d003      	beq.n	8005f92 <_dtoa_r+0x6b2>
 8005f8a:	4639      	mov	r1, r7
 8005f8c:	4658      	mov	r0, fp
 8005f8e:	f000 fbab 	bl	80066e8 <_Bfree>
 8005f92:	4629      	mov	r1, r5
 8005f94:	4658      	mov	r0, fp
 8005f96:	f000 fba7 	bl	80066e8 <_Bfree>
 8005f9a:	e7d0      	b.n	8005f3e <_dtoa_r+0x65e>
 8005f9c:	9704      	str	r7, [sp, #16]
 8005f9e:	4633      	mov	r3, r6
 8005fa0:	461e      	mov	r6, r3
 8005fa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005fa6:	2a39      	cmp	r2, #57	@ 0x39
 8005fa8:	d107      	bne.n	8005fba <_dtoa_r+0x6da>
 8005faa:	459a      	cmp	sl, r3
 8005fac:	d1f8      	bne.n	8005fa0 <_dtoa_r+0x6c0>
 8005fae:	9a04      	ldr	r2, [sp, #16]
 8005fb0:	3201      	adds	r2, #1
 8005fb2:	9204      	str	r2, [sp, #16]
 8005fb4:	2230      	movs	r2, #48	@ 0x30
 8005fb6:	f88a 2000 	strb.w	r2, [sl]
 8005fba:	781a      	ldrb	r2, [r3, #0]
 8005fbc:	3201      	adds	r2, #1
 8005fbe:	701a      	strb	r2, [r3, #0]
 8005fc0:	e7bd      	b.n	8005f3e <_dtoa_r+0x65e>
 8005fc2:	4b7b      	ldr	r3, [pc, #492]	@ (80061b0 <_dtoa_r+0x8d0>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f7fa fb17 	bl	80005f8 <__aeabi_dmul>
 8005fca:	2200      	movs	r2, #0
 8005fcc:	2300      	movs	r3, #0
 8005fce:	4604      	mov	r4, r0
 8005fd0:	460d      	mov	r5, r1
 8005fd2:	f7fa fd79 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fd6:	2800      	cmp	r0, #0
 8005fd8:	f43f aebb 	beq.w	8005d52 <_dtoa_r+0x472>
 8005fdc:	e6f0      	b.n	8005dc0 <_dtoa_r+0x4e0>
 8005fde:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005fe0:	2a00      	cmp	r2, #0
 8005fe2:	f000 80db 	beq.w	800619c <_dtoa_r+0x8bc>
 8005fe6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fe8:	2a01      	cmp	r2, #1
 8005fea:	f300 80bf 	bgt.w	800616c <_dtoa_r+0x88c>
 8005fee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005ff0:	2a00      	cmp	r2, #0
 8005ff2:	f000 80b7 	beq.w	8006164 <_dtoa_r+0x884>
 8005ff6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005ffa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005ffc:	4646      	mov	r6, r8
 8005ffe:	9a08      	ldr	r2, [sp, #32]
 8006000:	2101      	movs	r1, #1
 8006002:	441a      	add	r2, r3
 8006004:	4658      	mov	r0, fp
 8006006:	4498      	add	r8, r3
 8006008:	9208      	str	r2, [sp, #32]
 800600a:	f000 fc6b 	bl	80068e4 <__i2b>
 800600e:	4605      	mov	r5, r0
 8006010:	b15e      	cbz	r6, 800602a <_dtoa_r+0x74a>
 8006012:	9b08      	ldr	r3, [sp, #32]
 8006014:	2b00      	cmp	r3, #0
 8006016:	dd08      	ble.n	800602a <_dtoa_r+0x74a>
 8006018:	42b3      	cmp	r3, r6
 800601a:	9a08      	ldr	r2, [sp, #32]
 800601c:	bfa8      	it	ge
 800601e:	4633      	movge	r3, r6
 8006020:	eba8 0803 	sub.w	r8, r8, r3
 8006024:	1af6      	subs	r6, r6, r3
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	9308      	str	r3, [sp, #32]
 800602a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800602c:	b1f3      	cbz	r3, 800606c <_dtoa_r+0x78c>
 800602e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006030:	2b00      	cmp	r3, #0
 8006032:	f000 80b7 	beq.w	80061a4 <_dtoa_r+0x8c4>
 8006036:	b18c      	cbz	r4, 800605c <_dtoa_r+0x77c>
 8006038:	4629      	mov	r1, r5
 800603a:	4622      	mov	r2, r4
 800603c:	4658      	mov	r0, fp
 800603e:	f000 fd11 	bl	8006a64 <__pow5mult>
 8006042:	464a      	mov	r2, r9
 8006044:	4601      	mov	r1, r0
 8006046:	4605      	mov	r5, r0
 8006048:	4658      	mov	r0, fp
 800604a:	f000 fc61 	bl	8006910 <__multiply>
 800604e:	4649      	mov	r1, r9
 8006050:	9004      	str	r0, [sp, #16]
 8006052:	4658      	mov	r0, fp
 8006054:	f000 fb48 	bl	80066e8 <_Bfree>
 8006058:	9b04      	ldr	r3, [sp, #16]
 800605a:	4699      	mov	r9, r3
 800605c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800605e:	1b1a      	subs	r2, r3, r4
 8006060:	d004      	beq.n	800606c <_dtoa_r+0x78c>
 8006062:	4649      	mov	r1, r9
 8006064:	4658      	mov	r0, fp
 8006066:	f000 fcfd 	bl	8006a64 <__pow5mult>
 800606a:	4681      	mov	r9, r0
 800606c:	2101      	movs	r1, #1
 800606e:	4658      	mov	r0, fp
 8006070:	f000 fc38 	bl	80068e4 <__i2b>
 8006074:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006076:	4604      	mov	r4, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	f000 81cf 	beq.w	800641c <_dtoa_r+0xb3c>
 800607e:	461a      	mov	r2, r3
 8006080:	4601      	mov	r1, r0
 8006082:	4658      	mov	r0, fp
 8006084:	f000 fcee 	bl	8006a64 <__pow5mult>
 8006088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800608a:	2b01      	cmp	r3, #1
 800608c:	4604      	mov	r4, r0
 800608e:	f300 8095 	bgt.w	80061bc <_dtoa_r+0x8dc>
 8006092:	9b02      	ldr	r3, [sp, #8]
 8006094:	2b00      	cmp	r3, #0
 8006096:	f040 8087 	bne.w	80061a8 <_dtoa_r+0x8c8>
 800609a:	9b03      	ldr	r3, [sp, #12]
 800609c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f040 8089 	bne.w	80061b8 <_dtoa_r+0x8d8>
 80060a6:	9b03      	ldr	r3, [sp, #12]
 80060a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80060ac:	0d1b      	lsrs	r3, r3, #20
 80060ae:	051b      	lsls	r3, r3, #20
 80060b0:	b12b      	cbz	r3, 80060be <_dtoa_r+0x7de>
 80060b2:	9b08      	ldr	r3, [sp, #32]
 80060b4:	3301      	adds	r3, #1
 80060b6:	9308      	str	r3, [sp, #32]
 80060b8:	f108 0801 	add.w	r8, r8, #1
 80060bc:	2301      	movs	r3, #1
 80060be:	930a      	str	r3, [sp, #40]	@ 0x28
 80060c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f000 81b0 	beq.w	8006428 <_dtoa_r+0xb48>
 80060c8:	6923      	ldr	r3, [r4, #16]
 80060ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80060ce:	6918      	ldr	r0, [r3, #16]
 80060d0:	f000 fbbc 	bl	800684c <__hi0bits>
 80060d4:	f1c0 0020 	rsb	r0, r0, #32
 80060d8:	9b08      	ldr	r3, [sp, #32]
 80060da:	4418      	add	r0, r3
 80060dc:	f010 001f 	ands.w	r0, r0, #31
 80060e0:	d077      	beq.n	80061d2 <_dtoa_r+0x8f2>
 80060e2:	f1c0 0320 	rsb	r3, r0, #32
 80060e6:	2b04      	cmp	r3, #4
 80060e8:	dd6b      	ble.n	80061c2 <_dtoa_r+0x8e2>
 80060ea:	9b08      	ldr	r3, [sp, #32]
 80060ec:	f1c0 001c 	rsb	r0, r0, #28
 80060f0:	4403      	add	r3, r0
 80060f2:	4480      	add	r8, r0
 80060f4:	4406      	add	r6, r0
 80060f6:	9308      	str	r3, [sp, #32]
 80060f8:	f1b8 0f00 	cmp.w	r8, #0
 80060fc:	dd05      	ble.n	800610a <_dtoa_r+0x82a>
 80060fe:	4649      	mov	r1, r9
 8006100:	4642      	mov	r2, r8
 8006102:	4658      	mov	r0, fp
 8006104:	f000 fd08 	bl	8006b18 <__lshift>
 8006108:	4681      	mov	r9, r0
 800610a:	9b08      	ldr	r3, [sp, #32]
 800610c:	2b00      	cmp	r3, #0
 800610e:	dd05      	ble.n	800611c <_dtoa_r+0x83c>
 8006110:	4621      	mov	r1, r4
 8006112:	461a      	mov	r2, r3
 8006114:	4658      	mov	r0, fp
 8006116:	f000 fcff 	bl	8006b18 <__lshift>
 800611a:	4604      	mov	r4, r0
 800611c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800611e:	2b00      	cmp	r3, #0
 8006120:	d059      	beq.n	80061d6 <_dtoa_r+0x8f6>
 8006122:	4621      	mov	r1, r4
 8006124:	4648      	mov	r0, r9
 8006126:	f000 fd63 	bl	8006bf0 <__mcmp>
 800612a:	2800      	cmp	r0, #0
 800612c:	da53      	bge.n	80061d6 <_dtoa_r+0x8f6>
 800612e:	1e7b      	subs	r3, r7, #1
 8006130:	9304      	str	r3, [sp, #16]
 8006132:	4649      	mov	r1, r9
 8006134:	2300      	movs	r3, #0
 8006136:	220a      	movs	r2, #10
 8006138:	4658      	mov	r0, fp
 800613a:	f000 faf7 	bl	800672c <__multadd>
 800613e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006140:	4681      	mov	r9, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	f000 8172 	beq.w	800642c <_dtoa_r+0xb4c>
 8006148:	2300      	movs	r3, #0
 800614a:	4629      	mov	r1, r5
 800614c:	220a      	movs	r2, #10
 800614e:	4658      	mov	r0, fp
 8006150:	f000 faec 	bl	800672c <__multadd>
 8006154:	9b00      	ldr	r3, [sp, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	4605      	mov	r5, r0
 800615a:	dc67      	bgt.n	800622c <_dtoa_r+0x94c>
 800615c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800615e:	2b02      	cmp	r3, #2
 8006160:	dc41      	bgt.n	80061e6 <_dtoa_r+0x906>
 8006162:	e063      	b.n	800622c <_dtoa_r+0x94c>
 8006164:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006166:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800616a:	e746      	b.n	8005ffa <_dtoa_r+0x71a>
 800616c:	9b07      	ldr	r3, [sp, #28]
 800616e:	1e5c      	subs	r4, r3, #1
 8006170:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006172:	42a3      	cmp	r3, r4
 8006174:	bfbf      	itttt	lt
 8006176:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006178:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800617a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800617c:	1ae3      	sublt	r3, r4, r3
 800617e:	bfb4      	ite	lt
 8006180:	18d2      	addlt	r2, r2, r3
 8006182:	1b1c      	subge	r4, r3, r4
 8006184:	9b07      	ldr	r3, [sp, #28]
 8006186:	bfbc      	itt	lt
 8006188:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800618a:	2400      	movlt	r4, #0
 800618c:	2b00      	cmp	r3, #0
 800618e:	bfb5      	itete	lt
 8006190:	eba8 0603 	sublt.w	r6, r8, r3
 8006194:	9b07      	ldrge	r3, [sp, #28]
 8006196:	2300      	movlt	r3, #0
 8006198:	4646      	movge	r6, r8
 800619a:	e730      	b.n	8005ffe <_dtoa_r+0x71e>
 800619c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800619e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80061a0:	4646      	mov	r6, r8
 80061a2:	e735      	b.n	8006010 <_dtoa_r+0x730>
 80061a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80061a6:	e75c      	b.n	8006062 <_dtoa_r+0x782>
 80061a8:	2300      	movs	r3, #0
 80061aa:	e788      	b.n	80060be <_dtoa_r+0x7de>
 80061ac:	3fe00000 	.word	0x3fe00000
 80061b0:	40240000 	.word	0x40240000
 80061b4:	40140000 	.word	0x40140000
 80061b8:	9b02      	ldr	r3, [sp, #8]
 80061ba:	e780      	b.n	80060be <_dtoa_r+0x7de>
 80061bc:	2300      	movs	r3, #0
 80061be:	930a      	str	r3, [sp, #40]	@ 0x28
 80061c0:	e782      	b.n	80060c8 <_dtoa_r+0x7e8>
 80061c2:	d099      	beq.n	80060f8 <_dtoa_r+0x818>
 80061c4:	9a08      	ldr	r2, [sp, #32]
 80061c6:	331c      	adds	r3, #28
 80061c8:	441a      	add	r2, r3
 80061ca:	4498      	add	r8, r3
 80061cc:	441e      	add	r6, r3
 80061ce:	9208      	str	r2, [sp, #32]
 80061d0:	e792      	b.n	80060f8 <_dtoa_r+0x818>
 80061d2:	4603      	mov	r3, r0
 80061d4:	e7f6      	b.n	80061c4 <_dtoa_r+0x8e4>
 80061d6:	9b07      	ldr	r3, [sp, #28]
 80061d8:	9704      	str	r7, [sp, #16]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	dc20      	bgt.n	8006220 <_dtoa_r+0x940>
 80061de:	9300      	str	r3, [sp, #0]
 80061e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	dd1e      	ble.n	8006224 <_dtoa_r+0x944>
 80061e6:	9b00      	ldr	r3, [sp, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	f47f aec0 	bne.w	8005f6e <_dtoa_r+0x68e>
 80061ee:	4621      	mov	r1, r4
 80061f0:	2205      	movs	r2, #5
 80061f2:	4658      	mov	r0, fp
 80061f4:	f000 fa9a 	bl	800672c <__multadd>
 80061f8:	4601      	mov	r1, r0
 80061fa:	4604      	mov	r4, r0
 80061fc:	4648      	mov	r0, r9
 80061fe:	f000 fcf7 	bl	8006bf0 <__mcmp>
 8006202:	2800      	cmp	r0, #0
 8006204:	f77f aeb3 	ble.w	8005f6e <_dtoa_r+0x68e>
 8006208:	4656      	mov	r6, sl
 800620a:	2331      	movs	r3, #49	@ 0x31
 800620c:	f806 3b01 	strb.w	r3, [r6], #1
 8006210:	9b04      	ldr	r3, [sp, #16]
 8006212:	3301      	adds	r3, #1
 8006214:	9304      	str	r3, [sp, #16]
 8006216:	e6ae      	b.n	8005f76 <_dtoa_r+0x696>
 8006218:	9c07      	ldr	r4, [sp, #28]
 800621a:	9704      	str	r7, [sp, #16]
 800621c:	4625      	mov	r5, r4
 800621e:	e7f3      	b.n	8006208 <_dtoa_r+0x928>
 8006220:	9b07      	ldr	r3, [sp, #28]
 8006222:	9300      	str	r3, [sp, #0]
 8006224:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006226:	2b00      	cmp	r3, #0
 8006228:	f000 8104 	beq.w	8006434 <_dtoa_r+0xb54>
 800622c:	2e00      	cmp	r6, #0
 800622e:	dd05      	ble.n	800623c <_dtoa_r+0x95c>
 8006230:	4629      	mov	r1, r5
 8006232:	4632      	mov	r2, r6
 8006234:	4658      	mov	r0, fp
 8006236:	f000 fc6f 	bl	8006b18 <__lshift>
 800623a:	4605      	mov	r5, r0
 800623c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800623e:	2b00      	cmp	r3, #0
 8006240:	d05a      	beq.n	80062f8 <_dtoa_r+0xa18>
 8006242:	6869      	ldr	r1, [r5, #4]
 8006244:	4658      	mov	r0, fp
 8006246:	f000 fa0f 	bl	8006668 <_Balloc>
 800624a:	4606      	mov	r6, r0
 800624c:	b928      	cbnz	r0, 800625a <_dtoa_r+0x97a>
 800624e:	4b84      	ldr	r3, [pc, #528]	@ (8006460 <_dtoa_r+0xb80>)
 8006250:	4602      	mov	r2, r0
 8006252:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006256:	f7ff bb5a 	b.w	800590e <_dtoa_r+0x2e>
 800625a:	692a      	ldr	r2, [r5, #16]
 800625c:	3202      	adds	r2, #2
 800625e:	0092      	lsls	r2, r2, #2
 8006260:	f105 010c 	add.w	r1, r5, #12
 8006264:	300c      	adds	r0, #12
 8006266:	f7ff fa9e 	bl	80057a6 <memcpy>
 800626a:	2201      	movs	r2, #1
 800626c:	4631      	mov	r1, r6
 800626e:	4658      	mov	r0, fp
 8006270:	f000 fc52 	bl	8006b18 <__lshift>
 8006274:	f10a 0301 	add.w	r3, sl, #1
 8006278:	9307      	str	r3, [sp, #28]
 800627a:	9b00      	ldr	r3, [sp, #0]
 800627c:	4453      	add	r3, sl
 800627e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006280:	9b02      	ldr	r3, [sp, #8]
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	462f      	mov	r7, r5
 8006288:	930a      	str	r3, [sp, #40]	@ 0x28
 800628a:	4605      	mov	r5, r0
 800628c:	9b07      	ldr	r3, [sp, #28]
 800628e:	4621      	mov	r1, r4
 8006290:	3b01      	subs	r3, #1
 8006292:	4648      	mov	r0, r9
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	f7ff fa9b 	bl	80057d0 <quorem>
 800629a:	4639      	mov	r1, r7
 800629c:	9002      	str	r0, [sp, #8]
 800629e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80062a2:	4648      	mov	r0, r9
 80062a4:	f000 fca4 	bl	8006bf0 <__mcmp>
 80062a8:	462a      	mov	r2, r5
 80062aa:	9008      	str	r0, [sp, #32]
 80062ac:	4621      	mov	r1, r4
 80062ae:	4658      	mov	r0, fp
 80062b0:	f000 fcba 	bl	8006c28 <__mdiff>
 80062b4:	68c2      	ldr	r2, [r0, #12]
 80062b6:	4606      	mov	r6, r0
 80062b8:	bb02      	cbnz	r2, 80062fc <_dtoa_r+0xa1c>
 80062ba:	4601      	mov	r1, r0
 80062bc:	4648      	mov	r0, r9
 80062be:	f000 fc97 	bl	8006bf0 <__mcmp>
 80062c2:	4602      	mov	r2, r0
 80062c4:	4631      	mov	r1, r6
 80062c6:	4658      	mov	r0, fp
 80062c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80062ca:	f000 fa0d 	bl	80066e8 <_Bfree>
 80062ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80062d2:	9e07      	ldr	r6, [sp, #28]
 80062d4:	ea43 0102 	orr.w	r1, r3, r2
 80062d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062da:	4319      	orrs	r1, r3
 80062dc:	d110      	bne.n	8006300 <_dtoa_r+0xa20>
 80062de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80062e2:	d029      	beq.n	8006338 <_dtoa_r+0xa58>
 80062e4:	9b08      	ldr	r3, [sp, #32]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	dd02      	ble.n	80062f0 <_dtoa_r+0xa10>
 80062ea:	9b02      	ldr	r3, [sp, #8]
 80062ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80062f0:	9b00      	ldr	r3, [sp, #0]
 80062f2:	f883 8000 	strb.w	r8, [r3]
 80062f6:	e63f      	b.n	8005f78 <_dtoa_r+0x698>
 80062f8:	4628      	mov	r0, r5
 80062fa:	e7bb      	b.n	8006274 <_dtoa_r+0x994>
 80062fc:	2201      	movs	r2, #1
 80062fe:	e7e1      	b.n	80062c4 <_dtoa_r+0x9e4>
 8006300:	9b08      	ldr	r3, [sp, #32]
 8006302:	2b00      	cmp	r3, #0
 8006304:	db04      	blt.n	8006310 <_dtoa_r+0xa30>
 8006306:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006308:	430b      	orrs	r3, r1
 800630a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800630c:	430b      	orrs	r3, r1
 800630e:	d120      	bne.n	8006352 <_dtoa_r+0xa72>
 8006310:	2a00      	cmp	r2, #0
 8006312:	dded      	ble.n	80062f0 <_dtoa_r+0xa10>
 8006314:	4649      	mov	r1, r9
 8006316:	2201      	movs	r2, #1
 8006318:	4658      	mov	r0, fp
 800631a:	f000 fbfd 	bl	8006b18 <__lshift>
 800631e:	4621      	mov	r1, r4
 8006320:	4681      	mov	r9, r0
 8006322:	f000 fc65 	bl	8006bf0 <__mcmp>
 8006326:	2800      	cmp	r0, #0
 8006328:	dc03      	bgt.n	8006332 <_dtoa_r+0xa52>
 800632a:	d1e1      	bne.n	80062f0 <_dtoa_r+0xa10>
 800632c:	f018 0f01 	tst.w	r8, #1
 8006330:	d0de      	beq.n	80062f0 <_dtoa_r+0xa10>
 8006332:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006336:	d1d8      	bne.n	80062ea <_dtoa_r+0xa0a>
 8006338:	9a00      	ldr	r2, [sp, #0]
 800633a:	2339      	movs	r3, #57	@ 0x39
 800633c:	7013      	strb	r3, [r2, #0]
 800633e:	4633      	mov	r3, r6
 8006340:	461e      	mov	r6, r3
 8006342:	3b01      	subs	r3, #1
 8006344:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006348:	2a39      	cmp	r2, #57	@ 0x39
 800634a:	d052      	beq.n	80063f2 <_dtoa_r+0xb12>
 800634c:	3201      	adds	r2, #1
 800634e:	701a      	strb	r2, [r3, #0]
 8006350:	e612      	b.n	8005f78 <_dtoa_r+0x698>
 8006352:	2a00      	cmp	r2, #0
 8006354:	dd07      	ble.n	8006366 <_dtoa_r+0xa86>
 8006356:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800635a:	d0ed      	beq.n	8006338 <_dtoa_r+0xa58>
 800635c:	9a00      	ldr	r2, [sp, #0]
 800635e:	f108 0301 	add.w	r3, r8, #1
 8006362:	7013      	strb	r3, [r2, #0]
 8006364:	e608      	b.n	8005f78 <_dtoa_r+0x698>
 8006366:	9b07      	ldr	r3, [sp, #28]
 8006368:	9a07      	ldr	r2, [sp, #28]
 800636a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800636e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006370:	4293      	cmp	r3, r2
 8006372:	d028      	beq.n	80063c6 <_dtoa_r+0xae6>
 8006374:	4649      	mov	r1, r9
 8006376:	2300      	movs	r3, #0
 8006378:	220a      	movs	r2, #10
 800637a:	4658      	mov	r0, fp
 800637c:	f000 f9d6 	bl	800672c <__multadd>
 8006380:	42af      	cmp	r7, r5
 8006382:	4681      	mov	r9, r0
 8006384:	f04f 0300 	mov.w	r3, #0
 8006388:	f04f 020a 	mov.w	r2, #10
 800638c:	4639      	mov	r1, r7
 800638e:	4658      	mov	r0, fp
 8006390:	d107      	bne.n	80063a2 <_dtoa_r+0xac2>
 8006392:	f000 f9cb 	bl	800672c <__multadd>
 8006396:	4607      	mov	r7, r0
 8006398:	4605      	mov	r5, r0
 800639a:	9b07      	ldr	r3, [sp, #28]
 800639c:	3301      	adds	r3, #1
 800639e:	9307      	str	r3, [sp, #28]
 80063a0:	e774      	b.n	800628c <_dtoa_r+0x9ac>
 80063a2:	f000 f9c3 	bl	800672c <__multadd>
 80063a6:	4629      	mov	r1, r5
 80063a8:	4607      	mov	r7, r0
 80063aa:	2300      	movs	r3, #0
 80063ac:	220a      	movs	r2, #10
 80063ae:	4658      	mov	r0, fp
 80063b0:	f000 f9bc 	bl	800672c <__multadd>
 80063b4:	4605      	mov	r5, r0
 80063b6:	e7f0      	b.n	800639a <_dtoa_r+0xaba>
 80063b8:	9b00      	ldr	r3, [sp, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	bfcc      	ite	gt
 80063be:	461e      	movgt	r6, r3
 80063c0:	2601      	movle	r6, #1
 80063c2:	4456      	add	r6, sl
 80063c4:	2700      	movs	r7, #0
 80063c6:	4649      	mov	r1, r9
 80063c8:	2201      	movs	r2, #1
 80063ca:	4658      	mov	r0, fp
 80063cc:	f000 fba4 	bl	8006b18 <__lshift>
 80063d0:	4621      	mov	r1, r4
 80063d2:	4681      	mov	r9, r0
 80063d4:	f000 fc0c 	bl	8006bf0 <__mcmp>
 80063d8:	2800      	cmp	r0, #0
 80063da:	dcb0      	bgt.n	800633e <_dtoa_r+0xa5e>
 80063dc:	d102      	bne.n	80063e4 <_dtoa_r+0xb04>
 80063de:	f018 0f01 	tst.w	r8, #1
 80063e2:	d1ac      	bne.n	800633e <_dtoa_r+0xa5e>
 80063e4:	4633      	mov	r3, r6
 80063e6:	461e      	mov	r6, r3
 80063e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063ec:	2a30      	cmp	r2, #48	@ 0x30
 80063ee:	d0fa      	beq.n	80063e6 <_dtoa_r+0xb06>
 80063f0:	e5c2      	b.n	8005f78 <_dtoa_r+0x698>
 80063f2:	459a      	cmp	sl, r3
 80063f4:	d1a4      	bne.n	8006340 <_dtoa_r+0xa60>
 80063f6:	9b04      	ldr	r3, [sp, #16]
 80063f8:	3301      	adds	r3, #1
 80063fa:	9304      	str	r3, [sp, #16]
 80063fc:	2331      	movs	r3, #49	@ 0x31
 80063fe:	f88a 3000 	strb.w	r3, [sl]
 8006402:	e5b9      	b.n	8005f78 <_dtoa_r+0x698>
 8006404:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006406:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006464 <_dtoa_r+0xb84>
 800640a:	b11b      	cbz	r3, 8006414 <_dtoa_r+0xb34>
 800640c:	f10a 0308 	add.w	r3, sl, #8
 8006410:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006412:	6013      	str	r3, [r2, #0]
 8006414:	4650      	mov	r0, sl
 8006416:	b019      	add	sp, #100	@ 0x64
 8006418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800641c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800641e:	2b01      	cmp	r3, #1
 8006420:	f77f ae37 	ble.w	8006092 <_dtoa_r+0x7b2>
 8006424:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006426:	930a      	str	r3, [sp, #40]	@ 0x28
 8006428:	2001      	movs	r0, #1
 800642a:	e655      	b.n	80060d8 <_dtoa_r+0x7f8>
 800642c:	9b00      	ldr	r3, [sp, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	f77f aed6 	ble.w	80061e0 <_dtoa_r+0x900>
 8006434:	4656      	mov	r6, sl
 8006436:	4621      	mov	r1, r4
 8006438:	4648      	mov	r0, r9
 800643a:	f7ff f9c9 	bl	80057d0 <quorem>
 800643e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006442:	f806 8b01 	strb.w	r8, [r6], #1
 8006446:	9b00      	ldr	r3, [sp, #0]
 8006448:	eba6 020a 	sub.w	r2, r6, sl
 800644c:	4293      	cmp	r3, r2
 800644e:	ddb3      	ble.n	80063b8 <_dtoa_r+0xad8>
 8006450:	4649      	mov	r1, r9
 8006452:	2300      	movs	r3, #0
 8006454:	220a      	movs	r2, #10
 8006456:	4658      	mov	r0, fp
 8006458:	f000 f968 	bl	800672c <__multadd>
 800645c:	4681      	mov	r9, r0
 800645e:	e7ea      	b.n	8006436 <_dtoa_r+0xb56>
 8006460:	08009e75 	.word	0x08009e75
 8006464:	08009df9 	.word	0x08009df9

08006468 <_free_r>:
 8006468:	b538      	push	{r3, r4, r5, lr}
 800646a:	4605      	mov	r5, r0
 800646c:	2900      	cmp	r1, #0
 800646e:	d041      	beq.n	80064f4 <_free_r+0x8c>
 8006470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006474:	1f0c      	subs	r4, r1, #4
 8006476:	2b00      	cmp	r3, #0
 8006478:	bfb8      	it	lt
 800647a:	18e4      	addlt	r4, r4, r3
 800647c:	f000 f8e8 	bl	8006650 <__malloc_lock>
 8006480:	4a1d      	ldr	r2, [pc, #116]	@ (80064f8 <_free_r+0x90>)
 8006482:	6813      	ldr	r3, [r2, #0]
 8006484:	b933      	cbnz	r3, 8006494 <_free_r+0x2c>
 8006486:	6063      	str	r3, [r4, #4]
 8006488:	6014      	str	r4, [r2, #0]
 800648a:	4628      	mov	r0, r5
 800648c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006490:	f000 b8e4 	b.w	800665c <__malloc_unlock>
 8006494:	42a3      	cmp	r3, r4
 8006496:	d908      	bls.n	80064aa <_free_r+0x42>
 8006498:	6820      	ldr	r0, [r4, #0]
 800649a:	1821      	adds	r1, r4, r0
 800649c:	428b      	cmp	r3, r1
 800649e:	bf01      	itttt	eq
 80064a0:	6819      	ldreq	r1, [r3, #0]
 80064a2:	685b      	ldreq	r3, [r3, #4]
 80064a4:	1809      	addeq	r1, r1, r0
 80064a6:	6021      	streq	r1, [r4, #0]
 80064a8:	e7ed      	b.n	8006486 <_free_r+0x1e>
 80064aa:	461a      	mov	r2, r3
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	b10b      	cbz	r3, 80064b4 <_free_r+0x4c>
 80064b0:	42a3      	cmp	r3, r4
 80064b2:	d9fa      	bls.n	80064aa <_free_r+0x42>
 80064b4:	6811      	ldr	r1, [r2, #0]
 80064b6:	1850      	adds	r0, r2, r1
 80064b8:	42a0      	cmp	r0, r4
 80064ba:	d10b      	bne.n	80064d4 <_free_r+0x6c>
 80064bc:	6820      	ldr	r0, [r4, #0]
 80064be:	4401      	add	r1, r0
 80064c0:	1850      	adds	r0, r2, r1
 80064c2:	4283      	cmp	r3, r0
 80064c4:	6011      	str	r1, [r2, #0]
 80064c6:	d1e0      	bne.n	800648a <_free_r+0x22>
 80064c8:	6818      	ldr	r0, [r3, #0]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	6053      	str	r3, [r2, #4]
 80064ce:	4408      	add	r0, r1
 80064d0:	6010      	str	r0, [r2, #0]
 80064d2:	e7da      	b.n	800648a <_free_r+0x22>
 80064d4:	d902      	bls.n	80064dc <_free_r+0x74>
 80064d6:	230c      	movs	r3, #12
 80064d8:	602b      	str	r3, [r5, #0]
 80064da:	e7d6      	b.n	800648a <_free_r+0x22>
 80064dc:	6820      	ldr	r0, [r4, #0]
 80064de:	1821      	adds	r1, r4, r0
 80064e0:	428b      	cmp	r3, r1
 80064e2:	bf04      	itt	eq
 80064e4:	6819      	ldreq	r1, [r3, #0]
 80064e6:	685b      	ldreq	r3, [r3, #4]
 80064e8:	6063      	str	r3, [r4, #4]
 80064ea:	bf04      	itt	eq
 80064ec:	1809      	addeq	r1, r1, r0
 80064ee:	6021      	streq	r1, [r4, #0]
 80064f0:	6054      	str	r4, [r2, #4]
 80064f2:	e7ca      	b.n	800648a <_free_r+0x22>
 80064f4:	bd38      	pop	{r3, r4, r5, pc}
 80064f6:	bf00      	nop
 80064f8:	20000828 	.word	0x20000828

080064fc <malloc>:
 80064fc:	4b02      	ldr	r3, [pc, #8]	@ (8006508 <malloc+0xc>)
 80064fe:	4601      	mov	r1, r0
 8006500:	6818      	ldr	r0, [r3, #0]
 8006502:	f000 b825 	b.w	8006550 <_malloc_r>
 8006506:	bf00      	nop
 8006508:	20000018 	.word	0x20000018

0800650c <sbrk_aligned>:
 800650c:	b570      	push	{r4, r5, r6, lr}
 800650e:	4e0f      	ldr	r6, [pc, #60]	@ (800654c <sbrk_aligned+0x40>)
 8006510:	460c      	mov	r4, r1
 8006512:	6831      	ldr	r1, [r6, #0]
 8006514:	4605      	mov	r5, r0
 8006516:	b911      	cbnz	r1, 800651e <sbrk_aligned+0x12>
 8006518:	f001 fdf2 	bl	8008100 <_sbrk_r>
 800651c:	6030      	str	r0, [r6, #0]
 800651e:	4621      	mov	r1, r4
 8006520:	4628      	mov	r0, r5
 8006522:	f001 fded 	bl	8008100 <_sbrk_r>
 8006526:	1c43      	adds	r3, r0, #1
 8006528:	d103      	bne.n	8006532 <sbrk_aligned+0x26>
 800652a:	f04f 34ff 	mov.w	r4, #4294967295
 800652e:	4620      	mov	r0, r4
 8006530:	bd70      	pop	{r4, r5, r6, pc}
 8006532:	1cc4      	adds	r4, r0, #3
 8006534:	f024 0403 	bic.w	r4, r4, #3
 8006538:	42a0      	cmp	r0, r4
 800653a:	d0f8      	beq.n	800652e <sbrk_aligned+0x22>
 800653c:	1a21      	subs	r1, r4, r0
 800653e:	4628      	mov	r0, r5
 8006540:	f001 fdde 	bl	8008100 <_sbrk_r>
 8006544:	3001      	adds	r0, #1
 8006546:	d1f2      	bne.n	800652e <sbrk_aligned+0x22>
 8006548:	e7ef      	b.n	800652a <sbrk_aligned+0x1e>
 800654a:	bf00      	nop
 800654c:	20000824 	.word	0x20000824

08006550 <_malloc_r>:
 8006550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006554:	1ccd      	adds	r5, r1, #3
 8006556:	f025 0503 	bic.w	r5, r5, #3
 800655a:	3508      	adds	r5, #8
 800655c:	2d0c      	cmp	r5, #12
 800655e:	bf38      	it	cc
 8006560:	250c      	movcc	r5, #12
 8006562:	2d00      	cmp	r5, #0
 8006564:	4606      	mov	r6, r0
 8006566:	db01      	blt.n	800656c <_malloc_r+0x1c>
 8006568:	42a9      	cmp	r1, r5
 800656a:	d904      	bls.n	8006576 <_malloc_r+0x26>
 800656c:	230c      	movs	r3, #12
 800656e:	6033      	str	r3, [r6, #0]
 8006570:	2000      	movs	r0, #0
 8006572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006576:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800664c <_malloc_r+0xfc>
 800657a:	f000 f869 	bl	8006650 <__malloc_lock>
 800657e:	f8d8 3000 	ldr.w	r3, [r8]
 8006582:	461c      	mov	r4, r3
 8006584:	bb44      	cbnz	r4, 80065d8 <_malloc_r+0x88>
 8006586:	4629      	mov	r1, r5
 8006588:	4630      	mov	r0, r6
 800658a:	f7ff ffbf 	bl	800650c <sbrk_aligned>
 800658e:	1c43      	adds	r3, r0, #1
 8006590:	4604      	mov	r4, r0
 8006592:	d158      	bne.n	8006646 <_malloc_r+0xf6>
 8006594:	f8d8 4000 	ldr.w	r4, [r8]
 8006598:	4627      	mov	r7, r4
 800659a:	2f00      	cmp	r7, #0
 800659c:	d143      	bne.n	8006626 <_malloc_r+0xd6>
 800659e:	2c00      	cmp	r4, #0
 80065a0:	d04b      	beq.n	800663a <_malloc_r+0xea>
 80065a2:	6823      	ldr	r3, [r4, #0]
 80065a4:	4639      	mov	r1, r7
 80065a6:	4630      	mov	r0, r6
 80065a8:	eb04 0903 	add.w	r9, r4, r3
 80065ac:	f001 fda8 	bl	8008100 <_sbrk_r>
 80065b0:	4581      	cmp	r9, r0
 80065b2:	d142      	bne.n	800663a <_malloc_r+0xea>
 80065b4:	6821      	ldr	r1, [r4, #0]
 80065b6:	1a6d      	subs	r5, r5, r1
 80065b8:	4629      	mov	r1, r5
 80065ba:	4630      	mov	r0, r6
 80065bc:	f7ff ffa6 	bl	800650c <sbrk_aligned>
 80065c0:	3001      	adds	r0, #1
 80065c2:	d03a      	beq.n	800663a <_malloc_r+0xea>
 80065c4:	6823      	ldr	r3, [r4, #0]
 80065c6:	442b      	add	r3, r5
 80065c8:	6023      	str	r3, [r4, #0]
 80065ca:	f8d8 3000 	ldr.w	r3, [r8]
 80065ce:	685a      	ldr	r2, [r3, #4]
 80065d0:	bb62      	cbnz	r2, 800662c <_malloc_r+0xdc>
 80065d2:	f8c8 7000 	str.w	r7, [r8]
 80065d6:	e00f      	b.n	80065f8 <_malloc_r+0xa8>
 80065d8:	6822      	ldr	r2, [r4, #0]
 80065da:	1b52      	subs	r2, r2, r5
 80065dc:	d420      	bmi.n	8006620 <_malloc_r+0xd0>
 80065de:	2a0b      	cmp	r2, #11
 80065e0:	d917      	bls.n	8006612 <_malloc_r+0xc2>
 80065e2:	1961      	adds	r1, r4, r5
 80065e4:	42a3      	cmp	r3, r4
 80065e6:	6025      	str	r5, [r4, #0]
 80065e8:	bf18      	it	ne
 80065ea:	6059      	strne	r1, [r3, #4]
 80065ec:	6863      	ldr	r3, [r4, #4]
 80065ee:	bf08      	it	eq
 80065f0:	f8c8 1000 	streq.w	r1, [r8]
 80065f4:	5162      	str	r2, [r4, r5]
 80065f6:	604b      	str	r3, [r1, #4]
 80065f8:	4630      	mov	r0, r6
 80065fa:	f000 f82f 	bl	800665c <__malloc_unlock>
 80065fe:	f104 000b 	add.w	r0, r4, #11
 8006602:	1d23      	adds	r3, r4, #4
 8006604:	f020 0007 	bic.w	r0, r0, #7
 8006608:	1ac2      	subs	r2, r0, r3
 800660a:	bf1c      	itt	ne
 800660c:	1a1b      	subne	r3, r3, r0
 800660e:	50a3      	strne	r3, [r4, r2]
 8006610:	e7af      	b.n	8006572 <_malloc_r+0x22>
 8006612:	6862      	ldr	r2, [r4, #4]
 8006614:	42a3      	cmp	r3, r4
 8006616:	bf0c      	ite	eq
 8006618:	f8c8 2000 	streq.w	r2, [r8]
 800661c:	605a      	strne	r2, [r3, #4]
 800661e:	e7eb      	b.n	80065f8 <_malloc_r+0xa8>
 8006620:	4623      	mov	r3, r4
 8006622:	6864      	ldr	r4, [r4, #4]
 8006624:	e7ae      	b.n	8006584 <_malloc_r+0x34>
 8006626:	463c      	mov	r4, r7
 8006628:	687f      	ldr	r7, [r7, #4]
 800662a:	e7b6      	b.n	800659a <_malloc_r+0x4a>
 800662c:	461a      	mov	r2, r3
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	42a3      	cmp	r3, r4
 8006632:	d1fb      	bne.n	800662c <_malloc_r+0xdc>
 8006634:	2300      	movs	r3, #0
 8006636:	6053      	str	r3, [r2, #4]
 8006638:	e7de      	b.n	80065f8 <_malloc_r+0xa8>
 800663a:	230c      	movs	r3, #12
 800663c:	6033      	str	r3, [r6, #0]
 800663e:	4630      	mov	r0, r6
 8006640:	f000 f80c 	bl	800665c <__malloc_unlock>
 8006644:	e794      	b.n	8006570 <_malloc_r+0x20>
 8006646:	6005      	str	r5, [r0, #0]
 8006648:	e7d6      	b.n	80065f8 <_malloc_r+0xa8>
 800664a:	bf00      	nop
 800664c:	20000828 	.word	0x20000828

08006650 <__malloc_lock>:
 8006650:	4801      	ldr	r0, [pc, #4]	@ (8006658 <__malloc_lock+0x8>)
 8006652:	f7ff b8a6 	b.w	80057a2 <__retarget_lock_acquire_recursive>
 8006656:	bf00      	nop
 8006658:	20000820 	.word	0x20000820

0800665c <__malloc_unlock>:
 800665c:	4801      	ldr	r0, [pc, #4]	@ (8006664 <__malloc_unlock+0x8>)
 800665e:	f7ff b8a1 	b.w	80057a4 <__retarget_lock_release_recursive>
 8006662:	bf00      	nop
 8006664:	20000820 	.word	0x20000820

08006668 <_Balloc>:
 8006668:	b570      	push	{r4, r5, r6, lr}
 800666a:	69c6      	ldr	r6, [r0, #28]
 800666c:	4604      	mov	r4, r0
 800666e:	460d      	mov	r5, r1
 8006670:	b976      	cbnz	r6, 8006690 <_Balloc+0x28>
 8006672:	2010      	movs	r0, #16
 8006674:	f7ff ff42 	bl	80064fc <malloc>
 8006678:	4602      	mov	r2, r0
 800667a:	61e0      	str	r0, [r4, #28]
 800667c:	b920      	cbnz	r0, 8006688 <_Balloc+0x20>
 800667e:	4b18      	ldr	r3, [pc, #96]	@ (80066e0 <_Balloc+0x78>)
 8006680:	4818      	ldr	r0, [pc, #96]	@ (80066e4 <_Balloc+0x7c>)
 8006682:	216b      	movs	r1, #107	@ 0x6b
 8006684:	f001 fd54 	bl	8008130 <__assert_func>
 8006688:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800668c:	6006      	str	r6, [r0, #0]
 800668e:	60c6      	str	r6, [r0, #12]
 8006690:	69e6      	ldr	r6, [r4, #28]
 8006692:	68f3      	ldr	r3, [r6, #12]
 8006694:	b183      	cbz	r3, 80066b8 <_Balloc+0x50>
 8006696:	69e3      	ldr	r3, [r4, #28]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800669e:	b9b8      	cbnz	r0, 80066d0 <_Balloc+0x68>
 80066a0:	2101      	movs	r1, #1
 80066a2:	fa01 f605 	lsl.w	r6, r1, r5
 80066a6:	1d72      	adds	r2, r6, #5
 80066a8:	0092      	lsls	r2, r2, #2
 80066aa:	4620      	mov	r0, r4
 80066ac:	f001 fd5e 	bl	800816c <_calloc_r>
 80066b0:	b160      	cbz	r0, 80066cc <_Balloc+0x64>
 80066b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80066b6:	e00e      	b.n	80066d6 <_Balloc+0x6e>
 80066b8:	2221      	movs	r2, #33	@ 0x21
 80066ba:	2104      	movs	r1, #4
 80066bc:	4620      	mov	r0, r4
 80066be:	f001 fd55 	bl	800816c <_calloc_r>
 80066c2:	69e3      	ldr	r3, [r4, #28]
 80066c4:	60f0      	str	r0, [r6, #12]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1e4      	bne.n	8006696 <_Balloc+0x2e>
 80066cc:	2000      	movs	r0, #0
 80066ce:	bd70      	pop	{r4, r5, r6, pc}
 80066d0:	6802      	ldr	r2, [r0, #0]
 80066d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80066d6:	2300      	movs	r3, #0
 80066d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80066dc:	e7f7      	b.n	80066ce <_Balloc+0x66>
 80066de:	bf00      	nop
 80066e0:	08009e06 	.word	0x08009e06
 80066e4:	08009e86 	.word	0x08009e86

080066e8 <_Bfree>:
 80066e8:	b570      	push	{r4, r5, r6, lr}
 80066ea:	69c6      	ldr	r6, [r0, #28]
 80066ec:	4605      	mov	r5, r0
 80066ee:	460c      	mov	r4, r1
 80066f0:	b976      	cbnz	r6, 8006710 <_Bfree+0x28>
 80066f2:	2010      	movs	r0, #16
 80066f4:	f7ff ff02 	bl	80064fc <malloc>
 80066f8:	4602      	mov	r2, r0
 80066fa:	61e8      	str	r0, [r5, #28]
 80066fc:	b920      	cbnz	r0, 8006708 <_Bfree+0x20>
 80066fe:	4b09      	ldr	r3, [pc, #36]	@ (8006724 <_Bfree+0x3c>)
 8006700:	4809      	ldr	r0, [pc, #36]	@ (8006728 <_Bfree+0x40>)
 8006702:	218f      	movs	r1, #143	@ 0x8f
 8006704:	f001 fd14 	bl	8008130 <__assert_func>
 8006708:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800670c:	6006      	str	r6, [r0, #0]
 800670e:	60c6      	str	r6, [r0, #12]
 8006710:	b13c      	cbz	r4, 8006722 <_Bfree+0x3a>
 8006712:	69eb      	ldr	r3, [r5, #28]
 8006714:	6862      	ldr	r2, [r4, #4]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800671c:	6021      	str	r1, [r4, #0]
 800671e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006722:	bd70      	pop	{r4, r5, r6, pc}
 8006724:	08009e06 	.word	0x08009e06
 8006728:	08009e86 	.word	0x08009e86

0800672c <__multadd>:
 800672c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006730:	690d      	ldr	r5, [r1, #16]
 8006732:	4607      	mov	r7, r0
 8006734:	460c      	mov	r4, r1
 8006736:	461e      	mov	r6, r3
 8006738:	f101 0c14 	add.w	ip, r1, #20
 800673c:	2000      	movs	r0, #0
 800673e:	f8dc 3000 	ldr.w	r3, [ip]
 8006742:	b299      	uxth	r1, r3
 8006744:	fb02 6101 	mla	r1, r2, r1, r6
 8006748:	0c1e      	lsrs	r6, r3, #16
 800674a:	0c0b      	lsrs	r3, r1, #16
 800674c:	fb02 3306 	mla	r3, r2, r6, r3
 8006750:	b289      	uxth	r1, r1
 8006752:	3001      	adds	r0, #1
 8006754:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006758:	4285      	cmp	r5, r0
 800675a:	f84c 1b04 	str.w	r1, [ip], #4
 800675e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006762:	dcec      	bgt.n	800673e <__multadd+0x12>
 8006764:	b30e      	cbz	r6, 80067aa <__multadd+0x7e>
 8006766:	68a3      	ldr	r3, [r4, #8]
 8006768:	42ab      	cmp	r3, r5
 800676a:	dc19      	bgt.n	80067a0 <__multadd+0x74>
 800676c:	6861      	ldr	r1, [r4, #4]
 800676e:	4638      	mov	r0, r7
 8006770:	3101      	adds	r1, #1
 8006772:	f7ff ff79 	bl	8006668 <_Balloc>
 8006776:	4680      	mov	r8, r0
 8006778:	b928      	cbnz	r0, 8006786 <__multadd+0x5a>
 800677a:	4602      	mov	r2, r0
 800677c:	4b0c      	ldr	r3, [pc, #48]	@ (80067b0 <__multadd+0x84>)
 800677e:	480d      	ldr	r0, [pc, #52]	@ (80067b4 <__multadd+0x88>)
 8006780:	21ba      	movs	r1, #186	@ 0xba
 8006782:	f001 fcd5 	bl	8008130 <__assert_func>
 8006786:	6922      	ldr	r2, [r4, #16]
 8006788:	3202      	adds	r2, #2
 800678a:	f104 010c 	add.w	r1, r4, #12
 800678e:	0092      	lsls	r2, r2, #2
 8006790:	300c      	adds	r0, #12
 8006792:	f7ff f808 	bl	80057a6 <memcpy>
 8006796:	4621      	mov	r1, r4
 8006798:	4638      	mov	r0, r7
 800679a:	f7ff ffa5 	bl	80066e8 <_Bfree>
 800679e:	4644      	mov	r4, r8
 80067a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80067a4:	3501      	adds	r5, #1
 80067a6:	615e      	str	r6, [r3, #20]
 80067a8:	6125      	str	r5, [r4, #16]
 80067aa:	4620      	mov	r0, r4
 80067ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067b0:	08009e75 	.word	0x08009e75
 80067b4:	08009e86 	.word	0x08009e86

080067b8 <__s2b>:
 80067b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067bc:	460c      	mov	r4, r1
 80067be:	4615      	mov	r5, r2
 80067c0:	461f      	mov	r7, r3
 80067c2:	2209      	movs	r2, #9
 80067c4:	3308      	adds	r3, #8
 80067c6:	4606      	mov	r6, r0
 80067c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80067cc:	2100      	movs	r1, #0
 80067ce:	2201      	movs	r2, #1
 80067d0:	429a      	cmp	r2, r3
 80067d2:	db09      	blt.n	80067e8 <__s2b+0x30>
 80067d4:	4630      	mov	r0, r6
 80067d6:	f7ff ff47 	bl	8006668 <_Balloc>
 80067da:	b940      	cbnz	r0, 80067ee <__s2b+0x36>
 80067dc:	4602      	mov	r2, r0
 80067de:	4b19      	ldr	r3, [pc, #100]	@ (8006844 <__s2b+0x8c>)
 80067e0:	4819      	ldr	r0, [pc, #100]	@ (8006848 <__s2b+0x90>)
 80067e2:	21d3      	movs	r1, #211	@ 0xd3
 80067e4:	f001 fca4 	bl	8008130 <__assert_func>
 80067e8:	0052      	lsls	r2, r2, #1
 80067ea:	3101      	adds	r1, #1
 80067ec:	e7f0      	b.n	80067d0 <__s2b+0x18>
 80067ee:	9b08      	ldr	r3, [sp, #32]
 80067f0:	6143      	str	r3, [r0, #20]
 80067f2:	2d09      	cmp	r5, #9
 80067f4:	f04f 0301 	mov.w	r3, #1
 80067f8:	6103      	str	r3, [r0, #16]
 80067fa:	dd16      	ble.n	800682a <__s2b+0x72>
 80067fc:	f104 0909 	add.w	r9, r4, #9
 8006800:	46c8      	mov	r8, r9
 8006802:	442c      	add	r4, r5
 8006804:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006808:	4601      	mov	r1, r0
 800680a:	3b30      	subs	r3, #48	@ 0x30
 800680c:	220a      	movs	r2, #10
 800680e:	4630      	mov	r0, r6
 8006810:	f7ff ff8c 	bl	800672c <__multadd>
 8006814:	45a0      	cmp	r8, r4
 8006816:	d1f5      	bne.n	8006804 <__s2b+0x4c>
 8006818:	f1a5 0408 	sub.w	r4, r5, #8
 800681c:	444c      	add	r4, r9
 800681e:	1b2d      	subs	r5, r5, r4
 8006820:	1963      	adds	r3, r4, r5
 8006822:	42bb      	cmp	r3, r7
 8006824:	db04      	blt.n	8006830 <__s2b+0x78>
 8006826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800682a:	340a      	adds	r4, #10
 800682c:	2509      	movs	r5, #9
 800682e:	e7f6      	b.n	800681e <__s2b+0x66>
 8006830:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006834:	4601      	mov	r1, r0
 8006836:	3b30      	subs	r3, #48	@ 0x30
 8006838:	220a      	movs	r2, #10
 800683a:	4630      	mov	r0, r6
 800683c:	f7ff ff76 	bl	800672c <__multadd>
 8006840:	e7ee      	b.n	8006820 <__s2b+0x68>
 8006842:	bf00      	nop
 8006844:	08009e75 	.word	0x08009e75
 8006848:	08009e86 	.word	0x08009e86

0800684c <__hi0bits>:
 800684c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006850:	4603      	mov	r3, r0
 8006852:	bf36      	itet	cc
 8006854:	0403      	lslcc	r3, r0, #16
 8006856:	2000      	movcs	r0, #0
 8006858:	2010      	movcc	r0, #16
 800685a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800685e:	bf3c      	itt	cc
 8006860:	021b      	lslcc	r3, r3, #8
 8006862:	3008      	addcc	r0, #8
 8006864:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006868:	bf3c      	itt	cc
 800686a:	011b      	lslcc	r3, r3, #4
 800686c:	3004      	addcc	r0, #4
 800686e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006872:	bf3c      	itt	cc
 8006874:	009b      	lslcc	r3, r3, #2
 8006876:	3002      	addcc	r0, #2
 8006878:	2b00      	cmp	r3, #0
 800687a:	db05      	blt.n	8006888 <__hi0bits+0x3c>
 800687c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006880:	f100 0001 	add.w	r0, r0, #1
 8006884:	bf08      	it	eq
 8006886:	2020      	moveq	r0, #32
 8006888:	4770      	bx	lr

0800688a <__lo0bits>:
 800688a:	6803      	ldr	r3, [r0, #0]
 800688c:	4602      	mov	r2, r0
 800688e:	f013 0007 	ands.w	r0, r3, #7
 8006892:	d00b      	beq.n	80068ac <__lo0bits+0x22>
 8006894:	07d9      	lsls	r1, r3, #31
 8006896:	d421      	bmi.n	80068dc <__lo0bits+0x52>
 8006898:	0798      	lsls	r0, r3, #30
 800689a:	bf49      	itett	mi
 800689c:	085b      	lsrmi	r3, r3, #1
 800689e:	089b      	lsrpl	r3, r3, #2
 80068a0:	2001      	movmi	r0, #1
 80068a2:	6013      	strmi	r3, [r2, #0]
 80068a4:	bf5c      	itt	pl
 80068a6:	6013      	strpl	r3, [r2, #0]
 80068a8:	2002      	movpl	r0, #2
 80068aa:	4770      	bx	lr
 80068ac:	b299      	uxth	r1, r3
 80068ae:	b909      	cbnz	r1, 80068b4 <__lo0bits+0x2a>
 80068b0:	0c1b      	lsrs	r3, r3, #16
 80068b2:	2010      	movs	r0, #16
 80068b4:	b2d9      	uxtb	r1, r3
 80068b6:	b909      	cbnz	r1, 80068bc <__lo0bits+0x32>
 80068b8:	3008      	adds	r0, #8
 80068ba:	0a1b      	lsrs	r3, r3, #8
 80068bc:	0719      	lsls	r1, r3, #28
 80068be:	bf04      	itt	eq
 80068c0:	091b      	lsreq	r3, r3, #4
 80068c2:	3004      	addeq	r0, #4
 80068c4:	0799      	lsls	r1, r3, #30
 80068c6:	bf04      	itt	eq
 80068c8:	089b      	lsreq	r3, r3, #2
 80068ca:	3002      	addeq	r0, #2
 80068cc:	07d9      	lsls	r1, r3, #31
 80068ce:	d403      	bmi.n	80068d8 <__lo0bits+0x4e>
 80068d0:	085b      	lsrs	r3, r3, #1
 80068d2:	f100 0001 	add.w	r0, r0, #1
 80068d6:	d003      	beq.n	80068e0 <__lo0bits+0x56>
 80068d8:	6013      	str	r3, [r2, #0]
 80068da:	4770      	bx	lr
 80068dc:	2000      	movs	r0, #0
 80068de:	4770      	bx	lr
 80068e0:	2020      	movs	r0, #32
 80068e2:	4770      	bx	lr

080068e4 <__i2b>:
 80068e4:	b510      	push	{r4, lr}
 80068e6:	460c      	mov	r4, r1
 80068e8:	2101      	movs	r1, #1
 80068ea:	f7ff febd 	bl	8006668 <_Balloc>
 80068ee:	4602      	mov	r2, r0
 80068f0:	b928      	cbnz	r0, 80068fe <__i2b+0x1a>
 80068f2:	4b05      	ldr	r3, [pc, #20]	@ (8006908 <__i2b+0x24>)
 80068f4:	4805      	ldr	r0, [pc, #20]	@ (800690c <__i2b+0x28>)
 80068f6:	f240 1145 	movw	r1, #325	@ 0x145
 80068fa:	f001 fc19 	bl	8008130 <__assert_func>
 80068fe:	2301      	movs	r3, #1
 8006900:	6144      	str	r4, [r0, #20]
 8006902:	6103      	str	r3, [r0, #16]
 8006904:	bd10      	pop	{r4, pc}
 8006906:	bf00      	nop
 8006908:	08009e75 	.word	0x08009e75
 800690c:	08009e86 	.word	0x08009e86

08006910 <__multiply>:
 8006910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006914:	4614      	mov	r4, r2
 8006916:	690a      	ldr	r2, [r1, #16]
 8006918:	6923      	ldr	r3, [r4, #16]
 800691a:	429a      	cmp	r2, r3
 800691c:	bfa8      	it	ge
 800691e:	4623      	movge	r3, r4
 8006920:	460f      	mov	r7, r1
 8006922:	bfa4      	itt	ge
 8006924:	460c      	movge	r4, r1
 8006926:	461f      	movge	r7, r3
 8006928:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800692c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006930:	68a3      	ldr	r3, [r4, #8]
 8006932:	6861      	ldr	r1, [r4, #4]
 8006934:	eb0a 0609 	add.w	r6, sl, r9
 8006938:	42b3      	cmp	r3, r6
 800693a:	b085      	sub	sp, #20
 800693c:	bfb8      	it	lt
 800693e:	3101      	addlt	r1, #1
 8006940:	f7ff fe92 	bl	8006668 <_Balloc>
 8006944:	b930      	cbnz	r0, 8006954 <__multiply+0x44>
 8006946:	4602      	mov	r2, r0
 8006948:	4b44      	ldr	r3, [pc, #272]	@ (8006a5c <__multiply+0x14c>)
 800694a:	4845      	ldr	r0, [pc, #276]	@ (8006a60 <__multiply+0x150>)
 800694c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006950:	f001 fbee 	bl	8008130 <__assert_func>
 8006954:	f100 0514 	add.w	r5, r0, #20
 8006958:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800695c:	462b      	mov	r3, r5
 800695e:	2200      	movs	r2, #0
 8006960:	4543      	cmp	r3, r8
 8006962:	d321      	bcc.n	80069a8 <__multiply+0x98>
 8006964:	f107 0114 	add.w	r1, r7, #20
 8006968:	f104 0214 	add.w	r2, r4, #20
 800696c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006970:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006974:	9302      	str	r3, [sp, #8]
 8006976:	1b13      	subs	r3, r2, r4
 8006978:	3b15      	subs	r3, #21
 800697a:	f023 0303 	bic.w	r3, r3, #3
 800697e:	3304      	adds	r3, #4
 8006980:	f104 0715 	add.w	r7, r4, #21
 8006984:	42ba      	cmp	r2, r7
 8006986:	bf38      	it	cc
 8006988:	2304      	movcc	r3, #4
 800698a:	9301      	str	r3, [sp, #4]
 800698c:	9b02      	ldr	r3, [sp, #8]
 800698e:	9103      	str	r1, [sp, #12]
 8006990:	428b      	cmp	r3, r1
 8006992:	d80c      	bhi.n	80069ae <__multiply+0x9e>
 8006994:	2e00      	cmp	r6, #0
 8006996:	dd03      	ble.n	80069a0 <__multiply+0x90>
 8006998:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800699c:	2b00      	cmp	r3, #0
 800699e:	d05b      	beq.n	8006a58 <__multiply+0x148>
 80069a0:	6106      	str	r6, [r0, #16]
 80069a2:	b005      	add	sp, #20
 80069a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069a8:	f843 2b04 	str.w	r2, [r3], #4
 80069ac:	e7d8      	b.n	8006960 <__multiply+0x50>
 80069ae:	f8b1 a000 	ldrh.w	sl, [r1]
 80069b2:	f1ba 0f00 	cmp.w	sl, #0
 80069b6:	d024      	beq.n	8006a02 <__multiply+0xf2>
 80069b8:	f104 0e14 	add.w	lr, r4, #20
 80069bc:	46a9      	mov	r9, r5
 80069be:	f04f 0c00 	mov.w	ip, #0
 80069c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80069c6:	f8d9 3000 	ldr.w	r3, [r9]
 80069ca:	fa1f fb87 	uxth.w	fp, r7
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	fb0a 330b 	mla	r3, sl, fp, r3
 80069d4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80069d8:	f8d9 7000 	ldr.w	r7, [r9]
 80069dc:	4463      	add	r3, ip
 80069de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80069e2:	fb0a c70b 	mla	r7, sl, fp, ip
 80069e6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80069f0:	4572      	cmp	r2, lr
 80069f2:	f849 3b04 	str.w	r3, [r9], #4
 80069f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80069fa:	d8e2      	bhi.n	80069c2 <__multiply+0xb2>
 80069fc:	9b01      	ldr	r3, [sp, #4]
 80069fe:	f845 c003 	str.w	ip, [r5, r3]
 8006a02:	9b03      	ldr	r3, [sp, #12]
 8006a04:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006a08:	3104      	adds	r1, #4
 8006a0a:	f1b9 0f00 	cmp.w	r9, #0
 8006a0e:	d021      	beq.n	8006a54 <__multiply+0x144>
 8006a10:	682b      	ldr	r3, [r5, #0]
 8006a12:	f104 0c14 	add.w	ip, r4, #20
 8006a16:	46ae      	mov	lr, r5
 8006a18:	f04f 0a00 	mov.w	sl, #0
 8006a1c:	f8bc b000 	ldrh.w	fp, [ip]
 8006a20:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006a24:	fb09 770b 	mla	r7, r9, fp, r7
 8006a28:	4457      	add	r7, sl
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006a30:	f84e 3b04 	str.w	r3, [lr], #4
 8006a34:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006a38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006a3c:	f8be 3000 	ldrh.w	r3, [lr]
 8006a40:	fb09 330a 	mla	r3, r9, sl, r3
 8006a44:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006a48:	4562      	cmp	r2, ip
 8006a4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006a4e:	d8e5      	bhi.n	8006a1c <__multiply+0x10c>
 8006a50:	9f01      	ldr	r7, [sp, #4]
 8006a52:	51eb      	str	r3, [r5, r7]
 8006a54:	3504      	adds	r5, #4
 8006a56:	e799      	b.n	800698c <__multiply+0x7c>
 8006a58:	3e01      	subs	r6, #1
 8006a5a:	e79b      	b.n	8006994 <__multiply+0x84>
 8006a5c:	08009e75 	.word	0x08009e75
 8006a60:	08009e86 	.word	0x08009e86

08006a64 <__pow5mult>:
 8006a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a68:	4615      	mov	r5, r2
 8006a6a:	f012 0203 	ands.w	r2, r2, #3
 8006a6e:	4607      	mov	r7, r0
 8006a70:	460e      	mov	r6, r1
 8006a72:	d007      	beq.n	8006a84 <__pow5mult+0x20>
 8006a74:	4c25      	ldr	r4, [pc, #148]	@ (8006b0c <__pow5mult+0xa8>)
 8006a76:	3a01      	subs	r2, #1
 8006a78:	2300      	movs	r3, #0
 8006a7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006a7e:	f7ff fe55 	bl	800672c <__multadd>
 8006a82:	4606      	mov	r6, r0
 8006a84:	10ad      	asrs	r5, r5, #2
 8006a86:	d03d      	beq.n	8006b04 <__pow5mult+0xa0>
 8006a88:	69fc      	ldr	r4, [r7, #28]
 8006a8a:	b97c      	cbnz	r4, 8006aac <__pow5mult+0x48>
 8006a8c:	2010      	movs	r0, #16
 8006a8e:	f7ff fd35 	bl	80064fc <malloc>
 8006a92:	4602      	mov	r2, r0
 8006a94:	61f8      	str	r0, [r7, #28]
 8006a96:	b928      	cbnz	r0, 8006aa4 <__pow5mult+0x40>
 8006a98:	4b1d      	ldr	r3, [pc, #116]	@ (8006b10 <__pow5mult+0xac>)
 8006a9a:	481e      	ldr	r0, [pc, #120]	@ (8006b14 <__pow5mult+0xb0>)
 8006a9c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006aa0:	f001 fb46 	bl	8008130 <__assert_func>
 8006aa4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006aa8:	6004      	str	r4, [r0, #0]
 8006aaa:	60c4      	str	r4, [r0, #12]
 8006aac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006ab0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006ab4:	b94c      	cbnz	r4, 8006aca <__pow5mult+0x66>
 8006ab6:	f240 2171 	movw	r1, #625	@ 0x271
 8006aba:	4638      	mov	r0, r7
 8006abc:	f7ff ff12 	bl	80068e4 <__i2b>
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	f8c8 0008 	str.w	r0, [r8, #8]
 8006ac6:	4604      	mov	r4, r0
 8006ac8:	6003      	str	r3, [r0, #0]
 8006aca:	f04f 0900 	mov.w	r9, #0
 8006ace:	07eb      	lsls	r3, r5, #31
 8006ad0:	d50a      	bpl.n	8006ae8 <__pow5mult+0x84>
 8006ad2:	4631      	mov	r1, r6
 8006ad4:	4622      	mov	r2, r4
 8006ad6:	4638      	mov	r0, r7
 8006ad8:	f7ff ff1a 	bl	8006910 <__multiply>
 8006adc:	4631      	mov	r1, r6
 8006ade:	4680      	mov	r8, r0
 8006ae0:	4638      	mov	r0, r7
 8006ae2:	f7ff fe01 	bl	80066e8 <_Bfree>
 8006ae6:	4646      	mov	r6, r8
 8006ae8:	106d      	asrs	r5, r5, #1
 8006aea:	d00b      	beq.n	8006b04 <__pow5mult+0xa0>
 8006aec:	6820      	ldr	r0, [r4, #0]
 8006aee:	b938      	cbnz	r0, 8006b00 <__pow5mult+0x9c>
 8006af0:	4622      	mov	r2, r4
 8006af2:	4621      	mov	r1, r4
 8006af4:	4638      	mov	r0, r7
 8006af6:	f7ff ff0b 	bl	8006910 <__multiply>
 8006afa:	6020      	str	r0, [r4, #0]
 8006afc:	f8c0 9000 	str.w	r9, [r0]
 8006b00:	4604      	mov	r4, r0
 8006b02:	e7e4      	b.n	8006ace <__pow5mult+0x6a>
 8006b04:	4630      	mov	r0, r6
 8006b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b0a:	bf00      	nop
 8006b0c:	08009ee0 	.word	0x08009ee0
 8006b10:	08009e06 	.word	0x08009e06
 8006b14:	08009e86 	.word	0x08009e86

08006b18 <__lshift>:
 8006b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b1c:	460c      	mov	r4, r1
 8006b1e:	6849      	ldr	r1, [r1, #4]
 8006b20:	6923      	ldr	r3, [r4, #16]
 8006b22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006b26:	68a3      	ldr	r3, [r4, #8]
 8006b28:	4607      	mov	r7, r0
 8006b2a:	4691      	mov	r9, r2
 8006b2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006b30:	f108 0601 	add.w	r6, r8, #1
 8006b34:	42b3      	cmp	r3, r6
 8006b36:	db0b      	blt.n	8006b50 <__lshift+0x38>
 8006b38:	4638      	mov	r0, r7
 8006b3a:	f7ff fd95 	bl	8006668 <_Balloc>
 8006b3e:	4605      	mov	r5, r0
 8006b40:	b948      	cbnz	r0, 8006b56 <__lshift+0x3e>
 8006b42:	4602      	mov	r2, r0
 8006b44:	4b28      	ldr	r3, [pc, #160]	@ (8006be8 <__lshift+0xd0>)
 8006b46:	4829      	ldr	r0, [pc, #164]	@ (8006bec <__lshift+0xd4>)
 8006b48:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006b4c:	f001 faf0 	bl	8008130 <__assert_func>
 8006b50:	3101      	adds	r1, #1
 8006b52:	005b      	lsls	r3, r3, #1
 8006b54:	e7ee      	b.n	8006b34 <__lshift+0x1c>
 8006b56:	2300      	movs	r3, #0
 8006b58:	f100 0114 	add.w	r1, r0, #20
 8006b5c:	f100 0210 	add.w	r2, r0, #16
 8006b60:	4618      	mov	r0, r3
 8006b62:	4553      	cmp	r3, sl
 8006b64:	db33      	blt.n	8006bce <__lshift+0xb6>
 8006b66:	6920      	ldr	r0, [r4, #16]
 8006b68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006b6c:	f104 0314 	add.w	r3, r4, #20
 8006b70:	f019 091f 	ands.w	r9, r9, #31
 8006b74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006b78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006b7c:	d02b      	beq.n	8006bd6 <__lshift+0xbe>
 8006b7e:	f1c9 0e20 	rsb	lr, r9, #32
 8006b82:	468a      	mov	sl, r1
 8006b84:	2200      	movs	r2, #0
 8006b86:	6818      	ldr	r0, [r3, #0]
 8006b88:	fa00 f009 	lsl.w	r0, r0, r9
 8006b8c:	4310      	orrs	r0, r2
 8006b8e:	f84a 0b04 	str.w	r0, [sl], #4
 8006b92:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b96:	459c      	cmp	ip, r3
 8006b98:	fa22 f20e 	lsr.w	r2, r2, lr
 8006b9c:	d8f3      	bhi.n	8006b86 <__lshift+0x6e>
 8006b9e:	ebac 0304 	sub.w	r3, ip, r4
 8006ba2:	3b15      	subs	r3, #21
 8006ba4:	f023 0303 	bic.w	r3, r3, #3
 8006ba8:	3304      	adds	r3, #4
 8006baa:	f104 0015 	add.w	r0, r4, #21
 8006bae:	4584      	cmp	ip, r0
 8006bb0:	bf38      	it	cc
 8006bb2:	2304      	movcc	r3, #4
 8006bb4:	50ca      	str	r2, [r1, r3]
 8006bb6:	b10a      	cbz	r2, 8006bbc <__lshift+0xa4>
 8006bb8:	f108 0602 	add.w	r6, r8, #2
 8006bbc:	3e01      	subs	r6, #1
 8006bbe:	4638      	mov	r0, r7
 8006bc0:	612e      	str	r6, [r5, #16]
 8006bc2:	4621      	mov	r1, r4
 8006bc4:	f7ff fd90 	bl	80066e8 <_Bfree>
 8006bc8:	4628      	mov	r0, r5
 8006bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bce:	f842 0f04 	str.w	r0, [r2, #4]!
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	e7c5      	b.n	8006b62 <__lshift+0x4a>
 8006bd6:	3904      	subs	r1, #4
 8006bd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bdc:	f841 2f04 	str.w	r2, [r1, #4]!
 8006be0:	459c      	cmp	ip, r3
 8006be2:	d8f9      	bhi.n	8006bd8 <__lshift+0xc0>
 8006be4:	e7ea      	b.n	8006bbc <__lshift+0xa4>
 8006be6:	bf00      	nop
 8006be8:	08009e75 	.word	0x08009e75
 8006bec:	08009e86 	.word	0x08009e86

08006bf0 <__mcmp>:
 8006bf0:	690a      	ldr	r2, [r1, #16]
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	6900      	ldr	r0, [r0, #16]
 8006bf6:	1a80      	subs	r0, r0, r2
 8006bf8:	b530      	push	{r4, r5, lr}
 8006bfa:	d10e      	bne.n	8006c1a <__mcmp+0x2a>
 8006bfc:	3314      	adds	r3, #20
 8006bfe:	3114      	adds	r1, #20
 8006c00:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006c04:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006c08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006c0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006c10:	4295      	cmp	r5, r2
 8006c12:	d003      	beq.n	8006c1c <__mcmp+0x2c>
 8006c14:	d205      	bcs.n	8006c22 <__mcmp+0x32>
 8006c16:	f04f 30ff 	mov.w	r0, #4294967295
 8006c1a:	bd30      	pop	{r4, r5, pc}
 8006c1c:	42a3      	cmp	r3, r4
 8006c1e:	d3f3      	bcc.n	8006c08 <__mcmp+0x18>
 8006c20:	e7fb      	b.n	8006c1a <__mcmp+0x2a>
 8006c22:	2001      	movs	r0, #1
 8006c24:	e7f9      	b.n	8006c1a <__mcmp+0x2a>
	...

08006c28 <__mdiff>:
 8006c28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c2c:	4689      	mov	r9, r1
 8006c2e:	4606      	mov	r6, r0
 8006c30:	4611      	mov	r1, r2
 8006c32:	4648      	mov	r0, r9
 8006c34:	4614      	mov	r4, r2
 8006c36:	f7ff ffdb 	bl	8006bf0 <__mcmp>
 8006c3a:	1e05      	subs	r5, r0, #0
 8006c3c:	d112      	bne.n	8006c64 <__mdiff+0x3c>
 8006c3e:	4629      	mov	r1, r5
 8006c40:	4630      	mov	r0, r6
 8006c42:	f7ff fd11 	bl	8006668 <_Balloc>
 8006c46:	4602      	mov	r2, r0
 8006c48:	b928      	cbnz	r0, 8006c56 <__mdiff+0x2e>
 8006c4a:	4b3f      	ldr	r3, [pc, #252]	@ (8006d48 <__mdiff+0x120>)
 8006c4c:	f240 2137 	movw	r1, #567	@ 0x237
 8006c50:	483e      	ldr	r0, [pc, #248]	@ (8006d4c <__mdiff+0x124>)
 8006c52:	f001 fa6d 	bl	8008130 <__assert_func>
 8006c56:	2301      	movs	r3, #1
 8006c58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006c5c:	4610      	mov	r0, r2
 8006c5e:	b003      	add	sp, #12
 8006c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c64:	bfbc      	itt	lt
 8006c66:	464b      	movlt	r3, r9
 8006c68:	46a1      	movlt	r9, r4
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006c70:	bfba      	itte	lt
 8006c72:	461c      	movlt	r4, r3
 8006c74:	2501      	movlt	r5, #1
 8006c76:	2500      	movge	r5, #0
 8006c78:	f7ff fcf6 	bl	8006668 <_Balloc>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	b918      	cbnz	r0, 8006c88 <__mdiff+0x60>
 8006c80:	4b31      	ldr	r3, [pc, #196]	@ (8006d48 <__mdiff+0x120>)
 8006c82:	f240 2145 	movw	r1, #581	@ 0x245
 8006c86:	e7e3      	b.n	8006c50 <__mdiff+0x28>
 8006c88:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006c8c:	6926      	ldr	r6, [r4, #16]
 8006c8e:	60c5      	str	r5, [r0, #12]
 8006c90:	f109 0310 	add.w	r3, r9, #16
 8006c94:	f109 0514 	add.w	r5, r9, #20
 8006c98:	f104 0e14 	add.w	lr, r4, #20
 8006c9c:	f100 0b14 	add.w	fp, r0, #20
 8006ca0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006ca4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006ca8:	9301      	str	r3, [sp, #4]
 8006caa:	46d9      	mov	r9, fp
 8006cac:	f04f 0c00 	mov.w	ip, #0
 8006cb0:	9b01      	ldr	r3, [sp, #4]
 8006cb2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006cb6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006cba:	9301      	str	r3, [sp, #4]
 8006cbc:	fa1f f38a 	uxth.w	r3, sl
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	b283      	uxth	r3, r0
 8006cc4:	1acb      	subs	r3, r1, r3
 8006cc6:	0c00      	lsrs	r0, r0, #16
 8006cc8:	4463      	add	r3, ip
 8006cca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006cce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006cd8:	4576      	cmp	r6, lr
 8006cda:	f849 3b04 	str.w	r3, [r9], #4
 8006cde:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006ce2:	d8e5      	bhi.n	8006cb0 <__mdiff+0x88>
 8006ce4:	1b33      	subs	r3, r6, r4
 8006ce6:	3b15      	subs	r3, #21
 8006ce8:	f023 0303 	bic.w	r3, r3, #3
 8006cec:	3415      	adds	r4, #21
 8006cee:	3304      	adds	r3, #4
 8006cf0:	42a6      	cmp	r6, r4
 8006cf2:	bf38      	it	cc
 8006cf4:	2304      	movcc	r3, #4
 8006cf6:	441d      	add	r5, r3
 8006cf8:	445b      	add	r3, fp
 8006cfa:	461e      	mov	r6, r3
 8006cfc:	462c      	mov	r4, r5
 8006cfe:	4544      	cmp	r4, r8
 8006d00:	d30e      	bcc.n	8006d20 <__mdiff+0xf8>
 8006d02:	f108 0103 	add.w	r1, r8, #3
 8006d06:	1b49      	subs	r1, r1, r5
 8006d08:	f021 0103 	bic.w	r1, r1, #3
 8006d0c:	3d03      	subs	r5, #3
 8006d0e:	45a8      	cmp	r8, r5
 8006d10:	bf38      	it	cc
 8006d12:	2100      	movcc	r1, #0
 8006d14:	440b      	add	r3, r1
 8006d16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006d1a:	b191      	cbz	r1, 8006d42 <__mdiff+0x11a>
 8006d1c:	6117      	str	r7, [r2, #16]
 8006d1e:	e79d      	b.n	8006c5c <__mdiff+0x34>
 8006d20:	f854 1b04 	ldr.w	r1, [r4], #4
 8006d24:	46e6      	mov	lr, ip
 8006d26:	0c08      	lsrs	r0, r1, #16
 8006d28:	fa1c fc81 	uxtah	ip, ip, r1
 8006d2c:	4471      	add	r1, lr
 8006d2e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006d32:	b289      	uxth	r1, r1
 8006d34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006d38:	f846 1b04 	str.w	r1, [r6], #4
 8006d3c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006d40:	e7dd      	b.n	8006cfe <__mdiff+0xd6>
 8006d42:	3f01      	subs	r7, #1
 8006d44:	e7e7      	b.n	8006d16 <__mdiff+0xee>
 8006d46:	bf00      	nop
 8006d48:	08009e75 	.word	0x08009e75
 8006d4c:	08009e86 	.word	0x08009e86

08006d50 <__ulp>:
 8006d50:	b082      	sub	sp, #8
 8006d52:	ed8d 0b00 	vstr	d0, [sp]
 8006d56:	9a01      	ldr	r2, [sp, #4]
 8006d58:	4b0f      	ldr	r3, [pc, #60]	@ (8006d98 <__ulp+0x48>)
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	dc08      	bgt.n	8006d76 <__ulp+0x26>
 8006d64:	425b      	negs	r3, r3
 8006d66:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006d6a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006d6e:	da04      	bge.n	8006d7a <__ulp+0x2a>
 8006d70:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006d74:	4113      	asrs	r3, r2
 8006d76:	2200      	movs	r2, #0
 8006d78:	e008      	b.n	8006d8c <__ulp+0x3c>
 8006d7a:	f1a2 0314 	sub.w	r3, r2, #20
 8006d7e:	2b1e      	cmp	r3, #30
 8006d80:	bfda      	itte	le
 8006d82:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006d86:	40da      	lsrle	r2, r3
 8006d88:	2201      	movgt	r2, #1
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	4610      	mov	r0, r2
 8006d90:	ec41 0b10 	vmov	d0, r0, r1
 8006d94:	b002      	add	sp, #8
 8006d96:	4770      	bx	lr
 8006d98:	7ff00000 	.word	0x7ff00000

08006d9c <__b2d>:
 8006d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006da0:	6906      	ldr	r6, [r0, #16]
 8006da2:	f100 0814 	add.w	r8, r0, #20
 8006da6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006daa:	1f37      	subs	r7, r6, #4
 8006dac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006db0:	4610      	mov	r0, r2
 8006db2:	f7ff fd4b 	bl	800684c <__hi0bits>
 8006db6:	f1c0 0320 	rsb	r3, r0, #32
 8006dba:	280a      	cmp	r0, #10
 8006dbc:	600b      	str	r3, [r1, #0]
 8006dbe:	491b      	ldr	r1, [pc, #108]	@ (8006e2c <__b2d+0x90>)
 8006dc0:	dc15      	bgt.n	8006dee <__b2d+0x52>
 8006dc2:	f1c0 0c0b 	rsb	ip, r0, #11
 8006dc6:	fa22 f30c 	lsr.w	r3, r2, ip
 8006dca:	45b8      	cmp	r8, r7
 8006dcc:	ea43 0501 	orr.w	r5, r3, r1
 8006dd0:	bf34      	ite	cc
 8006dd2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006dd6:	2300      	movcs	r3, #0
 8006dd8:	3015      	adds	r0, #21
 8006dda:	fa02 f000 	lsl.w	r0, r2, r0
 8006dde:	fa23 f30c 	lsr.w	r3, r3, ip
 8006de2:	4303      	orrs	r3, r0
 8006de4:	461c      	mov	r4, r3
 8006de6:	ec45 4b10 	vmov	d0, r4, r5
 8006dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dee:	45b8      	cmp	r8, r7
 8006df0:	bf3a      	itte	cc
 8006df2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006df6:	f1a6 0708 	subcc.w	r7, r6, #8
 8006dfa:	2300      	movcs	r3, #0
 8006dfc:	380b      	subs	r0, #11
 8006dfe:	d012      	beq.n	8006e26 <__b2d+0x8a>
 8006e00:	f1c0 0120 	rsb	r1, r0, #32
 8006e04:	fa23 f401 	lsr.w	r4, r3, r1
 8006e08:	4082      	lsls	r2, r0
 8006e0a:	4322      	orrs	r2, r4
 8006e0c:	4547      	cmp	r7, r8
 8006e0e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8006e12:	bf8c      	ite	hi
 8006e14:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006e18:	2200      	movls	r2, #0
 8006e1a:	4083      	lsls	r3, r0
 8006e1c:	40ca      	lsrs	r2, r1
 8006e1e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006e22:	4313      	orrs	r3, r2
 8006e24:	e7de      	b.n	8006de4 <__b2d+0x48>
 8006e26:	ea42 0501 	orr.w	r5, r2, r1
 8006e2a:	e7db      	b.n	8006de4 <__b2d+0x48>
 8006e2c:	3ff00000 	.word	0x3ff00000

08006e30 <__d2b>:
 8006e30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e34:	460f      	mov	r7, r1
 8006e36:	2101      	movs	r1, #1
 8006e38:	ec59 8b10 	vmov	r8, r9, d0
 8006e3c:	4616      	mov	r6, r2
 8006e3e:	f7ff fc13 	bl	8006668 <_Balloc>
 8006e42:	4604      	mov	r4, r0
 8006e44:	b930      	cbnz	r0, 8006e54 <__d2b+0x24>
 8006e46:	4602      	mov	r2, r0
 8006e48:	4b23      	ldr	r3, [pc, #140]	@ (8006ed8 <__d2b+0xa8>)
 8006e4a:	4824      	ldr	r0, [pc, #144]	@ (8006edc <__d2b+0xac>)
 8006e4c:	f240 310f 	movw	r1, #783	@ 0x30f
 8006e50:	f001 f96e 	bl	8008130 <__assert_func>
 8006e54:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006e58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e5c:	b10d      	cbz	r5, 8006e62 <__d2b+0x32>
 8006e5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e62:	9301      	str	r3, [sp, #4]
 8006e64:	f1b8 0300 	subs.w	r3, r8, #0
 8006e68:	d023      	beq.n	8006eb2 <__d2b+0x82>
 8006e6a:	4668      	mov	r0, sp
 8006e6c:	9300      	str	r3, [sp, #0]
 8006e6e:	f7ff fd0c 	bl	800688a <__lo0bits>
 8006e72:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006e76:	b1d0      	cbz	r0, 8006eae <__d2b+0x7e>
 8006e78:	f1c0 0320 	rsb	r3, r0, #32
 8006e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e80:	430b      	orrs	r3, r1
 8006e82:	40c2      	lsrs	r2, r0
 8006e84:	6163      	str	r3, [r4, #20]
 8006e86:	9201      	str	r2, [sp, #4]
 8006e88:	9b01      	ldr	r3, [sp, #4]
 8006e8a:	61a3      	str	r3, [r4, #24]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	bf0c      	ite	eq
 8006e90:	2201      	moveq	r2, #1
 8006e92:	2202      	movne	r2, #2
 8006e94:	6122      	str	r2, [r4, #16]
 8006e96:	b1a5      	cbz	r5, 8006ec2 <__d2b+0x92>
 8006e98:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006e9c:	4405      	add	r5, r0
 8006e9e:	603d      	str	r5, [r7, #0]
 8006ea0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006ea4:	6030      	str	r0, [r6, #0]
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	b003      	add	sp, #12
 8006eaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006eae:	6161      	str	r1, [r4, #20]
 8006eb0:	e7ea      	b.n	8006e88 <__d2b+0x58>
 8006eb2:	a801      	add	r0, sp, #4
 8006eb4:	f7ff fce9 	bl	800688a <__lo0bits>
 8006eb8:	9b01      	ldr	r3, [sp, #4]
 8006eba:	6163      	str	r3, [r4, #20]
 8006ebc:	3020      	adds	r0, #32
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	e7e8      	b.n	8006e94 <__d2b+0x64>
 8006ec2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006ec6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006eca:	6038      	str	r0, [r7, #0]
 8006ecc:	6918      	ldr	r0, [r3, #16]
 8006ece:	f7ff fcbd 	bl	800684c <__hi0bits>
 8006ed2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006ed6:	e7e5      	b.n	8006ea4 <__d2b+0x74>
 8006ed8:	08009e75 	.word	0x08009e75
 8006edc:	08009e86 	.word	0x08009e86

08006ee0 <__ratio>:
 8006ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee4:	b085      	sub	sp, #20
 8006ee6:	e9cd 1000 	strd	r1, r0, [sp]
 8006eea:	a902      	add	r1, sp, #8
 8006eec:	f7ff ff56 	bl	8006d9c <__b2d>
 8006ef0:	9800      	ldr	r0, [sp, #0]
 8006ef2:	a903      	add	r1, sp, #12
 8006ef4:	ec55 4b10 	vmov	r4, r5, d0
 8006ef8:	f7ff ff50 	bl	8006d9c <__b2d>
 8006efc:	9b01      	ldr	r3, [sp, #4]
 8006efe:	6919      	ldr	r1, [r3, #16]
 8006f00:	9b00      	ldr	r3, [sp, #0]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	1ac9      	subs	r1, r1, r3
 8006f06:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006f0a:	1a9b      	subs	r3, r3, r2
 8006f0c:	ec5b ab10 	vmov	sl, fp, d0
 8006f10:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	bfce      	itee	gt
 8006f18:	462a      	movgt	r2, r5
 8006f1a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006f1e:	465a      	movle	r2, fp
 8006f20:	462f      	mov	r7, r5
 8006f22:	46d9      	mov	r9, fp
 8006f24:	bfcc      	ite	gt
 8006f26:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006f2a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006f2e:	464b      	mov	r3, r9
 8006f30:	4652      	mov	r2, sl
 8006f32:	4620      	mov	r0, r4
 8006f34:	4639      	mov	r1, r7
 8006f36:	f7f9 fc89 	bl	800084c <__aeabi_ddiv>
 8006f3a:	ec41 0b10 	vmov	d0, r0, r1
 8006f3e:	b005      	add	sp, #20
 8006f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006f44 <__copybits>:
 8006f44:	3901      	subs	r1, #1
 8006f46:	b570      	push	{r4, r5, r6, lr}
 8006f48:	1149      	asrs	r1, r1, #5
 8006f4a:	6914      	ldr	r4, [r2, #16]
 8006f4c:	3101      	adds	r1, #1
 8006f4e:	f102 0314 	add.w	r3, r2, #20
 8006f52:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006f56:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006f5a:	1f05      	subs	r5, r0, #4
 8006f5c:	42a3      	cmp	r3, r4
 8006f5e:	d30c      	bcc.n	8006f7a <__copybits+0x36>
 8006f60:	1aa3      	subs	r3, r4, r2
 8006f62:	3b11      	subs	r3, #17
 8006f64:	f023 0303 	bic.w	r3, r3, #3
 8006f68:	3211      	adds	r2, #17
 8006f6a:	42a2      	cmp	r2, r4
 8006f6c:	bf88      	it	hi
 8006f6e:	2300      	movhi	r3, #0
 8006f70:	4418      	add	r0, r3
 8006f72:	2300      	movs	r3, #0
 8006f74:	4288      	cmp	r0, r1
 8006f76:	d305      	bcc.n	8006f84 <__copybits+0x40>
 8006f78:	bd70      	pop	{r4, r5, r6, pc}
 8006f7a:	f853 6b04 	ldr.w	r6, [r3], #4
 8006f7e:	f845 6f04 	str.w	r6, [r5, #4]!
 8006f82:	e7eb      	b.n	8006f5c <__copybits+0x18>
 8006f84:	f840 3b04 	str.w	r3, [r0], #4
 8006f88:	e7f4      	b.n	8006f74 <__copybits+0x30>

08006f8a <__any_on>:
 8006f8a:	f100 0214 	add.w	r2, r0, #20
 8006f8e:	6900      	ldr	r0, [r0, #16]
 8006f90:	114b      	asrs	r3, r1, #5
 8006f92:	4298      	cmp	r0, r3
 8006f94:	b510      	push	{r4, lr}
 8006f96:	db11      	blt.n	8006fbc <__any_on+0x32>
 8006f98:	dd0a      	ble.n	8006fb0 <__any_on+0x26>
 8006f9a:	f011 011f 	ands.w	r1, r1, #31
 8006f9e:	d007      	beq.n	8006fb0 <__any_on+0x26>
 8006fa0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006fa4:	fa24 f001 	lsr.w	r0, r4, r1
 8006fa8:	fa00 f101 	lsl.w	r1, r0, r1
 8006fac:	428c      	cmp	r4, r1
 8006fae:	d10b      	bne.n	8006fc8 <__any_on+0x3e>
 8006fb0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d803      	bhi.n	8006fc0 <__any_on+0x36>
 8006fb8:	2000      	movs	r0, #0
 8006fba:	bd10      	pop	{r4, pc}
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	e7f7      	b.n	8006fb0 <__any_on+0x26>
 8006fc0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006fc4:	2900      	cmp	r1, #0
 8006fc6:	d0f5      	beq.n	8006fb4 <__any_on+0x2a>
 8006fc8:	2001      	movs	r0, #1
 8006fca:	e7f6      	b.n	8006fba <__any_on+0x30>

08006fcc <sulp>:
 8006fcc:	b570      	push	{r4, r5, r6, lr}
 8006fce:	4604      	mov	r4, r0
 8006fd0:	460d      	mov	r5, r1
 8006fd2:	ec45 4b10 	vmov	d0, r4, r5
 8006fd6:	4616      	mov	r6, r2
 8006fd8:	f7ff feba 	bl	8006d50 <__ulp>
 8006fdc:	ec51 0b10 	vmov	r0, r1, d0
 8006fe0:	b17e      	cbz	r6, 8007002 <sulp+0x36>
 8006fe2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006fe6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	dd09      	ble.n	8007002 <sulp+0x36>
 8006fee:	051b      	lsls	r3, r3, #20
 8006ff0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006ff4:	2400      	movs	r4, #0
 8006ff6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006ffa:	4622      	mov	r2, r4
 8006ffc:	462b      	mov	r3, r5
 8006ffe:	f7f9 fafb 	bl	80005f8 <__aeabi_dmul>
 8007002:	ec41 0b10 	vmov	d0, r0, r1
 8007006:	bd70      	pop	{r4, r5, r6, pc}

08007008 <_strtod_l>:
 8007008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800700c:	b09f      	sub	sp, #124	@ 0x7c
 800700e:	460c      	mov	r4, r1
 8007010:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007012:	2200      	movs	r2, #0
 8007014:	921a      	str	r2, [sp, #104]	@ 0x68
 8007016:	9005      	str	r0, [sp, #20]
 8007018:	f04f 0a00 	mov.w	sl, #0
 800701c:	f04f 0b00 	mov.w	fp, #0
 8007020:	460a      	mov	r2, r1
 8007022:	9219      	str	r2, [sp, #100]	@ 0x64
 8007024:	7811      	ldrb	r1, [r2, #0]
 8007026:	292b      	cmp	r1, #43	@ 0x2b
 8007028:	d04a      	beq.n	80070c0 <_strtod_l+0xb8>
 800702a:	d838      	bhi.n	800709e <_strtod_l+0x96>
 800702c:	290d      	cmp	r1, #13
 800702e:	d832      	bhi.n	8007096 <_strtod_l+0x8e>
 8007030:	2908      	cmp	r1, #8
 8007032:	d832      	bhi.n	800709a <_strtod_l+0x92>
 8007034:	2900      	cmp	r1, #0
 8007036:	d03b      	beq.n	80070b0 <_strtod_l+0xa8>
 8007038:	2200      	movs	r2, #0
 800703a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800703c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800703e:	782a      	ldrb	r2, [r5, #0]
 8007040:	2a30      	cmp	r2, #48	@ 0x30
 8007042:	f040 80b3 	bne.w	80071ac <_strtod_l+0x1a4>
 8007046:	786a      	ldrb	r2, [r5, #1]
 8007048:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800704c:	2a58      	cmp	r2, #88	@ 0x58
 800704e:	d16e      	bne.n	800712e <_strtod_l+0x126>
 8007050:	9302      	str	r3, [sp, #8]
 8007052:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007054:	9301      	str	r3, [sp, #4]
 8007056:	ab1a      	add	r3, sp, #104	@ 0x68
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	4a8e      	ldr	r2, [pc, #568]	@ (8007294 <_strtod_l+0x28c>)
 800705c:	9805      	ldr	r0, [sp, #20]
 800705e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007060:	a919      	add	r1, sp, #100	@ 0x64
 8007062:	f001 f8ff 	bl	8008264 <__gethex>
 8007066:	f010 060f 	ands.w	r6, r0, #15
 800706a:	4604      	mov	r4, r0
 800706c:	d005      	beq.n	800707a <_strtod_l+0x72>
 800706e:	2e06      	cmp	r6, #6
 8007070:	d128      	bne.n	80070c4 <_strtod_l+0xbc>
 8007072:	3501      	adds	r5, #1
 8007074:	2300      	movs	r3, #0
 8007076:	9519      	str	r5, [sp, #100]	@ 0x64
 8007078:	930b      	str	r3, [sp, #44]	@ 0x2c
 800707a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800707c:	2b00      	cmp	r3, #0
 800707e:	f040 858e 	bne.w	8007b9e <_strtod_l+0xb96>
 8007082:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007084:	b1cb      	cbz	r3, 80070ba <_strtod_l+0xb2>
 8007086:	4652      	mov	r2, sl
 8007088:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800708c:	ec43 2b10 	vmov	d0, r2, r3
 8007090:	b01f      	add	sp, #124	@ 0x7c
 8007092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007096:	2920      	cmp	r1, #32
 8007098:	d1ce      	bne.n	8007038 <_strtod_l+0x30>
 800709a:	3201      	adds	r2, #1
 800709c:	e7c1      	b.n	8007022 <_strtod_l+0x1a>
 800709e:	292d      	cmp	r1, #45	@ 0x2d
 80070a0:	d1ca      	bne.n	8007038 <_strtod_l+0x30>
 80070a2:	2101      	movs	r1, #1
 80070a4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80070a6:	1c51      	adds	r1, r2, #1
 80070a8:	9119      	str	r1, [sp, #100]	@ 0x64
 80070aa:	7852      	ldrb	r2, [r2, #1]
 80070ac:	2a00      	cmp	r2, #0
 80070ae:	d1c5      	bne.n	800703c <_strtod_l+0x34>
 80070b0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80070b2:	9419      	str	r4, [sp, #100]	@ 0x64
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f040 8570 	bne.w	8007b9a <_strtod_l+0xb92>
 80070ba:	4652      	mov	r2, sl
 80070bc:	465b      	mov	r3, fp
 80070be:	e7e5      	b.n	800708c <_strtod_l+0x84>
 80070c0:	2100      	movs	r1, #0
 80070c2:	e7ef      	b.n	80070a4 <_strtod_l+0x9c>
 80070c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80070c6:	b13a      	cbz	r2, 80070d8 <_strtod_l+0xd0>
 80070c8:	2135      	movs	r1, #53	@ 0x35
 80070ca:	a81c      	add	r0, sp, #112	@ 0x70
 80070cc:	f7ff ff3a 	bl	8006f44 <__copybits>
 80070d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80070d2:	9805      	ldr	r0, [sp, #20]
 80070d4:	f7ff fb08 	bl	80066e8 <_Bfree>
 80070d8:	3e01      	subs	r6, #1
 80070da:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80070dc:	2e04      	cmp	r6, #4
 80070de:	d806      	bhi.n	80070ee <_strtod_l+0xe6>
 80070e0:	e8df f006 	tbb	[pc, r6]
 80070e4:	201d0314 	.word	0x201d0314
 80070e8:	14          	.byte	0x14
 80070e9:	00          	.byte	0x00
 80070ea:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80070ee:	05e1      	lsls	r1, r4, #23
 80070f0:	bf48      	it	mi
 80070f2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80070f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80070fa:	0d1b      	lsrs	r3, r3, #20
 80070fc:	051b      	lsls	r3, r3, #20
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1bb      	bne.n	800707a <_strtod_l+0x72>
 8007102:	f7fe fb23 	bl	800574c <__errno>
 8007106:	2322      	movs	r3, #34	@ 0x22
 8007108:	6003      	str	r3, [r0, #0]
 800710a:	e7b6      	b.n	800707a <_strtod_l+0x72>
 800710c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007110:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007114:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007118:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800711c:	e7e7      	b.n	80070ee <_strtod_l+0xe6>
 800711e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800729c <_strtod_l+0x294>
 8007122:	e7e4      	b.n	80070ee <_strtod_l+0xe6>
 8007124:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007128:	f04f 3aff 	mov.w	sl, #4294967295
 800712c:	e7df      	b.n	80070ee <_strtod_l+0xe6>
 800712e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007130:	1c5a      	adds	r2, r3, #1
 8007132:	9219      	str	r2, [sp, #100]	@ 0x64
 8007134:	785b      	ldrb	r3, [r3, #1]
 8007136:	2b30      	cmp	r3, #48	@ 0x30
 8007138:	d0f9      	beq.n	800712e <_strtod_l+0x126>
 800713a:	2b00      	cmp	r3, #0
 800713c:	d09d      	beq.n	800707a <_strtod_l+0x72>
 800713e:	2301      	movs	r3, #1
 8007140:	9309      	str	r3, [sp, #36]	@ 0x24
 8007142:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007144:	930c      	str	r3, [sp, #48]	@ 0x30
 8007146:	2300      	movs	r3, #0
 8007148:	9308      	str	r3, [sp, #32]
 800714a:	930a      	str	r3, [sp, #40]	@ 0x28
 800714c:	461f      	mov	r7, r3
 800714e:	220a      	movs	r2, #10
 8007150:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007152:	7805      	ldrb	r5, [r0, #0]
 8007154:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007158:	b2d9      	uxtb	r1, r3
 800715a:	2909      	cmp	r1, #9
 800715c:	d928      	bls.n	80071b0 <_strtod_l+0x1a8>
 800715e:	494e      	ldr	r1, [pc, #312]	@ (8007298 <_strtod_l+0x290>)
 8007160:	2201      	movs	r2, #1
 8007162:	f000 ffbb 	bl	80080dc <strncmp>
 8007166:	2800      	cmp	r0, #0
 8007168:	d032      	beq.n	80071d0 <_strtod_l+0x1c8>
 800716a:	2000      	movs	r0, #0
 800716c:	462a      	mov	r2, r5
 800716e:	4681      	mov	r9, r0
 8007170:	463d      	mov	r5, r7
 8007172:	4603      	mov	r3, r0
 8007174:	2a65      	cmp	r2, #101	@ 0x65
 8007176:	d001      	beq.n	800717c <_strtod_l+0x174>
 8007178:	2a45      	cmp	r2, #69	@ 0x45
 800717a:	d114      	bne.n	80071a6 <_strtod_l+0x19e>
 800717c:	b91d      	cbnz	r5, 8007186 <_strtod_l+0x17e>
 800717e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007180:	4302      	orrs	r2, r0
 8007182:	d095      	beq.n	80070b0 <_strtod_l+0xa8>
 8007184:	2500      	movs	r5, #0
 8007186:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007188:	1c62      	adds	r2, r4, #1
 800718a:	9219      	str	r2, [sp, #100]	@ 0x64
 800718c:	7862      	ldrb	r2, [r4, #1]
 800718e:	2a2b      	cmp	r2, #43	@ 0x2b
 8007190:	d077      	beq.n	8007282 <_strtod_l+0x27a>
 8007192:	2a2d      	cmp	r2, #45	@ 0x2d
 8007194:	d07b      	beq.n	800728e <_strtod_l+0x286>
 8007196:	f04f 0c00 	mov.w	ip, #0
 800719a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800719e:	2909      	cmp	r1, #9
 80071a0:	f240 8082 	bls.w	80072a8 <_strtod_l+0x2a0>
 80071a4:	9419      	str	r4, [sp, #100]	@ 0x64
 80071a6:	f04f 0800 	mov.w	r8, #0
 80071aa:	e0a2      	b.n	80072f2 <_strtod_l+0x2ea>
 80071ac:	2300      	movs	r3, #0
 80071ae:	e7c7      	b.n	8007140 <_strtod_l+0x138>
 80071b0:	2f08      	cmp	r7, #8
 80071b2:	bfd5      	itete	le
 80071b4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80071b6:	9908      	ldrgt	r1, [sp, #32]
 80071b8:	fb02 3301 	mlale	r3, r2, r1, r3
 80071bc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80071c0:	f100 0001 	add.w	r0, r0, #1
 80071c4:	bfd4      	ite	le
 80071c6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80071c8:	9308      	strgt	r3, [sp, #32]
 80071ca:	3701      	adds	r7, #1
 80071cc:	9019      	str	r0, [sp, #100]	@ 0x64
 80071ce:	e7bf      	b.n	8007150 <_strtod_l+0x148>
 80071d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80071d2:	1c5a      	adds	r2, r3, #1
 80071d4:	9219      	str	r2, [sp, #100]	@ 0x64
 80071d6:	785a      	ldrb	r2, [r3, #1]
 80071d8:	b37f      	cbz	r7, 800723a <_strtod_l+0x232>
 80071da:	4681      	mov	r9, r0
 80071dc:	463d      	mov	r5, r7
 80071de:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80071e2:	2b09      	cmp	r3, #9
 80071e4:	d912      	bls.n	800720c <_strtod_l+0x204>
 80071e6:	2301      	movs	r3, #1
 80071e8:	e7c4      	b.n	8007174 <_strtod_l+0x16c>
 80071ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80071ec:	1c5a      	adds	r2, r3, #1
 80071ee:	9219      	str	r2, [sp, #100]	@ 0x64
 80071f0:	785a      	ldrb	r2, [r3, #1]
 80071f2:	3001      	adds	r0, #1
 80071f4:	2a30      	cmp	r2, #48	@ 0x30
 80071f6:	d0f8      	beq.n	80071ea <_strtod_l+0x1e2>
 80071f8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80071fc:	2b08      	cmp	r3, #8
 80071fe:	f200 84d3 	bhi.w	8007ba8 <_strtod_l+0xba0>
 8007202:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007204:	930c      	str	r3, [sp, #48]	@ 0x30
 8007206:	4681      	mov	r9, r0
 8007208:	2000      	movs	r0, #0
 800720a:	4605      	mov	r5, r0
 800720c:	3a30      	subs	r2, #48	@ 0x30
 800720e:	f100 0301 	add.w	r3, r0, #1
 8007212:	d02a      	beq.n	800726a <_strtod_l+0x262>
 8007214:	4499      	add	r9, r3
 8007216:	eb00 0c05 	add.w	ip, r0, r5
 800721a:	462b      	mov	r3, r5
 800721c:	210a      	movs	r1, #10
 800721e:	4563      	cmp	r3, ip
 8007220:	d10d      	bne.n	800723e <_strtod_l+0x236>
 8007222:	1c69      	adds	r1, r5, #1
 8007224:	4401      	add	r1, r0
 8007226:	4428      	add	r0, r5
 8007228:	2808      	cmp	r0, #8
 800722a:	dc16      	bgt.n	800725a <_strtod_l+0x252>
 800722c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800722e:	230a      	movs	r3, #10
 8007230:	fb03 2300 	mla	r3, r3, r0, r2
 8007234:	930a      	str	r3, [sp, #40]	@ 0x28
 8007236:	2300      	movs	r3, #0
 8007238:	e018      	b.n	800726c <_strtod_l+0x264>
 800723a:	4638      	mov	r0, r7
 800723c:	e7da      	b.n	80071f4 <_strtod_l+0x1ec>
 800723e:	2b08      	cmp	r3, #8
 8007240:	f103 0301 	add.w	r3, r3, #1
 8007244:	dc03      	bgt.n	800724e <_strtod_l+0x246>
 8007246:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007248:	434e      	muls	r6, r1
 800724a:	960a      	str	r6, [sp, #40]	@ 0x28
 800724c:	e7e7      	b.n	800721e <_strtod_l+0x216>
 800724e:	2b10      	cmp	r3, #16
 8007250:	bfde      	ittt	le
 8007252:	9e08      	ldrle	r6, [sp, #32]
 8007254:	434e      	mulle	r6, r1
 8007256:	9608      	strle	r6, [sp, #32]
 8007258:	e7e1      	b.n	800721e <_strtod_l+0x216>
 800725a:	280f      	cmp	r0, #15
 800725c:	dceb      	bgt.n	8007236 <_strtod_l+0x22e>
 800725e:	9808      	ldr	r0, [sp, #32]
 8007260:	230a      	movs	r3, #10
 8007262:	fb03 2300 	mla	r3, r3, r0, r2
 8007266:	9308      	str	r3, [sp, #32]
 8007268:	e7e5      	b.n	8007236 <_strtod_l+0x22e>
 800726a:	4629      	mov	r1, r5
 800726c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800726e:	1c50      	adds	r0, r2, #1
 8007270:	9019      	str	r0, [sp, #100]	@ 0x64
 8007272:	7852      	ldrb	r2, [r2, #1]
 8007274:	4618      	mov	r0, r3
 8007276:	460d      	mov	r5, r1
 8007278:	e7b1      	b.n	80071de <_strtod_l+0x1d6>
 800727a:	f04f 0900 	mov.w	r9, #0
 800727e:	2301      	movs	r3, #1
 8007280:	e77d      	b.n	800717e <_strtod_l+0x176>
 8007282:	f04f 0c00 	mov.w	ip, #0
 8007286:	1ca2      	adds	r2, r4, #2
 8007288:	9219      	str	r2, [sp, #100]	@ 0x64
 800728a:	78a2      	ldrb	r2, [r4, #2]
 800728c:	e785      	b.n	800719a <_strtod_l+0x192>
 800728e:	f04f 0c01 	mov.w	ip, #1
 8007292:	e7f8      	b.n	8007286 <_strtod_l+0x27e>
 8007294:	08009ff8 	.word	0x08009ff8
 8007298:	08009fe0 	.word	0x08009fe0
 800729c:	7ff00000 	.word	0x7ff00000
 80072a0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80072a2:	1c51      	adds	r1, r2, #1
 80072a4:	9119      	str	r1, [sp, #100]	@ 0x64
 80072a6:	7852      	ldrb	r2, [r2, #1]
 80072a8:	2a30      	cmp	r2, #48	@ 0x30
 80072aa:	d0f9      	beq.n	80072a0 <_strtod_l+0x298>
 80072ac:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80072b0:	2908      	cmp	r1, #8
 80072b2:	f63f af78 	bhi.w	80071a6 <_strtod_l+0x19e>
 80072b6:	3a30      	subs	r2, #48	@ 0x30
 80072b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80072ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80072bc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80072be:	f04f 080a 	mov.w	r8, #10
 80072c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80072c4:	1c56      	adds	r6, r2, #1
 80072c6:	9619      	str	r6, [sp, #100]	@ 0x64
 80072c8:	7852      	ldrb	r2, [r2, #1]
 80072ca:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80072ce:	f1be 0f09 	cmp.w	lr, #9
 80072d2:	d939      	bls.n	8007348 <_strtod_l+0x340>
 80072d4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80072d6:	1a76      	subs	r6, r6, r1
 80072d8:	2e08      	cmp	r6, #8
 80072da:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80072de:	dc03      	bgt.n	80072e8 <_strtod_l+0x2e0>
 80072e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80072e2:	4588      	cmp	r8, r1
 80072e4:	bfa8      	it	ge
 80072e6:	4688      	movge	r8, r1
 80072e8:	f1bc 0f00 	cmp.w	ip, #0
 80072ec:	d001      	beq.n	80072f2 <_strtod_l+0x2ea>
 80072ee:	f1c8 0800 	rsb	r8, r8, #0
 80072f2:	2d00      	cmp	r5, #0
 80072f4:	d14e      	bne.n	8007394 <_strtod_l+0x38c>
 80072f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80072f8:	4308      	orrs	r0, r1
 80072fa:	f47f aebe 	bne.w	800707a <_strtod_l+0x72>
 80072fe:	2b00      	cmp	r3, #0
 8007300:	f47f aed6 	bne.w	80070b0 <_strtod_l+0xa8>
 8007304:	2a69      	cmp	r2, #105	@ 0x69
 8007306:	d028      	beq.n	800735a <_strtod_l+0x352>
 8007308:	dc25      	bgt.n	8007356 <_strtod_l+0x34e>
 800730a:	2a49      	cmp	r2, #73	@ 0x49
 800730c:	d025      	beq.n	800735a <_strtod_l+0x352>
 800730e:	2a4e      	cmp	r2, #78	@ 0x4e
 8007310:	f47f aece 	bne.w	80070b0 <_strtod_l+0xa8>
 8007314:	499b      	ldr	r1, [pc, #620]	@ (8007584 <_strtod_l+0x57c>)
 8007316:	a819      	add	r0, sp, #100	@ 0x64
 8007318:	f001 f9c6 	bl	80086a8 <__match>
 800731c:	2800      	cmp	r0, #0
 800731e:	f43f aec7 	beq.w	80070b0 <_strtod_l+0xa8>
 8007322:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	2b28      	cmp	r3, #40	@ 0x28
 8007328:	d12e      	bne.n	8007388 <_strtod_l+0x380>
 800732a:	4997      	ldr	r1, [pc, #604]	@ (8007588 <_strtod_l+0x580>)
 800732c:	aa1c      	add	r2, sp, #112	@ 0x70
 800732e:	a819      	add	r0, sp, #100	@ 0x64
 8007330:	f001 f9ce 	bl	80086d0 <__hexnan>
 8007334:	2805      	cmp	r0, #5
 8007336:	d127      	bne.n	8007388 <_strtod_l+0x380>
 8007338:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800733a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800733e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007342:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007346:	e698      	b.n	800707a <_strtod_l+0x72>
 8007348:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800734a:	fb08 2101 	mla	r1, r8, r1, r2
 800734e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007352:	920e      	str	r2, [sp, #56]	@ 0x38
 8007354:	e7b5      	b.n	80072c2 <_strtod_l+0x2ba>
 8007356:	2a6e      	cmp	r2, #110	@ 0x6e
 8007358:	e7da      	b.n	8007310 <_strtod_l+0x308>
 800735a:	498c      	ldr	r1, [pc, #560]	@ (800758c <_strtod_l+0x584>)
 800735c:	a819      	add	r0, sp, #100	@ 0x64
 800735e:	f001 f9a3 	bl	80086a8 <__match>
 8007362:	2800      	cmp	r0, #0
 8007364:	f43f aea4 	beq.w	80070b0 <_strtod_l+0xa8>
 8007368:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800736a:	4989      	ldr	r1, [pc, #548]	@ (8007590 <_strtod_l+0x588>)
 800736c:	3b01      	subs	r3, #1
 800736e:	a819      	add	r0, sp, #100	@ 0x64
 8007370:	9319      	str	r3, [sp, #100]	@ 0x64
 8007372:	f001 f999 	bl	80086a8 <__match>
 8007376:	b910      	cbnz	r0, 800737e <_strtod_l+0x376>
 8007378:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800737a:	3301      	adds	r3, #1
 800737c:	9319      	str	r3, [sp, #100]	@ 0x64
 800737e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80075a0 <_strtod_l+0x598>
 8007382:	f04f 0a00 	mov.w	sl, #0
 8007386:	e678      	b.n	800707a <_strtod_l+0x72>
 8007388:	4882      	ldr	r0, [pc, #520]	@ (8007594 <_strtod_l+0x58c>)
 800738a:	f000 fec9 	bl	8008120 <nan>
 800738e:	ec5b ab10 	vmov	sl, fp, d0
 8007392:	e672      	b.n	800707a <_strtod_l+0x72>
 8007394:	eba8 0309 	sub.w	r3, r8, r9
 8007398:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800739a:	9309      	str	r3, [sp, #36]	@ 0x24
 800739c:	2f00      	cmp	r7, #0
 800739e:	bf08      	it	eq
 80073a0:	462f      	moveq	r7, r5
 80073a2:	2d10      	cmp	r5, #16
 80073a4:	462c      	mov	r4, r5
 80073a6:	bfa8      	it	ge
 80073a8:	2410      	movge	r4, #16
 80073aa:	f7f9 f8ab 	bl	8000504 <__aeabi_ui2d>
 80073ae:	2d09      	cmp	r5, #9
 80073b0:	4682      	mov	sl, r0
 80073b2:	468b      	mov	fp, r1
 80073b4:	dc13      	bgt.n	80073de <_strtod_l+0x3d6>
 80073b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f43f ae5e 	beq.w	800707a <_strtod_l+0x72>
 80073be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073c0:	dd78      	ble.n	80074b4 <_strtod_l+0x4ac>
 80073c2:	2b16      	cmp	r3, #22
 80073c4:	dc5f      	bgt.n	8007486 <_strtod_l+0x47e>
 80073c6:	4974      	ldr	r1, [pc, #464]	@ (8007598 <_strtod_l+0x590>)
 80073c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80073cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073d0:	4652      	mov	r2, sl
 80073d2:	465b      	mov	r3, fp
 80073d4:	f7f9 f910 	bl	80005f8 <__aeabi_dmul>
 80073d8:	4682      	mov	sl, r0
 80073da:	468b      	mov	fp, r1
 80073dc:	e64d      	b.n	800707a <_strtod_l+0x72>
 80073de:	4b6e      	ldr	r3, [pc, #440]	@ (8007598 <_strtod_l+0x590>)
 80073e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80073e4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80073e8:	f7f9 f906 	bl	80005f8 <__aeabi_dmul>
 80073ec:	4682      	mov	sl, r0
 80073ee:	9808      	ldr	r0, [sp, #32]
 80073f0:	468b      	mov	fp, r1
 80073f2:	f7f9 f887 	bl	8000504 <__aeabi_ui2d>
 80073f6:	4602      	mov	r2, r0
 80073f8:	460b      	mov	r3, r1
 80073fa:	4650      	mov	r0, sl
 80073fc:	4659      	mov	r1, fp
 80073fe:	f7f8 ff45 	bl	800028c <__adddf3>
 8007402:	2d0f      	cmp	r5, #15
 8007404:	4682      	mov	sl, r0
 8007406:	468b      	mov	fp, r1
 8007408:	ddd5      	ble.n	80073b6 <_strtod_l+0x3ae>
 800740a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800740c:	1b2c      	subs	r4, r5, r4
 800740e:	441c      	add	r4, r3
 8007410:	2c00      	cmp	r4, #0
 8007412:	f340 8096 	ble.w	8007542 <_strtod_l+0x53a>
 8007416:	f014 030f 	ands.w	r3, r4, #15
 800741a:	d00a      	beq.n	8007432 <_strtod_l+0x42a>
 800741c:	495e      	ldr	r1, [pc, #376]	@ (8007598 <_strtod_l+0x590>)
 800741e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007422:	4652      	mov	r2, sl
 8007424:	465b      	mov	r3, fp
 8007426:	e9d1 0100 	ldrd	r0, r1, [r1]
 800742a:	f7f9 f8e5 	bl	80005f8 <__aeabi_dmul>
 800742e:	4682      	mov	sl, r0
 8007430:	468b      	mov	fp, r1
 8007432:	f034 040f 	bics.w	r4, r4, #15
 8007436:	d073      	beq.n	8007520 <_strtod_l+0x518>
 8007438:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800743c:	dd48      	ble.n	80074d0 <_strtod_l+0x4c8>
 800743e:	2400      	movs	r4, #0
 8007440:	46a0      	mov	r8, r4
 8007442:	940a      	str	r4, [sp, #40]	@ 0x28
 8007444:	46a1      	mov	r9, r4
 8007446:	9a05      	ldr	r2, [sp, #20]
 8007448:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80075a0 <_strtod_l+0x598>
 800744c:	2322      	movs	r3, #34	@ 0x22
 800744e:	6013      	str	r3, [r2, #0]
 8007450:	f04f 0a00 	mov.w	sl, #0
 8007454:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007456:	2b00      	cmp	r3, #0
 8007458:	f43f ae0f 	beq.w	800707a <_strtod_l+0x72>
 800745c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800745e:	9805      	ldr	r0, [sp, #20]
 8007460:	f7ff f942 	bl	80066e8 <_Bfree>
 8007464:	9805      	ldr	r0, [sp, #20]
 8007466:	4649      	mov	r1, r9
 8007468:	f7ff f93e 	bl	80066e8 <_Bfree>
 800746c:	9805      	ldr	r0, [sp, #20]
 800746e:	4641      	mov	r1, r8
 8007470:	f7ff f93a 	bl	80066e8 <_Bfree>
 8007474:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007476:	9805      	ldr	r0, [sp, #20]
 8007478:	f7ff f936 	bl	80066e8 <_Bfree>
 800747c:	9805      	ldr	r0, [sp, #20]
 800747e:	4621      	mov	r1, r4
 8007480:	f7ff f932 	bl	80066e8 <_Bfree>
 8007484:	e5f9      	b.n	800707a <_strtod_l+0x72>
 8007486:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007488:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800748c:	4293      	cmp	r3, r2
 800748e:	dbbc      	blt.n	800740a <_strtod_l+0x402>
 8007490:	4c41      	ldr	r4, [pc, #260]	@ (8007598 <_strtod_l+0x590>)
 8007492:	f1c5 050f 	rsb	r5, r5, #15
 8007496:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800749a:	4652      	mov	r2, sl
 800749c:	465b      	mov	r3, fp
 800749e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074a2:	f7f9 f8a9 	bl	80005f8 <__aeabi_dmul>
 80074a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074a8:	1b5d      	subs	r5, r3, r5
 80074aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80074ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 80074b2:	e78f      	b.n	80073d4 <_strtod_l+0x3cc>
 80074b4:	3316      	adds	r3, #22
 80074b6:	dba8      	blt.n	800740a <_strtod_l+0x402>
 80074b8:	4b37      	ldr	r3, [pc, #220]	@ (8007598 <_strtod_l+0x590>)
 80074ba:	eba9 0808 	sub.w	r8, r9, r8
 80074be:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80074c2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80074c6:	4650      	mov	r0, sl
 80074c8:	4659      	mov	r1, fp
 80074ca:	f7f9 f9bf 	bl	800084c <__aeabi_ddiv>
 80074ce:	e783      	b.n	80073d8 <_strtod_l+0x3d0>
 80074d0:	4b32      	ldr	r3, [pc, #200]	@ (800759c <_strtod_l+0x594>)
 80074d2:	9308      	str	r3, [sp, #32]
 80074d4:	2300      	movs	r3, #0
 80074d6:	1124      	asrs	r4, r4, #4
 80074d8:	4650      	mov	r0, sl
 80074da:	4659      	mov	r1, fp
 80074dc:	461e      	mov	r6, r3
 80074de:	2c01      	cmp	r4, #1
 80074e0:	dc21      	bgt.n	8007526 <_strtod_l+0x51e>
 80074e2:	b10b      	cbz	r3, 80074e8 <_strtod_l+0x4e0>
 80074e4:	4682      	mov	sl, r0
 80074e6:	468b      	mov	fp, r1
 80074e8:	492c      	ldr	r1, [pc, #176]	@ (800759c <_strtod_l+0x594>)
 80074ea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80074ee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80074f2:	4652      	mov	r2, sl
 80074f4:	465b      	mov	r3, fp
 80074f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074fa:	f7f9 f87d 	bl	80005f8 <__aeabi_dmul>
 80074fe:	4b28      	ldr	r3, [pc, #160]	@ (80075a0 <_strtod_l+0x598>)
 8007500:	460a      	mov	r2, r1
 8007502:	400b      	ands	r3, r1
 8007504:	4927      	ldr	r1, [pc, #156]	@ (80075a4 <_strtod_l+0x59c>)
 8007506:	428b      	cmp	r3, r1
 8007508:	4682      	mov	sl, r0
 800750a:	d898      	bhi.n	800743e <_strtod_l+0x436>
 800750c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007510:	428b      	cmp	r3, r1
 8007512:	bf86      	itte	hi
 8007514:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80075a8 <_strtod_l+0x5a0>
 8007518:	f04f 3aff 	movhi.w	sl, #4294967295
 800751c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007520:	2300      	movs	r3, #0
 8007522:	9308      	str	r3, [sp, #32]
 8007524:	e07a      	b.n	800761c <_strtod_l+0x614>
 8007526:	07e2      	lsls	r2, r4, #31
 8007528:	d505      	bpl.n	8007536 <_strtod_l+0x52e>
 800752a:	9b08      	ldr	r3, [sp, #32]
 800752c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007530:	f7f9 f862 	bl	80005f8 <__aeabi_dmul>
 8007534:	2301      	movs	r3, #1
 8007536:	9a08      	ldr	r2, [sp, #32]
 8007538:	3208      	adds	r2, #8
 800753a:	3601      	adds	r6, #1
 800753c:	1064      	asrs	r4, r4, #1
 800753e:	9208      	str	r2, [sp, #32]
 8007540:	e7cd      	b.n	80074de <_strtod_l+0x4d6>
 8007542:	d0ed      	beq.n	8007520 <_strtod_l+0x518>
 8007544:	4264      	negs	r4, r4
 8007546:	f014 020f 	ands.w	r2, r4, #15
 800754a:	d00a      	beq.n	8007562 <_strtod_l+0x55a>
 800754c:	4b12      	ldr	r3, [pc, #72]	@ (8007598 <_strtod_l+0x590>)
 800754e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007552:	4650      	mov	r0, sl
 8007554:	4659      	mov	r1, fp
 8007556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755a:	f7f9 f977 	bl	800084c <__aeabi_ddiv>
 800755e:	4682      	mov	sl, r0
 8007560:	468b      	mov	fp, r1
 8007562:	1124      	asrs	r4, r4, #4
 8007564:	d0dc      	beq.n	8007520 <_strtod_l+0x518>
 8007566:	2c1f      	cmp	r4, #31
 8007568:	dd20      	ble.n	80075ac <_strtod_l+0x5a4>
 800756a:	2400      	movs	r4, #0
 800756c:	46a0      	mov	r8, r4
 800756e:	940a      	str	r4, [sp, #40]	@ 0x28
 8007570:	46a1      	mov	r9, r4
 8007572:	9a05      	ldr	r2, [sp, #20]
 8007574:	2322      	movs	r3, #34	@ 0x22
 8007576:	f04f 0a00 	mov.w	sl, #0
 800757a:	f04f 0b00 	mov.w	fp, #0
 800757e:	6013      	str	r3, [r2, #0]
 8007580:	e768      	b.n	8007454 <_strtod_l+0x44c>
 8007582:	bf00      	nop
 8007584:	08009dcd 	.word	0x08009dcd
 8007588:	08009fe4 	.word	0x08009fe4
 800758c:	08009dc5 	.word	0x08009dc5
 8007590:	08009dfc 	.word	0x08009dfc
 8007594:	0800a18d 	.word	0x0800a18d
 8007598:	08009f18 	.word	0x08009f18
 800759c:	08009ef0 	.word	0x08009ef0
 80075a0:	7ff00000 	.word	0x7ff00000
 80075a4:	7ca00000 	.word	0x7ca00000
 80075a8:	7fefffff 	.word	0x7fefffff
 80075ac:	f014 0310 	ands.w	r3, r4, #16
 80075b0:	bf18      	it	ne
 80075b2:	236a      	movne	r3, #106	@ 0x6a
 80075b4:	4ea9      	ldr	r6, [pc, #676]	@ (800785c <_strtod_l+0x854>)
 80075b6:	9308      	str	r3, [sp, #32]
 80075b8:	4650      	mov	r0, sl
 80075ba:	4659      	mov	r1, fp
 80075bc:	2300      	movs	r3, #0
 80075be:	07e2      	lsls	r2, r4, #31
 80075c0:	d504      	bpl.n	80075cc <_strtod_l+0x5c4>
 80075c2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80075c6:	f7f9 f817 	bl	80005f8 <__aeabi_dmul>
 80075ca:	2301      	movs	r3, #1
 80075cc:	1064      	asrs	r4, r4, #1
 80075ce:	f106 0608 	add.w	r6, r6, #8
 80075d2:	d1f4      	bne.n	80075be <_strtod_l+0x5b6>
 80075d4:	b10b      	cbz	r3, 80075da <_strtod_l+0x5d2>
 80075d6:	4682      	mov	sl, r0
 80075d8:	468b      	mov	fp, r1
 80075da:	9b08      	ldr	r3, [sp, #32]
 80075dc:	b1b3      	cbz	r3, 800760c <_strtod_l+0x604>
 80075de:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80075e2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	4659      	mov	r1, fp
 80075ea:	dd0f      	ble.n	800760c <_strtod_l+0x604>
 80075ec:	2b1f      	cmp	r3, #31
 80075ee:	dd55      	ble.n	800769c <_strtod_l+0x694>
 80075f0:	2b34      	cmp	r3, #52	@ 0x34
 80075f2:	bfde      	ittt	le
 80075f4:	f04f 33ff 	movle.w	r3, #4294967295
 80075f8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80075fc:	4093      	lslle	r3, r2
 80075fe:	f04f 0a00 	mov.w	sl, #0
 8007602:	bfcc      	ite	gt
 8007604:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007608:	ea03 0b01 	andle.w	fp, r3, r1
 800760c:	2200      	movs	r2, #0
 800760e:	2300      	movs	r3, #0
 8007610:	4650      	mov	r0, sl
 8007612:	4659      	mov	r1, fp
 8007614:	f7f9 fa58 	bl	8000ac8 <__aeabi_dcmpeq>
 8007618:	2800      	cmp	r0, #0
 800761a:	d1a6      	bne.n	800756a <_strtod_l+0x562>
 800761c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800761e:	9300      	str	r3, [sp, #0]
 8007620:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007622:	9805      	ldr	r0, [sp, #20]
 8007624:	462b      	mov	r3, r5
 8007626:	463a      	mov	r2, r7
 8007628:	f7ff f8c6 	bl	80067b8 <__s2b>
 800762c:	900a      	str	r0, [sp, #40]	@ 0x28
 800762e:	2800      	cmp	r0, #0
 8007630:	f43f af05 	beq.w	800743e <_strtod_l+0x436>
 8007634:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007636:	2a00      	cmp	r2, #0
 8007638:	eba9 0308 	sub.w	r3, r9, r8
 800763c:	bfa8      	it	ge
 800763e:	2300      	movge	r3, #0
 8007640:	9312      	str	r3, [sp, #72]	@ 0x48
 8007642:	2400      	movs	r4, #0
 8007644:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007648:	9316      	str	r3, [sp, #88]	@ 0x58
 800764a:	46a0      	mov	r8, r4
 800764c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800764e:	9805      	ldr	r0, [sp, #20]
 8007650:	6859      	ldr	r1, [r3, #4]
 8007652:	f7ff f809 	bl	8006668 <_Balloc>
 8007656:	4681      	mov	r9, r0
 8007658:	2800      	cmp	r0, #0
 800765a:	f43f aef4 	beq.w	8007446 <_strtod_l+0x43e>
 800765e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007660:	691a      	ldr	r2, [r3, #16]
 8007662:	3202      	adds	r2, #2
 8007664:	f103 010c 	add.w	r1, r3, #12
 8007668:	0092      	lsls	r2, r2, #2
 800766a:	300c      	adds	r0, #12
 800766c:	f7fe f89b 	bl	80057a6 <memcpy>
 8007670:	ec4b ab10 	vmov	d0, sl, fp
 8007674:	9805      	ldr	r0, [sp, #20]
 8007676:	aa1c      	add	r2, sp, #112	@ 0x70
 8007678:	a91b      	add	r1, sp, #108	@ 0x6c
 800767a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800767e:	f7ff fbd7 	bl	8006e30 <__d2b>
 8007682:	901a      	str	r0, [sp, #104]	@ 0x68
 8007684:	2800      	cmp	r0, #0
 8007686:	f43f aede 	beq.w	8007446 <_strtod_l+0x43e>
 800768a:	9805      	ldr	r0, [sp, #20]
 800768c:	2101      	movs	r1, #1
 800768e:	f7ff f929 	bl	80068e4 <__i2b>
 8007692:	4680      	mov	r8, r0
 8007694:	b948      	cbnz	r0, 80076aa <_strtod_l+0x6a2>
 8007696:	f04f 0800 	mov.w	r8, #0
 800769a:	e6d4      	b.n	8007446 <_strtod_l+0x43e>
 800769c:	f04f 32ff 	mov.w	r2, #4294967295
 80076a0:	fa02 f303 	lsl.w	r3, r2, r3
 80076a4:	ea03 0a0a 	and.w	sl, r3, sl
 80076a8:	e7b0      	b.n	800760c <_strtod_l+0x604>
 80076aa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80076ac:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80076ae:	2d00      	cmp	r5, #0
 80076b0:	bfab      	itete	ge
 80076b2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80076b4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80076b6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80076b8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80076ba:	bfac      	ite	ge
 80076bc:	18ef      	addge	r7, r5, r3
 80076be:	1b5e      	sublt	r6, r3, r5
 80076c0:	9b08      	ldr	r3, [sp, #32]
 80076c2:	1aed      	subs	r5, r5, r3
 80076c4:	4415      	add	r5, r2
 80076c6:	4b66      	ldr	r3, [pc, #408]	@ (8007860 <_strtod_l+0x858>)
 80076c8:	3d01      	subs	r5, #1
 80076ca:	429d      	cmp	r5, r3
 80076cc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80076d0:	da50      	bge.n	8007774 <_strtod_l+0x76c>
 80076d2:	1b5b      	subs	r3, r3, r5
 80076d4:	2b1f      	cmp	r3, #31
 80076d6:	eba2 0203 	sub.w	r2, r2, r3
 80076da:	f04f 0101 	mov.w	r1, #1
 80076de:	dc3d      	bgt.n	800775c <_strtod_l+0x754>
 80076e0:	fa01 f303 	lsl.w	r3, r1, r3
 80076e4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80076e6:	2300      	movs	r3, #0
 80076e8:	9310      	str	r3, [sp, #64]	@ 0x40
 80076ea:	18bd      	adds	r5, r7, r2
 80076ec:	9b08      	ldr	r3, [sp, #32]
 80076ee:	42af      	cmp	r7, r5
 80076f0:	4416      	add	r6, r2
 80076f2:	441e      	add	r6, r3
 80076f4:	463b      	mov	r3, r7
 80076f6:	bfa8      	it	ge
 80076f8:	462b      	movge	r3, r5
 80076fa:	42b3      	cmp	r3, r6
 80076fc:	bfa8      	it	ge
 80076fe:	4633      	movge	r3, r6
 8007700:	2b00      	cmp	r3, #0
 8007702:	bfc2      	ittt	gt
 8007704:	1aed      	subgt	r5, r5, r3
 8007706:	1af6      	subgt	r6, r6, r3
 8007708:	1aff      	subgt	r7, r7, r3
 800770a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800770c:	2b00      	cmp	r3, #0
 800770e:	dd16      	ble.n	800773e <_strtod_l+0x736>
 8007710:	4641      	mov	r1, r8
 8007712:	9805      	ldr	r0, [sp, #20]
 8007714:	461a      	mov	r2, r3
 8007716:	f7ff f9a5 	bl	8006a64 <__pow5mult>
 800771a:	4680      	mov	r8, r0
 800771c:	2800      	cmp	r0, #0
 800771e:	d0ba      	beq.n	8007696 <_strtod_l+0x68e>
 8007720:	4601      	mov	r1, r0
 8007722:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007724:	9805      	ldr	r0, [sp, #20]
 8007726:	f7ff f8f3 	bl	8006910 <__multiply>
 800772a:	900e      	str	r0, [sp, #56]	@ 0x38
 800772c:	2800      	cmp	r0, #0
 800772e:	f43f ae8a 	beq.w	8007446 <_strtod_l+0x43e>
 8007732:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007734:	9805      	ldr	r0, [sp, #20]
 8007736:	f7fe ffd7 	bl	80066e8 <_Bfree>
 800773a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800773c:	931a      	str	r3, [sp, #104]	@ 0x68
 800773e:	2d00      	cmp	r5, #0
 8007740:	dc1d      	bgt.n	800777e <_strtod_l+0x776>
 8007742:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007744:	2b00      	cmp	r3, #0
 8007746:	dd23      	ble.n	8007790 <_strtod_l+0x788>
 8007748:	4649      	mov	r1, r9
 800774a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800774c:	9805      	ldr	r0, [sp, #20]
 800774e:	f7ff f989 	bl	8006a64 <__pow5mult>
 8007752:	4681      	mov	r9, r0
 8007754:	b9e0      	cbnz	r0, 8007790 <_strtod_l+0x788>
 8007756:	f04f 0900 	mov.w	r9, #0
 800775a:	e674      	b.n	8007446 <_strtod_l+0x43e>
 800775c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007760:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007764:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007768:	35e2      	adds	r5, #226	@ 0xe2
 800776a:	fa01 f305 	lsl.w	r3, r1, r5
 800776e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007770:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007772:	e7ba      	b.n	80076ea <_strtod_l+0x6e2>
 8007774:	2300      	movs	r3, #0
 8007776:	9310      	str	r3, [sp, #64]	@ 0x40
 8007778:	2301      	movs	r3, #1
 800777a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800777c:	e7b5      	b.n	80076ea <_strtod_l+0x6e2>
 800777e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007780:	9805      	ldr	r0, [sp, #20]
 8007782:	462a      	mov	r2, r5
 8007784:	f7ff f9c8 	bl	8006b18 <__lshift>
 8007788:	901a      	str	r0, [sp, #104]	@ 0x68
 800778a:	2800      	cmp	r0, #0
 800778c:	d1d9      	bne.n	8007742 <_strtod_l+0x73a>
 800778e:	e65a      	b.n	8007446 <_strtod_l+0x43e>
 8007790:	2e00      	cmp	r6, #0
 8007792:	dd07      	ble.n	80077a4 <_strtod_l+0x79c>
 8007794:	4649      	mov	r1, r9
 8007796:	9805      	ldr	r0, [sp, #20]
 8007798:	4632      	mov	r2, r6
 800779a:	f7ff f9bd 	bl	8006b18 <__lshift>
 800779e:	4681      	mov	r9, r0
 80077a0:	2800      	cmp	r0, #0
 80077a2:	d0d8      	beq.n	8007756 <_strtod_l+0x74e>
 80077a4:	2f00      	cmp	r7, #0
 80077a6:	dd08      	ble.n	80077ba <_strtod_l+0x7b2>
 80077a8:	4641      	mov	r1, r8
 80077aa:	9805      	ldr	r0, [sp, #20]
 80077ac:	463a      	mov	r2, r7
 80077ae:	f7ff f9b3 	bl	8006b18 <__lshift>
 80077b2:	4680      	mov	r8, r0
 80077b4:	2800      	cmp	r0, #0
 80077b6:	f43f ae46 	beq.w	8007446 <_strtod_l+0x43e>
 80077ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80077bc:	9805      	ldr	r0, [sp, #20]
 80077be:	464a      	mov	r2, r9
 80077c0:	f7ff fa32 	bl	8006c28 <__mdiff>
 80077c4:	4604      	mov	r4, r0
 80077c6:	2800      	cmp	r0, #0
 80077c8:	f43f ae3d 	beq.w	8007446 <_strtod_l+0x43e>
 80077cc:	68c3      	ldr	r3, [r0, #12]
 80077ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 80077d0:	2300      	movs	r3, #0
 80077d2:	60c3      	str	r3, [r0, #12]
 80077d4:	4641      	mov	r1, r8
 80077d6:	f7ff fa0b 	bl	8006bf0 <__mcmp>
 80077da:	2800      	cmp	r0, #0
 80077dc:	da46      	bge.n	800786c <_strtod_l+0x864>
 80077de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077e0:	ea53 030a 	orrs.w	r3, r3, sl
 80077e4:	d16c      	bne.n	80078c0 <_strtod_l+0x8b8>
 80077e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d168      	bne.n	80078c0 <_strtod_l+0x8b8>
 80077ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80077f2:	0d1b      	lsrs	r3, r3, #20
 80077f4:	051b      	lsls	r3, r3, #20
 80077f6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80077fa:	d961      	bls.n	80078c0 <_strtod_l+0x8b8>
 80077fc:	6963      	ldr	r3, [r4, #20]
 80077fe:	b913      	cbnz	r3, 8007806 <_strtod_l+0x7fe>
 8007800:	6923      	ldr	r3, [r4, #16]
 8007802:	2b01      	cmp	r3, #1
 8007804:	dd5c      	ble.n	80078c0 <_strtod_l+0x8b8>
 8007806:	4621      	mov	r1, r4
 8007808:	2201      	movs	r2, #1
 800780a:	9805      	ldr	r0, [sp, #20]
 800780c:	f7ff f984 	bl	8006b18 <__lshift>
 8007810:	4641      	mov	r1, r8
 8007812:	4604      	mov	r4, r0
 8007814:	f7ff f9ec 	bl	8006bf0 <__mcmp>
 8007818:	2800      	cmp	r0, #0
 800781a:	dd51      	ble.n	80078c0 <_strtod_l+0x8b8>
 800781c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007820:	9a08      	ldr	r2, [sp, #32]
 8007822:	0d1b      	lsrs	r3, r3, #20
 8007824:	051b      	lsls	r3, r3, #20
 8007826:	2a00      	cmp	r2, #0
 8007828:	d06b      	beq.n	8007902 <_strtod_l+0x8fa>
 800782a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800782e:	d868      	bhi.n	8007902 <_strtod_l+0x8fa>
 8007830:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007834:	f67f ae9d 	bls.w	8007572 <_strtod_l+0x56a>
 8007838:	4b0a      	ldr	r3, [pc, #40]	@ (8007864 <_strtod_l+0x85c>)
 800783a:	4650      	mov	r0, sl
 800783c:	4659      	mov	r1, fp
 800783e:	2200      	movs	r2, #0
 8007840:	f7f8 feda 	bl	80005f8 <__aeabi_dmul>
 8007844:	4b08      	ldr	r3, [pc, #32]	@ (8007868 <_strtod_l+0x860>)
 8007846:	400b      	ands	r3, r1
 8007848:	4682      	mov	sl, r0
 800784a:	468b      	mov	fp, r1
 800784c:	2b00      	cmp	r3, #0
 800784e:	f47f ae05 	bne.w	800745c <_strtod_l+0x454>
 8007852:	9a05      	ldr	r2, [sp, #20]
 8007854:	2322      	movs	r3, #34	@ 0x22
 8007856:	6013      	str	r3, [r2, #0]
 8007858:	e600      	b.n	800745c <_strtod_l+0x454>
 800785a:	bf00      	nop
 800785c:	0800a010 	.word	0x0800a010
 8007860:	fffffc02 	.word	0xfffffc02
 8007864:	39500000 	.word	0x39500000
 8007868:	7ff00000 	.word	0x7ff00000
 800786c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007870:	d165      	bne.n	800793e <_strtod_l+0x936>
 8007872:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007874:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007878:	b35a      	cbz	r2, 80078d2 <_strtod_l+0x8ca>
 800787a:	4a9f      	ldr	r2, [pc, #636]	@ (8007af8 <_strtod_l+0xaf0>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d12b      	bne.n	80078d8 <_strtod_l+0x8d0>
 8007880:	9b08      	ldr	r3, [sp, #32]
 8007882:	4651      	mov	r1, sl
 8007884:	b303      	cbz	r3, 80078c8 <_strtod_l+0x8c0>
 8007886:	4b9d      	ldr	r3, [pc, #628]	@ (8007afc <_strtod_l+0xaf4>)
 8007888:	465a      	mov	r2, fp
 800788a:	4013      	ands	r3, r2
 800788c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007890:	f04f 32ff 	mov.w	r2, #4294967295
 8007894:	d81b      	bhi.n	80078ce <_strtod_l+0x8c6>
 8007896:	0d1b      	lsrs	r3, r3, #20
 8007898:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800789c:	fa02 f303 	lsl.w	r3, r2, r3
 80078a0:	4299      	cmp	r1, r3
 80078a2:	d119      	bne.n	80078d8 <_strtod_l+0x8d0>
 80078a4:	4b96      	ldr	r3, [pc, #600]	@ (8007b00 <_strtod_l+0xaf8>)
 80078a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d102      	bne.n	80078b2 <_strtod_l+0x8aa>
 80078ac:	3101      	adds	r1, #1
 80078ae:	f43f adca 	beq.w	8007446 <_strtod_l+0x43e>
 80078b2:	4b92      	ldr	r3, [pc, #584]	@ (8007afc <_strtod_l+0xaf4>)
 80078b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80078b6:	401a      	ands	r2, r3
 80078b8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80078bc:	f04f 0a00 	mov.w	sl, #0
 80078c0:	9b08      	ldr	r3, [sp, #32]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d1b8      	bne.n	8007838 <_strtod_l+0x830>
 80078c6:	e5c9      	b.n	800745c <_strtod_l+0x454>
 80078c8:	f04f 33ff 	mov.w	r3, #4294967295
 80078cc:	e7e8      	b.n	80078a0 <_strtod_l+0x898>
 80078ce:	4613      	mov	r3, r2
 80078d0:	e7e6      	b.n	80078a0 <_strtod_l+0x898>
 80078d2:	ea53 030a 	orrs.w	r3, r3, sl
 80078d6:	d0a1      	beq.n	800781c <_strtod_l+0x814>
 80078d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80078da:	b1db      	cbz	r3, 8007914 <_strtod_l+0x90c>
 80078dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80078de:	4213      	tst	r3, r2
 80078e0:	d0ee      	beq.n	80078c0 <_strtod_l+0x8b8>
 80078e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078e4:	9a08      	ldr	r2, [sp, #32]
 80078e6:	4650      	mov	r0, sl
 80078e8:	4659      	mov	r1, fp
 80078ea:	b1bb      	cbz	r3, 800791c <_strtod_l+0x914>
 80078ec:	f7ff fb6e 	bl	8006fcc <sulp>
 80078f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80078f4:	ec53 2b10 	vmov	r2, r3, d0
 80078f8:	f7f8 fcc8 	bl	800028c <__adddf3>
 80078fc:	4682      	mov	sl, r0
 80078fe:	468b      	mov	fp, r1
 8007900:	e7de      	b.n	80078c0 <_strtod_l+0x8b8>
 8007902:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007906:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800790a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800790e:	f04f 3aff 	mov.w	sl, #4294967295
 8007912:	e7d5      	b.n	80078c0 <_strtod_l+0x8b8>
 8007914:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007916:	ea13 0f0a 	tst.w	r3, sl
 800791a:	e7e1      	b.n	80078e0 <_strtod_l+0x8d8>
 800791c:	f7ff fb56 	bl	8006fcc <sulp>
 8007920:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007924:	ec53 2b10 	vmov	r2, r3, d0
 8007928:	f7f8 fcae 	bl	8000288 <__aeabi_dsub>
 800792c:	2200      	movs	r2, #0
 800792e:	2300      	movs	r3, #0
 8007930:	4682      	mov	sl, r0
 8007932:	468b      	mov	fp, r1
 8007934:	f7f9 f8c8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007938:	2800      	cmp	r0, #0
 800793a:	d0c1      	beq.n	80078c0 <_strtod_l+0x8b8>
 800793c:	e619      	b.n	8007572 <_strtod_l+0x56a>
 800793e:	4641      	mov	r1, r8
 8007940:	4620      	mov	r0, r4
 8007942:	f7ff facd 	bl	8006ee0 <__ratio>
 8007946:	ec57 6b10 	vmov	r6, r7, d0
 800794a:	2200      	movs	r2, #0
 800794c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007950:	4630      	mov	r0, r6
 8007952:	4639      	mov	r1, r7
 8007954:	f7f9 f8cc 	bl	8000af0 <__aeabi_dcmple>
 8007958:	2800      	cmp	r0, #0
 800795a:	d06f      	beq.n	8007a3c <_strtod_l+0xa34>
 800795c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800795e:	2b00      	cmp	r3, #0
 8007960:	d17a      	bne.n	8007a58 <_strtod_l+0xa50>
 8007962:	f1ba 0f00 	cmp.w	sl, #0
 8007966:	d158      	bne.n	8007a1a <_strtod_l+0xa12>
 8007968:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800796a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800796e:	2b00      	cmp	r3, #0
 8007970:	d15a      	bne.n	8007a28 <_strtod_l+0xa20>
 8007972:	4b64      	ldr	r3, [pc, #400]	@ (8007b04 <_strtod_l+0xafc>)
 8007974:	2200      	movs	r2, #0
 8007976:	4630      	mov	r0, r6
 8007978:	4639      	mov	r1, r7
 800797a:	f7f9 f8af 	bl	8000adc <__aeabi_dcmplt>
 800797e:	2800      	cmp	r0, #0
 8007980:	d159      	bne.n	8007a36 <_strtod_l+0xa2e>
 8007982:	4630      	mov	r0, r6
 8007984:	4639      	mov	r1, r7
 8007986:	4b60      	ldr	r3, [pc, #384]	@ (8007b08 <_strtod_l+0xb00>)
 8007988:	2200      	movs	r2, #0
 800798a:	f7f8 fe35 	bl	80005f8 <__aeabi_dmul>
 800798e:	4606      	mov	r6, r0
 8007990:	460f      	mov	r7, r1
 8007992:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007996:	9606      	str	r6, [sp, #24]
 8007998:	9307      	str	r3, [sp, #28]
 800799a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800799e:	4d57      	ldr	r5, [pc, #348]	@ (8007afc <_strtod_l+0xaf4>)
 80079a0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80079a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079a6:	401d      	ands	r5, r3
 80079a8:	4b58      	ldr	r3, [pc, #352]	@ (8007b0c <_strtod_l+0xb04>)
 80079aa:	429d      	cmp	r5, r3
 80079ac:	f040 80b2 	bne.w	8007b14 <_strtod_l+0xb0c>
 80079b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079b2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80079b6:	ec4b ab10 	vmov	d0, sl, fp
 80079ba:	f7ff f9c9 	bl	8006d50 <__ulp>
 80079be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80079c2:	ec51 0b10 	vmov	r0, r1, d0
 80079c6:	f7f8 fe17 	bl	80005f8 <__aeabi_dmul>
 80079ca:	4652      	mov	r2, sl
 80079cc:	465b      	mov	r3, fp
 80079ce:	f7f8 fc5d 	bl	800028c <__adddf3>
 80079d2:	460b      	mov	r3, r1
 80079d4:	4949      	ldr	r1, [pc, #292]	@ (8007afc <_strtod_l+0xaf4>)
 80079d6:	4a4e      	ldr	r2, [pc, #312]	@ (8007b10 <_strtod_l+0xb08>)
 80079d8:	4019      	ands	r1, r3
 80079da:	4291      	cmp	r1, r2
 80079dc:	4682      	mov	sl, r0
 80079de:	d942      	bls.n	8007a66 <_strtod_l+0xa5e>
 80079e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80079e2:	4b47      	ldr	r3, [pc, #284]	@ (8007b00 <_strtod_l+0xaf8>)
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d103      	bne.n	80079f0 <_strtod_l+0x9e8>
 80079e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80079ea:	3301      	adds	r3, #1
 80079ec:	f43f ad2b 	beq.w	8007446 <_strtod_l+0x43e>
 80079f0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007b00 <_strtod_l+0xaf8>
 80079f4:	f04f 3aff 	mov.w	sl, #4294967295
 80079f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80079fa:	9805      	ldr	r0, [sp, #20]
 80079fc:	f7fe fe74 	bl	80066e8 <_Bfree>
 8007a00:	9805      	ldr	r0, [sp, #20]
 8007a02:	4649      	mov	r1, r9
 8007a04:	f7fe fe70 	bl	80066e8 <_Bfree>
 8007a08:	9805      	ldr	r0, [sp, #20]
 8007a0a:	4641      	mov	r1, r8
 8007a0c:	f7fe fe6c 	bl	80066e8 <_Bfree>
 8007a10:	9805      	ldr	r0, [sp, #20]
 8007a12:	4621      	mov	r1, r4
 8007a14:	f7fe fe68 	bl	80066e8 <_Bfree>
 8007a18:	e618      	b.n	800764c <_strtod_l+0x644>
 8007a1a:	f1ba 0f01 	cmp.w	sl, #1
 8007a1e:	d103      	bne.n	8007a28 <_strtod_l+0xa20>
 8007a20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	f43f ada5 	beq.w	8007572 <_strtod_l+0x56a>
 8007a28:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007ad8 <_strtod_l+0xad0>
 8007a2c:	4f35      	ldr	r7, [pc, #212]	@ (8007b04 <_strtod_l+0xafc>)
 8007a2e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007a32:	2600      	movs	r6, #0
 8007a34:	e7b1      	b.n	800799a <_strtod_l+0x992>
 8007a36:	4f34      	ldr	r7, [pc, #208]	@ (8007b08 <_strtod_l+0xb00>)
 8007a38:	2600      	movs	r6, #0
 8007a3a:	e7aa      	b.n	8007992 <_strtod_l+0x98a>
 8007a3c:	4b32      	ldr	r3, [pc, #200]	@ (8007b08 <_strtod_l+0xb00>)
 8007a3e:	4630      	mov	r0, r6
 8007a40:	4639      	mov	r1, r7
 8007a42:	2200      	movs	r2, #0
 8007a44:	f7f8 fdd8 	bl	80005f8 <__aeabi_dmul>
 8007a48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a4a:	4606      	mov	r6, r0
 8007a4c:	460f      	mov	r7, r1
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d09f      	beq.n	8007992 <_strtod_l+0x98a>
 8007a52:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007a56:	e7a0      	b.n	800799a <_strtod_l+0x992>
 8007a58:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007ae0 <_strtod_l+0xad8>
 8007a5c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007a60:	ec57 6b17 	vmov	r6, r7, d7
 8007a64:	e799      	b.n	800799a <_strtod_l+0x992>
 8007a66:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007a6a:	9b08      	ldr	r3, [sp, #32]
 8007a6c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1c1      	bne.n	80079f8 <_strtod_l+0x9f0>
 8007a74:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007a78:	0d1b      	lsrs	r3, r3, #20
 8007a7a:	051b      	lsls	r3, r3, #20
 8007a7c:	429d      	cmp	r5, r3
 8007a7e:	d1bb      	bne.n	80079f8 <_strtod_l+0x9f0>
 8007a80:	4630      	mov	r0, r6
 8007a82:	4639      	mov	r1, r7
 8007a84:	f7f9 f918 	bl	8000cb8 <__aeabi_d2lz>
 8007a88:	f7f8 fd88 	bl	800059c <__aeabi_l2d>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	460b      	mov	r3, r1
 8007a90:	4630      	mov	r0, r6
 8007a92:	4639      	mov	r1, r7
 8007a94:	f7f8 fbf8 	bl	8000288 <__aeabi_dsub>
 8007a98:	460b      	mov	r3, r1
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007aa0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007aa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007aa6:	ea46 060a 	orr.w	r6, r6, sl
 8007aaa:	431e      	orrs	r6, r3
 8007aac:	d06f      	beq.n	8007b8e <_strtod_l+0xb86>
 8007aae:	a30e      	add	r3, pc, #56	@ (adr r3, 8007ae8 <_strtod_l+0xae0>)
 8007ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab4:	f7f9 f812 	bl	8000adc <__aeabi_dcmplt>
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	f47f accf 	bne.w	800745c <_strtod_l+0x454>
 8007abe:	a30c      	add	r3, pc, #48	@ (adr r3, 8007af0 <_strtod_l+0xae8>)
 8007ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ac8:	f7f9 f826 	bl	8000b18 <__aeabi_dcmpgt>
 8007acc:	2800      	cmp	r0, #0
 8007ace:	d093      	beq.n	80079f8 <_strtod_l+0x9f0>
 8007ad0:	e4c4      	b.n	800745c <_strtod_l+0x454>
 8007ad2:	bf00      	nop
 8007ad4:	f3af 8000 	nop.w
 8007ad8:	00000000 	.word	0x00000000
 8007adc:	bff00000 	.word	0xbff00000
 8007ae0:	00000000 	.word	0x00000000
 8007ae4:	3ff00000 	.word	0x3ff00000
 8007ae8:	94a03595 	.word	0x94a03595
 8007aec:	3fdfffff 	.word	0x3fdfffff
 8007af0:	35afe535 	.word	0x35afe535
 8007af4:	3fe00000 	.word	0x3fe00000
 8007af8:	000fffff 	.word	0x000fffff
 8007afc:	7ff00000 	.word	0x7ff00000
 8007b00:	7fefffff 	.word	0x7fefffff
 8007b04:	3ff00000 	.word	0x3ff00000
 8007b08:	3fe00000 	.word	0x3fe00000
 8007b0c:	7fe00000 	.word	0x7fe00000
 8007b10:	7c9fffff 	.word	0x7c9fffff
 8007b14:	9b08      	ldr	r3, [sp, #32]
 8007b16:	b323      	cbz	r3, 8007b62 <_strtod_l+0xb5a>
 8007b18:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007b1c:	d821      	bhi.n	8007b62 <_strtod_l+0xb5a>
 8007b1e:	a328      	add	r3, pc, #160	@ (adr r3, 8007bc0 <_strtod_l+0xbb8>)
 8007b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b24:	4630      	mov	r0, r6
 8007b26:	4639      	mov	r1, r7
 8007b28:	f7f8 ffe2 	bl	8000af0 <__aeabi_dcmple>
 8007b2c:	b1a0      	cbz	r0, 8007b58 <_strtod_l+0xb50>
 8007b2e:	4639      	mov	r1, r7
 8007b30:	4630      	mov	r0, r6
 8007b32:	f7f9 f839 	bl	8000ba8 <__aeabi_d2uiz>
 8007b36:	2801      	cmp	r0, #1
 8007b38:	bf38      	it	cc
 8007b3a:	2001      	movcc	r0, #1
 8007b3c:	f7f8 fce2 	bl	8000504 <__aeabi_ui2d>
 8007b40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b42:	4606      	mov	r6, r0
 8007b44:	460f      	mov	r7, r1
 8007b46:	b9fb      	cbnz	r3, 8007b88 <_strtod_l+0xb80>
 8007b48:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007b4c:	9014      	str	r0, [sp, #80]	@ 0x50
 8007b4e:	9315      	str	r3, [sp, #84]	@ 0x54
 8007b50:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007b54:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007b58:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007b5a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007b5e:	1b5b      	subs	r3, r3, r5
 8007b60:	9311      	str	r3, [sp, #68]	@ 0x44
 8007b62:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007b66:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007b6a:	f7ff f8f1 	bl	8006d50 <__ulp>
 8007b6e:	4650      	mov	r0, sl
 8007b70:	ec53 2b10 	vmov	r2, r3, d0
 8007b74:	4659      	mov	r1, fp
 8007b76:	f7f8 fd3f 	bl	80005f8 <__aeabi_dmul>
 8007b7a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007b7e:	f7f8 fb85 	bl	800028c <__adddf3>
 8007b82:	4682      	mov	sl, r0
 8007b84:	468b      	mov	fp, r1
 8007b86:	e770      	b.n	8007a6a <_strtod_l+0xa62>
 8007b88:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007b8c:	e7e0      	b.n	8007b50 <_strtod_l+0xb48>
 8007b8e:	a30e      	add	r3, pc, #56	@ (adr r3, 8007bc8 <_strtod_l+0xbc0>)
 8007b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b94:	f7f8 ffa2 	bl	8000adc <__aeabi_dcmplt>
 8007b98:	e798      	b.n	8007acc <_strtod_l+0xac4>
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b9e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007ba0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ba2:	6013      	str	r3, [r2, #0]
 8007ba4:	f7ff ba6d 	b.w	8007082 <_strtod_l+0x7a>
 8007ba8:	2a65      	cmp	r2, #101	@ 0x65
 8007baa:	f43f ab66 	beq.w	800727a <_strtod_l+0x272>
 8007bae:	2a45      	cmp	r2, #69	@ 0x45
 8007bb0:	f43f ab63 	beq.w	800727a <_strtod_l+0x272>
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	f7ff bb9e 	b.w	80072f6 <_strtod_l+0x2ee>
 8007bba:	bf00      	nop
 8007bbc:	f3af 8000 	nop.w
 8007bc0:	ffc00000 	.word	0xffc00000
 8007bc4:	41dfffff 	.word	0x41dfffff
 8007bc8:	94a03595 	.word	0x94a03595
 8007bcc:	3fcfffff 	.word	0x3fcfffff

08007bd0 <_strtod_r>:
 8007bd0:	4b01      	ldr	r3, [pc, #4]	@ (8007bd8 <_strtod_r+0x8>)
 8007bd2:	f7ff ba19 	b.w	8007008 <_strtod_l>
 8007bd6:	bf00      	nop
 8007bd8:	20000068 	.word	0x20000068

08007bdc <_strtol_l.constprop.0>:
 8007bdc:	2b24      	cmp	r3, #36	@ 0x24
 8007bde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007be2:	4686      	mov	lr, r0
 8007be4:	4690      	mov	r8, r2
 8007be6:	d801      	bhi.n	8007bec <_strtol_l.constprop.0+0x10>
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d106      	bne.n	8007bfa <_strtol_l.constprop.0+0x1e>
 8007bec:	f7fd fdae 	bl	800574c <__errno>
 8007bf0:	2316      	movs	r3, #22
 8007bf2:	6003      	str	r3, [r0, #0]
 8007bf4:	2000      	movs	r0, #0
 8007bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bfa:	4834      	ldr	r0, [pc, #208]	@ (8007ccc <_strtol_l.constprop.0+0xf0>)
 8007bfc:	460d      	mov	r5, r1
 8007bfe:	462a      	mov	r2, r5
 8007c00:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c04:	5d06      	ldrb	r6, [r0, r4]
 8007c06:	f016 0608 	ands.w	r6, r6, #8
 8007c0a:	d1f8      	bne.n	8007bfe <_strtol_l.constprop.0+0x22>
 8007c0c:	2c2d      	cmp	r4, #45	@ 0x2d
 8007c0e:	d12d      	bne.n	8007c6c <_strtol_l.constprop.0+0x90>
 8007c10:	782c      	ldrb	r4, [r5, #0]
 8007c12:	2601      	movs	r6, #1
 8007c14:	1c95      	adds	r5, r2, #2
 8007c16:	f033 0210 	bics.w	r2, r3, #16
 8007c1a:	d109      	bne.n	8007c30 <_strtol_l.constprop.0+0x54>
 8007c1c:	2c30      	cmp	r4, #48	@ 0x30
 8007c1e:	d12a      	bne.n	8007c76 <_strtol_l.constprop.0+0x9a>
 8007c20:	782a      	ldrb	r2, [r5, #0]
 8007c22:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007c26:	2a58      	cmp	r2, #88	@ 0x58
 8007c28:	d125      	bne.n	8007c76 <_strtol_l.constprop.0+0x9a>
 8007c2a:	786c      	ldrb	r4, [r5, #1]
 8007c2c:	2310      	movs	r3, #16
 8007c2e:	3502      	adds	r5, #2
 8007c30:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007c34:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007c38:	2200      	movs	r2, #0
 8007c3a:	fbbc f9f3 	udiv	r9, ip, r3
 8007c3e:	4610      	mov	r0, r2
 8007c40:	fb03 ca19 	mls	sl, r3, r9, ip
 8007c44:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007c48:	2f09      	cmp	r7, #9
 8007c4a:	d81b      	bhi.n	8007c84 <_strtol_l.constprop.0+0xa8>
 8007c4c:	463c      	mov	r4, r7
 8007c4e:	42a3      	cmp	r3, r4
 8007c50:	dd27      	ble.n	8007ca2 <_strtol_l.constprop.0+0xc6>
 8007c52:	1c57      	adds	r7, r2, #1
 8007c54:	d007      	beq.n	8007c66 <_strtol_l.constprop.0+0x8a>
 8007c56:	4581      	cmp	r9, r0
 8007c58:	d320      	bcc.n	8007c9c <_strtol_l.constprop.0+0xc0>
 8007c5a:	d101      	bne.n	8007c60 <_strtol_l.constprop.0+0x84>
 8007c5c:	45a2      	cmp	sl, r4
 8007c5e:	db1d      	blt.n	8007c9c <_strtol_l.constprop.0+0xc0>
 8007c60:	fb00 4003 	mla	r0, r0, r3, r4
 8007c64:	2201      	movs	r2, #1
 8007c66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c6a:	e7eb      	b.n	8007c44 <_strtol_l.constprop.0+0x68>
 8007c6c:	2c2b      	cmp	r4, #43	@ 0x2b
 8007c6e:	bf04      	itt	eq
 8007c70:	782c      	ldrbeq	r4, [r5, #0]
 8007c72:	1c95      	addeq	r5, r2, #2
 8007c74:	e7cf      	b.n	8007c16 <_strtol_l.constprop.0+0x3a>
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1da      	bne.n	8007c30 <_strtol_l.constprop.0+0x54>
 8007c7a:	2c30      	cmp	r4, #48	@ 0x30
 8007c7c:	bf0c      	ite	eq
 8007c7e:	2308      	moveq	r3, #8
 8007c80:	230a      	movne	r3, #10
 8007c82:	e7d5      	b.n	8007c30 <_strtol_l.constprop.0+0x54>
 8007c84:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007c88:	2f19      	cmp	r7, #25
 8007c8a:	d801      	bhi.n	8007c90 <_strtol_l.constprop.0+0xb4>
 8007c8c:	3c37      	subs	r4, #55	@ 0x37
 8007c8e:	e7de      	b.n	8007c4e <_strtol_l.constprop.0+0x72>
 8007c90:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007c94:	2f19      	cmp	r7, #25
 8007c96:	d804      	bhi.n	8007ca2 <_strtol_l.constprop.0+0xc6>
 8007c98:	3c57      	subs	r4, #87	@ 0x57
 8007c9a:	e7d8      	b.n	8007c4e <_strtol_l.constprop.0+0x72>
 8007c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8007ca0:	e7e1      	b.n	8007c66 <_strtol_l.constprop.0+0x8a>
 8007ca2:	1c53      	adds	r3, r2, #1
 8007ca4:	d108      	bne.n	8007cb8 <_strtol_l.constprop.0+0xdc>
 8007ca6:	2322      	movs	r3, #34	@ 0x22
 8007ca8:	f8ce 3000 	str.w	r3, [lr]
 8007cac:	4660      	mov	r0, ip
 8007cae:	f1b8 0f00 	cmp.w	r8, #0
 8007cb2:	d0a0      	beq.n	8007bf6 <_strtol_l.constprop.0+0x1a>
 8007cb4:	1e69      	subs	r1, r5, #1
 8007cb6:	e006      	b.n	8007cc6 <_strtol_l.constprop.0+0xea>
 8007cb8:	b106      	cbz	r6, 8007cbc <_strtol_l.constprop.0+0xe0>
 8007cba:	4240      	negs	r0, r0
 8007cbc:	f1b8 0f00 	cmp.w	r8, #0
 8007cc0:	d099      	beq.n	8007bf6 <_strtol_l.constprop.0+0x1a>
 8007cc2:	2a00      	cmp	r2, #0
 8007cc4:	d1f6      	bne.n	8007cb4 <_strtol_l.constprop.0+0xd8>
 8007cc6:	f8c8 1000 	str.w	r1, [r8]
 8007cca:	e794      	b.n	8007bf6 <_strtol_l.constprop.0+0x1a>
 8007ccc:	0800a039 	.word	0x0800a039

08007cd0 <_strtol_r>:
 8007cd0:	f7ff bf84 	b.w	8007bdc <_strtol_l.constprop.0>

08007cd4 <__ssputs_r>:
 8007cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd8:	688e      	ldr	r6, [r1, #8]
 8007cda:	461f      	mov	r7, r3
 8007cdc:	42be      	cmp	r6, r7
 8007cde:	680b      	ldr	r3, [r1, #0]
 8007ce0:	4682      	mov	sl, r0
 8007ce2:	460c      	mov	r4, r1
 8007ce4:	4690      	mov	r8, r2
 8007ce6:	d82d      	bhi.n	8007d44 <__ssputs_r+0x70>
 8007ce8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007cec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007cf0:	d026      	beq.n	8007d40 <__ssputs_r+0x6c>
 8007cf2:	6965      	ldr	r5, [r4, #20]
 8007cf4:	6909      	ldr	r1, [r1, #16]
 8007cf6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007cfa:	eba3 0901 	sub.w	r9, r3, r1
 8007cfe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d02:	1c7b      	adds	r3, r7, #1
 8007d04:	444b      	add	r3, r9
 8007d06:	106d      	asrs	r5, r5, #1
 8007d08:	429d      	cmp	r5, r3
 8007d0a:	bf38      	it	cc
 8007d0c:	461d      	movcc	r5, r3
 8007d0e:	0553      	lsls	r3, r2, #21
 8007d10:	d527      	bpl.n	8007d62 <__ssputs_r+0x8e>
 8007d12:	4629      	mov	r1, r5
 8007d14:	f7fe fc1c 	bl	8006550 <_malloc_r>
 8007d18:	4606      	mov	r6, r0
 8007d1a:	b360      	cbz	r0, 8007d76 <__ssputs_r+0xa2>
 8007d1c:	6921      	ldr	r1, [r4, #16]
 8007d1e:	464a      	mov	r2, r9
 8007d20:	f7fd fd41 	bl	80057a6 <memcpy>
 8007d24:	89a3      	ldrh	r3, [r4, #12]
 8007d26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007d2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d2e:	81a3      	strh	r3, [r4, #12]
 8007d30:	6126      	str	r6, [r4, #16]
 8007d32:	6165      	str	r5, [r4, #20]
 8007d34:	444e      	add	r6, r9
 8007d36:	eba5 0509 	sub.w	r5, r5, r9
 8007d3a:	6026      	str	r6, [r4, #0]
 8007d3c:	60a5      	str	r5, [r4, #8]
 8007d3e:	463e      	mov	r6, r7
 8007d40:	42be      	cmp	r6, r7
 8007d42:	d900      	bls.n	8007d46 <__ssputs_r+0x72>
 8007d44:	463e      	mov	r6, r7
 8007d46:	6820      	ldr	r0, [r4, #0]
 8007d48:	4632      	mov	r2, r6
 8007d4a:	4641      	mov	r1, r8
 8007d4c:	f7fd fc91 	bl	8005672 <memmove>
 8007d50:	68a3      	ldr	r3, [r4, #8]
 8007d52:	1b9b      	subs	r3, r3, r6
 8007d54:	60a3      	str	r3, [r4, #8]
 8007d56:	6823      	ldr	r3, [r4, #0]
 8007d58:	4433      	add	r3, r6
 8007d5a:	6023      	str	r3, [r4, #0]
 8007d5c:	2000      	movs	r0, #0
 8007d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d62:	462a      	mov	r2, r5
 8007d64:	f000 fd61 	bl	800882a <_realloc_r>
 8007d68:	4606      	mov	r6, r0
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	d1e0      	bne.n	8007d30 <__ssputs_r+0x5c>
 8007d6e:	6921      	ldr	r1, [r4, #16]
 8007d70:	4650      	mov	r0, sl
 8007d72:	f7fe fb79 	bl	8006468 <_free_r>
 8007d76:	230c      	movs	r3, #12
 8007d78:	f8ca 3000 	str.w	r3, [sl]
 8007d7c:	89a3      	ldrh	r3, [r4, #12]
 8007d7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d82:	81a3      	strh	r3, [r4, #12]
 8007d84:	f04f 30ff 	mov.w	r0, #4294967295
 8007d88:	e7e9      	b.n	8007d5e <__ssputs_r+0x8a>
	...

08007d8c <_svfiprintf_r>:
 8007d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d90:	4698      	mov	r8, r3
 8007d92:	898b      	ldrh	r3, [r1, #12]
 8007d94:	061b      	lsls	r3, r3, #24
 8007d96:	b09d      	sub	sp, #116	@ 0x74
 8007d98:	4607      	mov	r7, r0
 8007d9a:	460d      	mov	r5, r1
 8007d9c:	4614      	mov	r4, r2
 8007d9e:	d510      	bpl.n	8007dc2 <_svfiprintf_r+0x36>
 8007da0:	690b      	ldr	r3, [r1, #16]
 8007da2:	b973      	cbnz	r3, 8007dc2 <_svfiprintf_r+0x36>
 8007da4:	2140      	movs	r1, #64	@ 0x40
 8007da6:	f7fe fbd3 	bl	8006550 <_malloc_r>
 8007daa:	6028      	str	r0, [r5, #0]
 8007dac:	6128      	str	r0, [r5, #16]
 8007dae:	b930      	cbnz	r0, 8007dbe <_svfiprintf_r+0x32>
 8007db0:	230c      	movs	r3, #12
 8007db2:	603b      	str	r3, [r7, #0]
 8007db4:	f04f 30ff 	mov.w	r0, #4294967295
 8007db8:	b01d      	add	sp, #116	@ 0x74
 8007dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dbe:	2340      	movs	r3, #64	@ 0x40
 8007dc0:	616b      	str	r3, [r5, #20]
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dc6:	2320      	movs	r3, #32
 8007dc8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007dcc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007dd0:	2330      	movs	r3, #48	@ 0x30
 8007dd2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007f70 <_svfiprintf_r+0x1e4>
 8007dd6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007dda:	f04f 0901 	mov.w	r9, #1
 8007dde:	4623      	mov	r3, r4
 8007de0:	469a      	mov	sl, r3
 8007de2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007de6:	b10a      	cbz	r2, 8007dec <_svfiprintf_r+0x60>
 8007de8:	2a25      	cmp	r2, #37	@ 0x25
 8007dea:	d1f9      	bne.n	8007de0 <_svfiprintf_r+0x54>
 8007dec:	ebba 0b04 	subs.w	fp, sl, r4
 8007df0:	d00b      	beq.n	8007e0a <_svfiprintf_r+0x7e>
 8007df2:	465b      	mov	r3, fp
 8007df4:	4622      	mov	r2, r4
 8007df6:	4629      	mov	r1, r5
 8007df8:	4638      	mov	r0, r7
 8007dfa:	f7ff ff6b 	bl	8007cd4 <__ssputs_r>
 8007dfe:	3001      	adds	r0, #1
 8007e00:	f000 80a7 	beq.w	8007f52 <_svfiprintf_r+0x1c6>
 8007e04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e06:	445a      	add	r2, fp
 8007e08:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f000 809f 	beq.w	8007f52 <_svfiprintf_r+0x1c6>
 8007e14:	2300      	movs	r3, #0
 8007e16:	f04f 32ff 	mov.w	r2, #4294967295
 8007e1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e1e:	f10a 0a01 	add.w	sl, sl, #1
 8007e22:	9304      	str	r3, [sp, #16]
 8007e24:	9307      	str	r3, [sp, #28]
 8007e26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e2a:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e2c:	4654      	mov	r4, sl
 8007e2e:	2205      	movs	r2, #5
 8007e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e34:	484e      	ldr	r0, [pc, #312]	@ (8007f70 <_svfiprintf_r+0x1e4>)
 8007e36:	f7f8 f9cb 	bl	80001d0 <memchr>
 8007e3a:	9a04      	ldr	r2, [sp, #16]
 8007e3c:	b9d8      	cbnz	r0, 8007e76 <_svfiprintf_r+0xea>
 8007e3e:	06d0      	lsls	r0, r2, #27
 8007e40:	bf44      	itt	mi
 8007e42:	2320      	movmi	r3, #32
 8007e44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e48:	0711      	lsls	r1, r2, #28
 8007e4a:	bf44      	itt	mi
 8007e4c:	232b      	movmi	r3, #43	@ 0x2b
 8007e4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e52:	f89a 3000 	ldrb.w	r3, [sl]
 8007e56:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e58:	d015      	beq.n	8007e86 <_svfiprintf_r+0xfa>
 8007e5a:	9a07      	ldr	r2, [sp, #28]
 8007e5c:	4654      	mov	r4, sl
 8007e5e:	2000      	movs	r0, #0
 8007e60:	f04f 0c0a 	mov.w	ip, #10
 8007e64:	4621      	mov	r1, r4
 8007e66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e6a:	3b30      	subs	r3, #48	@ 0x30
 8007e6c:	2b09      	cmp	r3, #9
 8007e6e:	d94b      	bls.n	8007f08 <_svfiprintf_r+0x17c>
 8007e70:	b1b0      	cbz	r0, 8007ea0 <_svfiprintf_r+0x114>
 8007e72:	9207      	str	r2, [sp, #28]
 8007e74:	e014      	b.n	8007ea0 <_svfiprintf_r+0x114>
 8007e76:	eba0 0308 	sub.w	r3, r0, r8
 8007e7a:	fa09 f303 	lsl.w	r3, r9, r3
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	9304      	str	r3, [sp, #16]
 8007e82:	46a2      	mov	sl, r4
 8007e84:	e7d2      	b.n	8007e2c <_svfiprintf_r+0xa0>
 8007e86:	9b03      	ldr	r3, [sp, #12]
 8007e88:	1d19      	adds	r1, r3, #4
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	9103      	str	r1, [sp, #12]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	bfbb      	ittet	lt
 8007e92:	425b      	neglt	r3, r3
 8007e94:	f042 0202 	orrlt.w	r2, r2, #2
 8007e98:	9307      	strge	r3, [sp, #28]
 8007e9a:	9307      	strlt	r3, [sp, #28]
 8007e9c:	bfb8      	it	lt
 8007e9e:	9204      	strlt	r2, [sp, #16]
 8007ea0:	7823      	ldrb	r3, [r4, #0]
 8007ea2:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ea4:	d10a      	bne.n	8007ebc <_svfiprintf_r+0x130>
 8007ea6:	7863      	ldrb	r3, [r4, #1]
 8007ea8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007eaa:	d132      	bne.n	8007f12 <_svfiprintf_r+0x186>
 8007eac:	9b03      	ldr	r3, [sp, #12]
 8007eae:	1d1a      	adds	r2, r3, #4
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	9203      	str	r2, [sp, #12]
 8007eb4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007eb8:	3402      	adds	r4, #2
 8007eba:	9305      	str	r3, [sp, #20]
 8007ebc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007f80 <_svfiprintf_r+0x1f4>
 8007ec0:	7821      	ldrb	r1, [r4, #0]
 8007ec2:	2203      	movs	r2, #3
 8007ec4:	4650      	mov	r0, sl
 8007ec6:	f7f8 f983 	bl	80001d0 <memchr>
 8007eca:	b138      	cbz	r0, 8007edc <_svfiprintf_r+0x150>
 8007ecc:	9b04      	ldr	r3, [sp, #16]
 8007ece:	eba0 000a 	sub.w	r0, r0, sl
 8007ed2:	2240      	movs	r2, #64	@ 0x40
 8007ed4:	4082      	lsls	r2, r0
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	3401      	adds	r4, #1
 8007eda:	9304      	str	r3, [sp, #16]
 8007edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ee0:	4824      	ldr	r0, [pc, #144]	@ (8007f74 <_svfiprintf_r+0x1e8>)
 8007ee2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ee6:	2206      	movs	r2, #6
 8007ee8:	f7f8 f972 	bl	80001d0 <memchr>
 8007eec:	2800      	cmp	r0, #0
 8007eee:	d036      	beq.n	8007f5e <_svfiprintf_r+0x1d2>
 8007ef0:	4b21      	ldr	r3, [pc, #132]	@ (8007f78 <_svfiprintf_r+0x1ec>)
 8007ef2:	bb1b      	cbnz	r3, 8007f3c <_svfiprintf_r+0x1b0>
 8007ef4:	9b03      	ldr	r3, [sp, #12]
 8007ef6:	3307      	adds	r3, #7
 8007ef8:	f023 0307 	bic.w	r3, r3, #7
 8007efc:	3308      	adds	r3, #8
 8007efe:	9303      	str	r3, [sp, #12]
 8007f00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f02:	4433      	add	r3, r6
 8007f04:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f06:	e76a      	b.n	8007dde <_svfiprintf_r+0x52>
 8007f08:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f0c:	460c      	mov	r4, r1
 8007f0e:	2001      	movs	r0, #1
 8007f10:	e7a8      	b.n	8007e64 <_svfiprintf_r+0xd8>
 8007f12:	2300      	movs	r3, #0
 8007f14:	3401      	adds	r4, #1
 8007f16:	9305      	str	r3, [sp, #20]
 8007f18:	4619      	mov	r1, r3
 8007f1a:	f04f 0c0a 	mov.w	ip, #10
 8007f1e:	4620      	mov	r0, r4
 8007f20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f24:	3a30      	subs	r2, #48	@ 0x30
 8007f26:	2a09      	cmp	r2, #9
 8007f28:	d903      	bls.n	8007f32 <_svfiprintf_r+0x1a6>
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d0c6      	beq.n	8007ebc <_svfiprintf_r+0x130>
 8007f2e:	9105      	str	r1, [sp, #20]
 8007f30:	e7c4      	b.n	8007ebc <_svfiprintf_r+0x130>
 8007f32:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f36:	4604      	mov	r4, r0
 8007f38:	2301      	movs	r3, #1
 8007f3a:	e7f0      	b.n	8007f1e <_svfiprintf_r+0x192>
 8007f3c:	ab03      	add	r3, sp, #12
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	462a      	mov	r2, r5
 8007f42:	4b0e      	ldr	r3, [pc, #56]	@ (8007f7c <_svfiprintf_r+0x1f0>)
 8007f44:	a904      	add	r1, sp, #16
 8007f46:	4638      	mov	r0, r7
 8007f48:	f7fc fca2 	bl	8004890 <_printf_float>
 8007f4c:	1c42      	adds	r2, r0, #1
 8007f4e:	4606      	mov	r6, r0
 8007f50:	d1d6      	bne.n	8007f00 <_svfiprintf_r+0x174>
 8007f52:	89ab      	ldrh	r3, [r5, #12]
 8007f54:	065b      	lsls	r3, r3, #25
 8007f56:	f53f af2d 	bmi.w	8007db4 <_svfiprintf_r+0x28>
 8007f5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f5c:	e72c      	b.n	8007db8 <_svfiprintf_r+0x2c>
 8007f5e:	ab03      	add	r3, sp, #12
 8007f60:	9300      	str	r3, [sp, #0]
 8007f62:	462a      	mov	r2, r5
 8007f64:	4b05      	ldr	r3, [pc, #20]	@ (8007f7c <_svfiprintf_r+0x1f0>)
 8007f66:	a904      	add	r1, sp, #16
 8007f68:	4638      	mov	r0, r7
 8007f6a:	f7fc ff29 	bl	8004dc0 <_printf_i>
 8007f6e:	e7ed      	b.n	8007f4c <_svfiprintf_r+0x1c0>
 8007f70:	0800a139 	.word	0x0800a139
 8007f74:	0800a143 	.word	0x0800a143
 8007f78:	08004891 	.word	0x08004891
 8007f7c:	08007cd5 	.word	0x08007cd5
 8007f80:	0800a13f 	.word	0x0800a13f

08007f84 <__sflush_r>:
 8007f84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f8c:	0716      	lsls	r6, r2, #28
 8007f8e:	4605      	mov	r5, r0
 8007f90:	460c      	mov	r4, r1
 8007f92:	d454      	bmi.n	800803e <__sflush_r+0xba>
 8007f94:	684b      	ldr	r3, [r1, #4]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	dc02      	bgt.n	8007fa0 <__sflush_r+0x1c>
 8007f9a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	dd48      	ble.n	8008032 <__sflush_r+0xae>
 8007fa0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007fa2:	2e00      	cmp	r6, #0
 8007fa4:	d045      	beq.n	8008032 <__sflush_r+0xae>
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007fac:	682f      	ldr	r7, [r5, #0]
 8007fae:	6a21      	ldr	r1, [r4, #32]
 8007fb0:	602b      	str	r3, [r5, #0]
 8007fb2:	d030      	beq.n	8008016 <__sflush_r+0x92>
 8007fb4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007fb6:	89a3      	ldrh	r3, [r4, #12]
 8007fb8:	0759      	lsls	r1, r3, #29
 8007fba:	d505      	bpl.n	8007fc8 <__sflush_r+0x44>
 8007fbc:	6863      	ldr	r3, [r4, #4]
 8007fbe:	1ad2      	subs	r2, r2, r3
 8007fc0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007fc2:	b10b      	cbz	r3, 8007fc8 <__sflush_r+0x44>
 8007fc4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007fc6:	1ad2      	subs	r2, r2, r3
 8007fc8:	2300      	movs	r3, #0
 8007fca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007fcc:	6a21      	ldr	r1, [r4, #32]
 8007fce:	4628      	mov	r0, r5
 8007fd0:	47b0      	blx	r6
 8007fd2:	1c43      	adds	r3, r0, #1
 8007fd4:	89a3      	ldrh	r3, [r4, #12]
 8007fd6:	d106      	bne.n	8007fe6 <__sflush_r+0x62>
 8007fd8:	6829      	ldr	r1, [r5, #0]
 8007fda:	291d      	cmp	r1, #29
 8007fdc:	d82b      	bhi.n	8008036 <__sflush_r+0xb2>
 8007fde:	4a2a      	ldr	r2, [pc, #168]	@ (8008088 <__sflush_r+0x104>)
 8007fe0:	410a      	asrs	r2, r1
 8007fe2:	07d6      	lsls	r6, r2, #31
 8007fe4:	d427      	bmi.n	8008036 <__sflush_r+0xb2>
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	6062      	str	r2, [r4, #4]
 8007fea:	04d9      	lsls	r1, r3, #19
 8007fec:	6922      	ldr	r2, [r4, #16]
 8007fee:	6022      	str	r2, [r4, #0]
 8007ff0:	d504      	bpl.n	8007ffc <__sflush_r+0x78>
 8007ff2:	1c42      	adds	r2, r0, #1
 8007ff4:	d101      	bne.n	8007ffa <__sflush_r+0x76>
 8007ff6:	682b      	ldr	r3, [r5, #0]
 8007ff8:	b903      	cbnz	r3, 8007ffc <__sflush_r+0x78>
 8007ffa:	6560      	str	r0, [r4, #84]	@ 0x54
 8007ffc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ffe:	602f      	str	r7, [r5, #0]
 8008000:	b1b9      	cbz	r1, 8008032 <__sflush_r+0xae>
 8008002:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008006:	4299      	cmp	r1, r3
 8008008:	d002      	beq.n	8008010 <__sflush_r+0x8c>
 800800a:	4628      	mov	r0, r5
 800800c:	f7fe fa2c 	bl	8006468 <_free_r>
 8008010:	2300      	movs	r3, #0
 8008012:	6363      	str	r3, [r4, #52]	@ 0x34
 8008014:	e00d      	b.n	8008032 <__sflush_r+0xae>
 8008016:	2301      	movs	r3, #1
 8008018:	4628      	mov	r0, r5
 800801a:	47b0      	blx	r6
 800801c:	4602      	mov	r2, r0
 800801e:	1c50      	adds	r0, r2, #1
 8008020:	d1c9      	bne.n	8007fb6 <__sflush_r+0x32>
 8008022:	682b      	ldr	r3, [r5, #0]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d0c6      	beq.n	8007fb6 <__sflush_r+0x32>
 8008028:	2b1d      	cmp	r3, #29
 800802a:	d001      	beq.n	8008030 <__sflush_r+0xac>
 800802c:	2b16      	cmp	r3, #22
 800802e:	d11e      	bne.n	800806e <__sflush_r+0xea>
 8008030:	602f      	str	r7, [r5, #0]
 8008032:	2000      	movs	r0, #0
 8008034:	e022      	b.n	800807c <__sflush_r+0xf8>
 8008036:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800803a:	b21b      	sxth	r3, r3
 800803c:	e01b      	b.n	8008076 <__sflush_r+0xf2>
 800803e:	690f      	ldr	r7, [r1, #16]
 8008040:	2f00      	cmp	r7, #0
 8008042:	d0f6      	beq.n	8008032 <__sflush_r+0xae>
 8008044:	0793      	lsls	r3, r2, #30
 8008046:	680e      	ldr	r6, [r1, #0]
 8008048:	bf08      	it	eq
 800804a:	694b      	ldreq	r3, [r1, #20]
 800804c:	600f      	str	r7, [r1, #0]
 800804e:	bf18      	it	ne
 8008050:	2300      	movne	r3, #0
 8008052:	eba6 0807 	sub.w	r8, r6, r7
 8008056:	608b      	str	r3, [r1, #8]
 8008058:	f1b8 0f00 	cmp.w	r8, #0
 800805c:	dde9      	ble.n	8008032 <__sflush_r+0xae>
 800805e:	6a21      	ldr	r1, [r4, #32]
 8008060:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008062:	4643      	mov	r3, r8
 8008064:	463a      	mov	r2, r7
 8008066:	4628      	mov	r0, r5
 8008068:	47b0      	blx	r6
 800806a:	2800      	cmp	r0, #0
 800806c:	dc08      	bgt.n	8008080 <__sflush_r+0xfc>
 800806e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008072:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008076:	81a3      	strh	r3, [r4, #12]
 8008078:	f04f 30ff 	mov.w	r0, #4294967295
 800807c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008080:	4407      	add	r7, r0
 8008082:	eba8 0800 	sub.w	r8, r8, r0
 8008086:	e7e7      	b.n	8008058 <__sflush_r+0xd4>
 8008088:	dfbffffe 	.word	0xdfbffffe

0800808c <_fflush_r>:
 800808c:	b538      	push	{r3, r4, r5, lr}
 800808e:	690b      	ldr	r3, [r1, #16]
 8008090:	4605      	mov	r5, r0
 8008092:	460c      	mov	r4, r1
 8008094:	b913      	cbnz	r3, 800809c <_fflush_r+0x10>
 8008096:	2500      	movs	r5, #0
 8008098:	4628      	mov	r0, r5
 800809a:	bd38      	pop	{r3, r4, r5, pc}
 800809c:	b118      	cbz	r0, 80080a6 <_fflush_r+0x1a>
 800809e:	6a03      	ldr	r3, [r0, #32]
 80080a0:	b90b      	cbnz	r3, 80080a6 <_fflush_r+0x1a>
 80080a2:	f7fd fa4d 	bl	8005540 <__sinit>
 80080a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d0f3      	beq.n	8008096 <_fflush_r+0xa>
 80080ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80080b0:	07d0      	lsls	r0, r2, #31
 80080b2:	d404      	bmi.n	80080be <_fflush_r+0x32>
 80080b4:	0599      	lsls	r1, r3, #22
 80080b6:	d402      	bmi.n	80080be <_fflush_r+0x32>
 80080b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080ba:	f7fd fb72 	bl	80057a2 <__retarget_lock_acquire_recursive>
 80080be:	4628      	mov	r0, r5
 80080c0:	4621      	mov	r1, r4
 80080c2:	f7ff ff5f 	bl	8007f84 <__sflush_r>
 80080c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80080c8:	07da      	lsls	r2, r3, #31
 80080ca:	4605      	mov	r5, r0
 80080cc:	d4e4      	bmi.n	8008098 <_fflush_r+0xc>
 80080ce:	89a3      	ldrh	r3, [r4, #12]
 80080d0:	059b      	lsls	r3, r3, #22
 80080d2:	d4e1      	bmi.n	8008098 <_fflush_r+0xc>
 80080d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080d6:	f7fd fb65 	bl	80057a4 <__retarget_lock_release_recursive>
 80080da:	e7dd      	b.n	8008098 <_fflush_r+0xc>

080080dc <strncmp>:
 80080dc:	b510      	push	{r4, lr}
 80080de:	b16a      	cbz	r2, 80080fc <strncmp+0x20>
 80080e0:	3901      	subs	r1, #1
 80080e2:	1884      	adds	r4, r0, r2
 80080e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080e8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d103      	bne.n	80080f8 <strncmp+0x1c>
 80080f0:	42a0      	cmp	r0, r4
 80080f2:	d001      	beq.n	80080f8 <strncmp+0x1c>
 80080f4:	2a00      	cmp	r2, #0
 80080f6:	d1f5      	bne.n	80080e4 <strncmp+0x8>
 80080f8:	1ad0      	subs	r0, r2, r3
 80080fa:	bd10      	pop	{r4, pc}
 80080fc:	4610      	mov	r0, r2
 80080fe:	e7fc      	b.n	80080fa <strncmp+0x1e>

08008100 <_sbrk_r>:
 8008100:	b538      	push	{r3, r4, r5, lr}
 8008102:	4d06      	ldr	r5, [pc, #24]	@ (800811c <_sbrk_r+0x1c>)
 8008104:	2300      	movs	r3, #0
 8008106:	4604      	mov	r4, r0
 8008108:	4608      	mov	r0, r1
 800810a:	602b      	str	r3, [r5, #0]
 800810c:	f7f9 fdac 	bl	8001c68 <_sbrk>
 8008110:	1c43      	adds	r3, r0, #1
 8008112:	d102      	bne.n	800811a <_sbrk_r+0x1a>
 8008114:	682b      	ldr	r3, [r5, #0]
 8008116:	b103      	cbz	r3, 800811a <_sbrk_r+0x1a>
 8008118:	6023      	str	r3, [r4, #0]
 800811a:	bd38      	pop	{r3, r4, r5, pc}
 800811c:	2000081c 	.word	0x2000081c

08008120 <nan>:
 8008120:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008128 <nan+0x8>
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	00000000 	.word	0x00000000
 800812c:	7ff80000 	.word	0x7ff80000

08008130 <__assert_func>:
 8008130:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008132:	4614      	mov	r4, r2
 8008134:	461a      	mov	r2, r3
 8008136:	4b09      	ldr	r3, [pc, #36]	@ (800815c <__assert_func+0x2c>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4605      	mov	r5, r0
 800813c:	68d8      	ldr	r0, [r3, #12]
 800813e:	b954      	cbnz	r4, 8008156 <__assert_func+0x26>
 8008140:	4b07      	ldr	r3, [pc, #28]	@ (8008160 <__assert_func+0x30>)
 8008142:	461c      	mov	r4, r3
 8008144:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008148:	9100      	str	r1, [sp, #0]
 800814a:	462b      	mov	r3, r5
 800814c:	4905      	ldr	r1, [pc, #20]	@ (8008164 <__assert_func+0x34>)
 800814e:	f000 fba7 	bl	80088a0 <fiprintf>
 8008152:	f000 fbb7 	bl	80088c4 <abort>
 8008156:	4b04      	ldr	r3, [pc, #16]	@ (8008168 <__assert_func+0x38>)
 8008158:	e7f4      	b.n	8008144 <__assert_func+0x14>
 800815a:	bf00      	nop
 800815c:	20000018 	.word	0x20000018
 8008160:	0800a18d 	.word	0x0800a18d
 8008164:	0800a15f 	.word	0x0800a15f
 8008168:	0800a152 	.word	0x0800a152

0800816c <_calloc_r>:
 800816c:	b570      	push	{r4, r5, r6, lr}
 800816e:	fba1 5402 	umull	r5, r4, r1, r2
 8008172:	b93c      	cbnz	r4, 8008184 <_calloc_r+0x18>
 8008174:	4629      	mov	r1, r5
 8008176:	f7fe f9eb 	bl	8006550 <_malloc_r>
 800817a:	4606      	mov	r6, r0
 800817c:	b928      	cbnz	r0, 800818a <_calloc_r+0x1e>
 800817e:	2600      	movs	r6, #0
 8008180:	4630      	mov	r0, r6
 8008182:	bd70      	pop	{r4, r5, r6, pc}
 8008184:	220c      	movs	r2, #12
 8008186:	6002      	str	r2, [r0, #0]
 8008188:	e7f9      	b.n	800817e <_calloc_r+0x12>
 800818a:	462a      	mov	r2, r5
 800818c:	4621      	mov	r1, r4
 800818e:	f7fd fa8a 	bl	80056a6 <memset>
 8008192:	e7f5      	b.n	8008180 <_calloc_r+0x14>

08008194 <rshift>:
 8008194:	6903      	ldr	r3, [r0, #16]
 8008196:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800819a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800819e:	ea4f 1261 	mov.w	r2, r1, asr #5
 80081a2:	f100 0414 	add.w	r4, r0, #20
 80081a6:	dd45      	ble.n	8008234 <rshift+0xa0>
 80081a8:	f011 011f 	ands.w	r1, r1, #31
 80081ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80081b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80081b4:	d10c      	bne.n	80081d0 <rshift+0x3c>
 80081b6:	f100 0710 	add.w	r7, r0, #16
 80081ba:	4629      	mov	r1, r5
 80081bc:	42b1      	cmp	r1, r6
 80081be:	d334      	bcc.n	800822a <rshift+0x96>
 80081c0:	1a9b      	subs	r3, r3, r2
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	1eea      	subs	r2, r5, #3
 80081c6:	4296      	cmp	r6, r2
 80081c8:	bf38      	it	cc
 80081ca:	2300      	movcc	r3, #0
 80081cc:	4423      	add	r3, r4
 80081ce:	e015      	b.n	80081fc <rshift+0x68>
 80081d0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80081d4:	f1c1 0820 	rsb	r8, r1, #32
 80081d8:	40cf      	lsrs	r7, r1
 80081da:	f105 0e04 	add.w	lr, r5, #4
 80081de:	46a1      	mov	r9, r4
 80081e0:	4576      	cmp	r6, lr
 80081e2:	46f4      	mov	ip, lr
 80081e4:	d815      	bhi.n	8008212 <rshift+0x7e>
 80081e6:	1a9a      	subs	r2, r3, r2
 80081e8:	0092      	lsls	r2, r2, #2
 80081ea:	3a04      	subs	r2, #4
 80081ec:	3501      	adds	r5, #1
 80081ee:	42ae      	cmp	r6, r5
 80081f0:	bf38      	it	cc
 80081f2:	2200      	movcc	r2, #0
 80081f4:	18a3      	adds	r3, r4, r2
 80081f6:	50a7      	str	r7, [r4, r2]
 80081f8:	b107      	cbz	r7, 80081fc <rshift+0x68>
 80081fa:	3304      	adds	r3, #4
 80081fc:	1b1a      	subs	r2, r3, r4
 80081fe:	42a3      	cmp	r3, r4
 8008200:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008204:	bf08      	it	eq
 8008206:	2300      	moveq	r3, #0
 8008208:	6102      	str	r2, [r0, #16]
 800820a:	bf08      	it	eq
 800820c:	6143      	streq	r3, [r0, #20]
 800820e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008212:	f8dc c000 	ldr.w	ip, [ip]
 8008216:	fa0c fc08 	lsl.w	ip, ip, r8
 800821a:	ea4c 0707 	orr.w	r7, ip, r7
 800821e:	f849 7b04 	str.w	r7, [r9], #4
 8008222:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008226:	40cf      	lsrs	r7, r1
 8008228:	e7da      	b.n	80081e0 <rshift+0x4c>
 800822a:	f851 cb04 	ldr.w	ip, [r1], #4
 800822e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008232:	e7c3      	b.n	80081bc <rshift+0x28>
 8008234:	4623      	mov	r3, r4
 8008236:	e7e1      	b.n	80081fc <rshift+0x68>

08008238 <__hexdig_fun>:
 8008238:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800823c:	2b09      	cmp	r3, #9
 800823e:	d802      	bhi.n	8008246 <__hexdig_fun+0xe>
 8008240:	3820      	subs	r0, #32
 8008242:	b2c0      	uxtb	r0, r0
 8008244:	4770      	bx	lr
 8008246:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800824a:	2b05      	cmp	r3, #5
 800824c:	d801      	bhi.n	8008252 <__hexdig_fun+0x1a>
 800824e:	3847      	subs	r0, #71	@ 0x47
 8008250:	e7f7      	b.n	8008242 <__hexdig_fun+0xa>
 8008252:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008256:	2b05      	cmp	r3, #5
 8008258:	d801      	bhi.n	800825e <__hexdig_fun+0x26>
 800825a:	3827      	subs	r0, #39	@ 0x27
 800825c:	e7f1      	b.n	8008242 <__hexdig_fun+0xa>
 800825e:	2000      	movs	r0, #0
 8008260:	4770      	bx	lr
	...

08008264 <__gethex>:
 8008264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008268:	b085      	sub	sp, #20
 800826a:	468a      	mov	sl, r1
 800826c:	9302      	str	r3, [sp, #8]
 800826e:	680b      	ldr	r3, [r1, #0]
 8008270:	9001      	str	r0, [sp, #4]
 8008272:	4690      	mov	r8, r2
 8008274:	1c9c      	adds	r4, r3, #2
 8008276:	46a1      	mov	r9, r4
 8008278:	f814 0b01 	ldrb.w	r0, [r4], #1
 800827c:	2830      	cmp	r0, #48	@ 0x30
 800827e:	d0fa      	beq.n	8008276 <__gethex+0x12>
 8008280:	eba9 0303 	sub.w	r3, r9, r3
 8008284:	f1a3 0b02 	sub.w	fp, r3, #2
 8008288:	f7ff ffd6 	bl	8008238 <__hexdig_fun>
 800828c:	4605      	mov	r5, r0
 800828e:	2800      	cmp	r0, #0
 8008290:	d168      	bne.n	8008364 <__gethex+0x100>
 8008292:	49a0      	ldr	r1, [pc, #640]	@ (8008514 <__gethex+0x2b0>)
 8008294:	2201      	movs	r2, #1
 8008296:	4648      	mov	r0, r9
 8008298:	f7ff ff20 	bl	80080dc <strncmp>
 800829c:	4607      	mov	r7, r0
 800829e:	2800      	cmp	r0, #0
 80082a0:	d167      	bne.n	8008372 <__gethex+0x10e>
 80082a2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80082a6:	4626      	mov	r6, r4
 80082a8:	f7ff ffc6 	bl	8008238 <__hexdig_fun>
 80082ac:	2800      	cmp	r0, #0
 80082ae:	d062      	beq.n	8008376 <__gethex+0x112>
 80082b0:	4623      	mov	r3, r4
 80082b2:	7818      	ldrb	r0, [r3, #0]
 80082b4:	2830      	cmp	r0, #48	@ 0x30
 80082b6:	4699      	mov	r9, r3
 80082b8:	f103 0301 	add.w	r3, r3, #1
 80082bc:	d0f9      	beq.n	80082b2 <__gethex+0x4e>
 80082be:	f7ff ffbb 	bl	8008238 <__hexdig_fun>
 80082c2:	fab0 f580 	clz	r5, r0
 80082c6:	096d      	lsrs	r5, r5, #5
 80082c8:	f04f 0b01 	mov.w	fp, #1
 80082cc:	464a      	mov	r2, r9
 80082ce:	4616      	mov	r6, r2
 80082d0:	3201      	adds	r2, #1
 80082d2:	7830      	ldrb	r0, [r6, #0]
 80082d4:	f7ff ffb0 	bl	8008238 <__hexdig_fun>
 80082d8:	2800      	cmp	r0, #0
 80082da:	d1f8      	bne.n	80082ce <__gethex+0x6a>
 80082dc:	498d      	ldr	r1, [pc, #564]	@ (8008514 <__gethex+0x2b0>)
 80082de:	2201      	movs	r2, #1
 80082e0:	4630      	mov	r0, r6
 80082e2:	f7ff fefb 	bl	80080dc <strncmp>
 80082e6:	2800      	cmp	r0, #0
 80082e8:	d13f      	bne.n	800836a <__gethex+0x106>
 80082ea:	b944      	cbnz	r4, 80082fe <__gethex+0x9a>
 80082ec:	1c74      	adds	r4, r6, #1
 80082ee:	4622      	mov	r2, r4
 80082f0:	4616      	mov	r6, r2
 80082f2:	3201      	adds	r2, #1
 80082f4:	7830      	ldrb	r0, [r6, #0]
 80082f6:	f7ff ff9f 	bl	8008238 <__hexdig_fun>
 80082fa:	2800      	cmp	r0, #0
 80082fc:	d1f8      	bne.n	80082f0 <__gethex+0x8c>
 80082fe:	1ba4      	subs	r4, r4, r6
 8008300:	00a7      	lsls	r7, r4, #2
 8008302:	7833      	ldrb	r3, [r6, #0]
 8008304:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008308:	2b50      	cmp	r3, #80	@ 0x50
 800830a:	d13e      	bne.n	800838a <__gethex+0x126>
 800830c:	7873      	ldrb	r3, [r6, #1]
 800830e:	2b2b      	cmp	r3, #43	@ 0x2b
 8008310:	d033      	beq.n	800837a <__gethex+0x116>
 8008312:	2b2d      	cmp	r3, #45	@ 0x2d
 8008314:	d034      	beq.n	8008380 <__gethex+0x11c>
 8008316:	1c71      	adds	r1, r6, #1
 8008318:	2400      	movs	r4, #0
 800831a:	7808      	ldrb	r0, [r1, #0]
 800831c:	f7ff ff8c 	bl	8008238 <__hexdig_fun>
 8008320:	1e43      	subs	r3, r0, #1
 8008322:	b2db      	uxtb	r3, r3
 8008324:	2b18      	cmp	r3, #24
 8008326:	d830      	bhi.n	800838a <__gethex+0x126>
 8008328:	f1a0 0210 	sub.w	r2, r0, #16
 800832c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008330:	f7ff ff82 	bl	8008238 <__hexdig_fun>
 8008334:	f100 3cff 	add.w	ip, r0, #4294967295
 8008338:	fa5f fc8c 	uxtb.w	ip, ip
 800833c:	f1bc 0f18 	cmp.w	ip, #24
 8008340:	f04f 030a 	mov.w	r3, #10
 8008344:	d91e      	bls.n	8008384 <__gethex+0x120>
 8008346:	b104      	cbz	r4, 800834a <__gethex+0xe6>
 8008348:	4252      	negs	r2, r2
 800834a:	4417      	add	r7, r2
 800834c:	f8ca 1000 	str.w	r1, [sl]
 8008350:	b1ed      	cbz	r5, 800838e <__gethex+0x12a>
 8008352:	f1bb 0f00 	cmp.w	fp, #0
 8008356:	bf0c      	ite	eq
 8008358:	2506      	moveq	r5, #6
 800835a:	2500      	movne	r5, #0
 800835c:	4628      	mov	r0, r5
 800835e:	b005      	add	sp, #20
 8008360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008364:	2500      	movs	r5, #0
 8008366:	462c      	mov	r4, r5
 8008368:	e7b0      	b.n	80082cc <__gethex+0x68>
 800836a:	2c00      	cmp	r4, #0
 800836c:	d1c7      	bne.n	80082fe <__gethex+0x9a>
 800836e:	4627      	mov	r7, r4
 8008370:	e7c7      	b.n	8008302 <__gethex+0x9e>
 8008372:	464e      	mov	r6, r9
 8008374:	462f      	mov	r7, r5
 8008376:	2501      	movs	r5, #1
 8008378:	e7c3      	b.n	8008302 <__gethex+0x9e>
 800837a:	2400      	movs	r4, #0
 800837c:	1cb1      	adds	r1, r6, #2
 800837e:	e7cc      	b.n	800831a <__gethex+0xb6>
 8008380:	2401      	movs	r4, #1
 8008382:	e7fb      	b.n	800837c <__gethex+0x118>
 8008384:	fb03 0002 	mla	r0, r3, r2, r0
 8008388:	e7ce      	b.n	8008328 <__gethex+0xc4>
 800838a:	4631      	mov	r1, r6
 800838c:	e7de      	b.n	800834c <__gethex+0xe8>
 800838e:	eba6 0309 	sub.w	r3, r6, r9
 8008392:	3b01      	subs	r3, #1
 8008394:	4629      	mov	r1, r5
 8008396:	2b07      	cmp	r3, #7
 8008398:	dc0a      	bgt.n	80083b0 <__gethex+0x14c>
 800839a:	9801      	ldr	r0, [sp, #4]
 800839c:	f7fe f964 	bl	8006668 <_Balloc>
 80083a0:	4604      	mov	r4, r0
 80083a2:	b940      	cbnz	r0, 80083b6 <__gethex+0x152>
 80083a4:	4b5c      	ldr	r3, [pc, #368]	@ (8008518 <__gethex+0x2b4>)
 80083a6:	4602      	mov	r2, r0
 80083a8:	21e4      	movs	r1, #228	@ 0xe4
 80083aa:	485c      	ldr	r0, [pc, #368]	@ (800851c <__gethex+0x2b8>)
 80083ac:	f7ff fec0 	bl	8008130 <__assert_func>
 80083b0:	3101      	adds	r1, #1
 80083b2:	105b      	asrs	r3, r3, #1
 80083b4:	e7ef      	b.n	8008396 <__gethex+0x132>
 80083b6:	f100 0a14 	add.w	sl, r0, #20
 80083ba:	2300      	movs	r3, #0
 80083bc:	4655      	mov	r5, sl
 80083be:	469b      	mov	fp, r3
 80083c0:	45b1      	cmp	r9, r6
 80083c2:	d337      	bcc.n	8008434 <__gethex+0x1d0>
 80083c4:	f845 bb04 	str.w	fp, [r5], #4
 80083c8:	eba5 050a 	sub.w	r5, r5, sl
 80083cc:	10ad      	asrs	r5, r5, #2
 80083ce:	6125      	str	r5, [r4, #16]
 80083d0:	4658      	mov	r0, fp
 80083d2:	f7fe fa3b 	bl	800684c <__hi0bits>
 80083d6:	016d      	lsls	r5, r5, #5
 80083d8:	f8d8 6000 	ldr.w	r6, [r8]
 80083dc:	1a2d      	subs	r5, r5, r0
 80083de:	42b5      	cmp	r5, r6
 80083e0:	dd54      	ble.n	800848c <__gethex+0x228>
 80083e2:	1bad      	subs	r5, r5, r6
 80083e4:	4629      	mov	r1, r5
 80083e6:	4620      	mov	r0, r4
 80083e8:	f7fe fdcf 	bl	8006f8a <__any_on>
 80083ec:	4681      	mov	r9, r0
 80083ee:	b178      	cbz	r0, 8008410 <__gethex+0x1ac>
 80083f0:	1e6b      	subs	r3, r5, #1
 80083f2:	1159      	asrs	r1, r3, #5
 80083f4:	f003 021f 	and.w	r2, r3, #31
 80083f8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80083fc:	f04f 0901 	mov.w	r9, #1
 8008400:	fa09 f202 	lsl.w	r2, r9, r2
 8008404:	420a      	tst	r2, r1
 8008406:	d003      	beq.n	8008410 <__gethex+0x1ac>
 8008408:	454b      	cmp	r3, r9
 800840a:	dc36      	bgt.n	800847a <__gethex+0x216>
 800840c:	f04f 0902 	mov.w	r9, #2
 8008410:	4629      	mov	r1, r5
 8008412:	4620      	mov	r0, r4
 8008414:	f7ff febe 	bl	8008194 <rshift>
 8008418:	442f      	add	r7, r5
 800841a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800841e:	42bb      	cmp	r3, r7
 8008420:	da42      	bge.n	80084a8 <__gethex+0x244>
 8008422:	9801      	ldr	r0, [sp, #4]
 8008424:	4621      	mov	r1, r4
 8008426:	f7fe f95f 	bl	80066e8 <_Bfree>
 800842a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800842c:	2300      	movs	r3, #0
 800842e:	6013      	str	r3, [r2, #0]
 8008430:	25a3      	movs	r5, #163	@ 0xa3
 8008432:	e793      	b.n	800835c <__gethex+0xf8>
 8008434:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008438:	2a2e      	cmp	r2, #46	@ 0x2e
 800843a:	d012      	beq.n	8008462 <__gethex+0x1fe>
 800843c:	2b20      	cmp	r3, #32
 800843e:	d104      	bne.n	800844a <__gethex+0x1e6>
 8008440:	f845 bb04 	str.w	fp, [r5], #4
 8008444:	f04f 0b00 	mov.w	fp, #0
 8008448:	465b      	mov	r3, fp
 800844a:	7830      	ldrb	r0, [r6, #0]
 800844c:	9303      	str	r3, [sp, #12]
 800844e:	f7ff fef3 	bl	8008238 <__hexdig_fun>
 8008452:	9b03      	ldr	r3, [sp, #12]
 8008454:	f000 000f 	and.w	r0, r0, #15
 8008458:	4098      	lsls	r0, r3
 800845a:	ea4b 0b00 	orr.w	fp, fp, r0
 800845e:	3304      	adds	r3, #4
 8008460:	e7ae      	b.n	80083c0 <__gethex+0x15c>
 8008462:	45b1      	cmp	r9, r6
 8008464:	d8ea      	bhi.n	800843c <__gethex+0x1d8>
 8008466:	492b      	ldr	r1, [pc, #172]	@ (8008514 <__gethex+0x2b0>)
 8008468:	9303      	str	r3, [sp, #12]
 800846a:	2201      	movs	r2, #1
 800846c:	4630      	mov	r0, r6
 800846e:	f7ff fe35 	bl	80080dc <strncmp>
 8008472:	9b03      	ldr	r3, [sp, #12]
 8008474:	2800      	cmp	r0, #0
 8008476:	d1e1      	bne.n	800843c <__gethex+0x1d8>
 8008478:	e7a2      	b.n	80083c0 <__gethex+0x15c>
 800847a:	1ea9      	subs	r1, r5, #2
 800847c:	4620      	mov	r0, r4
 800847e:	f7fe fd84 	bl	8006f8a <__any_on>
 8008482:	2800      	cmp	r0, #0
 8008484:	d0c2      	beq.n	800840c <__gethex+0x1a8>
 8008486:	f04f 0903 	mov.w	r9, #3
 800848a:	e7c1      	b.n	8008410 <__gethex+0x1ac>
 800848c:	da09      	bge.n	80084a2 <__gethex+0x23e>
 800848e:	1b75      	subs	r5, r6, r5
 8008490:	4621      	mov	r1, r4
 8008492:	9801      	ldr	r0, [sp, #4]
 8008494:	462a      	mov	r2, r5
 8008496:	f7fe fb3f 	bl	8006b18 <__lshift>
 800849a:	1b7f      	subs	r7, r7, r5
 800849c:	4604      	mov	r4, r0
 800849e:	f100 0a14 	add.w	sl, r0, #20
 80084a2:	f04f 0900 	mov.w	r9, #0
 80084a6:	e7b8      	b.n	800841a <__gethex+0x1b6>
 80084a8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80084ac:	42bd      	cmp	r5, r7
 80084ae:	dd6f      	ble.n	8008590 <__gethex+0x32c>
 80084b0:	1bed      	subs	r5, r5, r7
 80084b2:	42ae      	cmp	r6, r5
 80084b4:	dc34      	bgt.n	8008520 <__gethex+0x2bc>
 80084b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d022      	beq.n	8008504 <__gethex+0x2a0>
 80084be:	2b03      	cmp	r3, #3
 80084c0:	d024      	beq.n	800850c <__gethex+0x2a8>
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d115      	bne.n	80084f2 <__gethex+0x28e>
 80084c6:	42ae      	cmp	r6, r5
 80084c8:	d113      	bne.n	80084f2 <__gethex+0x28e>
 80084ca:	2e01      	cmp	r6, #1
 80084cc:	d10b      	bne.n	80084e6 <__gethex+0x282>
 80084ce:	9a02      	ldr	r2, [sp, #8]
 80084d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80084d4:	6013      	str	r3, [r2, #0]
 80084d6:	2301      	movs	r3, #1
 80084d8:	6123      	str	r3, [r4, #16]
 80084da:	f8ca 3000 	str.w	r3, [sl]
 80084de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084e0:	2562      	movs	r5, #98	@ 0x62
 80084e2:	601c      	str	r4, [r3, #0]
 80084e4:	e73a      	b.n	800835c <__gethex+0xf8>
 80084e6:	1e71      	subs	r1, r6, #1
 80084e8:	4620      	mov	r0, r4
 80084ea:	f7fe fd4e 	bl	8006f8a <__any_on>
 80084ee:	2800      	cmp	r0, #0
 80084f0:	d1ed      	bne.n	80084ce <__gethex+0x26a>
 80084f2:	9801      	ldr	r0, [sp, #4]
 80084f4:	4621      	mov	r1, r4
 80084f6:	f7fe f8f7 	bl	80066e8 <_Bfree>
 80084fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80084fc:	2300      	movs	r3, #0
 80084fe:	6013      	str	r3, [r2, #0]
 8008500:	2550      	movs	r5, #80	@ 0x50
 8008502:	e72b      	b.n	800835c <__gethex+0xf8>
 8008504:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1f3      	bne.n	80084f2 <__gethex+0x28e>
 800850a:	e7e0      	b.n	80084ce <__gethex+0x26a>
 800850c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800850e:	2b00      	cmp	r3, #0
 8008510:	d1dd      	bne.n	80084ce <__gethex+0x26a>
 8008512:	e7ee      	b.n	80084f2 <__gethex+0x28e>
 8008514:	08009fe0 	.word	0x08009fe0
 8008518:	08009e75 	.word	0x08009e75
 800851c:	0800a18e 	.word	0x0800a18e
 8008520:	1e6f      	subs	r7, r5, #1
 8008522:	f1b9 0f00 	cmp.w	r9, #0
 8008526:	d130      	bne.n	800858a <__gethex+0x326>
 8008528:	b127      	cbz	r7, 8008534 <__gethex+0x2d0>
 800852a:	4639      	mov	r1, r7
 800852c:	4620      	mov	r0, r4
 800852e:	f7fe fd2c 	bl	8006f8a <__any_on>
 8008532:	4681      	mov	r9, r0
 8008534:	117a      	asrs	r2, r7, #5
 8008536:	2301      	movs	r3, #1
 8008538:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800853c:	f007 071f 	and.w	r7, r7, #31
 8008540:	40bb      	lsls	r3, r7
 8008542:	4213      	tst	r3, r2
 8008544:	4629      	mov	r1, r5
 8008546:	4620      	mov	r0, r4
 8008548:	bf18      	it	ne
 800854a:	f049 0902 	orrne.w	r9, r9, #2
 800854e:	f7ff fe21 	bl	8008194 <rshift>
 8008552:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008556:	1b76      	subs	r6, r6, r5
 8008558:	2502      	movs	r5, #2
 800855a:	f1b9 0f00 	cmp.w	r9, #0
 800855e:	d047      	beq.n	80085f0 <__gethex+0x38c>
 8008560:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008564:	2b02      	cmp	r3, #2
 8008566:	d015      	beq.n	8008594 <__gethex+0x330>
 8008568:	2b03      	cmp	r3, #3
 800856a:	d017      	beq.n	800859c <__gethex+0x338>
 800856c:	2b01      	cmp	r3, #1
 800856e:	d109      	bne.n	8008584 <__gethex+0x320>
 8008570:	f019 0f02 	tst.w	r9, #2
 8008574:	d006      	beq.n	8008584 <__gethex+0x320>
 8008576:	f8da 3000 	ldr.w	r3, [sl]
 800857a:	ea49 0903 	orr.w	r9, r9, r3
 800857e:	f019 0f01 	tst.w	r9, #1
 8008582:	d10e      	bne.n	80085a2 <__gethex+0x33e>
 8008584:	f045 0510 	orr.w	r5, r5, #16
 8008588:	e032      	b.n	80085f0 <__gethex+0x38c>
 800858a:	f04f 0901 	mov.w	r9, #1
 800858e:	e7d1      	b.n	8008534 <__gethex+0x2d0>
 8008590:	2501      	movs	r5, #1
 8008592:	e7e2      	b.n	800855a <__gethex+0x2f6>
 8008594:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008596:	f1c3 0301 	rsb	r3, r3, #1
 800859a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800859c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d0f0      	beq.n	8008584 <__gethex+0x320>
 80085a2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80085a6:	f104 0314 	add.w	r3, r4, #20
 80085aa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80085ae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80085b2:	f04f 0c00 	mov.w	ip, #0
 80085b6:	4618      	mov	r0, r3
 80085b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80085bc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80085c0:	d01b      	beq.n	80085fa <__gethex+0x396>
 80085c2:	3201      	adds	r2, #1
 80085c4:	6002      	str	r2, [r0, #0]
 80085c6:	2d02      	cmp	r5, #2
 80085c8:	f104 0314 	add.w	r3, r4, #20
 80085cc:	d13c      	bne.n	8008648 <__gethex+0x3e4>
 80085ce:	f8d8 2000 	ldr.w	r2, [r8]
 80085d2:	3a01      	subs	r2, #1
 80085d4:	42b2      	cmp	r2, r6
 80085d6:	d109      	bne.n	80085ec <__gethex+0x388>
 80085d8:	1171      	asrs	r1, r6, #5
 80085da:	2201      	movs	r2, #1
 80085dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80085e0:	f006 061f 	and.w	r6, r6, #31
 80085e4:	fa02 f606 	lsl.w	r6, r2, r6
 80085e8:	421e      	tst	r6, r3
 80085ea:	d13a      	bne.n	8008662 <__gethex+0x3fe>
 80085ec:	f045 0520 	orr.w	r5, r5, #32
 80085f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085f2:	601c      	str	r4, [r3, #0]
 80085f4:	9b02      	ldr	r3, [sp, #8]
 80085f6:	601f      	str	r7, [r3, #0]
 80085f8:	e6b0      	b.n	800835c <__gethex+0xf8>
 80085fa:	4299      	cmp	r1, r3
 80085fc:	f843 cc04 	str.w	ip, [r3, #-4]
 8008600:	d8d9      	bhi.n	80085b6 <__gethex+0x352>
 8008602:	68a3      	ldr	r3, [r4, #8]
 8008604:	459b      	cmp	fp, r3
 8008606:	db17      	blt.n	8008638 <__gethex+0x3d4>
 8008608:	6861      	ldr	r1, [r4, #4]
 800860a:	9801      	ldr	r0, [sp, #4]
 800860c:	3101      	adds	r1, #1
 800860e:	f7fe f82b 	bl	8006668 <_Balloc>
 8008612:	4681      	mov	r9, r0
 8008614:	b918      	cbnz	r0, 800861e <__gethex+0x3ba>
 8008616:	4b1a      	ldr	r3, [pc, #104]	@ (8008680 <__gethex+0x41c>)
 8008618:	4602      	mov	r2, r0
 800861a:	2184      	movs	r1, #132	@ 0x84
 800861c:	e6c5      	b.n	80083aa <__gethex+0x146>
 800861e:	6922      	ldr	r2, [r4, #16]
 8008620:	3202      	adds	r2, #2
 8008622:	f104 010c 	add.w	r1, r4, #12
 8008626:	0092      	lsls	r2, r2, #2
 8008628:	300c      	adds	r0, #12
 800862a:	f7fd f8bc 	bl	80057a6 <memcpy>
 800862e:	4621      	mov	r1, r4
 8008630:	9801      	ldr	r0, [sp, #4]
 8008632:	f7fe f859 	bl	80066e8 <_Bfree>
 8008636:	464c      	mov	r4, r9
 8008638:	6923      	ldr	r3, [r4, #16]
 800863a:	1c5a      	adds	r2, r3, #1
 800863c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008640:	6122      	str	r2, [r4, #16]
 8008642:	2201      	movs	r2, #1
 8008644:	615a      	str	r2, [r3, #20]
 8008646:	e7be      	b.n	80085c6 <__gethex+0x362>
 8008648:	6922      	ldr	r2, [r4, #16]
 800864a:	455a      	cmp	r2, fp
 800864c:	dd0b      	ble.n	8008666 <__gethex+0x402>
 800864e:	2101      	movs	r1, #1
 8008650:	4620      	mov	r0, r4
 8008652:	f7ff fd9f 	bl	8008194 <rshift>
 8008656:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800865a:	3701      	adds	r7, #1
 800865c:	42bb      	cmp	r3, r7
 800865e:	f6ff aee0 	blt.w	8008422 <__gethex+0x1be>
 8008662:	2501      	movs	r5, #1
 8008664:	e7c2      	b.n	80085ec <__gethex+0x388>
 8008666:	f016 061f 	ands.w	r6, r6, #31
 800866a:	d0fa      	beq.n	8008662 <__gethex+0x3fe>
 800866c:	4453      	add	r3, sl
 800866e:	f1c6 0620 	rsb	r6, r6, #32
 8008672:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008676:	f7fe f8e9 	bl	800684c <__hi0bits>
 800867a:	42b0      	cmp	r0, r6
 800867c:	dbe7      	blt.n	800864e <__gethex+0x3ea>
 800867e:	e7f0      	b.n	8008662 <__gethex+0x3fe>
 8008680:	08009e75 	.word	0x08009e75

08008684 <L_shift>:
 8008684:	f1c2 0208 	rsb	r2, r2, #8
 8008688:	0092      	lsls	r2, r2, #2
 800868a:	b570      	push	{r4, r5, r6, lr}
 800868c:	f1c2 0620 	rsb	r6, r2, #32
 8008690:	6843      	ldr	r3, [r0, #4]
 8008692:	6804      	ldr	r4, [r0, #0]
 8008694:	fa03 f506 	lsl.w	r5, r3, r6
 8008698:	432c      	orrs	r4, r5
 800869a:	40d3      	lsrs	r3, r2
 800869c:	6004      	str	r4, [r0, #0]
 800869e:	f840 3f04 	str.w	r3, [r0, #4]!
 80086a2:	4288      	cmp	r0, r1
 80086a4:	d3f4      	bcc.n	8008690 <L_shift+0xc>
 80086a6:	bd70      	pop	{r4, r5, r6, pc}

080086a8 <__match>:
 80086a8:	b530      	push	{r4, r5, lr}
 80086aa:	6803      	ldr	r3, [r0, #0]
 80086ac:	3301      	adds	r3, #1
 80086ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086b2:	b914      	cbnz	r4, 80086ba <__match+0x12>
 80086b4:	6003      	str	r3, [r0, #0]
 80086b6:	2001      	movs	r0, #1
 80086b8:	bd30      	pop	{r4, r5, pc}
 80086ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086be:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80086c2:	2d19      	cmp	r5, #25
 80086c4:	bf98      	it	ls
 80086c6:	3220      	addls	r2, #32
 80086c8:	42a2      	cmp	r2, r4
 80086ca:	d0f0      	beq.n	80086ae <__match+0x6>
 80086cc:	2000      	movs	r0, #0
 80086ce:	e7f3      	b.n	80086b8 <__match+0x10>

080086d0 <__hexnan>:
 80086d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d4:	680b      	ldr	r3, [r1, #0]
 80086d6:	6801      	ldr	r1, [r0, #0]
 80086d8:	115e      	asrs	r6, r3, #5
 80086da:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80086de:	f013 031f 	ands.w	r3, r3, #31
 80086e2:	b087      	sub	sp, #28
 80086e4:	bf18      	it	ne
 80086e6:	3604      	addne	r6, #4
 80086e8:	2500      	movs	r5, #0
 80086ea:	1f37      	subs	r7, r6, #4
 80086ec:	4682      	mov	sl, r0
 80086ee:	4690      	mov	r8, r2
 80086f0:	9301      	str	r3, [sp, #4]
 80086f2:	f846 5c04 	str.w	r5, [r6, #-4]
 80086f6:	46b9      	mov	r9, r7
 80086f8:	463c      	mov	r4, r7
 80086fa:	9502      	str	r5, [sp, #8]
 80086fc:	46ab      	mov	fp, r5
 80086fe:	784a      	ldrb	r2, [r1, #1]
 8008700:	1c4b      	adds	r3, r1, #1
 8008702:	9303      	str	r3, [sp, #12]
 8008704:	b342      	cbz	r2, 8008758 <__hexnan+0x88>
 8008706:	4610      	mov	r0, r2
 8008708:	9105      	str	r1, [sp, #20]
 800870a:	9204      	str	r2, [sp, #16]
 800870c:	f7ff fd94 	bl	8008238 <__hexdig_fun>
 8008710:	2800      	cmp	r0, #0
 8008712:	d151      	bne.n	80087b8 <__hexnan+0xe8>
 8008714:	9a04      	ldr	r2, [sp, #16]
 8008716:	9905      	ldr	r1, [sp, #20]
 8008718:	2a20      	cmp	r2, #32
 800871a:	d818      	bhi.n	800874e <__hexnan+0x7e>
 800871c:	9b02      	ldr	r3, [sp, #8]
 800871e:	459b      	cmp	fp, r3
 8008720:	dd13      	ble.n	800874a <__hexnan+0x7a>
 8008722:	454c      	cmp	r4, r9
 8008724:	d206      	bcs.n	8008734 <__hexnan+0x64>
 8008726:	2d07      	cmp	r5, #7
 8008728:	dc04      	bgt.n	8008734 <__hexnan+0x64>
 800872a:	462a      	mov	r2, r5
 800872c:	4649      	mov	r1, r9
 800872e:	4620      	mov	r0, r4
 8008730:	f7ff ffa8 	bl	8008684 <L_shift>
 8008734:	4544      	cmp	r4, r8
 8008736:	d952      	bls.n	80087de <__hexnan+0x10e>
 8008738:	2300      	movs	r3, #0
 800873a:	f1a4 0904 	sub.w	r9, r4, #4
 800873e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008742:	f8cd b008 	str.w	fp, [sp, #8]
 8008746:	464c      	mov	r4, r9
 8008748:	461d      	mov	r5, r3
 800874a:	9903      	ldr	r1, [sp, #12]
 800874c:	e7d7      	b.n	80086fe <__hexnan+0x2e>
 800874e:	2a29      	cmp	r2, #41	@ 0x29
 8008750:	d157      	bne.n	8008802 <__hexnan+0x132>
 8008752:	3102      	adds	r1, #2
 8008754:	f8ca 1000 	str.w	r1, [sl]
 8008758:	f1bb 0f00 	cmp.w	fp, #0
 800875c:	d051      	beq.n	8008802 <__hexnan+0x132>
 800875e:	454c      	cmp	r4, r9
 8008760:	d206      	bcs.n	8008770 <__hexnan+0xa0>
 8008762:	2d07      	cmp	r5, #7
 8008764:	dc04      	bgt.n	8008770 <__hexnan+0xa0>
 8008766:	462a      	mov	r2, r5
 8008768:	4649      	mov	r1, r9
 800876a:	4620      	mov	r0, r4
 800876c:	f7ff ff8a 	bl	8008684 <L_shift>
 8008770:	4544      	cmp	r4, r8
 8008772:	d936      	bls.n	80087e2 <__hexnan+0x112>
 8008774:	f1a8 0204 	sub.w	r2, r8, #4
 8008778:	4623      	mov	r3, r4
 800877a:	f853 1b04 	ldr.w	r1, [r3], #4
 800877e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008782:	429f      	cmp	r7, r3
 8008784:	d2f9      	bcs.n	800877a <__hexnan+0xaa>
 8008786:	1b3b      	subs	r3, r7, r4
 8008788:	f023 0303 	bic.w	r3, r3, #3
 800878c:	3304      	adds	r3, #4
 800878e:	3401      	adds	r4, #1
 8008790:	3e03      	subs	r6, #3
 8008792:	42b4      	cmp	r4, r6
 8008794:	bf88      	it	hi
 8008796:	2304      	movhi	r3, #4
 8008798:	4443      	add	r3, r8
 800879a:	2200      	movs	r2, #0
 800879c:	f843 2b04 	str.w	r2, [r3], #4
 80087a0:	429f      	cmp	r7, r3
 80087a2:	d2fb      	bcs.n	800879c <__hexnan+0xcc>
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	b91b      	cbnz	r3, 80087b0 <__hexnan+0xe0>
 80087a8:	4547      	cmp	r7, r8
 80087aa:	d128      	bne.n	80087fe <__hexnan+0x12e>
 80087ac:	2301      	movs	r3, #1
 80087ae:	603b      	str	r3, [r7, #0]
 80087b0:	2005      	movs	r0, #5
 80087b2:	b007      	add	sp, #28
 80087b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087b8:	3501      	adds	r5, #1
 80087ba:	2d08      	cmp	r5, #8
 80087bc:	f10b 0b01 	add.w	fp, fp, #1
 80087c0:	dd06      	ble.n	80087d0 <__hexnan+0x100>
 80087c2:	4544      	cmp	r4, r8
 80087c4:	d9c1      	bls.n	800874a <__hexnan+0x7a>
 80087c6:	2300      	movs	r3, #0
 80087c8:	f844 3c04 	str.w	r3, [r4, #-4]
 80087cc:	2501      	movs	r5, #1
 80087ce:	3c04      	subs	r4, #4
 80087d0:	6822      	ldr	r2, [r4, #0]
 80087d2:	f000 000f 	and.w	r0, r0, #15
 80087d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80087da:	6020      	str	r0, [r4, #0]
 80087dc:	e7b5      	b.n	800874a <__hexnan+0x7a>
 80087de:	2508      	movs	r5, #8
 80087e0:	e7b3      	b.n	800874a <__hexnan+0x7a>
 80087e2:	9b01      	ldr	r3, [sp, #4]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d0dd      	beq.n	80087a4 <__hexnan+0xd4>
 80087e8:	f1c3 0320 	rsb	r3, r3, #32
 80087ec:	f04f 32ff 	mov.w	r2, #4294967295
 80087f0:	40da      	lsrs	r2, r3
 80087f2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80087f6:	4013      	ands	r3, r2
 80087f8:	f846 3c04 	str.w	r3, [r6, #-4]
 80087fc:	e7d2      	b.n	80087a4 <__hexnan+0xd4>
 80087fe:	3f04      	subs	r7, #4
 8008800:	e7d0      	b.n	80087a4 <__hexnan+0xd4>
 8008802:	2004      	movs	r0, #4
 8008804:	e7d5      	b.n	80087b2 <__hexnan+0xe2>

08008806 <__ascii_mbtowc>:
 8008806:	b082      	sub	sp, #8
 8008808:	b901      	cbnz	r1, 800880c <__ascii_mbtowc+0x6>
 800880a:	a901      	add	r1, sp, #4
 800880c:	b142      	cbz	r2, 8008820 <__ascii_mbtowc+0x1a>
 800880e:	b14b      	cbz	r3, 8008824 <__ascii_mbtowc+0x1e>
 8008810:	7813      	ldrb	r3, [r2, #0]
 8008812:	600b      	str	r3, [r1, #0]
 8008814:	7812      	ldrb	r2, [r2, #0]
 8008816:	1e10      	subs	r0, r2, #0
 8008818:	bf18      	it	ne
 800881a:	2001      	movne	r0, #1
 800881c:	b002      	add	sp, #8
 800881e:	4770      	bx	lr
 8008820:	4610      	mov	r0, r2
 8008822:	e7fb      	b.n	800881c <__ascii_mbtowc+0x16>
 8008824:	f06f 0001 	mvn.w	r0, #1
 8008828:	e7f8      	b.n	800881c <__ascii_mbtowc+0x16>

0800882a <_realloc_r>:
 800882a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800882e:	4680      	mov	r8, r0
 8008830:	4615      	mov	r5, r2
 8008832:	460c      	mov	r4, r1
 8008834:	b921      	cbnz	r1, 8008840 <_realloc_r+0x16>
 8008836:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800883a:	4611      	mov	r1, r2
 800883c:	f7fd be88 	b.w	8006550 <_malloc_r>
 8008840:	b92a      	cbnz	r2, 800884e <_realloc_r+0x24>
 8008842:	f7fd fe11 	bl	8006468 <_free_r>
 8008846:	2400      	movs	r4, #0
 8008848:	4620      	mov	r0, r4
 800884a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800884e:	f000 f840 	bl	80088d2 <_malloc_usable_size_r>
 8008852:	4285      	cmp	r5, r0
 8008854:	4606      	mov	r6, r0
 8008856:	d802      	bhi.n	800885e <_realloc_r+0x34>
 8008858:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800885c:	d8f4      	bhi.n	8008848 <_realloc_r+0x1e>
 800885e:	4629      	mov	r1, r5
 8008860:	4640      	mov	r0, r8
 8008862:	f7fd fe75 	bl	8006550 <_malloc_r>
 8008866:	4607      	mov	r7, r0
 8008868:	2800      	cmp	r0, #0
 800886a:	d0ec      	beq.n	8008846 <_realloc_r+0x1c>
 800886c:	42b5      	cmp	r5, r6
 800886e:	462a      	mov	r2, r5
 8008870:	4621      	mov	r1, r4
 8008872:	bf28      	it	cs
 8008874:	4632      	movcs	r2, r6
 8008876:	f7fc ff96 	bl	80057a6 <memcpy>
 800887a:	4621      	mov	r1, r4
 800887c:	4640      	mov	r0, r8
 800887e:	f7fd fdf3 	bl	8006468 <_free_r>
 8008882:	463c      	mov	r4, r7
 8008884:	e7e0      	b.n	8008848 <_realloc_r+0x1e>

08008886 <__ascii_wctomb>:
 8008886:	4603      	mov	r3, r0
 8008888:	4608      	mov	r0, r1
 800888a:	b141      	cbz	r1, 800889e <__ascii_wctomb+0x18>
 800888c:	2aff      	cmp	r2, #255	@ 0xff
 800888e:	d904      	bls.n	800889a <__ascii_wctomb+0x14>
 8008890:	228a      	movs	r2, #138	@ 0x8a
 8008892:	601a      	str	r2, [r3, #0]
 8008894:	f04f 30ff 	mov.w	r0, #4294967295
 8008898:	4770      	bx	lr
 800889a:	700a      	strb	r2, [r1, #0]
 800889c:	2001      	movs	r0, #1
 800889e:	4770      	bx	lr

080088a0 <fiprintf>:
 80088a0:	b40e      	push	{r1, r2, r3}
 80088a2:	b503      	push	{r0, r1, lr}
 80088a4:	4601      	mov	r1, r0
 80088a6:	ab03      	add	r3, sp, #12
 80088a8:	4805      	ldr	r0, [pc, #20]	@ (80088c0 <fiprintf+0x20>)
 80088aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80088ae:	6800      	ldr	r0, [r0, #0]
 80088b0:	9301      	str	r3, [sp, #4]
 80088b2:	f000 f83f 	bl	8008934 <_vfiprintf_r>
 80088b6:	b002      	add	sp, #8
 80088b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80088bc:	b003      	add	sp, #12
 80088be:	4770      	bx	lr
 80088c0:	20000018 	.word	0x20000018

080088c4 <abort>:
 80088c4:	b508      	push	{r3, lr}
 80088c6:	2006      	movs	r0, #6
 80088c8:	f000 fa08 	bl	8008cdc <raise>
 80088cc:	2001      	movs	r0, #1
 80088ce:	f7f9 f952 	bl	8001b76 <_exit>

080088d2 <_malloc_usable_size_r>:
 80088d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088d6:	1f18      	subs	r0, r3, #4
 80088d8:	2b00      	cmp	r3, #0
 80088da:	bfbc      	itt	lt
 80088dc:	580b      	ldrlt	r3, [r1, r0]
 80088de:	18c0      	addlt	r0, r0, r3
 80088e0:	4770      	bx	lr

080088e2 <__sfputc_r>:
 80088e2:	6893      	ldr	r3, [r2, #8]
 80088e4:	3b01      	subs	r3, #1
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	b410      	push	{r4}
 80088ea:	6093      	str	r3, [r2, #8]
 80088ec:	da08      	bge.n	8008900 <__sfputc_r+0x1e>
 80088ee:	6994      	ldr	r4, [r2, #24]
 80088f0:	42a3      	cmp	r3, r4
 80088f2:	db01      	blt.n	80088f8 <__sfputc_r+0x16>
 80088f4:	290a      	cmp	r1, #10
 80088f6:	d103      	bne.n	8008900 <__sfputc_r+0x1e>
 80088f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088fc:	f000 b932 	b.w	8008b64 <__swbuf_r>
 8008900:	6813      	ldr	r3, [r2, #0]
 8008902:	1c58      	adds	r0, r3, #1
 8008904:	6010      	str	r0, [r2, #0]
 8008906:	7019      	strb	r1, [r3, #0]
 8008908:	4608      	mov	r0, r1
 800890a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800890e:	4770      	bx	lr

08008910 <__sfputs_r>:
 8008910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008912:	4606      	mov	r6, r0
 8008914:	460f      	mov	r7, r1
 8008916:	4614      	mov	r4, r2
 8008918:	18d5      	adds	r5, r2, r3
 800891a:	42ac      	cmp	r4, r5
 800891c:	d101      	bne.n	8008922 <__sfputs_r+0x12>
 800891e:	2000      	movs	r0, #0
 8008920:	e007      	b.n	8008932 <__sfputs_r+0x22>
 8008922:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008926:	463a      	mov	r2, r7
 8008928:	4630      	mov	r0, r6
 800892a:	f7ff ffda 	bl	80088e2 <__sfputc_r>
 800892e:	1c43      	adds	r3, r0, #1
 8008930:	d1f3      	bne.n	800891a <__sfputs_r+0xa>
 8008932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008934 <_vfiprintf_r>:
 8008934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008938:	460d      	mov	r5, r1
 800893a:	b09d      	sub	sp, #116	@ 0x74
 800893c:	4614      	mov	r4, r2
 800893e:	4698      	mov	r8, r3
 8008940:	4606      	mov	r6, r0
 8008942:	b118      	cbz	r0, 800894c <_vfiprintf_r+0x18>
 8008944:	6a03      	ldr	r3, [r0, #32]
 8008946:	b90b      	cbnz	r3, 800894c <_vfiprintf_r+0x18>
 8008948:	f7fc fdfa 	bl	8005540 <__sinit>
 800894c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800894e:	07d9      	lsls	r1, r3, #31
 8008950:	d405      	bmi.n	800895e <_vfiprintf_r+0x2a>
 8008952:	89ab      	ldrh	r3, [r5, #12]
 8008954:	059a      	lsls	r2, r3, #22
 8008956:	d402      	bmi.n	800895e <_vfiprintf_r+0x2a>
 8008958:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800895a:	f7fc ff22 	bl	80057a2 <__retarget_lock_acquire_recursive>
 800895e:	89ab      	ldrh	r3, [r5, #12]
 8008960:	071b      	lsls	r3, r3, #28
 8008962:	d501      	bpl.n	8008968 <_vfiprintf_r+0x34>
 8008964:	692b      	ldr	r3, [r5, #16]
 8008966:	b99b      	cbnz	r3, 8008990 <_vfiprintf_r+0x5c>
 8008968:	4629      	mov	r1, r5
 800896a:	4630      	mov	r0, r6
 800896c:	f000 f938 	bl	8008be0 <__swsetup_r>
 8008970:	b170      	cbz	r0, 8008990 <_vfiprintf_r+0x5c>
 8008972:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008974:	07dc      	lsls	r4, r3, #31
 8008976:	d504      	bpl.n	8008982 <_vfiprintf_r+0x4e>
 8008978:	f04f 30ff 	mov.w	r0, #4294967295
 800897c:	b01d      	add	sp, #116	@ 0x74
 800897e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008982:	89ab      	ldrh	r3, [r5, #12]
 8008984:	0598      	lsls	r0, r3, #22
 8008986:	d4f7      	bmi.n	8008978 <_vfiprintf_r+0x44>
 8008988:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800898a:	f7fc ff0b 	bl	80057a4 <__retarget_lock_release_recursive>
 800898e:	e7f3      	b.n	8008978 <_vfiprintf_r+0x44>
 8008990:	2300      	movs	r3, #0
 8008992:	9309      	str	r3, [sp, #36]	@ 0x24
 8008994:	2320      	movs	r3, #32
 8008996:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800899a:	f8cd 800c 	str.w	r8, [sp, #12]
 800899e:	2330      	movs	r3, #48	@ 0x30
 80089a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008b50 <_vfiprintf_r+0x21c>
 80089a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80089a8:	f04f 0901 	mov.w	r9, #1
 80089ac:	4623      	mov	r3, r4
 80089ae:	469a      	mov	sl, r3
 80089b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089b4:	b10a      	cbz	r2, 80089ba <_vfiprintf_r+0x86>
 80089b6:	2a25      	cmp	r2, #37	@ 0x25
 80089b8:	d1f9      	bne.n	80089ae <_vfiprintf_r+0x7a>
 80089ba:	ebba 0b04 	subs.w	fp, sl, r4
 80089be:	d00b      	beq.n	80089d8 <_vfiprintf_r+0xa4>
 80089c0:	465b      	mov	r3, fp
 80089c2:	4622      	mov	r2, r4
 80089c4:	4629      	mov	r1, r5
 80089c6:	4630      	mov	r0, r6
 80089c8:	f7ff ffa2 	bl	8008910 <__sfputs_r>
 80089cc:	3001      	adds	r0, #1
 80089ce:	f000 80a7 	beq.w	8008b20 <_vfiprintf_r+0x1ec>
 80089d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089d4:	445a      	add	r2, fp
 80089d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80089d8:	f89a 3000 	ldrb.w	r3, [sl]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	f000 809f 	beq.w	8008b20 <_vfiprintf_r+0x1ec>
 80089e2:	2300      	movs	r3, #0
 80089e4:	f04f 32ff 	mov.w	r2, #4294967295
 80089e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089ec:	f10a 0a01 	add.w	sl, sl, #1
 80089f0:	9304      	str	r3, [sp, #16]
 80089f2:	9307      	str	r3, [sp, #28]
 80089f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80089f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80089fa:	4654      	mov	r4, sl
 80089fc:	2205      	movs	r2, #5
 80089fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a02:	4853      	ldr	r0, [pc, #332]	@ (8008b50 <_vfiprintf_r+0x21c>)
 8008a04:	f7f7 fbe4 	bl	80001d0 <memchr>
 8008a08:	9a04      	ldr	r2, [sp, #16]
 8008a0a:	b9d8      	cbnz	r0, 8008a44 <_vfiprintf_r+0x110>
 8008a0c:	06d1      	lsls	r1, r2, #27
 8008a0e:	bf44      	itt	mi
 8008a10:	2320      	movmi	r3, #32
 8008a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a16:	0713      	lsls	r3, r2, #28
 8008a18:	bf44      	itt	mi
 8008a1a:	232b      	movmi	r3, #43	@ 0x2b
 8008a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a20:	f89a 3000 	ldrb.w	r3, [sl]
 8008a24:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a26:	d015      	beq.n	8008a54 <_vfiprintf_r+0x120>
 8008a28:	9a07      	ldr	r2, [sp, #28]
 8008a2a:	4654      	mov	r4, sl
 8008a2c:	2000      	movs	r0, #0
 8008a2e:	f04f 0c0a 	mov.w	ip, #10
 8008a32:	4621      	mov	r1, r4
 8008a34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a38:	3b30      	subs	r3, #48	@ 0x30
 8008a3a:	2b09      	cmp	r3, #9
 8008a3c:	d94b      	bls.n	8008ad6 <_vfiprintf_r+0x1a2>
 8008a3e:	b1b0      	cbz	r0, 8008a6e <_vfiprintf_r+0x13a>
 8008a40:	9207      	str	r2, [sp, #28]
 8008a42:	e014      	b.n	8008a6e <_vfiprintf_r+0x13a>
 8008a44:	eba0 0308 	sub.w	r3, r0, r8
 8008a48:	fa09 f303 	lsl.w	r3, r9, r3
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	9304      	str	r3, [sp, #16]
 8008a50:	46a2      	mov	sl, r4
 8008a52:	e7d2      	b.n	80089fa <_vfiprintf_r+0xc6>
 8008a54:	9b03      	ldr	r3, [sp, #12]
 8008a56:	1d19      	adds	r1, r3, #4
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	9103      	str	r1, [sp, #12]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	bfbb      	ittet	lt
 8008a60:	425b      	neglt	r3, r3
 8008a62:	f042 0202 	orrlt.w	r2, r2, #2
 8008a66:	9307      	strge	r3, [sp, #28]
 8008a68:	9307      	strlt	r3, [sp, #28]
 8008a6a:	bfb8      	it	lt
 8008a6c:	9204      	strlt	r2, [sp, #16]
 8008a6e:	7823      	ldrb	r3, [r4, #0]
 8008a70:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a72:	d10a      	bne.n	8008a8a <_vfiprintf_r+0x156>
 8008a74:	7863      	ldrb	r3, [r4, #1]
 8008a76:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a78:	d132      	bne.n	8008ae0 <_vfiprintf_r+0x1ac>
 8008a7a:	9b03      	ldr	r3, [sp, #12]
 8008a7c:	1d1a      	adds	r2, r3, #4
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	9203      	str	r2, [sp, #12]
 8008a82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a86:	3402      	adds	r4, #2
 8008a88:	9305      	str	r3, [sp, #20]
 8008a8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008b60 <_vfiprintf_r+0x22c>
 8008a8e:	7821      	ldrb	r1, [r4, #0]
 8008a90:	2203      	movs	r2, #3
 8008a92:	4650      	mov	r0, sl
 8008a94:	f7f7 fb9c 	bl	80001d0 <memchr>
 8008a98:	b138      	cbz	r0, 8008aaa <_vfiprintf_r+0x176>
 8008a9a:	9b04      	ldr	r3, [sp, #16]
 8008a9c:	eba0 000a 	sub.w	r0, r0, sl
 8008aa0:	2240      	movs	r2, #64	@ 0x40
 8008aa2:	4082      	lsls	r2, r0
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	3401      	adds	r4, #1
 8008aa8:	9304      	str	r3, [sp, #16]
 8008aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aae:	4829      	ldr	r0, [pc, #164]	@ (8008b54 <_vfiprintf_r+0x220>)
 8008ab0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ab4:	2206      	movs	r2, #6
 8008ab6:	f7f7 fb8b 	bl	80001d0 <memchr>
 8008aba:	2800      	cmp	r0, #0
 8008abc:	d03f      	beq.n	8008b3e <_vfiprintf_r+0x20a>
 8008abe:	4b26      	ldr	r3, [pc, #152]	@ (8008b58 <_vfiprintf_r+0x224>)
 8008ac0:	bb1b      	cbnz	r3, 8008b0a <_vfiprintf_r+0x1d6>
 8008ac2:	9b03      	ldr	r3, [sp, #12]
 8008ac4:	3307      	adds	r3, #7
 8008ac6:	f023 0307 	bic.w	r3, r3, #7
 8008aca:	3308      	adds	r3, #8
 8008acc:	9303      	str	r3, [sp, #12]
 8008ace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ad0:	443b      	add	r3, r7
 8008ad2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ad4:	e76a      	b.n	80089ac <_vfiprintf_r+0x78>
 8008ad6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ada:	460c      	mov	r4, r1
 8008adc:	2001      	movs	r0, #1
 8008ade:	e7a8      	b.n	8008a32 <_vfiprintf_r+0xfe>
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	3401      	adds	r4, #1
 8008ae4:	9305      	str	r3, [sp, #20]
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	f04f 0c0a 	mov.w	ip, #10
 8008aec:	4620      	mov	r0, r4
 8008aee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008af2:	3a30      	subs	r2, #48	@ 0x30
 8008af4:	2a09      	cmp	r2, #9
 8008af6:	d903      	bls.n	8008b00 <_vfiprintf_r+0x1cc>
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d0c6      	beq.n	8008a8a <_vfiprintf_r+0x156>
 8008afc:	9105      	str	r1, [sp, #20]
 8008afe:	e7c4      	b.n	8008a8a <_vfiprintf_r+0x156>
 8008b00:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b04:	4604      	mov	r4, r0
 8008b06:	2301      	movs	r3, #1
 8008b08:	e7f0      	b.n	8008aec <_vfiprintf_r+0x1b8>
 8008b0a:	ab03      	add	r3, sp, #12
 8008b0c:	9300      	str	r3, [sp, #0]
 8008b0e:	462a      	mov	r2, r5
 8008b10:	4b12      	ldr	r3, [pc, #72]	@ (8008b5c <_vfiprintf_r+0x228>)
 8008b12:	a904      	add	r1, sp, #16
 8008b14:	4630      	mov	r0, r6
 8008b16:	f7fb febb 	bl	8004890 <_printf_float>
 8008b1a:	4607      	mov	r7, r0
 8008b1c:	1c78      	adds	r0, r7, #1
 8008b1e:	d1d6      	bne.n	8008ace <_vfiprintf_r+0x19a>
 8008b20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b22:	07d9      	lsls	r1, r3, #31
 8008b24:	d405      	bmi.n	8008b32 <_vfiprintf_r+0x1fe>
 8008b26:	89ab      	ldrh	r3, [r5, #12]
 8008b28:	059a      	lsls	r2, r3, #22
 8008b2a:	d402      	bmi.n	8008b32 <_vfiprintf_r+0x1fe>
 8008b2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b2e:	f7fc fe39 	bl	80057a4 <__retarget_lock_release_recursive>
 8008b32:	89ab      	ldrh	r3, [r5, #12]
 8008b34:	065b      	lsls	r3, r3, #25
 8008b36:	f53f af1f 	bmi.w	8008978 <_vfiprintf_r+0x44>
 8008b3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b3c:	e71e      	b.n	800897c <_vfiprintf_r+0x48>
 8008b3e:	ab03      	add	r3, sp, #12
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	462a      	mov	r2, r5
 8008b44:	4b05      	ldr	r3, [pc, #20]	@ (8008b5c <_vfiprintf_r+0x228>)
 8008b46:	a904      	add	r1, sp, #16
 8008b48:	4630      	mov	r0, r6
 8008b4a:	f7fc f939 	bl	8004dc0 <_printf_i>
 8008b4e:	e7e4      	b.n	8008b1a <_vfiprintf_r+0x1e6>
 8008b50:	0800a139 	.word	0x0800a139
 8008b54:	0800a143 	.word	0x0800a143
 8008b58:	08004891 	.word	0x08004891
 8008b5c:	08008911 	.word	0x08008911
 8008b60:	0800a13f 	.word	0x0800a13f

08008b64 <__swbuf_r>:
 8008b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b66:	460e      	mov	r6, r1
 8008b68:	4614      	mov	r4, r2
 8008b6a:	4605      	mov	r5, r0
 8008b6c:	b118      	cbz	r0, 8008b76 <__swbuf_r+0x12>
 8008b6e:	6a03      	ldr	r3, [r0, #32]
 8008b70:	b90b      	cbnz	r3, 8008b76 <__swbuf_r+0x12>
 8008b72:	f7fc fce5 	bl	8005540 <__sinit>
 8008b76:	69a3      	ldr	r3, [r4, #24]
 8008b78:	60a3      	str	r3, [r4, #8]
 8008b7a:	89a3      	ldrh	r3, [r4, #12]
 8008b7c:	071a      	lsls	r2, r3, #28
 8008b7e:	d501      	bpl.n	8008b84 <__swbuf_r+0x20>
 8008b80:	6923      	ldr	r3, [r4, #16]
 8008b82:	b943      	cbnz	r3, 8008b96 <__swbuf_r+0x32>
 8008b84:	4621      	mov	r1, r4
 8008b86:	4628      	mov	r0, r5
 8008b88:	f000 f82a 	bl	8008be0 <__swsetup_r>
 8008b8c:	b118      	cbz	r0, 8008b96 <__swbuf_r+0x32>
 8008b8e:	f04f 37ff 	mov.w	r7, #4294967295
 8008b92:	4638      	mov	r0, r7
 8008b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b96:	6823      	ldr	r3, [r4, #0]
 8008b98:	6922      	ldr	r2, [r4, #16]
 8008b9a:	1a98      	subs	r0, r3, r2
 8008b9c:	6963      	ldr	r3, [r4, #20]
 8008b9e:	b2f6      	uxtb	r6, r6
 8008ba0:	4283      	cmp	r3, r0
 8008ba2:	4637      	mov	r7, r6
 8008ba4:	dc05      	bgt.n	8008bb2 <__swbuf_r+0x4e>
 8008ba6:	4621      	mov	r1, r4
 8008ba8:	4628      	mov	r0, r5
 8008baa:	f7ff fa6f 	bl	800808c <_fflush_r>
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	d1ed      	bne.n	8008b8e <__swbuf_r+0x2a>
 8008bb2:	68a3      	ldr	r3, [r4, #8]
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	60a3      	str	r3, [r4, #8]
 8008bb8:	6823      	ldr	r3, [r4, #0]
 8008bba:	1c5a      	adds	r2, r3, #1
 8008bbc:	6022      	str	r2, [r4, #0]
 8008bbe:	701e      	strb	r6, [r3, #0]
 8008bc0:	6962      	ldr	r2, [r4, #20]
 8008bc2:	1c43      	adds	r3, r0, #1
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d004      	beq.n	8008bd2 <__swbuf_r+0x6e>
 8008bc8:	89a3      	ldrh	r3, [r4, #12]
 8008bca:	07db      	lsls	r3, r3, #31
 8008bcc:	d5e1      	bpl.n	8008b92 <__swbuf_r+0x2e>
 8008bce:	2e0a      	cmp	r6, #10
 8008bd0:	d1df      	bne.n	8008b92 <__swbuf_r+0x2e>
 8008bd2:	4621      	mov	r1, r4
 8008bd4:	4628      	mov	r0, r5
 8008bd6:	f7ff fa59 	bl	800808c <_fflush_r>
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	d0d9      	beq.n	8008b92 <__swbuf_r+0x2e>
 8008bde:	e7d6      	b.n	8008b8e <__swbuf_r+0x2a>

08008be0 <__swsetup_r>:
 8008be0:	b538      	push	{r3, r4, r5, lr}
 8008be2:	4b29      	ldr	r3, [pc, #164]	@ (8008c88 <__swsetup_r+0xa8>)
 8008be4:	4605      	mov	r5, r0
 8008be6:	6818      	ldr	r0, [r3, #0]
 8008be8:	460c      	mov	r4, r1
 8008bea:	b118      	cbz	r0, 8008bf4 <__swsetup_r+0x14>
 8008bec:	6a03      	ldr	r3, [r0, #32]
 8008bee:	b90b      	cbnz	r3, 8008bf4 <__swsetup_r+0x14>
 8008bf0:	f7fc fca6 	bl	8005540 <__sinit>
 8008bf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bf8:	0719      	lsls	r1, r3, #28
 8008bfa:	d422      	bmi.n	8008c42 <__swsetup_r+0x62>
 8008bfc:	06da      	lsls	r2, r3, #27
 8008bfe:	d407      	bmi.n	8008c10 <__swsetup_r+0x30>
 8008c00:	2209      	movs	r2, #9
 8008c02:	602a      	str	r2, [r5, #0]
 8008c04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c08:	81a3      	strh	r3, [r4, #12]
 8008c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c0e:	e033      	b.n	8008c78 <__swsetup_r+0x98>
 8008c10:	0758      	lsls	r0, r3, #29
 8008c12:	d512      	bpl.n	8008c3a <__swsetup_r+0x5a>
 8008c14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c16:	b141      	cbz	r1, 8008c2a <__swsetup_r+0x4a>
 8008c18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c1c:	4299      	cmp	r1, r3
 8008c1e:	d002      	beq.n	8008c26 <__swsetup_r+0x46>
 8008c20:	4628      	mov	r0, r5
 8008c22:	f7fd fc21 	bl	8006468 <_free_r>
 8008c26:	2300      	movs	r3, #0
 8008c28:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c2a:	89a3      	ldrh	r3, [r4, #12]
 8008c2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008c30:	81a3      	strh	r3, [r4, #12]
 8008c32:	2300      	movs	r3, #0
 8008c34:	6063      	str	r3, [r4, #4]
 8008c36:	6923      	ldr	r3, [r4, #16]
 8008c38:	6023      	str	r3, [r4, #0]
 8008c3a:	89a3      	ldrh	r3, [r4, #12]
 8008c3c:	f043 0308 	orr.w	r3, r3, #8
 8008c40:	81a3      	strh	r3, [r4, #12]
 8008c42:	6923      	ldr	r3, [r4, #16]
 8008c44:	b94b      	cbnz	r3, 8008c5a <__swsetup_r+0x7a>
 8008c46:	89a3      	ldrh	r3, [r4, #12]
 8008c48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008c4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c50:	d003      	beq.n	8008c5a <__swsetup_r+0x7a>
 8008c52:	4621      	mov	r1, r4
 8008c54:	4628      	mov	r0, r5
 8008c56:	f000 f883 	bl	8008d60 <__smakebuf_r>
 8008c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c5e:	f013 0201 	ands.w	r2, r3, #1
 8008c62:	d00a      	beq.n	8008c7a <__swsetup_r+0x9a>
 8008c64:	2200      	movs	r2, #0
 8008c66:	60a2      	str	r2, [r4, #8]
 8008c68:	6962      	ldr	r2, [r4, #20]
 8008c6a:	4252      	negs	r2, r2
 8008c6c:	61a2      	str	r2, [r4, #24]
 8008c6e:	6922      	ldr	r2, [r4, #16]
 8008c70:	b942      	cbnz	r2, 8008c84 <__swsetup_r+0xa4>
 8008c72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008c76:	d1c5      	bne.n	8008c04 <__swsetup_r+0x24>
 8008c78:	bd38      	pop	{r3, r4, r5, pc}
 8008c7a:	0799      	lsls	r1, r3, #30
 8008c7c:	bf58      	it	pl
 8008c7e:	6962      	ldrpl	r2, [r4, #20]
 8008c80:	60a2      	str	r2, [r4, #8]
 8008c82:	e7f4      	b.n	8008c6e <__swsetup_r+0x8e>
 8008c84:	2000      	movs	r0, #0
 8008c86:	e7f7      	b.n	8008c78 <__swsetup_r+0x98>
 8008c88:	20000018 	.word	0x20000018

08008c8c <_raise_r>:
 8008c8c:	291f      	cmp	r1, #31
 8008c8e:	b538      	push	{r3, r4, r5, lr}
 8008c90:	4605      	mov	r5, r0
 8008c92:	460c      	mov	r4, r1
 8008c94:	d904      	bls.n	8008ca0 <_raise_r+0x14>
 8008c96:	2316      	movs	r3, #22
 8008c98:	6003      	str	r3, [r0, #0]
 8008c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ca0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008ca2:	b112      	cbz	r2, 8008caa <_raise_r+0x1e>
 8008ca4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ca8:	b94b      	cbnz	r3, 8008cbe <_raise_r+0x32>
 8008caa:	4628      	mov	r0, r5
 8008cac:	f000 f830 	bl	8008d10 <_getpid_r>
 8008cb0:	4622      	mov	r2, r4
 8008cb2:	4601      	mov	r1, r0
 8008cb4:	4628      	mov	r0, r5
 8008cb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cba:	f000 b817 	b.w	8008cec <_kill_r>
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d00a      	beq.n	8008cd8 <_raise_r+0x4c>
 8008cc2:	1c59      	adds	r1, r3, #1
 8008cc4:	d103      	bne.n	8008cce <_raise_r+0x42>
 8008cc6:	2316      	movs	r3, #22
 8008cc8:	6003      	str	r3, [r0, #0]
 8008cca:	2001      	movs	r0, #1
 8008ccc:	e7e7      	b.n	8008c9e <_raise_r+0x12>
 8008cce:	2100      	movs	r1, #0
 8008cd0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	4798      	blx	r3
 8008cd8:	2000      	movs	r0, #0
 8008cda:	e7e0      	b.n	8008c9e <_raise_r+0x12>

08008cdc <raise>:
 8008cdc:	4b02      	ldr	r3, [pc, #8]	@ (8008ce8 <raise+0xc>)
 8008cde:	4601      	mov	r1, r0
 8008ce0:	6818      	ldr	r0, [r3, #0]
 8008ce2:	f7ff bfd3 	b.w	8008c8c <_raise_r>
 8008ce6:	bf00      	nop
 8008ce8:	20000018 	.word	0x20000018

08008cec <_kill_r>:
 8008cec:	b538      	push	{r3, r4, r5, lr}
 8008cee:	4d07      	ldr	r5, [pc, #28]	@ (8008d0c <_kill_r+0x20>)
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	4608      	mov	r0, r1
 8008cf6:	4611      	mov	r1, r2
 8008cf8:	602b      	str	r3, [r5, #0]
 8008cfa:	f7f8 ff2c 	bl	8001b56 <_kill>
 8008cfe:	1c43      	adds	r3, r0, #1
 8008d00:	d102      	bne.n	8008d08 <_kill_r+0x1c>
 8008d02:	682b      	ldr	r3, [r5, #0]
 8008d04:	b103      	cbz	r3, 8008d08 <_kill_r+0x1c>
 8008d06:	6023      	str	r3, [r4, #0]
 8008d08:	bd38      	pop	{r3, r4, r5, pc}
 8008d0a:	bf00      	nop
 8008d0c:	2000081c 	.word	0x2000081c

08008d10 <_getpid_r>:
 8008d10:	f7f8 bf19 	b.w	8001b46 <_getpid>

08008d14 <__swhatbuf_r>:
 8008d14:	b570      	push	{r4, r5, r6, lr}
 8008d16:	460c      	mov	r4, r1
 8008d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d1c:	2900      	cmp	r1, #0
 8008d1e:	b096      	sub	sp, #88	@ 0x58
 8008d20:	4615      	mov	r5, r2
 8008d22:	461e      	mov	r6, r3
 8008d24:	da0d      	bge.n	8008d42 <__swhatbuf_r+0x2e>
 8008d26:	89a3      	ldrh	r3, [r4, #12]
 8008d28:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008d2c:	f04f 0100 	mov.w	r1, #0
 8008d30:	bf14      	ite	ne
 8008d32:	2340      	movne	r3, #64	@ 0x40
 8008d34:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008d38:	2000      	movs	r0, #0
 8008d3a:	6031      	str	r1, [r6, #0]
 8008d3c:	602b      	str	r3, [r5, #0]
 8008d3e:	b016      	add	sp, #88	@ 0x58
 8008d40:	bd70      	pop	{r4, r5, r6, pc}
 8008d42:	466a      	mov	r2, sp
 8008d44:	f000 f848 	bl	8008dd8 <_fstat_r>
 8008d48:	2800      	cmp	r0, #0
 8008d4a:	dbec      	blt.n	8008d26 <__swhatbuf_r+0x12>
 8008d4c:	9901      	ldr	r1, [sp, #4]
 8008d4e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008d52:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008d56:	4259      	negs	r1, r3
 8008d58:	4159      	adcs	r1, r3
 8008d5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d5e:	e7eb      	b.n	8008d38 <__swhatbuf_r+0x24>

08008d60 <__smakebuf_r>:
 8008d60:	898b      	ldrh	r3, [r1, #12]
 8008d62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d64:	079d      	lsls	r5, r3, #30
 8008d66:	4606      	mov	r6, r0
 8008d68:	460c      	mov	r4, r1
 8008d6a:	d507      	bpl.n	8008d7c <__smakebuf_r+0x1c>
 8008d6c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008d70:	6023      	str	r3, [r4, #0]
 8008d72:	6123      	str	r3, [r4, #16]
 8008d74:	2301      	movs	r3, #1
 8008d76:	6163      	str	r3, [r4, #20]
 8008d78:	b003      	add	sp, #12
 8008d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d7c:	ab01      	add	r3, sp, #4
 8008d7e:	466a      	mov	r2, sp
 8008d80:	f7ff ffc8 	bl	8008d14 <__swhatbuf_r>
 8008d84:	9f00      	ldr	r7, [sp, #0]
 8008d86:	4605      	mov	r5, r0
 8008d88:	4639      	mov	r1, r7
 8008d8a:	4630      	mov	r0, r6
 8008d8c:	f7fd fbe0 	bl	8006550 <_malloc_r>
 8008d90:	b948      	cbnz	r0, 8008da6 <__smakebuf_r+0x46>
 8008d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d96:	059a      	lsls	r2, r3, #22
 8008d98:	d4ee      	bmi.n	8008d78 <__smakebuf_r+0x18>
 8008d9a:	f023 0303 	bic.w	r3, r3, #3
 8008d9e:	f043 0302 	orr.w	r3, r3, #2
 8008da2:	81a3      	strh	r3, [r4, #12]
 8008da4:	e7e2      	b.n	8008d6c <__smakebuf_r+0xc>
 8008da6:	89a3      	ldrh	r3, [r4, #12]
 8008da8:	6020      	str	r0, [r4, #0]
 8008daa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dae:	81a3      	strh	r3, [r4, #12]
 8008db0:	9b01      	ldr	r3, [sp, #4]
 8008db2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008db6:	b15b      	cbz	r3, 8008dd0 <__smakebuf_r+0x70>
 8008db8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dbc:	4630      	mov	r0, r6
 8008dbe:	f000 f81d 	bl	8008dfc <_isatty_r>
 8008dc2:	b128      	cbz	r0, 8008dd0 <__smakebuf_r+0x70>
 8008dc4:	89a3      	ldrh	r3, [r4, #12]
 8008dc6:	f023 0303 	bic.w	r3, r3, #3
 8008dca:	f043 0301 	orr.w	r3, r3, #1
 8008dce:	81a3      	strh	r3, [r4, #12]
 8008dd0:	89a3      	ldrh	r3, [r4, #12]
 8008dd2:	431d      	orrs	r5, r3
 8008dd4:	81a5      	strh	r5, [r4, #12]
 8008dd6:	e7cf      	b.n	8008d78 <__smakebuf_r+0x18>

08008dd8 <_fstat_r>:
 8008dd8:	b538      	push	{r3, r4, r5, lr}
 8008dda:	4d07      	ldr	r5, [pc, #28]	@ (8008df8 <_fstat_r+0x20>)
 8008ddc:	2300      	movs	r3, #0
 8008dde:	4604      	mov	r4, r0
 8008de0:	4608      	mov	r0, r1
 8008de2:	4611      	mov	r1, r2
 8008de4:	602b      	str	r3, [r5, #0]
 8008de6:	f7f8 ff16 	bl	8001c16 <_fstat>
 8008dea:	1c43      	adds	r3, r0, #1
 8008dec:	d102      	bne.n	8008df4 <_fstat_r+0x1c>
 8008dee:	682b      	ldr	r3, [r5, #0]
 8008df0:	b103      	cbz	r3, 8008df4 <_fstat_r+0x1c>
 8008df2:	6023      	str	r3, [r4, #0]
 8008df4:	bd38      	pop	{r3, r4, r5, pc}
 8008df6:	bf00      	nop
 8008df8:	2000081c 	.word	0x2000081c

08008dfc <_isatty_r>:
 8008dfc:	b538      	push	{r3, r4, r5, lr}
 8008dfe:	4d06      	ldr	r5, [pc, #24]	@ (8008e18 <_isatty_r+0x1c>)
 8008e00:	2300      	movs	r3, #0
 8008e02:	4604      	mov	r4, r0
 8008e04:	4608      	mov	r0, r1
 8008e06:	602b      	str	r3, [r5, #0]
 8008e08:	f7f8 ff15 	bl	8001c36 <_isatty>
 8008e0c:	1c43      	adds	r3, r0, #1
 8008e0e:	d102      	bne.n	8008e16 <_isatty_r+0x1a>
 8008e10:	682b      	ldr	r3, [r5, #0]
 8008e12:	b103      	cbz	r3, 8008e16 <_isatty_r+0x1a>
 8008e14:	6023      	str	r3, [r4, #0]
 8008e16:	bd38      	pop	{r3, r4, r5, pc}
 8008e18:	2000081c 	.word	0x2000081c

08008e1c <_init>:
 8008e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1e:	bf00      	nop
 8008e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e22:	bc08      	pop	{r3}
 8008e24:	469e      	mov	lr, r3
 8008e26:	4770      	bx	lr

08008e28 <_fini>:
 8008e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e2a:	bf00      	nop
 8008e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e2e:	bc08      	pop	{r3}
 8008e30:	469e      	mov	lr, r3
 8008e32:	4770      	bx	lr
