
Menu_ssd1306.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fc4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003c28  08009158  08009158  0000a158  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd80  0800cd80  0000e234  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd80  0800cd80  0000dd80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd88  0800cd88  0000e234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd88  0800cd88  0000dd88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cd8c  0800cd8c  0000dd8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000234  20000000  0800cd90  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e234  2**0
                  CONTENTS
 10 .bss          0000064c  20000234  20000234  0000e234  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000880  20000880  0000e234  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e234  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bfef  00000000  00000000  0000e264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d33  00000000  00000000  0001a253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b08  00000000  00000000  0001bf88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000088c  00000000  00000000  0001ca90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021ae4  00000000  00000000  0001d31c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e5b1  00000000  00000000  0003ee00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7ed9  00000000  00000000  0004d3b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000086  00000000  00000000  0011528a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000042a4  00000000  00000000  00115310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  001195b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000234 	.word	0x20000234
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800913c 	.word	0x0800913c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000238 	.word	0x20000238
 80001cc:	0800913c 	.word	0x0800913c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <MPU6050_Init>:
int16_t BMP280_dig_P9;
int32_t t_fine;
float t, p;

/* Functions */
void MPU6050_Init(void) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;
// check device ID WHO_AM_I
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x75, 1, &check, 1, 1000);
 8000fea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fee:	9302      	str	r3, [sp, #8]
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	9301      	str	r3, [sp, #4]
 8000ff4:	1dfb      	adds	r3, r7, #7
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	2275      	movs	r2, #117	@ 0x75
 8000ffc:	21d0      	movs	r1, #208	@ 0xd0
 8000ffe:	4823      	ldr	r0, [pc, #140]	@ (800108c <MPU6050_Init+0xa8>)
 8001000:	f001 fcfe 	bl	8002a00 <HAL_I2C_Mem_Read>
	if (check == 0x68) // 0x68 will be returned by the sensor if OK
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	2b68      	cmp	r3, #104	@ 0x68
 8001008:	d13b      	bne.n	8001082 <MPU6050_Init+0x9e>
			{
// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x6B, 1, &Data, 1, 1000);
 800100e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001012:	9302      	str	r3, [sp, #8]
 8001014:	2301      	movs	r3, #1
 8001016:	9301      	str	r3, [sp, #4]
 8001018:	1dbb      	adds	r3, r7, #6
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2301      	movs	r3, #1
 800101e:	226b      	movs	r2, #107	@ 0x6b
 8001020:	21d0      	movs	r1, #208	@ 0xd0
 8001022:	481a      	ldr	r0, [pc, #104]	@ (800108c <MPU6050_Init+0xa8>)
 8001024:	f001 fbf2 	bl	800280c <HAL_I2C_Mem_Write>
// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8001028:	2307      	movs	r3, #7
 800102a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x19, 1, &Data, 1, 1000);
 800102c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001030:	9302      	str	r3, [sp, #8]
 8001032:	2301      	movs	r3, #1
 8001034:	9301      	str	r3, [sp, #4]
 8001036:	1dbb      	adds	r3, r7, #6
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	2301      	movs	r3, #1
 800103c:	2219      	movs	r2, #25
 800103e:	21d0      	movs	r1, #208	@ 0xd0
 8001040:	4812      	ldr	r0, [pc, #72]	@ (800108c <MPU6050_Init+0xa8>)
 8001042:	f001 fbe3 	bl	800280c <HAL_I2C_Mem_Write>
// Set Gyroscopic configuration in GYRO_CONFIG Register
		Data = 0x00; // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 ̐/s
 8001046:	2300      	movs	r3, #0
 8001048:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x1B, 1, &Data, 1, 1000);
 800104a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800104e:	9302      	str	r3, [sp, #8]
 8001050:	2301      	movs	r3, #1
 8001052:	9301      	str	r3, [sp, #4]
 8001054:	1dbb      	adds	r3, r7, #6
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	221b      	movs	r2, #27
 800105c:	21d0      	movs	r1, #208	@ 0xd0
 800105e:	480b      	ldr	r0, [pc, #44]	@ (800108c <MPU6050_Init+0xa8>)
 8001060:	f001 fbd4 	bl	800280c <HAL_I2C_Mem_Write>
// Set accelerometer configuration in ACCEL_CONFIG Register
		Data = 0x00; // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
 8001064:	2300      	movs	r3, #0
 8001066:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x1C, 1, &Data, 1, 1000);
 8001068:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800106c:	9302      	str	r3, [sp, #8]
 800106e:	2301      	movs	r3, #1
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	1dbb      	adds	r3, r7, #6
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2301      	movs	r3, #1
 8001078:	221c      	movs	r2, #28
 800107a:	21d0      	movs	r1, #208	@ 0xd0
 800107c:	4803      	ldr	r0, [pc, #12]	@ (800108c <MPU6050_Init+0xa8>)
 800107e:	f001 fbc5 	bl	800280c <HAL_I2C_Mem_Write>
	}
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000288 	.word	0x20000288

08001090 <animation>:
		P = P + (var1 + var2 + ((float) BMP280_dig_P7)) / 16;
		*p = P / 100;	//retorna P em hPa (retorno em float)
	}
}

void animation(void) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af02      	add	r7, sp, #8
	ssd1306_Fill(1);
 8001096:	2001      	movs	r0, #1
 8001098:	f003 fa58 	bl	800454c <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0, horse1, 128, 64, 0);
 800109c:	2300      	movs	r3, #0
 800109e:	9301      	str	r3, [sp, #4]
 80010a0:	2340      	movs	r3, #64	@ 0x40
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2380      	movs	r3, #128	@ 0x80
 80010a6:	4a48      	ldr	r2, [pc, #288]	@ (80011c8 <animation+0x138>)
 80010a8:	2100      	movs	r1, #0
 80010aa:	2000      	movs	r0, #0
 80010ac:	f003 fc53 	bl	8004956 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 80010b0:	f003 fa64 	bl	800457c <ssd1306_UpdateScreen>

	ssd1306_Fill(1);
 80010b4:	2001      	movs	r0, #1
 80010b6:	f003 fa49 	bl	800454c <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0, horse2, 128, 64, 0);
 80010ba:	2300      	movs	r3, #0
 80010bc:	9301      	str	r3, [sp, #4]
 80010be:	2340      	movs	r3, #64	@ 0x40
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	2380      	movs	r3, #128	@ 0x80
 80010c4:	4a41      	ldr	r2, [pc, #260]	@ (80011cc <animation+0x13c>)
 80010c6:	2100      	movs	r1, #0
 80010c8:	2000      	movs	r0, #0
 80010ca:	f003 fc44 	bl	8004956 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 80010ce:	f003 fa55 	bl	800457c <ssd1306_UpdateScreen>

	ssd1306_Fill(1);
 80010d2:	2001      	movs	r0, #1
 80010d4:	f003 fa3a 	bl	800454c <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0, horse3, 128, 64, 0);
 80010d8:	2300      	movs	r3, #0
 80010da:	9301      	str	r3, [sp, #4]
 80010dc:	2340      	movs	r3, #64	@ 0x40
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2380      	movs	r3, #128	@ 0x80
 80010e2:	4a3b      	ldr	r2, [pc, #236]	@ (80011d0 <animation+0x140>)
 80010e4:	2100      	movs	r1, #0
 80010e6:	2000      	movs	r0, #0
 80010e8:	f003 fc35 	bl	8004956 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 80010ec:	f003 fa46 	bl	800457c <ssd1306_UpdateScreen>

	ssd1306_Fill(1);
 80010f0:	2001      	movs	r0, #1
 80010f2:	f003 fa2b 	bl	800454c <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0, horse4, 128, 64, 0);
 80010f6:	2300      	movs	r3, #0
 80010f8:	9301      	str	r3, [sp, #4]
 80010fa:	2340      	movs	r3, #64	@ 0x40
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2380      	movs	r3, #128	@ 0x80
 8001100:	4a34      	ldr	r2, [pc, #208]	@ (80011d4 <animation+0x144>)
 8001102:	2100      	movs	r1, #0
 8001104:	2000      	movs	r0, #0
 8001106:	f003 fc26 	bl	8004956 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 800110a:	f003 fa37 	bl	800457c <ssd1306_UpdateScreen>

	ssd1306_Fill(1);
 800110e:	2001      	movs	r0, #1
 8001110:	f003 fa1c 	bl	800454c <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0, horse5, 128, 64, 0);
 8001114:	2300      	movs	r3, #0
 8001116:	9301      	str	r3, [sp, #4]
 8001118:	2340      	movs	r3, #64	@ 0x40
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	2380      	movs	r3, #128	@ 0x80
 800111e:	4a2e      	ldr	r2, [pc, #184]	@ (80011d8 <animation+0x148>)
 8001120:	2100      	movs	r1, #0
 8001122:	2000      	movs	r0, #0
 8001124:	f003 fc17 	bl	8004956 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001128:	f003 fa28 	bl	800457c <ssd1306_UpdateScreen>

	ssd1306_Fill(1);
 800112c:	2001      	movs	r0, #1
 800112e:	f003 fa0d 	bl	800454c <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0, horse6, 128, 64, 0);
 8001132:	2300      	movs	r3, #0
 8001134:	9301      	str	r3, [sp, #4]
 8001136:	2340      	movs	r3, #64	@ 0x40
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2380      	movs	r3, #128	@ 0x80
 800113c:	4a27      	ldr	r2, [pc, #156]	@ (80011dc <animation+0x14c>)
 800113e:	2100      	movs	r1, #0
 8001140:	2000      	movs	r0, #0
 8001142:	f003 fc08 	bl	8004956 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001146:	f003 fa19 	bl	800457c <ssd1306_UpdateScreen>

	ssd1306_Fill(1);
 800114a:	2001      	movs	r0, #1
 800114c:	f003 f9fe 	bl	800454c <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0, horse7, 128, 64, 0);
 8001150:	2300      	movs	r3, #0
 8001152:	9301      	str	r3, [sp, #4]
 8001154:	2340      	movs	r3, #64	@ 0x40
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2380      	movs	r3, #128	@ 0x80
 800115a:	4a21      	ldr	r2, [pc, #132]	@ (80011e0 <animation+0x150>)
 800115c:	2100      	movs	r1, #0
 800115e:	2000      	movs	r0, #0
 8001160:	f003 fbf9 	bl	8004956 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001164:	f003 fa0a 	bl	800457c <ssd1306_UpdateScreen>

	ssd1306_Fill(1);
 8001168:	2001      	movs	r0, #1
 800116a:	f003 f9ef 	bl	800454c <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0, horse8, 128, 64, 0);
 800116e:	2300      	movs	r3, #0
 8001170:	9301      	str	r3, [sp, #4]
 8001172:	2340      	movs	r3, #64	@ 0x40
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	2380      	movs	r3, #128	@ 0x80
 8001178:	4a1a      	ldr	r2, [pc, #104]	@ (80011e4 <animation+0x154>)
 800117a:	2100      	movs	r1, #0
 800117c:	2000      	movs	r0, #0
 800117e:	f003 fbea 	bl	8004956 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001182:	f003 f9fb 	bl	800457c <ssd1306_UpdateScreen>

	ssd1306_Fill(1);
 8001186:	2001      	movs	r0, #1
 8001188:	f003 f9e0 	bl	800454c <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0, horse9, 128, 64, 0);
 800118c:	2300      	movs	r3, #0
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	2340      	movs	r3, #64	@ 0x40
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2380      	movs	r3, #128	@ 0x80
 8001196:	4a14      	ldr	r2, [pc, #80]	@ (80011e8 <animation+0x158>)
 8001198:	2100      	movs	r1, #0
 800119a:	2000      	movs	r0, #0
 800119c:	f003 fbdb 	bl	8004956 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 80011a0:	f003 f9ec 	bl	800457c <ssd1306_UpdateScreen>

	ssd1306_Fill(1);
 80011a4:	2001      	movs	r0, #1
 80011a6:	f003 f9d1 	bl	800454c <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0, horse10, 128, 64, 0);
 80011aa:	2300      	movs	r3, #0
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	2340      	movs	r3, #64	@ 0x40
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2380      	movs	r3, #128	@ 0x80
 80011b4:	4a0d      	ldr	r2, [pc, #52]	@ (80011ec <animation+0x15c>)
 80011b6:	2100      	movs	r1, #0
 80011b8:	2000      	movs	r0, #0
 80011ba:	f003 fbcc 	bl	8004956 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 80011be:	f003 f9dd 	bl	800457c <ssd1306_UpdateScreen>
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	080093c8 	.word	0x080093c8
 80011cc:	080097c8 	.word	0x080097c8
 80011d0:	08009bc8 	.word	0x08009bc8
 80011d4:	08009fc8 	.word	0x08009fc8
 80011d8:	0800a3c8 	.word	0x0800a3c8
 80011dc:	0800a7c8 	.word	0x0800a7c8
 80011e0:	0800abc8 	.word	0x0800abc8
 80011e4:	0800afc8 	.word	0x0800afc8
 80011e8:	0800b3c8 	.word	0x0800b3c8
 80011ec:	0800b7c8 	.word	0x0800b7c8

080011f0 <menu>:

void menu(void) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af02      	add	r7, sp, #8
	ssd1306_Fill(0);
 80011f6:	2000      	movs	r0, #0
 80011f8:	f003 f9a8 	bl	800454c <ssd1306_Fill>
	ssd1306_SetCursor(25, 5);
 80011fc:	2105      	movs	r1, #5
 80011fe:	2019      	movs	r0, #25
 8001200:	f003 faee 	bl	80047e0 <ssd1306_SetCursor>
	ssd1306_WriteString(menu_items[item_sel_previous], Font_7x10, 1);
 8001204:	4b4a      	ldr	r3, [pc, #296]	@ (8001330 <menu+0x140>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4613      	mov	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	4a48      	ldr	r2, [pc, #288]	@ (8001334 <menu+0x144>)
 8001212:	1898      	adds	r0, r3, r2
 8001214:	4b48      	ldr	r3, [pc, #288]	@ (8001338 <menu+0x148>)
 8001216:	2201      	movs	r2, #1
 8001218:	9200      	str	r2, [sp, #0]
 800121a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800121c:	f003 faba 	bl	8004794 <ssd1306_WriteString>
	ssd1306_DrawBitmap(4, 2, bitmap_icons[item_sel_previous], 16, 16, 1);
 8001220:	4b43      	ldr	r3, [pc, #268]	@ (8001330 <menu+0x140>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a45      	ldr	r2, [pc, #276]	@ (800133c <menu+0x14c>)
 8001226:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800122a:	2301      	movs	r3, #1
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	2310      	movs	r3, #16
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2310      	movs	r3, #16
 8001234:	2102      	movs	r1, #2
 8001236:	2004      	movs	r0, #4
 8001238:	f003 fb8d 	bl	8004956 <ssd1306_DrawBitmap>
	ssd1306_SetCursor(25, 5 + 20 + 2);
 800123c:	211b      	movs	r1, #27
 800123e:	2019      	movs	r0, #25
 8001240:	f003 face 	bl	80047e0 <ssd1306_SetCursor>
	ssd1306_WriteString(menu_items[item_selected], Font_7x10, 1);
 8001244:	4b3e      	ldr	r3, [pc, #248]	@ (8001340 <menu+0x150>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4613      	mov	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4a38      	ldr	r2, [pc, #224]	@ (8001334 <menu+0x144>)
 8001252:	1898      	adds	r0, r3, r2
 8001254:	4b38      	ldr	r3, [pc, #224]	@ (8001338 <menu+0x148>)
 8001256:	2201      	movs	r2, #1
 8001258:	9200      	str	r2, [sp, #0]
 800125a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800125c:	f003 fa9a 	bl	8004794 <ssd1306_WriteString>
	ssd1306_DrawBitmap(4, 24, bitmap_icons[item_selected], 16, 16, 1);
 8001260:	4b37      	ldr	r3, [pc, #220]	@ (8001340 <menu+0x150>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a35      	ldr	r2, [pc, #212]	@ (800133c <menu+0x14c>)
 8001266:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800126a:	2301      	movs	r3, #1
 800126c:	9301      	str	r3, [sp, #4]
 800126e:	2310      	movs	r3, #16
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	2310      	movs	r3, #16
 8001274:	2118      	movs	r1, #24
 8001276:	2004      	movs	r0, #4
 8001278:	f003 fb6d 	bl	8004956 <ssd1306_DrawBitmap>
	ssd1306_SetCursor(25, 5 + 20 + 20 + 2 + 2);
 800127c:	2131      	movs	r1, #49	@ 0x31
 800127e:	2019      	movs	r0, #25
 8001280:	f003 faae 	bl	80047e0 <ssd1306_SetCursor>
	ssd1306_WriteString(menu_items[item_sel_next], Font_7x10, 1);
 8001284:	4b2f      	ldr	r3, [pc, #188]	@ (8001344 <menu+0x154>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4613      	mov	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4413      	add	r3, r2
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4a28      	ldr	r2, [pc, #160]	@ (8001334 <menu+0x144>)
 8001292:	1898      	adds	r0, r3, r2
 8001294:	4b28      	ldr	r3, [pc, #160]	@ (8001338 <menu+0x148>)
 8001296:	2201      	movs	r2, #1
 8001298:	9200      	str	r2, [sp, #0]
 800129a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800129c:	f003 fa7a 	bl	8004794 <ssd1306_WriteString>
	ssd1306_DrawBitmap(4, 46, bitmap_icons[item_sel_next], 16, 16, 1);
 80012a0:	4b28      	ldr	r3, [pc, #160]	@ (8001344 <menu+0x154>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a25      	ldr	r2, [pc, #148]	@ (800133c <menu+0x14c>)
 80012a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012aa:	2301      	movs	r3, #1
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	2310      	movs	r3, #16
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	2310      	movs	r3, #16
 80012b4:	212e      	movs	r1, #46	@ 0x2e
 80012b6:	2004      	movs	r0, #4
 80012b8:	f003 fb4d 	bl	8004956 <ssd1306_DrawBitmap>

	ssd1306_DrawBitmap(0, 22, bitmap_item_sel_outline, 128, 21, 1);
 80012bc:	2301      	movs	r3, #1
 80012be:	9301      	str	r3, [sp, #4]
 80012c0:	2315      	movs	r3, #21
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	2380      	movs	r3, #128	@ 0x80
 80012c6:	4a20      	ldr	r2, [pc, #128]	@ (8001348 <menu+0x158>)
 80012c8:	2116      	movs	r1, #22
 80012ca:	2000      	movs	r0, #0
 80012cc:	f003 fb43 	bl	8004956 <ssd1306_DrawBitmap>
	ssd1306_DrawBitmap(128 - 8, 0, bitmap_scrollbar_background, 8, 64, 1);
 80012d0:	2301      	movs	r3, #1
 80012d2:	9301      	str	r3, [sp, #4]
 80012d4:	2340      	movs	r3, #64	@ 0x40
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	2308      	movs	r3, #8
 80012da:	4a1c      	ldr	r2, [pc, #112]	@ (800134c <menu+0x15c>)
 80012dc:	2100      	movs	r1, #0
 80012de:	2078      	movs	r0, #120	@ 0x78
 80012e0:	f003 fb39 	bl	8004956 <ssd1306_DrawBitmap>
	ssd1306_DrawRectangle(125, 64 / NUM_ITEMS * item_selected, 128,
 80012e4:	4b16      	ldr	r3, [pc, #88]	@ (8001340 <menu+0x150>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	011b      	lsls	r3, r3, #4
 80012ec:	b2d9      	uxtb	r1, r3
			(64 / NUM_ITEMS * item_selected + (64 / NUM_ITEMS)), 1);
 80012ee:	4b14      	ldr	r3, [pc, #80]	@ (8001340 <menu+0x150>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	3301      	adds	r3, #1
	ssd1306_DrawRectangle(125, 64 / NUM_ITEMS * item_selected, 128,
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	011b      	lsls	r3, r3, #4
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2201      	movs	r2, #1
 80012fc:	9200      	str	r2, [sp, #0]
 80012fe:	2280      	movs	r2, #128	@ 0x80
 8001300:	207d      	movs	r0, #125	@ 0x7d
 8001302:	f003 faf1 	bl	80048e8 <ssd1306_DrawRectangle>
	ssd1306_DrawRectangle(126, 64 / NUM_ITEMS * item_selected, 127,
 8001306:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <menu+0x150>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	b2db      	uxtb	r3, r3
 800130c:	011b      	lsls	r3, r3, #4
 800130e:	b2d9      	uxtb	r1, r3
			(64 / NUM_ITEMS * item_selected + (64 / NUM_ITEMS)), 1);
 8001310:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <menu+0x150>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	3301      	adds	r3, #1
	ssd1306_DrawRectangle(126, 64 / NUM_ITEMS * item_selected, 127,
 8001316:	b2db      	uxtb	r3, r3
 8001318:	011b      	lsls	r3, r3, #4
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2201      	movs	r2, #1
 800131e:	9200      	str	r2, [sp, #0]
 8001320:	227f      	movs	r2, #127	@ 0x7f
 8001322:	207e      	movs	r0, #126	@ 0x7e
 8001324:	f003 fae0 	bl	80048e8 <ssd1306_DrawRectangle>
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000254 	.word	0x20000254
 8001334:	20000010 	.word	0x20000010
 8001338:	0800c948 	.word	0x0800c948
 800133c:	20000000 	.word	0x20000000
 8001340:	20000250 	.word	0x20000250
 8001344:	20000258 	.word	0x20000258
 8001348:	08009278 	.word	0x08009278
 800134c:	08009238 	.word	0x08009238

08001350 <read_accel>:

void read_accel(void) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af04      	add	r7, sp, #16
	uint8_t check;
	// check device ID WHO_AM_I
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x75, 1, &check, 1, 1000);
 8001356:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800135a:	9302      	str	r3, [sp, #8]
 800135c:	2301      	movs	r3, #1
 800135e:	9301      	str	r3, [sp, #4]
 8001360:	f107 030f 	add.w	r3, r7, #15
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2301      	movs	r3, #1
 8001368:	2275      	movs	r2, #117	@ 0x75
 800136a:	21d0      	movs	r1, #208	@ 0xd0
 800136c:	4861      	ldr	r0, [pc, #388]	@ (80014f4 <read_accel+0x1a4>)
 800136e:	f001 fb47 	bl	8002a00 <HAL_I2C_Mem_Read>
	if (check == 0x70) {
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	2b70      	cmp	r3, #112	@ 0x70
 8001376:	f040 80ae 	bne.w	80014d6 <read_accel+0x186>
		uint8_t Rec_Data[6];
		// Read 6 BYTES of data starting from ACCEL_XOUT_H (0x3B) register
		HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x3B, 1, Rec_Data, 6, 1000);
 800137a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800137e:	9302      	str	r3, [sp, #8]
 8001380:	2306      	movs	r3, #6
 8001382:	9301      	str	r3, [sp, #4]
 8001384:	f107 0308 	add.w	r3, r7, #8
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	2301      	movs	r3, #1
 800138c:	223b      	movs	r2, #59	@ 0x3b
 800138e:	21d0      	movs	r1, #208	@ 0xd0
 8001390:	4858      	ldr	r0, [pc, #352]	@ (80014f4 <read_accel+0x1a4>)
 8001392:	f001 fb35 	bl	8002a00 <HAL_I2C_Mem_Read>
		Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001396:	7a3b      	ldrb	r3, [r7, #8]
 8001398:	021b      	lsls	r3, r3, #8
 800139a:	b21a      	sxth	r2, r3
 800139c:	7a7b      	ldrb	r3, [r7, #9]
 800139e:	b21b      	sxth	r3, r3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b21a      	sxth	r2, r3
 80013a4:	4b54      	ldr	r3, [pc, #336]	@ (80014f8 <read_accel+0x1a8>)
 80013a6:	801a      	strh	r2, [r3, #0]
		Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80013a8:	7abb      	ldrb	r3, [r7, #10]
 80013aa:	021b      	lsls	r3, r3, #8
 80013ac:	b21a      	sxth	r2, r3
 80013ae:	7afb      	ldrb	r3, [r7, #11]
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	4313      	orrs	r3, r2
 80013b4:	b21a      	sxth	r2, r3
 80013b6:	4b51      	ldr	r3, [pc, #324]	@ (80014fc <read_accel+0x1ac>)
 80013b8:	801a      	strh	r2, [r3, #0]
		Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 80013ba:	7b3b      	ldrb	r3, [r7, #12]
 80013bc:	021b      	lsls	r3, r3, #8
 80013be:	b21a      	sxth	r2, r3
 80013c0:	7b7b      	ldrb	r3, [r7, #13]
 80013c2:	b21b      	sxth	r3, r3
 80013c4:	4313      	orrs	r3, r2
 80013c6:	b21a      	sxth	r2, r3
 80013c8:	4b4d      	ldr	r3, [pc, #308]	@ (8001500 <read_accel+0x1b0>)
 80013ca:	801a      	strh	r2, [r3, #0]
		/*** convert the RAW values into acceleration in 'g'
		 we have to divide according to the Full scale value set in FS_SEL
		 I have configured FS_SEL = 0. So I am dividing by 16384.0
		 for more details check ACCEL_CONFIG Register ****/
		Ax = (float) Accel_X_RAW / 16384.0;
 80013cc:	4b4a      	ldr	r3, [pc, #296]	@ (80014f8 <read_accel+0x1a8>)
 80013ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d2:	ee07 3a90 	vmov	s15, r3
 80013d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013da:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8001504 <read_accel+0x1b4>
 80013de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013e2:	4b49      	ldr	r3, [pc, #292]	@ (8001508 <read_accel+0x1b8>)
 80013e4:	edc3 7a00 	vstr	s15, [r3]
		Ay = (float) Accel_Y_RAW / 16384.0;
 80013e8:	4b44      	ldr	r3, [pc, #272]	@ (80014fc <read_accel+0x1ac>)
 80013ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ee:	ee07 3a90 	vmov	s15, r3
 80013f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013f6:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8001504 <read_accel+0x1b4>
 80013fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013fe:	4b43      	ldr	r3, [pc, #268]	@ (800150c <read_accel+0x1bc>)
 8001400:	edc3 7a00 	vstr	s15, [r3]
		Az = (float) Accel_Z_RAW / 16384.0;
 8001404:	4b3e      	ldr	r3, [pc, #248]	@ (8001500 <read_accel+0x1b0>)
 8001406:	f9b3 3000 	ldrsh.w	r3, [r3]
 800140a:	ee07 3a90 	vmov	s15, r3
 800140e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001412:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 8001504 <read_accel+0x1b4>
 8001416:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800141a:	4b3d      	ldr	r3, [pc, #244]	@ (8001510 <read_accel+0x1c0>)
 800141c:	edc3 7a00 	vstr	s15, [r3]

		char buffer_float[7];
		ssd1306_Fill(0); //Seta todos os pixels do buffer para branco
 8001420:	2000      	movs	r0, #0
 8001422:	f003 f893 	bl	800454c <ssd1306_Fill>
		ssd1306_SetCursor(5, 16); //Posiciona o "cursor" no pixel correspondente
 8001426:	2110      	movs	r1, #16
 8001428:	2005      	movs	r0, #5
 800142a:	f003 f9d9 	bl	80047e0 <ssd1306_SetCursor>
		ssd1306_WriteString("Accel x: ", Font_6x8, 1); //Escreve o texto no buffer
 800142e:	4b39      	ldr	r3, [pc, #228]	@ (8001514 <read_accel+0x1c4>)
 8001430:	2201      	movs	r2, #1
 8001432:	9200      	str	r2, [sp, #0]
 8001434:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001436:	4838      	ldr	r0, [pc, #224]	@ (8001518 <read_accel+0x1c8>)
 8001438:	f003 f9ac 	bl	8004794 <ssd1306_WriteString>
		sprintf(buffer_float, "%.1f", Ax);
 800143c:	4b32      	ldr	r3, [pc, #200]	@ (8001508 <read_accel+0x1b8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff f881 	bl	8000548 <__aeabi_f2d>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4638      	mov	r0, r7
 800144c:	4933      	ldr	r1, [pc, #204]	@ (800151c <read_accel+0x1cc>)
 800144e:	f004 fa3d 	bl	80058cc <siprintf>
		ssd1306_WriteString(buffer_float, Font_6x8, 1); //Escreve o texto no buffer
 8001452:	4b30      	ldr	r3, [pc, #192]	@ (8001514 <read_accel+0x1c4>)
 8001454:	4638      	mov	r0, r7
 8001456:	2201      	movs	r2, #1
 8001458:	9200      	str	r2, [sp, #0]
 800145a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800145c:	f003 f99a 	bl	8004794 <ssd1306_WriteString>
		ssd1306_SetCursor(5, 30); //Posiciona o "cursor" no pixel correspondente
 8001460:	211e      	movs	r1, #30
 8001462:	2005      	movs	r0, #5
 8001464:	f003 f9bc 	bl	80047e0 <ssd1306_SetCursor>
		ssd1306_WriteString("Accel y: ", Font_6x8, 1); //Escreve o texto no buffer
 8001468:	4b2a      	ldr	r3, [pc, #168]	@ (8001514 <read_accel+0x1c4>)
 800146a:	2201      	movs	r2, #1
 800146c:	9200      	str	r2, [sp, #0]
 800146e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001470:	482b      	ldr	r0, [pc, #172]	@ (8001520 <read_accel+0x1d0>)
 8001472:	f003 f98f 	bl	8004794 <ssd1306_WriteString>
		sprintf(buffer_float, "%.1f", Ay);
 8001476:	4b25      	ldr	r3, [pc, #148]	@ (800150c <read_accel+0x1bc>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f864 	bl	8000548 <__aeabi_f2d>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4638      	mov	r0, r7
 8001486:	4925      	ldr	r1, [pc, #148]	@ (800151c <read_accel+0x1cc>)
 8001488:	f004 fa20 	bl	80058cc <siprintf>
		ssd1306_WriteString(buffer_float, Font_6x8, 1); //Escreve o texto no buffer
 800148c:	4b21      	ldr	r3, [pc, #132]	@ (8001514 <read_accel+0x1c4>)
 800148e:	4638      	mov	r0, r7
 8001490:	2201      	movs	r2, #1
 8001492:	9200      	str	r2, [sp, #0]
 8001494:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001496:	f003 f97d 	bl	8004794 <ssd1306_WriteString>
		ssd1306_SetCursor(5, 44); //Posiciona o "cursor" no pixel correspondente
 800149a:	212c      	movs	r1, #44	@ 0x2c
 800149c:	2005      	movs	r0, #5
 800149e:	f003 f99f 	bl	80047e0 <ssd1306_SetCursor>
		ssd1306_WriteString("Accel z: ", Font_6x8, 1); //Escreve o texto no buffer
 80014a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001514 <read_accel+0x1c4>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	9200      	str	r2, [sp, #0]
 80014a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014aa:	481e      	ldr	r0, [pc, #120]	@ (8001524 <read_accel+0x1d4>)
 80014ac:	f003 f972 	bl	8004794 <ssd1306_WriteString>
		sprintf(buffer_float, "%.1f", Az);
 80014b0:	4b17      	ldr	r3, [pc, #92]	@ (8001510 <read_accel+0x1c0>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff f847 	bl	8000548 <__aeabi_f2d>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4638      	mov	r0, r7
 80014c0:	4916      	ldr	r1, [pc, #88]	@ (800151c <read_accel+0x1cc>)
 80014c2:	f004 fa03 	bl	80058cc <siprintf>
		ssd1306_WriteString(buffer_float, Font_6x8, 1); //Escreve o texto no buffer
 80014c6:	4b13      	ldr	r3, [pc, #76]	@ (8001514 <read_accel+0x1c4>)
 80014c8:	4638      	mov	r0, r7
 80014ca:	2201      	movs	r2, #1
 80014cc:	9200      	str	r2, [sp, #0]
 80014ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014d0:	f003 f960 	bl	8004794 <ssd1306_WriteString>

	} else {
		ssd1306_SetCursor(5, 30); //Posiciona o "cursor" no pixel correspondente
		ssd1306_WriteString("INERCIAL OFF", Font_6x8, 1); //Escreve o texto no buffer
	}
}
 80014d4:	e00a      	b.n	80014ec <read_accel+0x19c>
		ssd1306_SetCursor(5, 30); //Posiciona o "cursor" no pixel correspondente
 80014d6:	211e      	movs	r1, #30
 80014d8:	2005      	movs	r0, #5
 80014da:	f003 f981 	bl	80047e0 <ssd1306_SetCursor>
		ssd1306_WriteString("INERCIAL OFF", Font_6x8, 1); //Escreve o texto no buffer
 80014de:	4b0d      	ldr	r3, [pc, #52]	@ (8001514 <read_accel+0x1c4>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	9200      	str	r2, [sp, #0]
 80014e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014e6:	4810      	ldr	r0, [pc, #64]	@ (8001528 <read_accel+0x1d8>)
 80014e8:	f003 f954 	bl	8004794 <ssd1306_WriteString>
}
 80014ec:	bf00      	nop
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000288 	.word	0x20000288
 80014f8:	20000264 	.word	0x20000264
 80014fc:	20000266 	.word	0x20000266
 8001500:	20000268 	.word	0x20000268
 8001504:	46800000 	.word	0x46800000
 8001508:	20000270 	.word	0x20000270
 800150c:	20000274 	.word	0x20000274
 8001510:	20000278 	.word	0x20000278
 8001514:	0800c93c 	.word	0x0800c93c
 8001518:	08009158 	.word	0x08009158
 800151c:	08009164 	.word	0x08009164
 8001520:	0800916c 	.word	0x0800916c
 8001524:	08009178 	.word	0x08009178
 8001528:	08009184 	.word	0x08009184

0800152c <read_gyro>:

void read_gyro(void) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	@ 0x28
 8001530:	af04      	add	r7, sp, #16
	uint8_t check;
	// check device ID WHO_AM_I
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x75, 1, &check, 1, 1000);
 8001532:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001536:	9302      	str	r3, [sp, #8]
 8001538:	2301      	movs	r3, #1
 800153a:	9301      	str	r3, [sp, #4]
 800153c:	f107 0317 	add.w	r3, r7, #23
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	2301      	movs	r3, #1
 8001544:	2275      	movs	r2, #117	@ 0x75
 8001546:	21d0      	movs	r1, #208	@ 0xd0
 8001548:	486f      	ldr	r0, [pc, #444]	@ (8001708 <read_gyro+0x1dc>)
 800154a:	f001 fa59 	bl	8002a00 <HAL_I2C_Mem_Read>
	if (check == 0x70) {
 800154e:	7dfb      	ldrb	r3, [r7, #23]
 8001550:	2b70      	cmp	r3, #112	@ 0x70
 8001552:	f040 80c9 	bne.w	80016e8 <read_gyro+0x1bc>

		uint8_t Rec_Data[12];
		// Read 6 BYTES of data starting from ACCEL_XOUT_H (0x3B) register
		HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x3B, 1, Rec_Data, 12, 1000);
 8001556:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800155a:	9302      	str	r3, [sp, #8]
 800155c:	230c      	movs	r3, #12
 800155e:	9301      	str	r3, [sp, #4]
 8001560:	f107 0308 	add.w	r3, r7, #8
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	2301      	movs	r3, #1
 8001568:	223b      	movs	r2, #59	@ 0x3b
 800156a:	21d0      	movs	r1, #208	@ 0xd0
 800156c:	4866      	ldr	r0, [pc, #408]	@ (8001708 <read_gyro+0x1dc>)
 800156e:	f001 fa47 	bl	8002a00 <HAL_I2C_Mem_Read>
		Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001572:	7a3b      	ldrb	r3, [r7, #8]
 8001574:	021b      	lsls	r3, r3, #8
 8001576:	b21a      	sxth	r2, r3
 8001578:	7a7b      	ldrb	r3, [r7, #9]
 800157a:	b21b      	sxth	r3, r3
 800157c:	4313      	orrs	r3, r2
 800157e:	b21a      	sxth	r2, r3
 8001580:	4b62      	ldr	r3, [pc, #392]	@ (800170c <read_gyro+0x1e0>)
 8001582:	801a      	strh	r2, [r3, #0]
		Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001584:	7abb      	ldrb	r3, [r7, #10]
 8001586:	021b      	lsls	r3, r3, #8
 8001588:	b21a      	sxth	r2, r3
 800158a:	7afb      	ldrb	r3, [r7, #11]
 800158c:	b21b      	sxth	r3, r3
 800158e:	4313      	orrs	r3, r2
 8001590:	b21a      	sxth	r2, r3
 8001592:	4b5f      	ldr	r3, [pc, #380]	@ (8001710 <read_gyro+0x1e4>)
 8001594:	801a      	strh	r2, [r3, #0]
		Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001596:	7b3b      	ldrb	r3, [r7, #12]
 8001598:	021b      	lsls	r3, r3, #8
 800159a:	b21a      	sxth	r2, r3
 800159c:	7b7b      	ldrb	r3, [r7, #13]
 800159e:	b21b      	sxth	r3, r3
 80015a0:	4313      	orrs	r3, r2
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	4b5b      	ldr	r3, [pc, #364]	@ (8001714 <read_gyro+0x1e8>)
 80015a6:	801a      	strh	r2, [r3, #0]
		Gyro_X_RAW = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 80015a8:	7bbb      	ldrb	r3, [r7, #14]
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	b21a      	sxth	r2, r3
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	b21b      	sxth	r3, r3
 80015b2:	4313      	orrs	r3, r2
 80015b4:	b21a      	sxth	r2, r3
 80015b6:	4b58      	ldr	r3, [pc, #352]	@ (8001718 <read_gyro+0x1ec>)
 80015b8:	801a      	strh	r2, [r3, #0]
		Gyro_Y_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 80015ba:	7c3b      	ldrb	r3, [r7, #16]
 80015bc:	021b      	lsls	r3, r3, #8
 80015be:	b21a      	sxth	r2, r3
 80015c0:	7c7b      	ldrb	r3, [r7, #17]
 80015c2:	b21b      	sxth	r3, r3
 80015c4:	4313      	orrs	r3, r2
 80015c6:	b21a      	sxth	r2, r3
 80015c8:	4b54      	ldr	r3, [pc, #336]	@ (800171c <read_gyro+0x1f0>)
 80015ca:	801a      	strh	r2, [r3, #0]
		Gyro_Z_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 80015cc:	7cbb      	ldrb	r3, [r7, #18]
 80015ce:	021b      	lsls	r3, r3, #8
 80015d0:	b21a      	sxth	r2, r3
 80015d2:	7cfb      	ldrb	r3, [r7, #19]
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	4313      	orrs	r3, r2
 80015d8:	b21a      	sxth	r2, r3
 80015da:	4b51      	ldr	r3, [pc, #324]	@ (8001720 <read_gyro+0x1f4>)
 80015dc:	801a      	strh	r2, [r3, #0]
		/*** convert the RAW values into acceleration in 'g'
		 we have to divide according to the Full scale value set in FS_SEL
		 I have configured FS_SEL = 0. So I am dividing by 16384.0
		 for more details check ACCEL_CONFIG Register ****/
		gx = (float) Gyro_X_RAW / 131.0;
 80015de:	4b4e      	ldr	r3, [pc, #312]	@ (8001718 <read_gyro+0x1ec>)
 80015e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e4:	ee07 3a90 	vmov	s15, r3
 80015e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ec:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8001724 <read_gyro+0x1f8>
 80015f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015f4:	4b4c      	ldr	r3, [pc, #304]	@ (8001728 <read_gyro+0x1fc>)
 80015f6:	edc3 7a00 	vstr	s15, [r3]
		gy = (float) Gyro_Y_RAW / 131.0;
 80015fa:	4b48      	ldr	r3, [pc, #288]	@ (800171c <read_gyro+0x1f0>)
 80015fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001600:	ee07 3a90 	vmov	s15, r3
 8001604:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001608:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8001724 <read_gyro+0x1f8>
 800160c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001610:	4b46      	ldr	r3, [pc, #280]	@ (800172c <read_gyro+0x200>)
 8001612:	edc3 7a00 	vstr	s15, [r3]
		gz = (float) Gyro_Z_RAW / 131.0;
 8001616:	4b42      	ldr	r3, [pc, #264]	@ (8001720 <read_gyro+0x1f4>)
 8001618:	f9b3 3000 	ldrsh.w	r3, [r3]
 800161c:	ee07 3a90 	vmov	s15, r3
 8001620:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001624:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8001724 <read_gyro+0x1f8>
 8001628:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800162c:	4b40      	ldr	r3, [pc, #256]	@ (8001730 <read_gyro+0x204>)
 800162e:	edc3 7a00 	vstr	s15, [r3]
		char buffer_floats[7];
		ssd1306_Fill(0); //Seta todos os pixels do buffer para branco
 8001632:	2000      	movs	r0, #0
 8001634:	f002 ff8a 	bl	800454c <ssd1306_Fill>
		ssd1306_SetCursor(5, 16); //Posiciona o "cursor" no pixel correspondente
 8001638:	2110      	movs	r1, #16
 800163a:	2005      	movs	r0, #5
 800163c:	f003 f8d0 	bl	80047e0 <ssd1306_SetCursor>
		ssd1306_WriteString("Gyro x: ", Font_6x8, 1); //Escreve o texto no buffer
 8001640:	4b3c      	ldr	r3, [pc, #240]	@ (8001734 <read_gyro+0x208>)
 8001642:	2201      	movs	r2, #1
 8001644:	9200      	str	r2, [sp, #0]
 8001646:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001648:	483b      	ldr	r0, [pc, #236]	@ (8001738 <read_gyro+0x20c>)
 800164a:	f003 f8a3 	bl	8004794 <ssd1306_WriteString>
		sprintf(buffer_floats, "%.1f", gx);
 800164e:	4b36      	ldr	r3, [pc, #216]	@ (8001728 <read_gyro+0x1fc>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe ff78 	bl	8000548 <__aeabi_f2d>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4638      	mov	r0, r7
 800165e:	4937      	ldr	r1, [pc, #220]	@ (800173c <read_gyro+0x210>)
 8001660:	f004 f934 	bl	80058cc <siprintf>
		ssd1306_WriteString(buffer_floats, Font_6x8, 1); //Escreve o texto no buffer
 8001664:	4b33      	ldr	r3, [pc, #204]	@ (8001734 <read_gyro+0x208>)
 8001666:	4638      	mov	r0, r7
 8001668:	2201      	movs	r2, #1
 800166a:	9200      	str	r2, [sp, #0]
 800166c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800166e:	f003 f891 	bl	8004794 <ssd1306_WriteString>
		ssd1306_SetCursor(5, 30); //Posiciona o "cursor" no pixel correspondente
 8001672:	211e      	movs	r1, #30
 8001674:	2005      	movs	r0, #5
 8001676:	f003 f8b3 	bl	80047e0 <ssd1306_SetCursor>
		ssd1306_WriteString("Gyro y: ", Font_6x8, 1); //Escreve o texto no buffer
 800167a:	4b2e      	ldr	r3, [pc, #184]	@ (8001734 <read_gyro+0x208>)
 800167c:	2201      	movs	r2, #1
 800167e:	9200      	str	r2, [sp, #0]
 8001680:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001682:	482f      	ldr	r0, [pc, #188]	@ (8001740 <read_gyro+0x214>)
 8001684:	f003 f886 	bl	8004794 <ssd1306_WriteString>
		sprintf(buffer_floats, "%.1f", gy);
 8001688:	4b28      	ldr	r3, [pc, #160]	@ (800172c <read_gyro+0x200>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe ff5b 	bl	8000548 <__aeabi_f2d>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4638      	mov	r0, r7
 8001698:	4928      	ldr	r1, [pc, #160]	@ (800173c <read_gyro+0x210>)
 800169a:	f004 f917 	bl	80058cc <siprintf>
		ssd1306_WriteString(buffer_floats, Font_6x8, 1); //Escreve o texto no buffer
 800169e:	4b25      	ldr	r3, [pc, #148]	@ (8001734 <read_gyro+0x208>)
 80016a0:	4638      	mov	r0, r7
 80016a2:	2201      	movs	r2, #1
 80016a4:	9200      	str	r2, [sp, #0]
 80016a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016a8:	f003 f874 	bl	8004794 <ssd1306_WriteString>
		ssd1306_SetCursor(5, 44); //Posiciona o "cursor" no pixel correspondente
 80016ac:	212c      	movs	r1, #44	@ 0x2c
 80016ae:	2005      	movs	r0, #5
 80016b0:	f003 f896 	bl	80047e0 <ssd1306_SetCursor>
		ssd1306_WriteString("Gyro z: ", Font_6x8, 1); //Escreve o texto no buffer
 80016b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001734 <read_gyro+0x208>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	9200      	str	r2, [sp, #0]
 80016ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016bc:	4821      	ldr	r0, [pc, #132]	@ (8001744 <read_gyro+0x218>)
 80016be:	f003 f869 	bl	8004794 <ssd1306_WriteString>
		sprintf(buffer_floats, "%.1f", gz);
 80016c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001730 <read_gyro+0x204>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7fe ff3e 	bl	8000548 <__aeabi_f2d>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4638      	mov	r0, r7
 80016d2:	491a      	ldr	r1, [pc, #104]	@ (800173c <read_gyro+0x210>)
 80016d4:	f004 f8fa 	bl	80058cc <siprintf>
		ssd1306_WriteString(buffer_floats, Font_6x8, 1); //Escreve o texto no bufferr
 80016d8:	4b16      	ldr	r3, [pc, #88]	@ (8001734 <read_gyro+0x208>)
 80016da:	4638      	mov	r0, r7
 80016dc:	2201      	movs	r2, #1
 80016de:	9200      	str	r2, [sp, #0]
 80016e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016e2:	f003 f857 	bl	8004794 <ssd1306_WriteString>

	} else {
		ssd1306_SetCursor(5, 30); //Posiciona o "cursor" no pixel correspondente
		ssd1306_WriteString("INERCIAL OFF", Font_6x8, 1); //Escreve o texto no buffer
	}
}
 80016e6:	e00a      	b.n	80016fe <read_gyro+0x1d2>
		ssd1306_SetCursor(5, 30); //Posiciona o "cursor" no pixel correspondente
 80016e8:	211e      	movs	r1, #30
 80016ea:	2005      	movs	r0, #5
 80016ec:	f003 f878 	bl	80047e0 <ssd1306_SetCursor>
		ssd1306_WriteString("INERCIAL OFF", Font_6x8, 1); //Escreve o texto no buffer
 80016f0:	4b10      	ldr	r3, [pc, #64]	@ (8001734 <read_gyro+0x208>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	9200      	str	r2, [sp, #0]
 80016f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016f8:	4813      	ldr	r0, [pc, #76]	@ (8001748 <read_gyro+0x21c>)
 80016fa:	f003 f84b 	bl	8004794 <ssd1306_WriteString>
}
 80016fe:	bf00      	nop
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000288 	.word	0x20000288
 800170c:	20000264 	.word	0x20000264
 8001710:	20000266 	.word	0x20000266
 8001714:	20000268 	.word	0x20000268
 8001718:	2000026a 	.word	0x2000026a
 800171c:	2000026c 	.word	0x2000026c
 8001720:	2000026e 	.word	0x2000026e
 8001724:	43030000 	.word	0x43030000
 8001728:	2000027c 	.word	0x2000027c
 800172c:	20000280 	.word	0x20000280
 8001730:	20000284 	.word	0x20000284
 8001734:	0800c93c 	.word	0x0800c93c
 8001738:	08009194 	.word	0x08009194
 800173c:	08009164 	.word	0x08009164
 8001740:	080091a0 	.word	0x080091a0
 8001744:	080091ac 	.word	0x080091ac
 8001748:	08009184 	.word	0x08009184

0800174c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001750:	f000 fbe8 	bl	8001f24 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001754:	f000 f8c4 	bl	80018e0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001758:	f000 f978 	bl	8001a4c <MX_GPIO_Init>
	MX_I2C1_Init();
 800175c:	f000 f91e 	bl	800199c <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8001760:	f000 f94a 	bl	80019f8 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	ssd1306_Init();
 8001764:	f002 fe88 	bl	8004478 <ssd1306_Init>
	MPU6050_Init();
 8001768:	f7ff fc3c 	bl	8000fe4 <MPU6050_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		if (current_screen == 0) {
 800176c:	4b56      	ldr	r3, [pc, #344]	@ (80018c8 <main+0x17c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d15d      	bne.n	8001830 <main+0xe4>

			if (HAL_GPIO_ReadPin(GPIOE, ENTER_BUTTON)) {
 8001774:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001778:	4854      	ldr	r0, [pc, #336]	@ (80018cc <main+0x180>)
 800177a:	f000 feeb 	bl	8002554 <HAL_GPIO_ReadPin>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d00c      	beq.n	800179e <main+0x52>
				current_screen = !current_screen;
 8001784:	4b50      	ldr	r3, [pc, #320]	@ (80018c8 <main+0x17c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	bf0c      	ite	eq
 800178c:	2301      	moveq	r3, #1
 800178e:	2300      	movne	r3, #0
 8001790:	b2db      	uxtb	r3, r3
 8001792:	461a      	mov	r2, r3
 8001794:	4b4c      	ldr	r3, [pc, #304]	@ (80018c8 <main+0x17c>)
 8001796:	601a      	str	r2, [r3, #0]
				HAL_Delay(200);
 8001798:	20c8      	movs	r0, #200	@ 0xc8
 800179a:	f000 fc35 	bl	8002008 <HAL_Delay>
			}

			if (HAL_GPIO_ReadPin(GPIOE, UP_BUTTON)) {
 800179e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017a2:	484a      	ldr	r0, [pc, #296]	@ (80018cc <main+0x180>)
 80017a4:	f000 fed6 	bl	8002554 <HAL_GPIO_ReadPin>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d01b      	beq.n	80017e6 <main+0x9a>
				cursor--;
 80017ae:	4b48      	ldr	r3, [pc, #288]	@ (80018d0 <main+0x184>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	4a46      	ldr	r2, [pc, #280]	@ (80018d0 <main+0x184>)
 80017b6:	6013      	str	r3, [r2, #0]
				if (cursor == -1)
 80017b8:	4b45      	ldr	r3, [pc, #276]	@ (80018d0 <main+0x184>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c0:	d102      	bne.n	80017c8 <main+0x7c>
					cursor = 3;
 80017c2:	4b43      	ldr	r3, [pc, #268]	@ (80018d0 <main+0x184>)
 80017c4:	2203      	movs	r2, #3
 80017c6:	601a      	str	r2, [r3, #0]
				item_selected -= 1;
 80017c8:	4b42      	ldr	r3, [pc, #264]	@ (80018d4 <main+0x188>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	3b01      	subs	r3, #1
 80017ce:	4a41      	ldr	r2, [pc, #260]	@ (80018d4 <main+0x188>)
 80017d0:	6013      	str	r3, [r2, #0]
				if (item_selected < 0)
 80017d2:	4b40      	ldr	r3, [pc, #256]	@ (80018d4 <main+0x188>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	da02      	bge.n	80017e0 <main+0x94>
					item_selected = NUM_ITEMS - 1;
 80017da:	4b3e      	ldr	r3, [pc, #248]	@ (80018d4 <main+0x188>)
 80017dc:	2203      	movs	r2, #3
 80017de:	601a      	str	r2, [r3, #0]
				HAL_Delay(100);
 80017e0:	2064      	movs	r0, #100	@ 0x64
 80017e2:	f000 fc11 	bl	8002008 <HAL_Delay>
			}

			if (HAL_GPIO_ReadPin(GPIOE, DOWN_BUTTON)) {
 80017e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017ea:	4838      	ldr	r0, [pc, #224]	@ (80018cc <main+0x180>)
 80017ec:	f000 feb2 	bl	8002554 <HAL_GPIO_ReadPin>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d01a      	beq.n	800182c <main+0xe0>
				cursor++;
 80017f6:	4b36      	ldr	r3, [pc, #216]	@ (80018d0 <main+0x184>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	3301      	adds	r3, #1
 80017fc:	4a34      	ldr	r2, [pc, #208]	@ (80018d0 <main+0x184>)
 80017fe:	6013      	str	r3, [r2, #0]
				if (cursor == 4)
 8001800:	4b33      	ldr	r3, [pc, #204]	@ (80018d0 <main+0x184>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b04      	cmp	r3, #4
 8001806:	d102      	bne.n	800180e <main+0xc2>
					cursor = 0;
 8001808:	4b31      	ldr	r3, [pc, #196]	@ (80018d0 <main+0x184>)
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
				item_selected += 1; // select next item
 800180e:	4b31      	ldr	r3, [pc, #196]	@ (80018d4 <main+0x188>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	3301      	adds	r3, #1
 8001814:	4a2f      	ldr	r2, [pc, #188]	@ (80018d4 <main+0x188>)
 8001816:	6013      	str	r3, [r2, #0]
				if (item_selected >= NUM_ITEMS)
 8001818:	4b2e      	ldr	r3, [pc, #184]	@ (80018d4 <main+0x188>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b03      	cmp	r3, #3
 800181e:	dd02      	ble.n	8001826 <main+0xda>
					item_selected = 0;
 8001820:	4b2c      	ldr	r3, [pc, #176]	@ (80018d4 <main+0x188>)
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
				HAL_Delay(100);
 8001826:	2064      	movs	r0, #100	@ 0x64
 8001828:	f000 fbee 	bl	8002008 <HAL_Delay>
			}
			menu();
 800182c:	f7ff fce0 	bl	80011f0 <menu>
		}

		if (current_screen) {
 8001830:	4b25      	ldr	r3, [pc, #148]	@ (80018c8 <main+0x17c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d02b      	beq.n	8001890 <main+0x144>

			if (HAL_GPIO_ReadPin(GPIOE, ENTER_BUTTON)) {
 8001838:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800183c:	4823      	ldr	r0, [pc, #140]	@ (80018cc <main+0x180>)
 800183e:	f000 fe89 	bl	8002554 <HAL_GPIO_ReadPin>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00c      	beq.n	8001862 <main+0x116>
				current_screen = !current_screen;
 8001848:	4b1f      	ldr	r3, [pc, #124]	@ (80018c8 <main+0x17c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	bf0c      	ite	eq
 8001850:	2301      	moveq	r3, #1
 8001852:	2300      	movne	r3, #0
 8001854:	b2db      	uxtb	r3, r3
 8001856:	461a      	mov	r2, r3
 8001858:	4b1b      	ldr	r3, [pc, #108]	@ (80018c8 <main+0x17c>)
 800185a:	601a      	str	r2, [r3, #0]
				HAL_Delay(200);
 800185c:	20c8      	movs	r0, #200	@ 0xc8
 800185e:	f000 fbd3 	bl	8002008 <HAL_Delay>
			}

			ssd1306_Fill(0);
 8001862:	2000      	movs	r0, #0
 8001864:	f002 fe72 	bl	800454c <ssd1306_Fill>

			if (item_selected == 0) {
 8001868:	4b1a      	ldr	r3, [pc, #104]	@ (80018d4 <main+0x188>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d102      	bne.n	8001876 <main+0x12a>
				read_accel();
 8001870:	f7ff fd6e 	bl	8001350 <read_accel>
 8001874:	e00c      	b.n	8001890 <main+0x144>
			}

			else if (item_selected == 1) {
 8001876:	4b17      	ldr	r3, [pc, #92]	@ (80018d4 <main+0x188>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d102      	bne.n	8001884 <main+0x138>
				read_gyro();
 800187e:	f7ff fe55 	bl	800152c <read_gyro>
 8001882:	e005      	b.n	8001890 <main+0x144>

			} else if (item_selected == 2)
 8001884:	4b13      	ldr	r3, [pc, #76]	@ (80018d4 <main+0x188>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b02      	cmp	r3, #2
 800188a:	d101      	bne.n	8001890 <main+0x144>
				animation();
 800188c:	f7ff fc00 	bl	8001090 <animation>
		}

		item_sel_previous = item_selected - 1;
 8001890:	4b10      	ldr	r3, [pc, #64]	@ (80018d4 <main+0x188>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	3b01      	subs	r3, #1
 8001896:	4a10      	ldr	r2, [pc, #64]	@ (80018d8 <main+0x18c>)
 8001898:	6013      	str	r3, [r2, #0]
		if (item_sel_previous < 0) {
 800189a:	4b0f      	ldr	r3, [pc, #60]	@ (80018d8 <main+0x18c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	da02      	bge.n	80018a8 <main+0x15c>
			item_sel_previous = NUM_ITEMS - 1;
 80018a2:	4b0d      	ldr	r3, [pc, #52]	@ (80018d8 <main+0x18c>)
 80018a4:	2203      	movs	r2, #3
 80018a6:	601a      	str	r2, [r3, #0]
		} // previous item would be below first = make it the last
		item_sel_next = item_selected + 1;
 80018a8:	4b0a      	ldr	r3, [pc, #40]	@ (80018d4 <main+0x188>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	3301      	adds	r3, #1
 80018ae:	4a0b      	ldr	r2, [pc, #44]	@ (80018dc <main+0x190>)
 80018b0:	6013      	str	r3, [r2, #0]
		if (item_sel_next >= NUM_ITEMS) {
 80018b2:	4b0a      	ldr	r3, [pc, #40]	@ (80018dc <main+0x190>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2b03      	cmp	r3, #3
 80018b8:	dd02      	ble.n	80018c0 <main+0x174>
			item_sel_next = 0;
 80018ba:	4b08      	ldr	r3, [pc, #32]	@ (80018dc <main+0x190>)
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
		} // next item would be after last = make it the first
		ssd1306_UpdateScreen();
 80018c0:	f002 fe5c 	bl	800457c <ssd1306_UpdateScreen>
		if (current_screen == 0) {
 80018c4:	e752      	b.n	800176c <main+0x20>
 80018c6:	bf00      	nop
 80018c8:	2000025c 	.word	0x2000025c
 80018cc:	40021000 	.word	0x40021000
 80018d0:	20000260 	.word	0x20000260
 80018d4:	20000250 	.word	0x20000250
 80018d8:	20000254 	.word	0x20000254
 80018dc:	20000258 	.word	0x20000258

080018e0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b094      	sub	sp, #80	@ 0x50
 80018e4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80018e6:	f107 0320 	add.w	r3, r7, #32
 80018ea:	2230      	movs	r2, #48	@ 0x30
 80018ec:	2100      	movs	r1, #0
 80018ee:	4618      	mov	r0, r3
 80018f0:	f004 f869 	bl	80059c6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80018f4:	f107 030c 	add.w	r3, r7, #12
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001904:	2300      	movs	r3, #0
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	4b22      	ldr	r3, [pc, #136]	@ (8001994 <SystemClock_Config+0xb4>)
 800190a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190c:	4a21      	ldr	r2, [pc, #132]	@ (8001994 <SystemClock_Config+0xb4>)
 800190e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001912:	6413      	str	r3, [r2, #64]	@ 0x40
 8001914:	4b1f      	ldr	r3, [pc, #124]	@ (8001994 <SystemClock_Config+0xb4>)
 8001916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001918:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001920:	2300      	movs	r3, #0
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	4b1c      	ldr	r3, [pc, #112]	@ (8001998 <SystemClock_Config+0xb8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a1b      	ldr	r2, [pc, #108]	@ (8001998 <SystemClock_Config+0xb8>)
 800192a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	4b19      	ldr	r3, [pc, #100]	@ (8001998 <SystemClock_Config+0xb8>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001938:	607b      	str	r3, [r7, #4]
 800193a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800193c:	2302      	movs	r3, #2
 800193e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001940:	2301      	movs	r3, #1
 8001942:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001944:	2310      	movs	r3, #16
 8001946:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001948:	2300      	movs	r3, #0
 800194a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800194c:	f107 0320 	add.w	r3, r7, #32
 8001950:	4618      	mov	r0, r3
 8001952:	f001 fe3b 	bl	80035cc <HAL_RCC_OscConfig>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <SystemClock_Config+0x80>
		Error_Handler();
 800195c:	f000 f8f2 	bl	8001b44 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001960:	230f      	movs	r3, #15
 8001962:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001964:	2300      	movs	r3, #0
 8001966:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800196c:	2300      	movs	r3, #0
 800196e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001974:	f107 030c 	add.w	r3, r7, #12
 8001978:	2100      	movs	r1, #0
 800197a:	4618      	mov	r0, r3
 800197c:	f002 f89e 	bl	8003abc <HAL_RCC_ClockConfig>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <SystemClock_Config+0xaa>
		Error_Handler();
 8001986:	f000 f8dd 	bl	8001b44 <Error_Handler>
	}
}
 800198a:	bf00      	nop
 800198c:	3750      	adds	r7, #80	@ 0x50
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800
 8001998:	40007000 	.word	0x40007000

0800199c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80019a0:	4b12      	ldr	r3, [pc, #72]	@ (80019ec <MX_I2C1_Init+0x50>)
 80019a2:	4a13      	ldr	r2, [pc, #76]	@ (80019f0 <MX_I2C1_Init+0x54>)
 80019a4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80019a6:	4b11      	ldr	r3, [pc, #68]	@ (80019ec <MX_I2C1_Init+0x50>)
 80019a8:	4a12      	ldr	r2, [pc, #72]	@ (80019f4 <MX_I2C1_Init+0x58>)
 80019aa:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019ac:	4b0f      	ldr	r3, [pc, #60]	@ (80019ec <MX_I2C1_Init+0x50>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80019b2:	4b0e      	ldr	r3, [pc, #56]	@ (80019ec <MX_I2C1_Init+0x50>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019b8:	4b0c      	ldr	r3, [pc, #48]	@ (80019ec <MX_I2C1_Init+0x50>)
 80019ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019be:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019c0:	4b0a      	ldr	r3, [pc, #40]	@ (80019ec <MX_I2C1_Init+0x50>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80019c6:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <MX_I2C1_Init+0x50>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019cc:	4b07      	ldr	r3, [pc, #28]	@ (80019ec <MX_I2C1_Init+0x50>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019d2:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <MX_I2C1_Init+0x50>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80019d8:	4804      	ldr	r0, [pc, #16]	@ (80019ec <MX_I2C1_Init+0x50>)
 80019da:	f000 fdd3 	bl	8002584 <HAL_I2C_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80019e4:	f000 f8ae 	bl	8001b44 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000288 	.word	0x20000288
 80019f0:	40005400 	.word	0x40005400
 80019f4:	00061a80 	.word	0x00061a80

080019f8 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80019fc:	4b10      	ldr	r3, [pc, #64]	@ (8001a40 <MX_USART1_UART_Init+0x48>)
 80019fe:	4a11      	ldr	r2, [pc, #68]	@ (8001a44 <MX_USART1_UART_Init+0x4c>)
 8001a00:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 1000000;
 8001a02:	4b0f      	ldr	r3, [pc, #60]	@ (8001a40 <MX_USART1_UART_Init+0x48>)
 8001a04:	4a10      	ldr	r2, [pc, #64]	@ (8001a48 <MX_USART1_UART_Init+0x50>)
 8001a06:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a08:	4b0d      	ldr	r3, [pc, #52]	@ (8001a40 <MX_USART1_UART_Init+0x48>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a40 <MX_USART1_UART_Init+0x48>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001a14:	4b0a      	ldr	r3, [pc, #40]	@ (8001a40 <MX_USART1_UART_Init+0x48>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001a1a:	4b09      	ldr	r3, [pc, #36]	@ (8001a40 <MX_USART1_UART_Init+0x48>)
 8001a1c:	220c      	movs	r2, #12
 8001a1e:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a20:	4b07      	ldr	r3, [pc, #28]	@ (8001a40 <MX_USART1_UART_Init+0x48>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a26:	4b06      	ldr	r3, [pc, #24]	@ (8001a40 <MX_USART1_UART_Init+0x48>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001a2c:	4804      	ldr	r0, [pc, #16]	@ (8001a40 <MX_USART1_UART_Init+0x48>)
 8001a2e:	f002 fa25 	bl	8003e7c <HAL_UART_Init>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_USART1_UART_Init+0x44>
		Error_Handler();
 8001a38:	f000 f884 	bl	8001b44 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	200002dc 	.word	0x200002dc
 8001a44:	40011000 	.word	0x40011000
 8001a48:	000f4240 	.word	0x000f4240

08001a4c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001a52:	f107 030c 	add.w	r3, r7, #12
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	60da      	str	r2, [r3, #12]
 8001a60:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad8 <MX_GPIO_Init+0x8c>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ad8 <MX_GPIO_Init+0x8c>)
 8001a6c:	f043 0310 	orr.w	r3, r3, #16
 8001a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a72:	4b19      	ldr	r3, [pc, #100]	@ (8001ad8 <MX_GPIO_Init+0x8c>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	f003 0310 	and.w	r3, r3, #16
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	607b      	str	r3, [r7, #4]
 8001a82:	4b15      	ldr	r3, [pc, #84]	@ (8001ad8 <MX_GPIO_Init+0x8c>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a86:	4a14      	ldr	r2, [pc, #80]	@ (8001ad8 <MX_GPIO_Init+0x8c>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a8e:	4b12      	ldr	r3, [pc, #72]	@ (8001ad8 <MX_GPIO_Init+0x8c>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	603b      	str	r3, [r7, #0]
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad8 <MX_GPIO_Init+0x8c>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad8 <MX_GPIO_Init+0x8c>)
 8001aa4:	f043 0302 	orr.w	r3, r3, #2
 8001aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad8 <MX_GPIO_Init+0x8c>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	603b      	str	r3, [r7, #0]
 8001ab4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pins : PE9 PE10 PE11 */
	GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
 8001ab6:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8001aba:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ac4:	f107 030c 	add.w	r3, r7, #12
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4804      	ldr	r0, [pc, #16]	@ (8001adc <MX_GPIO_Init+0x90>)
 8001acc:	f000 fba6 	bl	800221c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001ad0:	bf00      	nop
 8001ad2:	3720      	adds	r7, #32
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40021000 	.word	0x40021000

08001ae0 <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch) {
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
	USART1->DR = (ch & (uint16_t) 0x01FF);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a09      	ldr	r2, [pc, #36]	@ (8001b10 <__io_putchar+0x30>)
 8001aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001af0:	6053      	str	r3, [r2, #4]
	while (!(USART1->SR & USART_SR_TXE))
 8001af2:	bf00      	nop
 8001af4:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <__io_putchar+0x30>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0f9      	beq.n	8001af4 <__io_putchar+0x14>
		; //espera pelo fim da transmissão do caractere para evitar a segunda transmissão antes da primeira ser concluída
	return ch;
 8001b00:	687b      	ldr	r3, [r7, #4]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40011000 	.word	0x40011000

08001b14 <__io_getchar>:
int __io_getchar(void) {
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
	return (uint16_t) (USART1->DR & (uint16_t) 0x01FF);
 8001b18:	4b04      	ldr	r3, [pc, #16]	@ (8001b2c <__io_getchar+0x18>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	40011000 	.word	0x40011000

08001b30 <USART1_IRQHandler>:
//ISR da USART1. Todas as ISR's estão definidas no arquivo startup_stm32.s
void USART1_IRQHandler(void) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
	__io_putchar(__io_getchar());
 8001b34:	f7ff ffee 	bl	8001b14 <__io_getchar>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff ffd0 	bl	8001ae0 <__io_putchar>
}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b48:	b672      	cpsid	i
}
 8001b4a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <Error_Handler+0x8>

08001b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	607b      	str	r3, [r7, #4]
 8001b5a:	4b10      	ldr	r3, [pc, #64]	@ (8001b9c <HAL_MspInit+0x4c>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5e:	4a0f      	ldr	r2, [pc, #60]	@ (8001b9c <HAL_MspInit+0x4c>)
 8001b60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b66:	4b0d      	ldr	r3, [pc, #52]	@ (8001b9c <HAL_MspInit+0x4c>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b6e:	607b      	str	r3, [r7, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	603b      	str	r3, [r7, #0]
 8001b76:	4b09      	ldr	r3, [pc, #36]	@ (8001b9c <HAL_MspInit+0x4c>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	4a08      	ldr	r2, [pc, #32]	@ (8001b9c <HAL_MspInit+0x4c>)
 8001b7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b82:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <HAL_MspInit+0x4c>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b8a:	603b      	str	r3, [r7, #0]
 8001b8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800

08001ba0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08a      	sub	sp, #40	@ 0x28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a19      	ldr	r2, [pc, #100]	@ (8001c24 <HAL_I2C_MspInit+0x84>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d12c      	bne.n	8001c1c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	4b18      	ldr	r3, [pc, #96]	@ (8001c28 <HAL_I2C_MspInit+0x88>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bca:	4a17      	ldr	r2, [pc, #92]	@ (8001c28 <HAL_I2C_MspInit+0x88>)
 8001bcc:	f043 0302 	orr.w	r3, r3, #2
 8001bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bd2:	4b15      	ldr	r3, [pc, #84]	@ (8001c28 <HAL_I2C_MspInit+0x88>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	613b      	str	r3, [r7, #16]
 8001bdc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001bde:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001be4:	2312      	movs	r3, #18
 8001be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bec:	2303      	movs	r3, #3
 8001bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bf0:	2304      	movs	r3, #4
 8001bf2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	480c      	ldr	r0, [pc, #48]	@ (8001c2c <HAL_I2C_MspInit+0x8c>)
 8001bfc:	f000 fb0e 	bl	800221c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	4b08      	ldr	r3, [pc, #32]	@ (8001c28 <HAL_I2C_MspInit+0x88>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c08:	4a07      	ldr	r2, [pc, #28]	@ (8001c28 <HAL_I2C_MspInit+0x88>)
 8001c0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c10:	4b05      	ldr	r3, [pc, #20]	@ (8001c28 <HAL_I2C_MspInit+0x88>)
 8001c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c1c:	bf00      	nop
 8001c1e:	3728      	adds	r7, #40	@ 0x28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40005400 	.word	0x40005400
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40020400 	.word	0x40020400

08001c30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08a      	sub	sp, #40	@ 0x28
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a19      	ldr	r2, [pc, #100]	@ (8001cb4 <HAL_UART_MspInit+0x84>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d12c      	bne.n	8001cac <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	4b18      	ldr	r3, [pc, #96]	@ (8001cb8 <HAL_UART_MspInit+0x88>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5a:	4a17      	ldr	r2, [pc, #92]	@ (8001cb8 <HAL_UART_MspInit+0x88>)
 8001c5c:	f043 0310 	orr.w	r3, r3, #16
 8001c60:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c62:	4b15      	ldr	r3, [pc, #84]	@ (8001cb8 <HAL_UART_MspInit+0x88>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c66:	f003 0310 	and.w	r3, r3, #16
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	4b11      	ldr	r3, [pc, #68]	@ (8001cb8 <HAL_UART_MspInit+0x88>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c76:	4a10      	ldr	r2, [pc, #64]	@ (8001cb8 <HAL_UART_MspInit+0x88>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb8 <HAL_UART_MspInit+0x88>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c8a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c90:	2302      	movs	r3, #2
 8001c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c9c:	2307      	movs	r3, #7
 8001c9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca0:	f107 0314 	add.w	r3, r7, #20
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4805      	ldr	r0, [pc, #20]	@ (8001cbc <HAL_UART_MspInit+0x8c>)
 8001ca8:	f000 fab8 	bl	800221c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001cac:	bf00      	nop
 8001cae:	3728      	adds	r7, #40	@ 0x28
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40011000 	.word	0x40011000
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40020000 	.word	0x40020000

08001cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cc4:	bf00      	nop
 8001cc6:	e7fd      	b.n	8001cc4 <NMI_Handler+0x4>

08001cc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ccc:	bf00      	nop
 8001cce:	e7fd      	b.n	8001ccc <HardFault_Handler+0x4>

08001cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd4:	bf00      	nop
 8001cd6:	e7fd      	b.n	8001cd4 <MemManage_Handler+0x4>

08001cd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cdc:	bf00      	nop
 8001cde:	e7fd      	b.n	8001cdc <BusFault_Handler+0x4>

08001ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce4:	bf00      	nop
 8001ce6:	e7fd      	b.n	8001ce4 <UsageFault_Handler+0x4>

08001ce8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d16:	f000 f957 	bl	8001fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0
  return 1;
 8001d22:	2301      	movs	r3, #1
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <_kill>:

int _kill(int pid, int sig)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
 8001d36:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d38:	f003 fe98 	bl	8005a6c <__errno>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2216      	movs	r2, #22
 8001d40:	601a      	str	r2, [r3, #0]
  return -1;
 8001d42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <_exit>:

void _exit (int status)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d56:	f04f 31ff 	mov.w	r1, #4294967295
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7ff ffe7 	bl	8001d2e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d60:	bf00      	nop
 8001d62:	e7fd      	b.n	8001d60 <_exit+0x12>

08001d64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	e00a      	b.n	8001d8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d76:	f7ff fecd 	bl	8001b14 <__io_getchar>
 8001d7a:	4601      	mov	r1, r0
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	1c5a      	adds	r2, r3, #1
 8001d80:	60ba      	str	r2, [r7, #8]
 8001d82:	b2ca      	uxtb	r2, r1
 8001d84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	dbf0      	blt.n	8001d76 <_read+0x12>
  }

  return len;
 8001d94:	687b      	ldr	r3, [r7, #4]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b086      	sub	sp, #24
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	60f8      	str	r0, [r7, #12]
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	e009      	b.n	8001dc4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	1c5a      	adds	r2, r3, #1
 8001db4:	60ba      	str	r2, [r7, #8]
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff fe91 	bl	8001ae0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	dbf1      	blt.n	8001db0 <_write+0x12>
  }
  return len;
 8001dcc:	687b      	ldr	r3, [r7, #4]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <_close>:

int _close(int file)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dfe:	605a      	str	r2, [r3, #4]
  return 0;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <_isatty>:

int _isatty(int file)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e16:	2301      	movs	r3, #1
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e48:	4a14      	ldr	r2, [pc, #80]	@ (8001e9c <_sbrk+0x5c>)
 8001e4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ea0 <_sbrk+0x60>)
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e54:	4b13      	ldr	r3, [pc, #76]	@ (8001ea4 <_sbrk+0x64>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d102      	bne.n	8001e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ea4 <_sbrk+0x64>)
 8001e5e:	4a12      	ldr	r2, [pc, #72]	@ (8001ea8 <_sbrk+0x68>)
 8001e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e62:	4b10      	ldr	r3, [pc, #64]	@ (8001ea4 <_sbrk+0x64>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4413      	add	r3, r2
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d207      	bcs.n	8001e80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e70:	f003 fdfc 	bl	8005a6c <__errno>
 8001e74:	4603      	mov	r3, r0
 8001e76:	220c      	movs	r2, #12
 8001e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7e:	e009      	b.n	8001e94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e80:	4b08      	ldr	r3, [pc, #32]	@ (8001ea4 <_sbrk+0x64>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e86:	4b07      	ldr	r3, [pc, #28]	@ (8001ea4 <_sbrk+0x64>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	4a05      	ldr	r2, [pc, #20]	@ (8001ea4 <_sbrk+0x64>)
 8001e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e92:	68fb      	ldr	r3, [r7, #12]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20020000 	.word	0x20020000
 8001ea0:	00000400 	.word	0x00000400
 8001ea4:	20000324 	.word	0x20000324
 8001ea8:	20000880 	.word	0x20000880

08001eac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eb0:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <SystemInit+0x20>)
 8001eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eb6:	4a05      	ldr	r2, [pc, #20]	@ (8001ecc <SystemInit+0x20>)
 8001eb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ebc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ed0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f08 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ed4:	f7ff ffea 	bl	8001eac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ed8:	480c      	ldr	r0, [pc, #48]	@ (8001f0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001eda:	490d      	ldr	r1, [pc, #52]	@ (8001f10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001edc:	4a0d      	ldr	r2, [pc, #52]	@ (8001f14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ede:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ee0:	e002      	b.n	8001ee8 <LoopCopyDataInit>

08001ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ee6:	3304      	adds	r3, #4

08001ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eec:	d3f9      	bcc.n	8001ee2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eee:	4a0a      	ldr	r2, [pc, #40]	@ (8001f18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ef0:	4c0a      	ldr	r4, [pc, #40]	@ (8001f1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef4:	e001      	b.n	8001efa <LoopFillZerobss>

08001ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef8:	3204      	adds	r2, #4

08001efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001efc:	d3fb      	bcc.n	8001ef6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001efe:	f003 fdbb 	bl	8005a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f02:	f7ff fc23 	bl	800174c <main>
  bx  lr    
 8001f06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f10:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8001f14:	0800cd90 	.word	0x0800cd90
  ldr r2, =_sbss
 8001f18:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 8001f1c:	20000880 	.word	0x20000880

08001f20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f20:	e7fe      	b.n	8001f20 <ADC_IRQHandler>
	...

08001f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f28:	4b0e      	ldr	r3, [pc, #56]	@ (8001f64 <HAL_Init+0x40>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f64 <HAL_Init+0x40>)
 8001f2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f34:	4b0b      	ldr	r3, [pc, #44]	@ (8001f64 <HAL_Init+0x40>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a0a      	ldr	r2, [pc, #40]	@ (8001f64 <HAL_Init+0x40>)
 8001f3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f40:	4b08      	ldr	r3, [pc, #32]	@ (8001f64 <HAL_Init+0x40>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a07      	ldr	r2, [pc, #28]	@ (8001f64 <HAL_Init+0x40>)
 8001f46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f4c:	2003      	movs	r0, #3
 8001f4e:	f000 f931 	bl	80021b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f52:	200f      	movs	r0, #15
 8001f54:	f000 f808 	bl	8001f68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f58:	f7ff fdfa 	bl	8001b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40023c00 	.word	0x40023c00

08001f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f70:	4b12      	ldr	r3, [pc, #72]	@ (8001fbc <HAL_InitTick+0x54>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4b12      	ldr	r3, [pc, #72]	@ (8001fc0 <HAL_InitTick+0x58>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 f93b 	bl	8002202 <HAL_SYSTICK_Config>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e00e      	b.n	8001fb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b0f      	cmp	r3, #15
 8001f9a:	d80a      	bhi.n	8001fb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa4:	f000 f911 	bl	80021ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fa8:	4a06      	ldr	r2, [pc, #24]	@ (8001fc4 <HAL_InitTick+0x5c>)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	e000      	b.n	8001fb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20000060 	.word	0x20000060
 8001fc0:	20000068 	.word	0x20000068
 8001fc4:	20000064 	.word	0x20000064

08001fc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fcc:	4b06      	ldr	r3, [pc, #24]	@ (8001fe8 <HAL_IncTick+0x20>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4b06      	ldr	r3, [pc, #24]	@ (8001fec <HAL_IncTick+0x24>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	4a04      	ldr	r2, [pc, #16]	@ (8001fec <HAL_IncTick+0x24>)
 8001fda:	6013      	str	r3, [r2, #0]
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	20000068 	.word	0x20000068
 8001fec:	20000328 	.word	0x20000328

08001ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff4:	4b03      	ldr	r3, [pc, #12]	@ (8002004 <HAL_GetTick+0x14>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	20000328 	.word	0x20000328

08002008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002010:	f7ff ffee 	bl	8001ff0 <HAL_GetTick>
 8002014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002020:	d005      	beq.n	800202e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002022:	4b0a      	ldr	r3, [pc, #40]	@ (800204c <HAL_Delay+0x44>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4413      	add	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800202e:	bf00      	nop
 8002030:	f7ff ffde 	bl	8001ff0 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	429a      	cmp	r2, r3
 800203e:	d8f7      	bhi.n	8002030 <HAL_Delay+0x28>
  {
  }
}
 8002040:	bf00      	nop
 8002042:	bf00      	nop
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000068 	.word	0x20000068

08002050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002060:	4b0c      	ldr	r3, [pc, #48]	@ (8002094 <__NVIC_SetPriorityGrouping+0x44>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800206c:	4013      	ands	r3, r2
 800206e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002078:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800207c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002082:	4a04      	ldr	r2, [pc, #16]	@ (8002094 <__NVIC_SetPriorityGrouping+0x44>)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	60d3      	str	r3, [r2, #12]
}
 8002088:	bf00      	nop
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800209c:	4b04      	ldr	r3, [pc, #16]	@ (80020b0 <__NVIC_GetPriorityGrouping+0x18>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	0a1b      	lsrs	r3, r3, #8
 80020a2:	f003 0307 	and.w	r3, r3, #7
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	6039      	str	r1, [r7, #0]
 80020be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	db0a      	blt.n	80020de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	490c      	ldr	r1, [pc, #48]	@ (8002100 <__NVIC_SetPriority+0x4c>)
 80020ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d2:	0112      	lsls	r2, r2, #4
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	440b      	add	r3, r1
 80020d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020dc:	e00a      	b.n	80020f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	4908      	ldr	r1, [pc, #32]	@ (8002104 <__NVIC_SetPriority+0x50>)
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	3b04      	subs	r3, #4
 80020ec:	0112      	lsls	r2, r2, #4
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	440b      	add	r3, r1
 80020f2:	761a      	strb	r2, [r3, #24]
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	e000e100 	.word	0xe000e100
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002108:	b480      	push	{r7}
 800210a:	b089      	sub	sp, #36	@ 0x24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f1c3 0307 	rsb	r3, r3, #7
 8002122:	2b04      	cmp	r3, #4
 8002124:	bf28      	it	cs
 8002126:	2304      	movcs	r3, #4
 8002128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3304      	adds	r3, #4
 800212e:	2b06      	cmp	r3, #6
 8002130:	d902      	bls.n	8002138 <NVIC_EncodePriority+0x30>
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3b03      	subs	r3, #3
 8002136:	e000      	b.n	800213a <NVIC_EncodePriority+0x32>
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800213c:	f04f 32ff 	mov.w	r2, #4294967295
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43da      	mvns	r2, r3
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	401a      	ands	r2, r3
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002150:	f04f 31ff 	mov.w	r1, #4294967295
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	fa01 f303 	lsl.w	r3, r1, r3
 800215a:	43d9      	mvns	r1, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002160:	4313      	orrs	r3, r2
         );
}
 8002162:	4618      	mov	r0, r3
 8002164:	3724      	adds	r7, #36	@ 0x24
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
	...

08002170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3b01      	subs	r3, #1
 800217c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002180:	d301      	bcc.n	8002186 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002182:	2301      	movs	r3, #1
 8002184:	e00f      	b.n	80021a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002186:	4a0a      	ldr	r2, [pc, #40]	@ (80021b0 <SysTick_Config+0x40>)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3b01      	subs	r3, #1
 800218c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800218e:	210f      	movs	r1, #15
 8002190:	f04f 30ff 	mov.w	r0, #4294967295
 8002194:	f7ff ff8e 	bl	80020b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002198:	4b05      	ldr	r3, [pc, #20]	@ (80021b0 <SysTick_Config+0x40>)
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800219e:	4b04      	ldr	r3, [pc, #16]	@ (80021b0 <SysTick_Config+0x40>)
 80021a0:	2207      	movs	r2, #7
 80021a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	e000e010 	.word	0xe000e010

080021b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff ff47 	bl	8002050 <__NVIC_SetPriorityGrouping>
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b086      	sub	sp, #24
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	4603      	mov	r3, r0
 80021d2:	60b9      	str	r1, [r7, #8]
 80021d4:	607a      	str	r2, [r7, #4]
 80021d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021dc:	f7ff ff5c 	bl	8002098 <__NVIC_GetPriorityGrouping>
 80021e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	68b9      	ldr	r1, [r7, #8]
 80021e6:	6978      	ldr	r0, [r7, #20]
 80021e8:	f7ff ff8e 	bl	8002108 <NVIC_EncodePriority>
 80021ec:	4602      	mov	r2, r0
 80021ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f2:	4611      	mov	r1, r2
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ff5d 	bl	80020b4 <__NVIC_SetPriority>
}
 80021fa:	bf00      	nop
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7ff ffb0 	bl	8002170 <SysTick_Config>
 8002210:	4603      	mov	r3, r0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800221c:	b480      	push	{r7}
 800221e:	b089      	sub	sp, #36	@ 0x24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800222a:	2300      	movs	r3, #0
 800222c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800222e:	2300      	movs	r3, #0
 8002230:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002232:	2300      	movs	r3, #0
 8002234:	61fb      	str	r3, [r7, #28]
 8002236:	e16b      	b.n	8002510 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002238:	2201      	movs	r2, #1
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	4013      	ands	r3, r2
 800224a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	429a      	cmp	r2, r3
 8002252:	f040 815a 	bne.w	800250a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	2b01      	cmp	r3, #1
 8002260:	d005      	beq.n	800226e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800226a:	2b02      	cmp	r3, #2
 800226c:	d130      	bne.n	80022d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	2203      	movs	r2, #3
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4013      	ands	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	68da      	ldr	r2, [r3, #12]
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022a4:	2201      	movs	r2, #1
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	091b      	lsrs	r3, r3, #4
 80022ba:	f003 0201 	and.w	r2, r3, #1
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	2b03      	cmp	r3, #3
 80022da:	d017      	beq.n	800230c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	2203      	movs	r2, #3
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d123      	bne.n	8002360 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	08da      	lsrs	r2, r3, #3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3208      	adds	r2, #8
 8002320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002324:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	220f      	movs	r2, #15
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	691a      	ldr	r2, [r3, #16]
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	08da      	lsrs	r2, r3, #3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3208      	adds	r2, #8
 800235a:	69b9      	ldr	r1, [r7, #24]
 800235c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	2203      	movs	r2, #3
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 0203 	and.w	r2, r3, #3
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 80b4 	beq.w	800250a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	4b60      	ldr	r3, [pc, #384]	@ (8002528 <HAL_GPIO_Init+0x30c>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023aa:	4a5f      	ldr	r2, [pc, #380]	@ (8002528 <HAL_GPIO_Init+0x30c>)
 80023ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80023b2:	4b5d      	ldr	r3, [pc, #372]	@ (8002528 <HAL_GPIO_Init+0x30c>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023be:	4a5b      	ldr	r2, [pc, #364]	@ (800252c <HAL_GPIO_Init+0x310>)
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	089b      	lsrs	r3, r3, #2
 80023c4:	3302      	adds	r3, #2
 80023c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	220f      	movs	r2, #15
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43db      	mvns	r3, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4013      	ands	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a52      	ldr	r2, [pc, #328]	@ (8002530 <HAL_GPIO_Init+0x314>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d02b      	beq.n	8002442 <HAL_GPIO_Init+0x226>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a51      	ldr	r2, [pc, #324]	@ (8002534 <HAL_GPIO_Init+0x318>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d025      	beq.n	800243e <HAL_GPIO_Init+0x222>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a50      	ldr	r2, [pc, #320]	@ (8002538 <HAL_GPIO_Init+0x31c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d01f      	beq.n	800243a <HAL_GPIO_Init+0x21e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a4f      	ldr	r2, [pc, #316]	@ (800253c <HAL_GPIO_Init+0x320>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d019      	beq.n	8002436 <HAL_GPIO_Init+0x21a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a4e      	ldr	r2, [pc, #312]	@ (8002540 <HAL_GPIO_Init+0x324>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d013      	beq.n	8002432 <HAL_GPIO_Init+0x216>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a4d      	ldr	r2, [pc, #308]	@ (8002544 <HAL_GPIO_Init+0x328>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d00d      	beq.n	800242e <HAL_GPIO_Init+0x212>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a4c      	ldr	r2, [pc, #304]	@ (8002548 <HAL_GPIO_Init+0x32c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d007      	beq.n	800242a <HAL_GPIO_Init+0x20e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a4b      	ldr	r2, [pc, #300]	@ (800254c <HAL_GPIO_Init+0x330>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d101      	bne.n	8002426 <HAL_GPIO_Init+0x20a>
 8002422:	2307      	movs	r3, #7
 8002424:	e00e      	b.n	8002444 <HAL_GPIO_Init+0x228>
 8002426:	2308      	movs	r3, #8
 8002428:	e00c      	b.n	8002444 <HAL_GPIO_Init+0x228>
 800242a:	2306      	movs	r3, #6
 800242c:	e00a      	b.n	8002444 <HAL_GPIO_Init+0x228>
 800242e:	2305      	movs	r3, #5
 8002430:	e008      	b.n	8002444 <HAL_GPIO_Init+0x228>
 8002432:	2304      	movs	r3, #4
 8002434:	e006      	b.n	8002444 <HAL_GPIO_Init+0x228>
 8002436:	2303      	movs	r3, #3
 8002438:	e004      	b.n	8002444 <HAL_GPIO_Init+0x228>
 800243a:	2302      	movs	r3, #2
 800243c:	e002      	b.n	8002444 <HAL_GPIO_Init+0x228>
 800243e:	2301      	movs	r3, #1
 8002440:	e000      	b.n	8002444 <HAL_GPIO_Init+0x228>
 8002442:	2300      	movs	r3, #0
 8002444:	69fa      	ldr	r2, [r7, #28]
 8002446:	f002 0203 	and.w	r2, r2, #3
 800244a:	0092      	lsls	r2, r2, #2
 800244c:	4093      	lsls	r3, r2
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4313      	orrs	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002454:	4935      	ldr	r1, [pc, #212]	@ (800252c <HAL_GPIO_Init+0x310>)
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	089b      	lsrs	r3, r3, #2
 800245a:	3302      	adds	r3, #2
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002462:	4b3b      	ldr	r3, [pc, #236]	@ (8002550 <HAL_GPIO_Init+0x334>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	43db      	mvns	r3, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4013      	ands	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002486:	4a32      	ldr	r2, [pc, #200]	@ (8002550 <HAL_GPIO_Init+0x334>)
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800248c:	4b30      	ldr	r3, [pc, #192]	@ (8002550 <HAL_GPIO_Init+0x334>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024b0:	4a27      	ldr	r2, [pc, #156]	@ (8002550 <HAL_GPIO_Init+0x334>)
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024b6:	4b26      	ldr	r3, [pc, #152]	@ (8002550 <HAL_GPIO_Init+0x334>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	43db      	mvns	r3, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4013      	ands	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024da:	4a1d      	ldr	r2, [pc, #116]	@ (8002550 <HAL_GPIO_Init+0x334>)
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002550 <HAL_GPIO_Init+0x334>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002504:	4a12      	ldr	r2, [pc, #72]	@ (8002550 <HAL_GPIO_Init+0x334>)
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	3301      	adds	r3, #1
 800250e:	61fb      	str	r3, [r7, #28]
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	2b0f      	cmp	r3, #15
 8002514:	f67f ae90 	bls.w	8002238 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002518:	bf00      	nop
 800251a:	bf00      	nop
 800251c:	3724      	adds	r7, #36	@ 0x24
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	40023800 	.word	0x40023800
 800252c:	40013800 	.word	0x40013800
 8002530:	40020000 	.word	0x40020000
 8002534:	40020400 	.word	0x40020400
 8002538:	40020800 	.word	0x40020800
 800253c:	40020c00 	.word	0x40020c00
 8002540:	40021000 	.word	0x40021000
 8002544:	40021400 	.word	0x40021400
 8002548:	40021800 	.word	0x40021800
 800254c:	40021c00 	.word	0x40021c00
 8002550:	40013c00 	.word	0x40013c00

08002554 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691a      	ldr	r2, [r3, #16]
 8002564:	887b      	ldrh	r3, [r7, #2]
 8002566:	4013      	ands	r3, r2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800256c:	2301      	movs	r3, #1
 800256e:	73fb      	strb	r3, [r7, #15]
 8002570:	e001      	b.n	8002576 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002572:	2300      	movs	r3, #0
 8002574:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002576:	7bfb      	ldrb	r3, [r7, #15]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e12b      	b.n	80027ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d106      	bne.n	80025b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff faf8 	bl	8001ba0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2224      	movs	r2, #36	@ 0x24
 80025b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0201 	bic.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025e8:	f001 fc20 	bl	8003e2c <HAL_RCC_GetPCLK1Freq>
 80025ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	4a81      	ldr	r2, [pc, #516]	@ (80027f8 <HAL_I2C_Init+0x274>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d807      	bhi.n	8002608 <HAL_I2C_Init+0x84>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4a80      	ldr	r2, [pc, #512]	@ (80027fc <HAL_I2C_Init+0x278>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	bf94      	ite	ls
 8002600:	2301      	movls	r3, #1
 8002602:	2300      	movhi	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	e006      	b.n	8002616 <HAL_I2C_Init+0x92>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4a7d      	ldr	r2, [pc, #500]	@ (8002800 <HAL_I2C_Init+0x27c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	bf94      	ite	ls
 8002610:	2301      	movls	r3, #1
 8002612:	2300      	movhi	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e0e7      	b.n	80027ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	4a78      	ldr	r2, [pc, #480]	@ (8002804 <HAL_I2C_Init+0x280>)
 8002622:	fba2 2303 	umull	r2, r3, r2, r3
 8002626:	0c9b      	lsrs	r3, r3, #18
 8002628:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	430a      	orrs	r2, r1
 800263c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	4a6a      	ldr	r2, [pc, #424]	@ (80027f8 <HAL_I2C_Init+0x274>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d802      	bhi.n	8002658 <HAL_I2C_Init+0xd4>
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	3301      	adds	r3, #1
 8002656:	e009      	b.n	800266c <HAL_I2C_Init+0xe8>
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800265e:	fb02 f303 	mul.w	r3, r2, r3
 8002662:	4a69      	ldr	r2, [pc, #420]	@ (8002808 <HAL_I2C_Init+0x284>)
 8002664:	fba2 2303 	umull	r2, r3, r2, r3
 8002668:	099b      	lsrs	r3, r3, #6
 800266a:	3301      	adds	r3, #1
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6812      	ldr	r2, [r2, #0]
 8002670:	430b      	orrs	r3, r1
 8002672:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800267e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	495c      	ldr	r1, [pc, #368]	@ (80027f8 <HAL_I2C_Init+0x274>)
 8002688:	428b      	cmp	r3, r1
 800268a:	d819      	bhi.n	80026c0 <HAL_I2C_Init+0x13c>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	1e59      	subs	r1, r3, #1
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	fbb1 f3f3 	udiv	r3, r1, r3
 800269a:	1c59      	adds	r1, r3, #1
 800269c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80026a0:	400b      	ands	r3, r1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00a      	beq.n	80026bc <HAL_I2C_Init+0x138>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1e59      	subs	r1, r3, #1
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80026b4:	3301      	adds	r3, #1
 80026b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ba:	e051      	b.n	8002760 <HAL_I2C_Init+0x1dc>
 80026bc:	2304      	movs	r3, #4
 80026be:	e04f      	b.n	8002760 <HAL_I2C_Init+0x1dc>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d111      	bne.n	80026ec <HAL_I2C_Init+0x168>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	1e58      	subs	r0, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6859      	ldr	r1, [r3, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	440b      	add	r3, r1
 80026d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026da:	3301      	adds	r3, #1
 80026dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	bf0c      	ite	eq
 80026e4:	2301      	moveq	r3, #1
 80026e6:	2300      	movne	r3, #0
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	e012      	b.n	8002712 <HAL_I2C_Init+0x18e>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	1e58      	subs	r0, r3, #1
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6859      	ldr	r1, [r3, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	0099      	lsls	r1, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002702:	3301      	adds	r3, #1
 8002704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002708:	2b00      	cmp	r3, #0
 800270a:	bf0c      	ite	eq
 800270c:	2301      	moveq	r3, #1
 800270e:	2300      	movne	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_I2C_Init+0x196>
 8002716:	2301      	movs	r3, #1
 8002718:	e022      	b.n	8002760 <HAL_I2C_Init+0x1dc>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10e      	bne.n	8002740 <HAL_I2C_Init+0x1bc>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	1e58      	subs	r0, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6859      	ldr	r1, [r3, #4]
 800272a:	460b      	mov	r3, r1
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	440b      	add	r3, r1
 8002730:	fbb0 f3f3 	udiv	r3, r0, r3
 8002734:	3301      	adds	r3, #1
 8002736:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800273a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800273e:	e00f      	b.n	8002760 <HAL_I2C_Init+0x1dc>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	1e58      	subs	r0, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6859      	ldr	r1, [r3, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	0099      	lsls	r1, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	fbb0 f3f3 	udiv	r3, r0, r3
 8002756:	3301      	adds	r3, #1
 8002758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800275c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	6809      	ldr	r1, [r1, #0]
 8002764:	4313      	orrs	r3, r2
 8002766:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69da      	ldr	r2, [r3, #28]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800278e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6911      	ldr	r1, [r2, #16]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	68d2      	ldr	r2, [r2, #12]
 800279a:	4311      	orrs	r1, r2
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6812      	ldr	r2, [r2, #0]
 80027a0:	430b      	orrs	r3, r1
 80027a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	695a      	ldr	r2, [r3, #20]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f042 0201 	orr.w	r2, r2, #1
 80027ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2220      	movs	r2, #32
 80027da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	000186a0 	.word	0x000186a0
 80027fc:	001e847f 	.word	0x001e847f
 8002800:	003d08ff 	.word	0x003d08ff
 8002804:	431bde83 	.word	0x431bde83
 8002808:	10624dd3 	.word	0x10624dd3

0800280c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b088      	sub	sp, #32
 8002810:	af02      	add	r7, sp, #8
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	4608      	mov	r0, r1
 8002816:	4611      	mov	r1, r2
 8002818:	461a      	mov	r2, r3
 800281a:	4603      	mov	r3, r0
 800281c:	817b      	strh	r3, [r7, #10]
 800281e:	460b      	mov	r3, r1
 8002820:	813b      	strh	r3, [r7, #8]
 8002822:	4613      	mov	r3, r2
 8002824:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002826:	f7ff fbe3 	bl	8001ff0 <HAL_GetTick>
 800282a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b20      	cmp	r3, #32
 8002836:	f040 80d9 	bne.w	80029ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	2319      	movs	r3, #25
 8002840:	2201      	movs	r2, #1
 8002842:	496d      	ldr	r1, [pc, #436]	@ (80029f8 <HAL_I2C_Mem_Write+0x1ec>)
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 fc8b 	bl	8003160 <I2C_WaitOnFlagUntilTimeout>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002850:	2302      	movs	r3, #2
 8002852:	e0cc      	b.n	80029ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800285a:	2b01      	cmp	r3, #1
 800285c:	d101      	bne.n	8002862 <HAL_I2C_Mem_Write+0x56>
 800285e:	2302      	movs	r3, #2
 8002860:	e0c5      	b.n	80029ee <HAL_I2C_Mem_Write+0x1e2>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b01      	cmp	r3, #1
 8002876:	d007      	beq.n	8002888 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f042 0201 	orr.w	r2, r2, #1
 8002886:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002896:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2221      	movs	r2, #33	@ 0x21
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2240      	movs	r2, #64	@ 0x40
 80028a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6a3a      	ldr	r2, [r7, #32]
 80028b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80028b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028be:	b29a      	uxth	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4a4d      	ldr	r2, [pc, #308]	@ (80029fc <HAL_I2C_Mem_Write+0x1f0>)
 80028c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028ca:	88f8      	ldrh	r0, [r7, #6]
 80028cc:	893a      	ldrh	r2, [r7, #8]
 80028ce:	8979      	ldrh	r1, [r7, #10]
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	9301      	str	r3, [sp, #4]
 80028d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	4603      	mov	r3, r0
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 fac2 	bl	8002e64 <I2C_RequestMemoryWrite>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d052      	beq.n	800298c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e081      	b.n	80029ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 fd50 	bl	8003394 <I2C_WaitOnTXEFlagUntilTimeout>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00d      	beq.n	8002916 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d107      	bne.n	8002912 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002910:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e06b      	b.n	80029ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291a:	781a      	ldrb	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002930:	3b01      	subs	r3, #1
 8002932:	b29a      	uxth	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800293c:	b29b      	uxth	r3, r3
 800293e:	3b01      	subs	r3, #1
 8002940:	b29a      	uxth	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b04      	cmp	r3, #4
 8002952:	d11b      	bne.n	800298c <HAL_I2C_Mem_Write+0x180>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002958:	2b00      	cmp	r3, #0
 800295a:	d017      	beq.n	800298c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002960:	781a      	ldrb	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296c:	1c5a      	adds	r2, r3, #1
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002976:	3b01      	subs	r3, #1
 8002978:	b29a      	uxth	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002982:	b29b      	uxth	r3, r3
 8002984:	3b01      	subs	r3, #1
 8002986:	b29a      	uxth	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1aa      	bne.n	80028ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 fd43 	bl	8003424 <I2C_WaitOnBTFFlagUntilTimeout>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00d      	beq.n	80029c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a8:	2b04      	cmp	r3, #4
 80029aa:	d107      	bne.n	80029bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e016      	b.n	80029ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2220      	movs	r2, #32
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80029e8:	2300      	movs	r3, #0
 80029ea:	e000      	b.n	80029ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80029ec:	2302      	movs	r3, #2
  }
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3718      	adds	r7, #24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	00100002 	.word	0x00100002
 80029fc:	ffff0000 	.word	0xffff0000

08002a00 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08c      	sub	sp, #48	@ 0x30
 8002a04:	af02      	add	r7, sp, #8
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	4608      	mov	r0, r1
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4603      	mov	r3, r0
 8002a10:	817b      	strh	r3, [r7, #10]
 8002a12:	460b      	mov	r3, r1
 8002a14:	813b      	strh	r3, [r7, #8]
 8002a16:	4613      	mov	r3, r2
 8002a18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a1a:	f7ff fae9 	bl	8001ff0 <HAL_GetTick>
 8002a1e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b20      	cmp	r3, #32
 8002a2a:	f040 8214 	bne.w	8002e56 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	2319      	movs	r3, #25
 8002a34:	2201      	movs	r2, #1
 8002a36:	497b      	ldr	r1, [pc, #492]	@ (8002c24 <HAL_I2C_Mem_Read+0x224>)
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 fb91 	bl	8003160 <I2C_WaitOnFlagUntilTimeout>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002a44:	2302      	movs	r3, #2
 8002a46:	e207      	b.n	8002e58 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d101      	bne.n	8002a56 <HAL_I2C_Mem_Read+0x56>
 8002a52:	2302      	movs	r3, #2
 8002a54:	e200      	b.n	8002e58 <HAL_I2C_Mem_Read+0x458>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d007      	beq.n	8002a7c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0201 	orr.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2222      	movs	r2, #34	@ 0x22
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2240      	movs	r2, #64	@ 0x40
 8002a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002aa6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002aac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4a5b      	ldr	r2, [pc, #364]	@ (8002c28 <HAL_I2C_Mem_Read+0x228>)
 8002abc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002abe:	88f8      	ldrh	r0, [r7, #6]
 8002ac0:	893a      	ldrh	r2, [r7, #8]
 8002ac2:	8979      	ldrh	r1, [r7, #10]
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac6:	9301      	str	r3, [sp, #4]
 8002ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	4603      	mov	r3, r0
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 fa5e 	bl	8002f90 <I2C_RequestMemoryRead>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e1bc      	b.n	8002e58 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d113      	bne.n	8002b0e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	623b      	str	r3, [r7, #32]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	623b      	str	r3, [r7, #32]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	623b      	str	r3, [r7, #32]
 8002afa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	e190      	b.n	8002e30 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d11b      	bne.n	8002b4e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b26:	2300      	movs	r3, #0
 8002b28:	61fb      	str	r3, [r7, #28]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	61fb      	str	r3, [r7, #28]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	61fb      	str	r3, [r7, #28]
 8002b3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	e170      	b.n	8002e30 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d11b      	bne.n	8002b8e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b64:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b76:	2300      	movs	r3, #0
 8002b78:	61bb      	str	r3, [r7, #24]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	61bb      	str	r3, [r7, #24]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	61bb      	str	r3, [r7, #24]
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	e150      	b.n	8002e30 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b8e:	2300      	movs	r3, #0
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	617b      	str	r3, [r7, #20]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	617b      	str	r3, [r7, #20]
 8002ba2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ba4:	e144      	b.n	8002e30 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002baa:	2b03      	cmp	r3, #3
 8002bac:	f200 80f1 	bhi.w	8002d92 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d123      	bne.n	8002c00 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 fc79 	bl	80034b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e145      	b.n	8002e58 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	691a      	ldr	r2, [r3, #16]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bde:	1c5a      	adds	r2, r3, #1
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002bfe:	e117      	b.n	8002e30 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d14e      	bne.n	8002ca6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c0e:	2200      	movs	r2, #0
 8002c10:	4906      	ldr	r1, [pc, #24]	@ (8002c2c <HAL_I2C_Mem_Read+0x22c>)
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 faa4 	bl	8003160 <I2C_WaitOnFlagUntilTimeout>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d008      	beq.n	8002c30 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e11a      	b.n	8002e58 <HAL_I2C_Mem_Read+0x458>
 8002c22:	bf00      	nop
 8002c24:	00100002 	.word	0x00100002
 8002c28:	ffff0000 	.word	0xffff0000
 8002c2c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	691a      	ldr	r2, [r3, #16]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	691a      	ldr	r2, [r3, #16]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c84:	1c5a      	adds	r2, r3, #1
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ca4:	e0c4      	b.n	8002e30 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cac:	2200      	movs	r2, #0
 8002cae:	496c      	ldr	r1, [pc, #432]	@ (8002e60 <HAL_I2C_Mem_Read+0x460>)
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f000 fa55 	bl	8003160 <I2C_WaitOnFlagUntilTimeout>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0cb      	b.n	8002e58 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	691a      	ldr	r2, [r3, #16]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cec:	3b01      	subs	r3, #1
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d08:	2200      	movs	r2, #0
 8002d0a:	4955      	ldr	r1, [pc, #340]	@ (8002e60 <HAL_I2C_Mem_Read+0x460>)
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 fa27 	bl	8003160 <I2C_WaitOnFlagUntilTimeout>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e09d      	b.n	8002e58 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	691a      	ldr	r2, [r3, #16]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	3b01      	subs	r3, #1
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d90:	e04e      	b.n	8002e30 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d94:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 fb8c 	bl	80034b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e058      	b.n	8002e58 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	691a      	ldr	r2, [r3, #16]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db0:	b2d2      	uxtb	r2, r2
 8002db2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	f003 0304 	and.w	r3, r3, #4
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d124      	bne.n	8002e30 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dea:	2b03      	cmp	r3, #3
 8002dec:	d107      	bne.n	8002dfe <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dfc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	691a      	ldr	r2, [r3, #16]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e10:	1c5a      	adds	r2, r3, #1
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f47f aeb6 	bne.w	8002ba6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	e000      	b.n	8002e58 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002e56:	2302      	movs	r3, #2
  }
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3728      	adds	r7, #40	@ 0x28
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	00010004 	.word	0x00010004

08002e64 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b088      	sub	sp, #32
 8002e68:	af02      	add	r7, sp, #8
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	4608      	mov	r0, r1
 8002e6e:	4611      	mov	r1, r2
 8002e70:	461a      	mov	r2, r3
 8002e72:	4603      	mov	r3, r0
 8002e74:	817b      	strh	r3, [r7, #10]
 8002e76:	460b      	mov	r3, r1
 8002e78:	813b      	strh	r3, [r7, #8]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f000 f960 	bl	8003160 <I2C_WaitOnFlagUntilTimeout>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00d      	beq.n	8002ec2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002eb4:	d103      	bne.n	8002ebe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ebc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e05f      	b.n	8002f82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ec2:	897b      	ldrh	r3, [r7, #10]
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ed0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed4:	6a3a      	ldr	r2, [r7, #32]
 8002ed6:	492d      	ldr	r1, [pc, #180]	@ (8002f8c <I2C_RequestMemoryWrite+0x128>)
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f000 f9bb 	bl	8003254 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e04c      	b.n	8002f82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ee8:	2300      	movs	r3, #0
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	617b      	str	r3, [r7, #20]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	617b      	str	r3, [r7, #20]
 8002efc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f00:	6a39      	ldr	r1, [r7, #32]
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 fa46 	bl	8003394 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00d      	beq.n	8002f2a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d107      	bne.n	8002f26 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e02b      	b.n	8002f82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f2a:	88fb      	ldrh	r3, [r7, #6]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d105      	bne.n	8002f3c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f30:	893b      	ldrh	r3, [r7, #8]
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	611a      	str	r2, [r3, #16]
 8002f3a:	e021      	b.n	8002f80 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f3c:	893b      	ldrh	r3, [r7, #8]
 8002f3e:	0a1b      	lsrs	r3, r3, #8
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f4c:	6a39      	ldr	r1, [r7, #32]
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 fa20 	bl	8003394 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00d      	beq.n	8002f76 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d107      	bne.n	8002f72 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e005      	b.n	8002f82 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f76:	893b      	ldrh	r3, [r7, #8]
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	00010002 	.word	0x00010002

08002f90 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b088      	sub	sp, #32
 8002f94:	af02      	add	r7, sp, #8
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	4608      	mov	r0, r1
 8002f9a:	4611      	mov	r1, r2
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	817b      	strh	r3, [r7, #10]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	813b      	strh	r3, [r7, #8]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002fb8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fc8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 f8c2 	bl	8003160 <I2C_WaitOnFlagUntilTimeout>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00d      	beq.n	8002ffe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ff0:	d103      	bne.n	8002ffa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ff8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e0aa      	b.n	8003154 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ffe:	897b      	ldrh	r3, [r7, #10]
 8003000:	b2db      	uxtb	r3, r3
 8003002:	461a      	mov	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800300c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800300e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003010:	6a3a      	ldr	r2, [r7, #32]
 8003012:	4952      	ldr	r1, [pc, #328]	@ (800315c <I2C_RequestMemoryRead+0x1cc>)
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f000 f91d 	bl	8003254 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e097      	b.n	8003154 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003024:	2300      	movs	r3, #0
 8003026:	617b      	str	r3, [r7, #20]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	617b      	str	r3, [r7, #20]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800303a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800303c:	6a39      	ldr	r1, [r7, #32]
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 f9a8 	bl	8003394 <I2C_WaitOnTXEFlagUntilTimeout>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00d      	beq.n	8003066 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304e:	2b04      	cmp	r3, #4
 8003050:	d107      	bne.n	8003062 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003060:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e076      	b.n	8003154 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003066:	88fb      	ldrh	r3, [r7, #6]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d105      	bne.n	8003078 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800306c:	893b      	ldrh	r3, [r7, #8]
 800306e:	b2da      	uxtb	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	611a      	str	r2, [r3, #16]
 8003076:	e021      	b.n	80030bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003078:	893b      	ldrh	r3, [r7, #8]
 800307a:	0a1b      	lsrs	r3, r3, #8
 800307c:	b29b      	uxth	r3, r3
 800307e:	b2da      	uxtb	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003088:	6a39      	ldr	r1, [r7, #32]
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 f982 	bl	8003394 <I2C_WaitOnTXEFlagUntilTimeout>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00d      	beq.n	80030b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309a:	2b04      	cmp	r3, #4
 800309c:	d107      	bne.n	80030ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e050      	b.n	8003154 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030b2:	893b      	ldrh	r3, [r7, #8]
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030be:	6a39      	ldr	r1, [r7, #32]
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 f967 	bl	8003394 <I2C_WaitOnTXEFlagUntilTimeout>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00d      	beq.n	80030e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d0:	2b04      	cmp	r3, #4
 80030d2:	d107      	bne.n	80030e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e035      	b.n	8003154 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	2200      	movs	r2, #0
 8003100:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 f82b 	bl	8003160 <I2C_WaitOnFlagUntilTimeout>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00d      	beq.n	800312c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800311a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800311e:	d103      	bne.n	8003128 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003126:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e013      	b.n	8003154 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800312c:	897b      	ldrh	r3, [r7, #10]
 800312e:	b2db      	uxtb	r3, r3
 8003130:	f043 0301 	orr.w	r3, r3, #1
 8003134:	b2da      	uxtb	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800313c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313e:	6a3a      	ldr	r2, [r7, #32]
 8003140:	4906      	ldr	r1, [pc, #24]	@ (800315c <I2C_RequestMemoryRead+0x1cc>)
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 f886 	bl	8003254 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e000      	b.n	8003154 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	00010002 	.word	0x00010002

08003160 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	603b      	str	r3, [r7, #0]
 800316c:	4613      	mov	r3, r2
 800316e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003170:	e048      	b.n	8003204 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003178:	d044      	beq.n	8003204 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800317a:	f7fe ff39 	bl	8001ff0 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	429a      	cmp	r2, r3
 8003188:	d302      	bcc.n	8003190 <I2C_WaitOnFlagUntilTimeout+0x30>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d139      	bne.n	8003204 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	0c1b      	lsrs	r3, r3, #16
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b01      	cmp	r3, #1
 8003198:	d10d      	bne.n	80031b6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	43da      	mvns	r2, r3
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	4013      	ands	r3, r2
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	bf0c      	ite	eq
 80031ac:	2301      	moveq	r3, #1
 80031ae:	2300      	movne	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	461a      	mov	r2, r3
 80031b4:	e00c      	b.n	80031d0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	43da      	mvns	r2, r3
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	4013      	ands	r3, r2
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	bf0c      	ite	eq
 80031c8:	2301      	moveq	r3, #1
 80031ca:	2300      	movne	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	461a      	mov	r2, r3
 80031d0:	79fb      	ldrb	r3, [r7, #7]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d116      	bne.n	8003204 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2220      	movs	r2, #32
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f0:	f043 0220 	orr.w	r2, r3, #32
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e023      	b.n	800324c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	0c1b      	lsrs	r3, r3, #16
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b01      	cmp	r3, #1
 800320c:	d10d      	bne.n	800322a <I2C_WaitOnFlagUntilTimeout+0xca>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	43da      	mvns	r2, r3
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	4013      	ands	r3, r2
 800321a:	b29b      	uxth	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	bf0c      	ite	eq
 8003220:	2301      	moveq	r3, #1
 8003222:	2300      	movne	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	461a      	mov	r2, r3
 8003228:	e00c      	b.n	8003244 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	43da      	mvns	r2, r3
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	4013      	ands	r3, r2
 8003236:	b29b      	uxth	r3, r3
 8003238:	2b00      	cmp	r3, #0
 800323a:	bf0c      	ite	eq
 800323c:	2301      	moveq	r3, #1
 800323e:	2300      	movne	r3, #0
 8003240:	b2db      	uxtb	r3, r3
 8003242:	461a      	mov	r2, r3
 8003244:	79fb      	ldrb	r3, [r7, #7]
 8003246:	429a      	cmp	r2, r3
 8003248:	d093      	beq.n	8003172 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
 8003260:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003262:	e071      	b.n	8003348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800326e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003272:	d123      	bne.n	80032bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003282:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800328c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2220      	movs	r2, #32
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a8:	f043 0204 	orr.w	r2, r3, #4
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e067      	b.n	800338c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c2:	d041      	beq.n	8003348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c4:	f7fe fe94 	bl	8001ff0 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d302      	bcc.n	80032da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d136      	bne.n	8003348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	0c1b      	lsrs	r3, r3, #16
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d10c      	bne.n	80032fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	43da      	mvns	r2, r3
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	4013      	ands	r3, r2
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	bf14      	ite	ne
 80032f6:	2301      	movne	r3, #1
 80032f8:	2300      	moveq	r3, #0
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	e00b      	b.n	8003316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	43da      	mvns	r2, r3
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	4013      	ands	r3, r2
 800330a:	b29b      	uxth	r3, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	bf14      	ite	ne
 8003310:	2301      	movne	r3, #1
 8003312:	2300      	moveq	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d016      	beq.n	8003348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2220      	movs	r2, #32
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003334:	f043 0220 	orr.w	r2, r3, #32
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e021      	b.n	800338c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	0c1b      	lsrs	r3, r3, #16
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b01      	cmp	r3, #1
 8003350:	d10c      	bne.n	800336c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	43da      	mvns	r2, r3
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	4013      	ands	r3, r2
 800335e:	b29b      	uxth	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	bf14      	ite	ne
 8003364:	2301      	movne	r3, #1
 8003366:	2300      	moveq	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	e00b      	b.n	8003384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	43da      	mvns	r2, r3
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	4013      	ands	r3, r2
 8003378:	b29b      	uxth	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	bf14      	ite	ne
 800337e:	2301      	movne	r3, #1
 8003380:	2300      	moveq	r3, #0
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	f47f af6d 	bne.w	8003264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033a0:	e034      	b.n	800340c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 f8e3 	bl	800356e <I2C_IsAcknowledgeFailed>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e034      	b.n	800341c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b8:	d028      	beq.n	800340c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ba:	f7fe fe19 	bl	8001ff0 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d302      	bcc.n	80033d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d11d      	bne.n	800340c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033da:	2b80      	cmp	r3, #128	@ 0x80
 80033dc:	d016      	beq.n	800340c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2220      	movs	r2, #32
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f8:	f043 0220 	orr.w	r2, r3, #32
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e007      	b.n	800341c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003416:	2b80      	cmp	r3, #128	@ 0x80
 8003418:	d1c3      	bne.n	80033a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003430:	e034      	b.n	800349c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 f89b 	bl	800356e <I2C_IsAcknowledgeFailed>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e034      	b.n	80034ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003448:	d028      	beq.n	800349c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800344a:	f7fe fdd1 	bl	8001ff0 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	429a      	cmp	r2, r3
 8003458:	d302      	bcc.n	8003460 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d11d      	bne.n	800349c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	2b04      	cmp	r3, #4
 800346c:	d016      	beq.n	800349c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2220      	movs	r2, #32
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003488:	f043 0220 	orr.w	r2, r3, #32
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e007      	b.n	80034ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	f003 0304 	and.w	r3, r3, #4
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d1c3      	bne.n	8003432 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034c0:	e049      	b.n	8003556 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	f003 0310 	and.w	r3, r3, #16
 80034cc:	2b10      	cmp	r3, #16
 80034ce:	d119      	bne.n	8003504 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f06f 0210 	mvn.w	r2, #16
 80034d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e030      	b.n	8003566 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003504:	f7fe fd74 	bl	8001ff0 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	429a      	cmp	r2, r3
 8003512:	d302      	bcc.n	800351a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d11d      	bne.n	8003556 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003524:	2b40      	cmp	r3, #64	@ 0x40
 8003526:	d016      	beq.n	8003556 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2220      	movs	r2, #32
 8003532:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003542:	f043 0220 	orr.w	r2, r3, #32
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e007      	b.n	8003566 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003560:	2b40      	cmp	r3, #64	@ 0x40
 8003562:	d1ae      	bne.n	80034c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003580:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003584:	d11b      	bne.n	80035be <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800358e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2220      	movs	r2, #32
 800359a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035aa:	f043 0204 	orr.w	r2, r3, #4
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e000      	b.n	80035c0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e267      	b.n	8003aae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d075      	beq.n	80036d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80035ea:	4b88      	ldr	r3, [pc, #544]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 030c 	and.w	r3, r3, #12
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	d00c      	beq.n	8003610 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035f6:	4b85      	ldr	r3, [pc, #532]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d112      	bne.n	8003628 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003602:	4b82      	ldr	r3, [pc, #520]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800360a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800360e:	d10b      	bne.n	8003628 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003610:	4b7e      	ldr	r3, [pc, #504]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d05b      	beq.n	80036d4 <HAL_RCC_OscConfig+0x108>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d157      	bne.n	80036d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e242      	b.n	8003aae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003630:	d106      	bne.n	8003640 <HAL_RCC_OscConfig+0x74>
 8003632:	4b76      	ldr	r3, [pc, #472]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a75      	ldr	r2, [pc, #468]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 8003638:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	e01d      	b.n	800367c <HAL_RCC_OscConfig+0xb0>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003648:	d10c      	bne.n	8003664 <HAL_RCC_OscConfig+0x98>
 800364a:	4b70      	ldr	r3, [pc, #448]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a6f      	ldr	r2, [pc, #444]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 8003650:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003654:	6013      	str	r3, [r2, #0]
 8003656:	4b6d      	ldr	r3, [pc, #436]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a6c      	ldr	r2, [pc, #432]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 800365c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003660:	6013      	str	r3, [r2, #0]
 8003662:	e00b      	b.n	800367c <HAL_RCC_OscConfig+0xb0>
 8003664:	4b69      	ldr	r3, [pc, #420]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a68      	ldr	r2, [pc, #416]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 800366a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800366e:	6013      	str	r3, [r2, #0]
 8003670:	4b66      	ldr	r3, [pc, #408]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a65      	ldr	r2, [pc, #404]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 8003676:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800367a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d013      	beq.n	80036ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003684:	f7fe fcb4 	bl	8001ff0 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800368c:	f7fe fcb0 	bl	8001ff0 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b64      	cmp	r3, #100	@ 0x64
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e207      	b.n	8003aae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800369e:	4b5b      	ldr	r3, [pc, #364]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0f0      	beq.n	800368c <HAL_RCC_OscConfig+0xc0>
 80036aa:	e014      	b.n	80036d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ac:	f7fe fca0 	bl	8001ff0 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036b4:	f7fe fc9c 	bl	8001ff0 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b64      	cmp	r3, #100	@ 0x64
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e1f3      	b.n	8003aae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036c6:	4b51      	ldr	r3, [pc, #324]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1f0      	bne.n	80036b4 <HAL_RCC_OscConfig+0xe8>
 80036d2:	e000      	b.n	80036d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d063      	beq.n	80037aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80036e2:	4b4a      	ldr	r3, [pc, #296]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 030c 	and.w	r3, r3, #12
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00b      	beq.n	8003706 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ee:	4b47      	ldr	r3, [pc, #284]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d11c      	bne.n	8003734 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036fa:	4b44      	ldr	r3, [pc, #272]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d116      	bne.n	8003734 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003706:	4b41      	ldr	r3, [pc, #260]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d005      	beq.n	800371e <HAL_RCC_OscConfig+0x152>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d001      	beq.n	800371e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e1c7      	b.n	8003aae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800371e:	4b3b      	ldr	r3, [pc, #236]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	4937      	ldr	r1, [pc, #220]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 800372e:	4313      	orrs	r3, r2
 8003730:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003732:	e03a      	b.n	80037aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d020      	beq.n	800377e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800373c:	4b34      	ldr	r3, [pc, #208]	@ (8003810 <HAL_RCC_OscConfig+0x244>)
 800373e:	2201      	movs	r2, #1
 8003740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003742:	f7fe fc55 	bl	8001ff0 <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003748:	e008      	b.n	800375c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800374a:	f7fe fc51 	bl	8001ff0 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e1a8      	b.n	8003aae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800375c:	4b2b      	ldr	r3, [pc, #172]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0f0      	beq.n	800374a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003768:	4b28      	ldr	r3, [pc, #160]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	4925      	ldr	r1, [pc, #148]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 8003778:	4313      	orrs	r3, r2
 800377a:	600b      	str	r3, [r1, #0]
 800377c:	e015      	b.n	80037aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800377e:	4b24      	ldr	r3, [pc, #144]	@ (8003810 <HAL_RCC_OscConfig+0x244>)
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003784:	f7fe fc34 	bl	8001ff0 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800378c:	f7fe fc30 	bl	8001ff0 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e187      	b.n	8003aae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800379e:	4b1b      	ldr	r3, [pc, #108]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f0      	bne.n	800378c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0308 	and.w	r3, r3, #8
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d036      	beq.n	8003824 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d016      	beq.n	80037ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037be:	4b15      	ldr	r3, [pc, #84]	@ (8003814 <HAL_RCC_OscConfig+0x248>)
 80037c0:	2201      	movs	r2, #1
 80037c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c4:	f7fe fc14 	bl	8001ff0 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037cc:	f7fe fc10 	bl	8001ff0 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e167      	b.n	8003aae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037de:	4b0b      	ldr	r3, [pc, #44]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 80037e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0f0      	beq.n	80037cc <HAL_RCC_OscConfig+0x200>
 80037ea:	e01b      	b.n	8003824 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037ec:	4b09      	ldr	r3, [pc, #36]	@ (8003814 <HAL_RCC_OscConfig+0x248>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037f2:	f7fe fbfd 	bl	8001ff0 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037f8:	e00e      	b.n	8003818 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037fa:	f7fe fbf9 	bl	8001ff0 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d907      	bls.n	8003818 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e150      	b.n	8003aae <HAL_RCC_OscConfig+0x4e2>
 800380c:	40023800 	.word	0x40023800
 8003810:	42470000 	.word	0x42470000
 8003814:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003818:	4b88      	ldr	r3, [pc, #544]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 800381a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1ea      	bne.n	80037fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 8097 	beq.w	8003960 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003832:	2300      	movs	r3, #0
 8003834:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003836:	4b81      	ldr	r3, [pc, #516]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 8003838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10f      	bne.n	8003862 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003842:	2300      	movs	r3, #0
 8003844:	60bb      	str	r3, [r7, #8]
 8003846:	4b7d      	ldr	r3, [pc, #500]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 8003848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384a:	4a7c      	ldr	r2, [pc, #496]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 800384c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003850:	6413      	str	r3, [r2, #64]	@ 0x40
 8003852:	4b7a      	ldr	r3, [pc, #488]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 8003854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800385a:	60bb      	str	r3, [r7, #8]
 800385c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800385e:	2301      	movs	r3, #1
 8003860:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003862:	4b77      	ldr	r3, [pc, #476]	@ (8003a40 <HAL_RCC_OscConfig+0x474>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800386a:	2b00      	cmp	r3, #0
 800386c:	d118      	bne.n	80038a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800386e:	4b74      	ldr	r3, [pc, #464]	@ (8003a40 <HAL_RCC_OscConfig+0x474>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a73      	ldr	r2, [pc, #460]	@ (8003a40 <HAL_RCC_OscConfig+0x474>)
 8003874:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003878:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800387a:	f7fe fbb9 	bl	8001ff0 <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003882:	f7fe fbb5 	bl	8001ff0 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e10c      	b.n	8003aae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003894:	4b6a      	ldr	r3, [pc, #424]	@ (8003a40 <HAL_RCC_OscConfig+0x474>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0f0      	beq.n	8003882 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d106      	bne.n	80038b6 <HAL_RCC_OscConfig+0x2ea>
 80038a8:	4b64      	ldr	r3, [pc, #400]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 80038aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ac:	4a63      	ldr	r2, [pc, #396]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 80038ae:	f043 0301 	orr.w	r3, r3, #1
 80038b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80038b4:	e01c      	b.n	80038f0 <HAL_RCC_OscConfig+0x324>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	2b05      	cmp	r3, #5
 80038bc:	d10c      	bne.n	80038d8 <HAL_RCC_OscConfig+0x30c>
 80038be:	4b5f      	ldr	r3, [pc, #380]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 80038c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038c2:	4a5e      	ldr	r2, [pc, #376]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 80038c4:	f043 0304 	orr.w	r3, r3, #4
 80038c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80038ca:	4b5c      	ldr	r3, [pc, #368]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 80038cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ce:	4a5b      	ldr	r2, [pc, #364]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 80038d0:	f043 0301 	orr.w	r3, r3, #1
 80038d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80038d6:	e00b      	b.n	80038f0 <HAL_RCC_OscConfig+0x324>
 80038d8:	4b58      	ldr	r3, [pc, #352]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 80038da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038dc:	4a57      	ldr	r2, [pc, #348]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 80038de:	f023 0301 	bic.w	r3, r3, #1
 80038e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80038e4:	4b55      	ldr	r3, [pc, #340]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 80038e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038e8:	4a54      	ldr	r2, [pc, #336]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 80038ea:	f023 0304 	bic.w	r3, r3, #4
 80038ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d015      	beq.n	8003924 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f8:	f7fe fb7a 	bl	8001ff0 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038fe:	e00a      	b.n	8003916 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003900:	f7fe fb76 	bl	8001ff0 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800390e:	4293      	cmp	r3, r2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e0cb      	b.n	8003aae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003916:	4b49      	ldr	r3, [pc, #292]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 8003918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0ee      	beq.n	8003900 <HAL_RCC_OscConfig+0x334>
 8003922:	e014      	b.n	800394e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003924:	f7fe fb64 	bl	8001ff0 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800392a:	e00a      	b.n	8003942 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800392c:	f7fe fb60 	bl	8001ff0 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	f241 3288 	movw	r2, #5000	@ 0x1388
 800393a:	4293      	cmp	r3, r2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e0b5      	b.n	8003aae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003942:	4b3e      	ldr	r3, [pc, #248]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 8003944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1ee      	bne.n	800392c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800394e:	7dfb      	ldrb	r3, [r7, #23]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d105      	bne.n	8003960 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003954:	4b39      	ldr	r3, [pc, #228]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 8003956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003958:	4a38      	ldr	r2, [pc, #224]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 800395a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800395e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 80a1 	beq.w	8003aac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800396a:	4b34      	ldr	r3, [pc, #208]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 030c 	and.w	r3, r3, #12
 8003972:	2b08      	cmp	r3, #8
 8003974:	d05c      	beq.n	8003a30 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	2b02      	cmp	r3, #2
 800397c:	d141      	bne.n	8003a02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800397e:	4b31      	ldr	r3, [pc, #196]	@ (8003a44 <HAL_RCC_OscConfig+0x478>)
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003984:	f7fe fb34 	bl	8001ff0 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800398c:	f7fe fb30 	bl	8001ff0 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e087      	b.n	8003aae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800399e:	4b27      	ldr	r3, [pc, #156]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f0      	bne.n	800398c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69da      	ldr	r2, [r3, #28]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b8:	019b      	lsls	r3, r3, #6
 80039ba:	431a      	orrs	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c0:	085b      	lsrs	r3, r3, #1
 80039c2:	3b01      	subs	r3, #1
 80039c4:	041b      	lsls	r3, r3, #16
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039cc:	061b      	lsls	r3, r3, #24
 80039ce:	491b      	ldr	r1, [pc, #108]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003a44 <HAL_RCC_OscConfig+0x478>)
 80039d6:	2201      	movs	r2, #1
 80039d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039da:	f7fe fb09 	bl	8001ff0 <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e2:	f7fe fb05 	bl	8001ff0 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e05c      	b.n	8003aae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039f4:	4b11      	ldr	r3, [pc, #68]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0f0      	beq.n	80039e2 <HAL_RCC_OscConfig+0x416>
 8003a00:	e054      	b.n	8003aac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a02:	4b10      	ldr	r3, [pc, #64]	@ (8003a44 <HAL_RCC_OscConfig+0x478>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a08:	f7fe faf2 	bl	8001ff0 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a10:	f7fe faee 	bl	8001ff0 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e045      	b.n	8003aae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a22:	4b06      	ldr	r3, [pc, #24]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f0      	bne.n	8003a10 <HAL_RCC_OscConfig+0x444>
 8003a2e:	e03d      	b.n	8003aac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d107      	bne.n	8003a48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e038      	b.n	8003aae <HAL_RCC_OscConfig+0x4e2>
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	40007000 	.word	0x40007000
 8003a44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a48:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab8 <HAL_RCC_OscConfig+0x4ec>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d028      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d121      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d11a      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a78:	4013      	ands	r3, r2
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d111      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a8e:	085b      	lsrs	r3, r3, #1
 8003a90:	3b01      	subs	r3, #1
 8003a92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d107      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d001      	beq.n	8003aac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e000      	b.n	8003aae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3718      	adds	r7, #24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40023800 	.word	0x40023800

08003abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e0cc      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ad0:	4b68      	ldr	r3, [pc, #416]	@ (8003c74 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d90c      	bls.n	8003af8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ade:	4b65      	ldr	r3, [pc, #404]	@ (8003c74 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae6:	4b63      	ldr	r3, [pc, #396]	@ (8003c74 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d001      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e0b8      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d020      	beq.n	8003b46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d005      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b10:	4b59      	ldr	r3, [pc, #356]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	4a58      	ldr	r2, [pc, #352]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0308 	and.w	r3, r3, #8
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d005      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b28:	4b53      	ldr	r3, [pc, #332]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	4a52      	ldr	r2, [pc, #328]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b34:	4b50      	ldr	r3, [pc, #320]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	494d      	ldr	r1, [pc, #308]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d044      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d107      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5a:	4b47      	ldr	r3, [pc, #284]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d119      	bne.n	8003b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e07f      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d003      	beq.n	8003b7a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b76:	2b03      	cmp	r3, #3
 8003b78:	d107      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b7a:	4b3f      	ldr	r3, [pc, #252]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d109      	bne.n	8003b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e06f      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b8a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e067      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b9a:	4b37      	ldr	r3, [pc, #220]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f023 0203 	bic.w	r2, r3, #3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	4934      	ldr	r1, [pc, #208]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bac:	f7fe fa20 	bl	8001ff0 <HAL_GetTick>
 8003bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb2:	e00a      	b.n	8003bca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb4:	f7fe fa1c 	bl	8001ff0 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e04f      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bca:	4b2b      	ldr	r3, [pc, #172]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 020c 	and.w	r2, r3, #12
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d1eb      	bne.n	8003bb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bdc:	4b25      	ldr	r3, [pc, #148]	@ (8003c74 <HAL_RCC_ClockConfig+0x1b8>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0307 	and.w	r3, r3, #7
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d20c      	bcs.n	8003c04 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bea:	4b22      	ldr	r3, [pc, #136]	@ (8003c74 <HAL_RCC_ClockConfig+0x1b8>)
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf2:	4b20      	ldr	r3, [pc, #128]	@ (8003c74 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d001      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e032      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d008      	beq.n	8003c22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c10:	4b19      	ldr	r3, [pc, #100]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	4916      	ldr	r1, [pc, #88]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d009      	beq.n	8003c42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c2e:	4b12      	ldr	r3, [pc, #72]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	490e      	ldr	r1, [pc, #56]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c42:	f000 f821 	bl	8003c88 <HAL_RCC_GetSysClockFreq>
 8003c46:	4602      	mov	r2, r0
 8003c48:	4b0b      	ldr	r3, [pc, #44]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	091b      	lsrs	r3, r3, #4
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	490a      	ldr	r1, [pc, #40]	@ (8003c7c <HAL_RCC_ClockConfig+0x1c0>)
 8003c54:	5ccb      	ldrb	r3, [r1, r3]
 8003c56:	fa22 f303 	lsr.w	r3, r2, r3
 8003c5a:	4a09      	ldr	r2, [pc, #36]	@ (8003c80 <HAL_RCC_ClockConfig+0x1c4>)
 8003c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003c5e:	4b09      	ldr	r3, [pc, #36]	@ (8003c84 <HAL_RCC_ClockConfig+0x1c8>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fe f980 	bl	8001f68 <HAL_InitTick>

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40023c00 	.word	0x40023c00
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	0800bbc8 	.word	0x0800bbc8
 8003c80:	20000060 	.word	0x20000060
 8003c84:	20000064 	.word	0x20000064

08003c88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c8c:	b090      	sub	sp, #64	@ 0x40
 8003c8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c90:	2300      	movs	r3, #0
 8003c92:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ca0:	4b59      	ldr	r3, [pc, #356]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f003 030c 	and.w	r3, r3, #12
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d00d      	beq.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x40>
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	f200 80a1 	bhi.w	8003df4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <HAL_RCC_GetSysClockFreq+0x34>
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d003      	beq.n	8003cc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003cba:	e09b      	b.n	8003df4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cbc:	4b53      	ldr	r3, [pc, #332]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x184>)
 8003cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003cc0:	e09b      	b.n	8003dfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cc2:	4b53      	ldr	r3, [pc, #332]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cc4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003cc6:	e098      	b.n	8003dfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cc8:	4b4f      	ldr	r3, [pc, #316]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cd0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cd2:	4b4d      	ldr	r3, [pc, #308]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d028      	beq.n	8003d30 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cde:	4b4a      	ldr	r3, [pc, #296]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	099b      	lsrs	r3, r3, #6
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	623b      	str	r3, [r7, #32]
 8003ce8:	627a      	str	r2, [r7, #36]	@ 0x24
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	4b47      	ldr	r3, [pc, #284]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cf4:	fb03 f201 	mul.w	r2, r3, r1
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	fb00 f303 	mul.w	r3, r0, r3
 8003cfe:	4413      	add	r3, r2
 8003d00:	4a43      	ldr	r2, [pc, #268]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d02:	fba0 1202 	umull	r1, r2, r0, r2
 8003d06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d08:	460a      	mov	r2, r1
 8003d0a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003d0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d0e:	4413      	add	r3, r2
 8003d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d14:	2200      	movs	r2, #0
 8003d16:	61bb      	str	r3, [r7, #24]
 8003d18:	61fa      	str	r2, [r7, #28]
 8003d1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003d22:	f7fc ffb1 	bl	8000c88 <__aeabi_uldivmod>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d2e:	e053      	b.n	8003dd8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d30:	4b35      	ldr	r3, [pc, #212]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	099b      	lsrs	r3, r3, #6
 8003d36:	2200      	movs	r2, #0
 8003d38:	613b      	str	r3, [r7, #16]
 8003d3a:	617a      	str	r2, [r7, #20]
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003d42:	f04f 0b00 	mov.w	fp, #0
 8003d46:	4652      	mov	r2, sl
 8003d48:	465b      	mov	r3, fp
 8003d4a:	f04f 0000 	mov.w	r0, #0
 8003d4e:	f04f 0100 	mov.w	r1, #0
 8003d52:	0159      	lsls	r1, r3, #5
 8003d54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d58:	0150      	lsls	r0, r2, #5
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	ebb2 080a 	subs.w	r8, r2, sl
 8003d62:	eb63 090b 	sbc.w	r9, r3, fp
 8003d66:	f04f 0200 	mov.w	r2, #0
 8003d6a:	f04f 0300 	mov.w	r3, #0
 8003d6e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d72:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d76:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d7a:	ebb2 0408 	subs.w	r4, r2, r8
 8003d7e:	eb63 0509 	sbc.w	r5, r3, r9
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	f04f 0300 	mov.w	r3, #0
 8003d8a:	00eb      	lsls	r3, r5, #3
 8003d8c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d90:	00e2      	lsls	r2, r4, #3
 8003d92:	4614      	mov	r4, r2
 8003d94:	461d      	mov	r5, r3
 8003d96:	eb14 030a 	adds.w	r3, r4, sl
 8003d9a:	603b      	str	r3, [r7, #0]
 8003d9c:	eb45 030b 	adc.w	r3, r5, fp
 8003da0:	607b      	str	r3, [r7, #4]
 8003da2:	f04f 0200 	mov.w	r2, #0
 8003da6:	f04f 0300 	mov.w	r3, #0
 8003daa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dae:	4629      	mov	r1, r5
 8003db0:	028b      	lsls	r3, r1, #10
 8003db2:	4621      	mov	r1, r4
 8003db4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003db8:	4621      	mov	r1, r4
 8003dba:	028a      	lsls	r2, r1, #10
 8003dbc:	4610      	mov	r0, r2
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	60bb      	str	r3, [r7, #8]
 8003dc6:	60fa      	str	r2, [r7, #12]
 8003dc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dcc:	f7fc ff5c 	bl	8000c88 <__aeabi_uldivmod>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	0c1b      	lsrs	r3, r3, #16
 8003dde:	f003 0303 	and.w	r3, r3, #3
 8003de2:	3301      	adds	r3, #1
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003de8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003df2:	e002      	b.n	8003dfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003df4:	4b05      	ldr	r3, [pc, #20]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x184>)
 8003df6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003df8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3740      	adds	r7, #64	@ 0x40
 8003e00:	46bd      	mov	sp, r7
 8003e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e06:	bf00      	nop
 8003e08:	40023800 	.word	0x40023800
 8003e0c:	00f42400 	.word	0x00f42400
 8003e10:	017d7840 	.word	0x017d7840

08003e14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e18:	4b03      	ldr	r3, [pc, #12]	@ (8003e28 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	20000060 	.word	0x20000060

08003e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e30:	f7ff fff0 	bl	8003e14 <HAL_RCC_GetHCLKFreq>
 8003e34:	4602      	mov	r2, r0
 8003e36:	4b05      	ldr	r3, [pc, #20]	@ (8003e4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	0a9b      	lsrs	r3, r3, #10
 8003e3c:	f003 0307 	and.w	r3, r3, #7
 8003e40:	4903      	ldr	r1, [pc, #12]	@ (8003e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e42:	5ccb      	ldrb	r3, [r1, r3]
 8003e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	40023800 	.word	0x40023800
 8003e50:	0800bbd8 	.word	0x0800bbd8

08003e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e58:	f7ff ffdc 	bl	8003e14 <HAL_RCC_GetHCLKFreq>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	4b05      	ldr	r3, [pc, #20]	@ (8003e74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	0b5b      	lsrs	r3, r3, #13
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	4903      	ldr	r1, [pc, #12]	@ (8003e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e6a:	5ccb      	ldrb	r3, [r1, r3]
 8003e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	40023800 	.word	0x40023800
 8003e78:	0800bbd8 	.word	0x0800bbd8

08003e7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e042      	b.n	8003f14 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d106      	bne.n	8003ea8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7fd fec4 	bl	8001c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2224      	movs	r2, #36	@ 0x24
 8003eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68da      	ldr	r2, [r3, #12]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ebe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f82b 	bl	8003f1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	691a      	ldr	r2, [r3, #16]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ed4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	695a      	ldr	r2, [r3, #20]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ee4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68da      	ldr	r2, [r3, #12]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ef4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2220      	movs	r2, #32
 8003f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f20:	b0c0      	sub	sp, #256	@ 0x100
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f38:	68d9      	ldr	r1, [r3, #12]
 8003f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	ea40 0301 	orr.w	r3, r0, r1
 8003f44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	431a      	orrs	r2, r3
 8003f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003f74:	f021 010c 	bic.w	r1, r1, #12
 8003f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003f82:	430b      	orrs	r3, r1
 8003f84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f96:	6999      	ldr	r1, [r3, #24]
 8003f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	ea40 0301 	orr.w	r3, r0, r1
 8003fa2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	4b8f      	ldr	r3, [pc, #572]	@ (80041e8 <UART_SetConfig+0x2cc>)
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d005      	beq.n	8003fbc <UART_SetConfig+0xa0>
 8003fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	4b8d      	ldr	r3, [pc, #564]	@ (80041ec <UART_SetConfig+0x2d0>)
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d104      	bne.n	8003fc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fbc:	f7ff ff4a 	bl	8003e54 <HAL_RCC_GetPCLK2Freq>
 8003fc0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003fc4:	e003      	b.n	8003fce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fc6:	f7ff ff31 	bl	8003e2c <HAL_RCC_GetPCLK1Freq>
 8003fca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd2:	69db      	ldr	r3, [r3, #28]
 8003fd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fd8:	f040 810c 	bne.w	80041f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003fe6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003fea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003fee:	4622      	mov	r2, r4
 8003ff0:	462b      	mov	r3, r5
 8003ff2:	1891      	adds	r1, r2, r2
 8003ff4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003ff6:	415b      	adcs	r3, r3
 8003ff8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ffa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003ffe:	4621      	mov	r1, r4
 8004000:	eb12 0801 	adds.w	r8, r2, r1
 8004004:	4629      	mov	r1, r5
 8004006:	eb43 0901 	adc.w	r9, r3, r1
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	f04f 0300 	mov.w	r3, #0
 8004012:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004016:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800401a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800401e:	4690      	mov	r8, r2
 8004020:	4699      	mov	r9, r3
 8004022:	4623      	mov	r3, r4
 8004024:	eb18 0303 	adds.w	r3, r8, r3
 8004028:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800402c:	462b      	mov	r3, r5
 800402e:	eb49 0303 	adc.w	r3, r9, r3
 8004032:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004042:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004046:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800404a:	460b      	mov	r3, r1
 800404c:	18db      	adds	r3, r3, r3
 800404e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004050:	4613      	mov	r3, r2
 8004052:	eb42 0303 	adc.w	r3, r2, r3
 8004056:	657b      	str	r3, [r7, #84]	@ 0x54
 8004058:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800405c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004060:	f7fc fe12 	bl	8000c88 <__aeabi_uldivmod>
 8004064:	4602      	mov	r2, r0
 8004066:	460b      	mov	r3, r1
 8004068:	4b61      	ldr	r3, [pc, #388]	@ (80041f0 <UART_SetConfig+0x2d4>)
 800406a:	fba3 2302 	umull	r2, r3, r3, r2
 800406e:	095b      	lsrs	r3, r3, #5
 8004070:	011c      	lsls	r4, r3, #4
 8004072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004076:	2200      	movs	r2, #0
 8004078:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800407c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004080:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004084:	4642      	mov	r2, r8
 8004086:	464b      	mov	r3, r9
 8004088:	1891      	adds	r1, r2, r2
 800408a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800408c:	415b      	adcs	r3, r3
 800408e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004090:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004094:	4641      	mov	r1, r8
 8004096:	eb12 0a01 	adds.w	sl, r2, r1
 800409a:	4649      	mov	r1, r9
 800409c:	eb43 0b01 	adc.w	fp, r3, r1
 80040a0:	f04f 0200 	mov.w	r2, #0
 80040a4:	f04f 0300 	mov.w	r3, #0
 80040a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040b4:	4692      	mov	sl, r2
 80040b6:	469b      	mov	fp, r3
 80040b8:	4643      	mov	r3, r8
 80040ba:	eb1a 0303 	adds.w	r3, sl, r3
 80040be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80040c2:	464b      	mov	r3, r9
 80040c4:	eb4b 0303 	adc.w	r3, fp, r3
 80040c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80040cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80040dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80040e0:	460b      	mov	r3, r1
 80040e2:	18db      	adds	r3, r3, r3
 80040e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80040e6:	4613      	mov	r3, r2
 80040e8:	eb42 0303 	adc.w	r3, r2, r3
 80040ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80040ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80040f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80040f6:	f7fc fdc7 	bl	8000c88 <__aeabi_uldivmod>
 80040fa:	4602      	mov	r2, r0
 80040fc:	460b      	mov	r3, r1
 80040fe:	4611      	mov	r1, r2
 8004100:	4b3b      	ldr	r3, [pc, #236]	@ (80041f0 <UART_SetConfig+0x2d4>)
 8004102:	fba3 2301 	umull	r2, r3, r3, r1
 8004106:	095b      	lsrs	r3, r3, #5
 8004108:	2264      	movs	r2, #100	@ 0x64
 800410a:	fb02 f303 	mul.w	r3, r2, r3
 800410e:	1acb      	subs	r3, r1, r3
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004116:	4b36      	ldr	r3, [pc, #216]	@ (80041f0 <UART_SetConfig+0x2d4>)
 8004118:	fba3 2302 	umull	r2, r3, r3, r2
 800411c:	095b      	lsrs	r3, r3, #5
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004124:	441c      	add	r4, r3
 8004126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800412a:	2200      	movs	r2, #0
 800412c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004130:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004134:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004138:	4642      	mov	r2, r8
 800413a:	464b      	mov	r3, r9
 800413c:	1891      	adds	r1, r2, r2
 800413e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004140:	415b      	adcs	r3, r3
 8004142:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004144:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004148:	4641      	mov	r1, r8
 800414a:	1851      	adds	r1, r2, r1
 800414c:	6339      	str	r1, [r7, #48]	@ 0x30
 800414e:	4649      	mov	r1, r9
 8004150:	414b      	adcs	r3, r1
 8004152:	637b      	str	r3, [r7, #52]	@ 0x34
 8004154:	f04f 0200 	mov.w	r2, #0
 8004158:	f04f 0300 	mov.w	r3, #0
 800415c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004160:	4659      	mov	r1, fp
 8004162:	00cb      	lsls	r3, r1, #3
 8004164:	4651      	mov	r1, sl
 8004166:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800416a:	4651      	mov	r1, sl
 800416c:	00ca      	lsls	r2, r1, #3
 800416e:	4610      	mov	r0, r2
 8004170:	4619      	mov	r1, r3
 8004172:	4603      	mov	r3, r0
 8004174:	4642      	mov	r2, r8
 8004176:	189b      	adds	r3, r3, r2
 8004178:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800417c:	464b      	mov	r3, r9
 800417e:	460a      	mov	r2, r1
 8004180:	eb42 0303 	adc.w	r3, r2, r3
 8004184:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004194:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004198:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800419c:	460b      	mov	r3, r1
 800419e:	18db      	adds	r3, r3, r3
 80041a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041a2:	4613      	mov	r3, r2
 80041a4:	eb42 0303 	adc.w	r3, r2, r3
 80041a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80041ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80041b2:	f7fc fd69 	bl	8000c88 <__aeabi_uldivmod>
 80041b6:	4602      	mov	r2, r0
 80041b8:	460b      	mov	r3, r1
 80041ba:	4b0d      	ldr	r3, [pc, #52]	@ (80041f0 <UART_SetConfig+0x2d4>)
 80041bc:	fba3 1302 	umull	r1, r3, r3, r2
 80041c0:	095b      	lsrs	r3, r3, #5
 80041c2:	2164      	movs	r1, #100	@ 0x64
 80041c4:	fb01 f303 	mul.w	r3, r1, r3
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	3332      	adds	r3, #50	@ 0x32
 80041ce:	4a08      	ldr	r2, [pc, #32]	@ (80041f0 <UART_SetConfig+0x2d4>)
 80041d0:	fba2 2303 	umull	r2, r3, r2, r3
 80041d4:	095b      	lsrs	r3, r3, #5
 80041d6:	f003 0207 	and.w	r2, r3, #7
 80041da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4422      	add	r2, r4
 80041e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041e4:	e106      	b.n	80043f4 <UART_SetConfig+0x4d8>
 80041e6:	bf00      	nop
 80041e8:	40011000 	.word	0x40011000
 80041ec:	40011400 	.word	0x40011400
 80041f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041f8:	2200      	movs	r2, #0
 80041fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80041fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004202:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004206:	4642      	mov	r2, r8
 8004208:	464b      	mov	r3, r9
 800420a:	1891      	adds	r1, r2, r2
 800420c:	6239      	str	r1, [r7, #32]
 800420e:	415b      	adcs	r3, r3
 8004210:	627b      	str	r3, [r7, #36]	@ 0x24
 8004212:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004216:	4641      	mov	r1, r8
 8004218:	1854      	adds	r4, r2, r1
 800421a:	4649      	mov	r1, r9
 800421c:	eb43 0501 	adc.w	r5, r3, r1
 8004220:	f04f 0200 	mov.w	r2, #0
 8004224:	f04f 0300 	mov.w	r3, #0
 8004228:	00eb      	lsls	r3, r5, #3
 800422a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800422e:	00e2      	lsls	r2, r4, #3
 8004230:	4614      	mov	r4, r2
 8004232:	461d      	mov	r5, r3
 8004234:	4643      	mov	r3, r8
 8004236:	18e3      	adds	r3, r4, r3
 8004238:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800423c:	464b      	mov	r3, r9
 800423e:	eb45 0303 	adc.w	r3, r5, r3
 8004242:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004252:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	f04f 0300 	mov.w	r3, #0
 800425e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004262:	4629      	mov	r1, r5
 8004264:	008b      	lsls	r3, r1, #2
 8004266:	4621      	mov	r1, r4
 8004268:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800426c:	4621      	mov	r1, r4
 800426e:	008a      	lsls	r2, r1, #2
 8004270:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004274:	f7fc fd08 	bl	8000c88 <__aeabi_uldivmod>
 8004278:	4602      	mov	r2, r0
 800427a:	460b      	mov	r3, r1
 800427c:	4b60      	ldr	r3, [pc, #384]	@ (8004400 <UART_SetConfig+0x4e4>)
 800427e:	fba3 2302 	umull	r2, r3, r3, r2
 8004282:	095b      	lsrs	r3, r3, #5
 8004284:	011c      	lsls	r4, r3, #4
 8004286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800428a:	2200      	movs	r2, #0
 800428c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004290:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004294:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004298:	4642      	mov	r2, r8
 800429a:	464b      	mov	r3, r9
 800429c:	1891      	adds	r1, r2, r2
 800429e:	61b9      	str	r1, [r7, #24]
 80042a0:	415b      	adcs	r3, r3
 80042a2:	61fb      	str	r3, [r7, #28]
 80042a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042a8:	4641      	mov	r1, r8
 80042aa:	1851      	adds	r1, r2, r1
 80042ac:	6139      	str	r1, [r7, #16]
 80042ae:	4649      	mov	r1, r9
 80042b0:	414b      	adcs	r3, r1
 80042b2:	617b      	str	r3, [r7, #20]
 80042b4:	f04f 0200 	mov.w	r2, #0
 80042b8:	f04f 0300 	mov.w	r3, #0
 80042bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042c0:	4659      	mov	r1, fp
 80042c2:	00cb      	lsls	r3, r1, #3
 80042c4:	4651      	mov	r1, sl
 80042c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042ca:	4651      	mov	r1, sl
 80042cc:	00ca      	lsls	r2, r1, #3
 80042ce:	4610      	mov	r0, r2
 80042d0:	4619      	mov	r1, r3
 80042d2:	4603      	mov	r3, r0
 80042d4:	4642      	mov	r2, r8
 80042d6:	189b      	adds	r3, r3, r2
 80042d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80042dc:	464b      	mov	r3, r9
 80042de:	460a      	mov	r2, r1
 80042e0:	eb42 0303 	adc.w	r3, r2, r3
 80042e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80042e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80042f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80042f4:	f04f 0200 	mov.w	r2, #0
 80042f8:	f04f 0300 	mov.w	r3, #0
 80042fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004300:	4649      	mov	r1, r9
 8004302:	008b      	lsls	r3, r1, #2
 8004304:	4641      	mov	r1, r8
 8004306:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800430a:	4641      	mov	r1, r8
 800430c:	008a      	lsls	r2, r1, #2
 800430e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004312:	f7fc fcb9 	bl	8000c88 <__aeabi_uldivmod>
 8004316:	4602      	mov	r2, r0
 8004318:	460b      	mov	r3, r1
 800431a:	4611      	mov	r1, r2
 800431c:	4b38      	ldr	r3, [pc, #224]	@ (8004400 <UART_SetConfig+0x4e4>)
 800431e:	fba3 2301 	umull	r2, r3, r3, r1
 8004322:	095b      	lsrs	r3, r3, #5
 8004324:	2264      	movs	r2, #100	@ 0x64
 8004326:	fb02 f303 	mul.w	r3, r2, r3
 800432a:	1acb      	subs	r3, r1, r3
 800432c:	011b      	lsls	r3, r3, #4
 800432e:	3332      	adds	r3, #50	@ 0x32
 8004330:	4a33      	ldr	r2, [pc, #204]	@ (8004400 <UART_SetConfig+0x4e4>)
 8004332:	fba2 2303 	umull	r2, r3, r2, r3
 8004336:	095b      	lsrs	r3, r3, #5
 8004338:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800433c:	441c      	add	r4, r3
 800433e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004342:	2200      	movs	r2, #0
 8004344:	673b      	str	r3, [r7, #112]	@ 0x70
 8004346:	677a      	str	r2, [r7, #116]	@ 0x74
 8004348:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800434c:	4642      	mov	r2, r8
 800434e:	464b      	mov	r3, r9
 8004350:	1891      	adds	r1, r2, r2
 8004352:	60b9      	str	r1, [r7, #8]
 8004354:	415b      	adcs	r3, r3
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800435c:	4641      	mov	r1, r8
 800435e:	1851      	adds	r1, r2, r1
 8004360:	6039      	str	r1, [r7, #0]
 8004362:	4649      	mov	r1, r9
 8004364:	414b      	adcs	r3, r1
 8004366:	607b      	str	r3, [r7, #4]
 8004368:	f04f 0200 	mov.w	r2, #0
 800436c:	f04f 0300 	mov.w	r3, #0
 8004370:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004374:	4659      	mov	r1, fp
 8004376:	00cb      	lsls	r3, r1, #3
 8004378:	4651      	mov	r1, sl
 800437a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800437e:	4651      	mov	r1, sl
 8004380:	00ca      	lsls	r2, r1, #3
 8004382:	4610      	mov	r0, r2
 8004384:	4619      	mov	r1, r3
 8004386:	4603      	mov	r3, r0
 8004388:	4642      	mov	r2, r8
 800438a:	189b      	adds	r3, r3, r2
 800438c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800438e:	464b      	mov	r3, r9
 8004390:	460a      	mov	r2, r1
 8004392:	eb42 0303 	adc.w	r3, r2, r3
 8004396:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80043a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80043a4:	f04f 0200 	mov.w	r2, #0
 80043a8:	f04f 0300 	mov.w	r3, #0
 80043ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80043b0:	4649      	mov	r1, r9
 80043b2:	008b      	lsls	r3, r1, #2
 80043b4:	4641      	mov	r1, r8
 80043b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043ba:	4641      	mov	r1, r8
 80043bc:	008a      	lsls	r2, r1, #2
 80043be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80043c2:	f7fc fc61 	bl	8000c88 <__aeabi_uldivmod>
 80043c6:	4602      	mov	r2, r0
 80043c8:	460b      	mov	r3, r1
 80043ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004400 <UART_SetConfig+0x4e4>)
 80043cc:	fba3 1302 	umull	r1, r3, r3, r2
 80043d0:	095b      	lsrs	r3, r3, #5
 80043d2:	2164      	movs	r1, #100	@ 0x64
 80043d4:	fb01 f303 	mul.w	r3, r1, r3
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	3332      	adds	r3, #50	@ 0x32
 80043de:	4a08      	ldr	r2, [pc, #32]	@ (8004400 <UART_SetConfig+0x4e4>)
 80043e0:	fba2 2303 	umull	r2, r3, r2, r3
 80043e4:	095b      	lsrs	r3, r3, #5
 80043e6:	f003 020f 	and.w	r2, r3, #15
 80043ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4422      	add	r2, r4
 80043f2:	609a      	str	r2, [r3, #8]
}
 80043f4:	bf00      	nop
 80043f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80043fa:	46bd      	mov	sp, r7
 80043fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004400:	51eb851f 	.word	0x51eb851f

08004404 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8004408:	bf00      	nop
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
	...

08004414 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af04      	add	r7, sp, #16
 800441a:	4603      	mov	r3, r0
 800441c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800441e:	f04f 33ff 	mov.w	r3, #4294967295
 8004422:	9302      	str	r3, [sp, #8]
 8004424:	2301      	movs	r3, #1
 8004426:	9301      	str	r3, [sp, #4]
 8004428:	1dfb      	adds	r3, r7, #7
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	2301      	movs	r3, #1
 800442e:	2200      	movs	r2, #0
 8004430:	2178      	movs	r1, #120	@ 0x78
 8004432:	4803      	ldr	r0, [pc, #12]	@ (8004440 <ssd1306_WriteCommand+0x2c>)
 8004434:	f7fe f9ea 	bl	800280c <HAL_I2C_Mem_Write>
}
 8004438:	bf00      	nop
 800443a:	3708      	adds	r7, #8
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	20000288 	.word	0x20000288

08004444 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af04      	add	r7, sp, #16
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	b29b      	uxth	r3, r3
 8004452:	f04f 32ff 	mov.w	r2, #4294967295
 8004456:	9202      	str	r2, [sp, #8]
 8004458:	9301      	str	r3, [sp, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	2301      	movs	r3, #1
 8004460:	2240      	movs	r2, #64	@ 0x40
 8004462:	2178      	movs	r1, #120	@ 0x78
 8004464:	4803      	ldr	r0, [pc, #12]	@ (8004474 <ssd1306_WriteData+0x30>)
 8004466:	f7fe f9d1 	bl	800280c <HAL_I2C_Mem_Write>
}
 800446a:	bf00      	nop
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	20000288 	.word	0x20000288

08004478 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800447c:	f7ff ffc2 	bl	8004404 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8004480:	2064      	movs	r0, #100	@ 0x64
 8004482:	f7fd fdc1 	bl	8002008 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8004486:	2000      	movs	r0, #0
 8004488:	f000 fad4 	bl	8004a34 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800448c:	2020      	movs	r0, #32
 800448e:	f7ff ffc1 	bl	8004414 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8004492:	2000      	movs	r0, #0
 8004494:	f7ff ffbe 	bl	8004414 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004498:	20b0      	movs	r0, #176	@ 0xb0
 800449a:	f7ff ffbb 	bl	8004414 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800449e:	20c8      	movs	r0, #200	@ 0xc8
 80044a0:	f7ff ffb8 	bl	8004414 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80044a4:	2000      	movs	r0, #0
 80044a6:	f7ff ffb5 	bl	8004414 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80044aa:	2010      	movs	r0, #16
 80044ac:	f7ff ffb2 	bl	8004414 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80044b0:	2040      	movs	r0, #64	@ 0x40
 80044b2:	f7ff ffaf 	bl	8004414 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80044b6:	20ff      	movs	r0, #255	@ 0xff
 80044b8:	f000 faa8 	bl	8004a0c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80044bc:	20a1      	movs	r0, #161	@ 0xa1
 80044be:	f7ff ffa9 	bl	8004414 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80044c2:	20a6      	movs	r0, #166	@ 0xa6
 80044c4:	f7ff ffa6 	bl	8004414 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80044c8:	20a8      	movs	r0, #168	@ 0xa8
 80044ca:	f7ff ffa3 	bl	8004414 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80044ce:	203f      	movs	r0, #63	@ 0x3f
 80044d0:	f7ff ffa0 	bl	8004414 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80044d4:	20a4      	movs	r0, #164	@ 0xa4
 80044d6:	f7ff ff9d 	bl	8004414 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80044da:	20d3      	movs	r0, #211	@ 0xd3
 80044dc:	f7ff ff9a 	bl	8004414 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80044e0:	2000      	movs	r0, #0
 80044e2:	f7ff ff97 	bl	8004414 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80044e6:	20d5      	movs	r0, #213	@ 0xd5
 80044e8:	f7ff ff94 	bl	8004414 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80044ec:	20f0      	movs	r0, #240	@ 0xf0
 80044ee:	f7ff ff91 	bl	8004414 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80044f2:	20d9      	movs	r0, #217	@ 0xd9
 80044f4:	f7ff ff8e 	bl	8004414 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80044f8:	2022      	movs	r0, #34	@ 0x22
 80044fa:	f7ff ff8b 	bl	8004414 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80044fe:	20da      	movs	r0, #218	@ 0xda
 8004500:	f7ff ff88 	bl	8004414 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8004504:	2012      	movs	r0, #18
 8004506:	f7ff ff85 	bl	8004414 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800450a:	20db      	movs	r0, #219	@ 0xdb
 800450c:	f7ff ff82 	bl	8004414 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8004510:	2020      	movs	r0, #32
 8004512:	f7ff ff7f 	bl	8004414 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8004516:	208d      	movs	r0, #141	@ 0x8d
 8004518:	f7ff ff7c 	bl	8004414 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800451c:	2014      	movs	r0, #20
 800451e:	f7ff ff79 	bl	8004414 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8004522:	2001      	movs	r0, #1
 8004524:	f000 fa86 	bl	8004a34 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8004528:	2000      	movs	r0, #0
 800452a:	f000 f80f 	bl	800454c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800452e:	f000 f825 	bl	800457c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8004532:	4b05      	ldr	r3, [pc, #20]	@ (8004548 <ssd1306_Init+0xd0>)
 8004534:	2200      	movs	r2, #0
 8004536:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8004538:	4b03      	ldr	r3, [pc, #12]	@ (8004548 <ssd1306_Init+0xd0>)
 800453a:	2200      	movs	r2, #0
 800453c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800453e:	4b02      	ldr	r3, [pc, #8]	@ (8004548 <ssd1306_Init+0xd0>)
 8004540:	2201      	movs	r2, #1
 8004542:	711a      	strb	r2, [r3, #4]
}
 8004544:	bf00      	nop
 8004546:	bd80      	pop	{r7, pc}
 8004548:	2000072c 	.word	0x2000072c

0800454c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	4603      	mov	r3, r0
 8004554:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8004556:	79fb      	ldrb	r3, [r7, #7]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <ssd1306_Fill+0x14>
 800455c:	2300      	movs	r3, #0
 800455e:	e000      	b.n	8004562 <ssd1306_Fill+0x16>
 8004560:	23ff      	movs	r3, #255	@ 0xff
 8004562:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004566:	4619      	mov	r1, r3
 8004568:	4803      	ldr	r0, [pc, #12]	@ (8004578 <ssd1306_Fill+0x2c>)
 800456a:	f001 fa2c 	bl	80059c6 <memset>
}
 800456e:	bf00      	nop
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	2000032c 	.word	0x2000032c

0800457c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004582:	2300      	movs	r3, #0
 8004584:	71fb      	strb	r3, [r7, #7]
 8004586:	e016      	b.n	80045b6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8004588:	79fb      	ldrb	r3, [r7, #7]
 800458a:	3b50      	subs	r3, #80	@ 0x50
 800458c:	b2db      	uxtb	r3, r3
 800458e:	4618      	mov	r0, r3
 8004590:	f7ff ff40 	bl	8004414 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8004594:	2000      	movs	r0, #0
 8004596:	f7ff ff3d 	bl	8004414 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800459a:	2010      	movs	r0, #16
 800459c:	f7ff ff3a 	bl	8004414 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80045a0:	79fb      	ldrb	r3, [r7, #7]
 80045a2:	01db      	lsls	r3, r3, #7
 80045a4:	4a08      	ldr	r2, [pc, #32]	@ (80045c8 <ssd1306_UpdateScreen+0x4c>)
 80045a6:	4413      	add	r3, r2
 80045a8:	2180      	movs	r1, #128	@ 0x80
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff ff4a 	bl	8004444 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80045b0:	79fb      	ldrb	r3, [r7, #7]
 80045b2:	3301      	adds	r3, #1
 80045b4:	71fb      	strb	r3, [r7, #7]
 80045b6:	79fb      	ldrb	r3, [r7, #7]
 80045b8:	2b07      	cmp	r3, #7
 80045ba:	d9e5      	bls.n	8004588 <ssd1306_UpdateScreen+0xc>
    }
}
 80045bc:	bf00      	nop
 80045be:	bf00      	nop
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	2000032c 	.word	0x2000032c

080045cc <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	4603      	mov	r3, r0
 80045d4:	71fb      	strb	r3, [r7, #7]
 80045d6:	460b      	mov	r3, r1
 80045d8:	71bb      	strb	r3, [r7, #6]
 80045da:	4613      	mov	r3, r2
 80045dc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80045de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	db3d      	blt.n	8004662 <ssd1306_DrawPixel+0x96>
 80045e6:	79bb      	ldrb	r3, [r7, #6]
 80045e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80045ea:	d83a      	bhi.n	8004662 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80045ec:	797b      	ldrb	r3, [r7, #5]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d11a      	bne.n	8004628 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80045f2:	79fa      	ldrb	r2, [r7, #7]
 80045f4:	79bb      	ldrb	r3, [r7, #6]
 80045f6:	08db      	lsrs	r3, r3, #3
 80045f8:	b2d8      	uxtb	r0, r3
 80045fa:	4603      	mov	r3, r0
 80045fc:	01db      	lsls	r3, r3, #7
 80045fe:	4413      	add	r3, r2
 8004600:	4a1b      	ldr	r2, [pc, #108]	@ (8004670 <ssd1306_DrawPixel+0xa4>)
 8004602:	5cd3      	ldrb	r3, [r2, r3]
 8004604:	b25a      	sxtb	r2, r3
 8004606:	79bb      	ldrb	r3, [r7, #6]
 8004608:	f003 0307 	and.w	r3, r3, #7
 800460c:	2101      	movs	r1, #1
 800460e:	fa01 f303 	lsl.w	r3, r1, r3
 8004612:	b25b      	sxtb	r3, r3
 8004614:	4313      	orrs	r3, r2
 8004616:	b259      	sxtb	r1, r3
 8004618:	79fa      	ldrb	r2, [r7, #7]
 800461a:	4603      	mov	r3, r0
 800461c:	01db      	lsls	r3, r3, #7
 800461e:	4413      	add	r3, r2
 8004620:	b2c9      	uxtb	r1, r1
 8004622:	4a13      	ldr	r2, [pc, #76]	@ (8004670 <ssd1306_DrawPixel+0xa4>)
 8004624:	54d1      	strb	r1, [r2, r3]
 8004626:	e01d      	b.n	8004664 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004628:	79fa      	ldrb	r2, [r7, #7]
 800462a:	79bb      	ldrb	r3, [r7, #6]
 800462c:	08db      	lsrs	r3, r3, #3
 800462e:	b2d8      	uxtb	r0, r3
 8004630:	4603      	mov	r3, r0
 8004632:	01db      	lsls	r3, r3, #7
 8004634:	4413      	add	r3, r2
 8004636:	4a0e      	ldr	r2, [pc, #56]	@ (8004670 <ssd1306_DrawPixel+0xa4>)
 8004638:	5cd3      	ldrb	r3, [r2, r3]
 800463a:	b25a      	sxtb	r2, r3
 800463c:	79bb      	ldrb	r3, [r7, #6]
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	2101      	movs	r1, #1
 8004644:	fa01 f303 	lsl.w	r3, r1, r3
 8004648:	b25b      	sxtb	r3, r3
 800464a:	43db      	mvns	r3, r3
 800464c:	b25b      	sxtb	r3, r3
 800464e:	4013      	ands	r3, r2
 8004650:	b259      	sxtb	r1, r3
 8004652:	79fa      	ldrb	r2, [r7, #7]
 8004654:	4603      	mov	r3, r0
 8004656:	01db      	lsls	r3, r3, #7
 8004658:	4413      	add	r3, r2
 800465a:	b2c9      	uxtb	r1, r1
 800465c:	4a04      	ldr	r2, [pc, #16]	@ (8004670 <ssd1306_DrawPixel+0xa4>)
 800465e:	54d1      	strb	r1, [r2, r3]
 8004660:	e000      	b.n	8004664 <ssd1306_DrawPixel+0x98>
        return;
 8004662:	bf00      	nop
    }
}
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	2000032c 	.word	0x2000032c

08004674 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8004674:	b590      	push	{r4, r7, lr}
 8004676:	b089      	sub	sp, #36	@ 0x24
 8004678:	af00      	add	r7, sp, #0
 800467a:	4604      	mov	r4, r0
 800467c:	4638      	mov	r0, r7
 800467e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8004682:	4623      	mov	r3, r4
 8004684:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8004686:	7bfb      	ldrb	r3, [r7, #15]
 8004688:	2b1f      	cmp	r3, #31
 800468a:	d902      	bls.n	8004692 <ssd1306_WriteChar+0x1e>
 800468c:	7bfb      	ldrb	r3, [r7, #15]
 800468e:	2b7e      	cmp	r3, #126	@ 0x7e
 8004690:	d901      	bls.n	8004696 <ssd1306_WriteChar+0x22>
        return 0;
 8004692:	2300      	movs	r3, #0
 8004694:	e077      	b.n	8004786 <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8004696:	4b3e      	ldr	r3, [pc, #248]	@ (8004790 <ssd1306_WriteChar+0x11c>)
 8004698:	881b      	ldrh	r3, [r3, #0]
 800469a:	461a      	mov	r2, r3
 800469c:	783b      	ldrb	r3, [r7, #0]
 800469e:	4413      	add	r3, r2
 80046a0:	2b80      	cmp	r3, #128	@ 0x80
 80046a2:	dc06      	bgt.n	80046b2 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80046a4:	4b3a      	ldr	r3, [pc, #232]	@ (8004790 <ssd1306_WriteChar+0x11c>)
 80046a6:	885b      	ldrh	r3, [r3, #2]
 80046a8:	461a      	mov	r2, r3
 80046aa:	787b      	ldrb	r3, [r7, #1]
 80046ac:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80046ae:	2b40      	cmp	r3, #64	@ 0x40
 80046b0:	dd01      	ble.n	80046b6 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 80046b2:	2300      	movs	r3, #0
 80046b4:	e067      	b.n	8004786 <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80046b6:	2300      	movs	r3, #0
 80046b8:	61fb      	str	r3, [r7, #28]
 80046ba:	e04e      	b.n	800475a <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	7bfb      	ldrb	r3, [r7, #15]
 80046c0:	3b20      	subs	r3, #32
 80046c2:	7879      	ldrb	r1, [r7, #1]
 80046c4:	fb01 f303 	mul.w	r3, r1, r3
 80046c8:	4619      	mov	r1, r3
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	440b      	add	r3, r1
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	4413      	add	r3, r2
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 80046d6:	2300      	movs	r3, #0
 80046d8:	61bb      	str	r3, [r7, #24]
 80046da:	e036      	b.n	800474a <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	fa02 f303 	lsl.w	r3, r2, r3
 80046e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d013      	beq.n	8004714 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80046ec:	4b28      	ldr	r3, [pc, #160]	@ (8004790 <ssd1306_WriteChar+0x11c>)
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	4413      	add	r3, r2
 80046f8:	b2d8      	uxtb	r0, r3
 80046fa:	4b25      	ldr	r3, [pc, #148]	@ (8004790 <ssd1306_WriteChar+0x11c>)
 80046fc:	885b      	ldrh	r3, [r3, #2]
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	b2db      	uxtb	r3, r3
 8004704:	4413      	add	r3, r2
 8004706:	b2db      	uxtb	r3, r3
 8004708:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800470c:	4619      	mov	r1, r3
 800470e:	f7ff ff5d 	bl	80045cc <ssd1306_DrawPixel>
 8004712:	e017      	b.n	8004744 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004714:	4b1e      	ldr	r3, [pc, #120]	@ (8004790 <ssd1306_WriteChar+0x11c>)
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	b2da      	uxtb	r2, r3
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	b2db      	uxtb	r3, r3
 800471e:	4413      	add	r3, r2
 8004720:	b2d8      	uxtb	r0, r3
 8004722:	4b1b      	ldr	r3, [pc, #108]	@ (8004790 <ssd1306_WriteChar+0x11c>)
 8004724:	885b      	ldrh	r3, [r3, #2]
 8004726:	b2da      	uxtb	r2, r3
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	b2db      	uxtb	r3, r3
 800472c:	4413      	add	r3, r2
 800472e:	b2d9      	uxtb	r1, r3
 8004730:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004734:	2b00      	cmp	r3, #0
 8004736:	bf0c      	ite	eq
 8004738:	2301      	moveq	r3, #1
 800473a:	2300      	movne	r3, #0
 800473c:	b2db      	uxtb	r3, r3
 800473e:	461a      	mov	r2, r3
 8004740:	f7ff ff44 	bl	80045cc <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	3301      	adds	r3, #1
 8004748:	61bb      	str	r3, [r7, #24]
 800474a:	783b      	ldrb	r3, [r7, #0]
 800474c:	461a      	mov	r2, r3
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	4293      	cmp	r3, r2
 8004752:	d3c3      	bcc.n	80046dc <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	3301      	adds	r3, #1
 8004758:	61fb      	str	r3, [r7, #28]
 800475a:	787b      	ldrb	r3, [r7, #1]
 800475c:	461a      	mov	r2, r3
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	4293      	cmp	r3, r2
 8004762:	d3ab      	bcc.n	80046bc <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8004764:	4b0a      	ldr	r3, [pc, #40]	@ (8004790 <ssd1306_WriteChar+0x11c>)
 8004766:	881b      	ldrh	r3, [r3, #0]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	2a00      	cmp	r2, #0
 800476c:	d005      	beq.n	800477a <ssd1306_WriteChar+0x106>
 800476e:	68b9      	ldr	r1, [r7, #8]
 8004770:	7bfa      	ldrb	r2, [r7, #15]
 8004772:	3a20      	subs	r2, #32
 8004774:	440a      	add	r2, r1
 8004776:	7812      	ldrb	r2, [r2, #0]
 8004778:	e000      	b.n	800477c <ssd1306_WriteChar+0x108>
 800477a:	783a      	ldrb	r2, [r7, #0]
 800477c:	4413      	add	r3, r2
 800477e:	b29a      	uxth	r2, r3
 8004780:	4b03      	ldr	r3, [pc, #12]	@ (8004790 <ssd1306_WriteChar+0x11c>)
 8004782:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8004784:	7bfb      	ldrb	r3, [r7, #15]
}
 8004786:	4618      	mov	r0, r3
 8004788:	3724      	adds	r7, #36	@ 0x24
 800478a:	46bd      	mov	sp, r7
 800478c:	bd90      	pop	{r4, r7, pc}
 800478e:	bf00      	nop
 8004790:	2000072c 	.word	0x2000072c

08004794 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af02      	add	r7, sp, #8
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	4638      	mov	r0, r7
 800479e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80047a2:	e013      	b.n	80047cc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	7818      	ldrb	r0, [r3, #0]
 80047a8:	7e3b      	ldrb	r3, [r7, #24]
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	463b      	mov	r3, r7
 80047ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047b0:	f7ff ff60 	bl	8004674 <ssd1306_WriteChar>
 80047b4:	4603      	mov	r3, r0
 80047b6:	461a      	mov	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d002      	beq.n	80047c6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	e008      	b.n	80047d8 <ssd1306_WriteString+0x44>
        }
        str++;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	3301      	adds	r3, #1
 80047ca:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1e7      	bne.n	80047a4 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	781b      	ldrb	r3, [r3, #0]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	4603      	mov	r3, r0
 80047e8:	460a      	mov	r2, r1
 80047ea:	71fb      	strb	r3, [r7, #7]
 80047ec:	4613      	mov	r3, r2
 80047ee:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80047f0:	79fb      	ldrb	r3, [r7, #7]
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	4b05      	ldr	r3, [pc, #20]	@ (800480c <ssd1306_SetCursor+0x2c>)
 80047f6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80047f8:	79bb      	ldrb	r3, [r7, #6]
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	4b03      	ldr	r3, [pc, #12]	@ (800480c <ssd1306_SetCursor+0x2c>)
 80047fe:	805a      	strh	r2, [r3, #2]
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr
 800480c:	2000072c 	.word	0x2000072c

08004810 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8004810:	b590      	push	{r4, r7, lr}
 8004812:	b089      	sub	sp, #36	@ 0x24
 8004814:	af00      	add	r7, sp, #0
 8004816:	4604      	mov	r4, r0
 8004818:	4608      	mov	r0, r1
 800481a:	4611      	mov	r1, r2
 800481c:	461a      	mov	r2, r3
 800481e:	4623      	mov	r3, r4
 8004820:	71fb      	strb	r3, [r7, #7]
 8004822:	4603      	mov	r3, r0
 8004824:	71bb      	strb	r3, [r7, #6]
 8004826:	460b      	mov	r3, r1
 8004828:	717b      	strb	r3, [r7, #5]
 800482a:	4613      	mov	r3, r2
 800482c:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 800482e:	797a      	ldrb	r2, [r7, #5]
 8004830:	79fb      	ldrb	r3, [r7, #7]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b00      	cmp	r3, #0
 8004836:	bfb8      	it	lt
 8004838:	425b      	neglt	r3, r3
 800483a:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 800483c:	793a      	ldrb	r2, [r7, #4]
 800483e:	79bb      	ldrb	r3, [r7, #6]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	bfb8      	it	lt
 8004846:	425b      	neglt	r3, r3
 8004848:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 800484a:	79fa      	ldrb	r2, [r7, #7]
 800484c:	797b      	ldrb	r3, [r7, #5]
 800484e:	429a      	cmp	r2, r3
 8004850:	d201      	bcs.n	8004856 <ssd1306_Line+0x46>
 8004852:	2301      	movs	r3, #1
 8004854:	e001      	b.n	800485a <ssd1306_Line+0x4a>
 8004856:	f04f 33ff 	mov.w	r3, #4294967295
 800485a:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 800485c:	79ba      	ldrb	r2, [r7, #6]
 800485e:	793b      	ldrb	r3, [r7, #4]
 8004860:	429a      	cmp	r2, r3
 8004862:	d201      	bcs.n	8004868 <ssd1306_Line+0x58>
 8004864:	2301      	movs	r3, #1
 8004866:	e001      	b.n	800486c <ssd1306_Line+0x5c>
 8004868:	f04f 33ff 	mov.w	r3, #4294967295
 800486c:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8004876:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800487a:	7939      	ldrb	r1, [r7, #4]
 800487c:	797b      	ldrb	r3, [r7, #5]
 800487e:	4618      	mov	r0, r3
 8004880:	f7ff fea4 	bl	80045cc <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8004884:	e024      	b.n	80048d0 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8004886:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800488a:	79b9      	ldrb	r1, [r7, #6]
 800488c:	79fb      	ldrb	r3, [r7, #7]
 800488e:	4618      	mov	r0, r3
 8004890:	f7ff fe9c 	bl	80045cc <ssd1306_DrawPixel>
        error2 = error * 2;
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	005b      	lsls	r3, r3, #1
 8004898:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	425b      	negs	r3, r3
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	dd08      	ble.n	80048b6 <ssd1306_Line+0xa6>
            error -= deltaY;
 80048a4:	69fa      	ldr	r2, [r7, #28]
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	79fb      	ldrb	r3, [r7, #7]
 80048b2:	4413      	add	r3, r2
 80048b4:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	da08      	bge.n	80048d0 <ssd1306_Line+0xc0>
            error += deltaX;
 80048be:	69fa      	ldr	r2, [r7, #28]
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	4413      	add	r3, r2
 80048c4:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	79bb      	ldrb	r3, [r7, #6]
 80048cc:	4413      	add	r3, r2
 80048ce:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 80048d0:	79fa      	ldrb	r2, [r7, #7]
 80048d2:	797b      	ldrb	r3, [r7, #5]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d1d6      	bne.n	8004886 <ssd1306_Line+0x76>
 80048d8:	79ba      	ldrb	r2, [r7, #6]
 80048da:	793b      	ldrb	r3, [r7, #4]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d1d2      	bne.n	8004886 <ssd1306_Line+0x76>
        }
    }
    return;
 80048e0:	bf00      	nop
}
 80048e2:	3724      	adds	r7, #36	@ 0x24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd90      	pop	{r4, r7, pc}

080048e8 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80048e8:	b590      	push	{r4, r7, lr}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af02      	add	r7, sp, #8
 80048ee:	4604      	mov	r4, r0
 80048f0:	4608      	mov	r0, r1
 80048f2:	4611      	mov	r1, r2
 80048f4:	461a      	mov	r2, r3
 80048f6:	4623      	mov	r3, r4
 80048f8:	71fb      	strb	r3, [r7, #7]
 80048fa:	4603      	mov	r3, r0
 80048fc:	71bb      	strb	r3, [r7, #6]
 80048fe:	460b      	mov	r3, r1
 8004900:	717b      	strb	r3, [r7, #5]
 8004902:	4613      	mov	r3, r2
 8004904:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8004906:	79bc      	ldrb	r4, [r7, #6]
 8004908:	797a      	ldrb	r2, [r7, #5]
 800490a:	79b9      	ldrb	r1, [r7, #6]
 800490c:	79f8      	ldrb	r0, [r7, #7]
 800490e:	7e3b      	ldrb	r3, [r7, #24]
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	4623      	mov	r3, r4
 8004914:	f7ff ff7c 	bl	8004810 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8004918:	793c      	ldrb	r4, [r7, #4]
 800491a:	797a      	ldrb	r2, [r7, #5]
 800491c:	79b9      	ldrb	r1, [r7, #6]
 800491e:	7978      	ldrb	r0, [r7, #5]
 8004920:	7e3b      	ldrb	r3, [r7, #24]
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	4623      	mov	r3, r4
 8004926:	f7ff ff73 	bl	8004810 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 800492a:	793c      	ldrb	r4, [r7, #4]
 800492c:	79fa      	ldrb	r2, [r7, #7]
 800492e:	7939      	ldrb	r1, [r7, #4]
 8004930:	7978      	ldrb	r0, [r7, #5]
 8004932:	7e3b      	ldrb	r3, [r7, #24]
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	4623      	mov	r3, r4
 8004938:	f7ff ff6a 	bl	8004810 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 800493c:	79bc      	ldrb	r4, [r7, #6]
 800493e:	79fa      	ldrb	r2, [r7, #7]
 8004940:	7939      	ldrb	r1, [r7, #4]
 8004942:	79f8      	ldrb	r0, [r7, #7]
 8004944:	7e3b      	ldrb	r3, [r7, #24]
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	4623      	mov	r3, r4
 800494a:	f7ff ff61 	bl	8004810 <ssd1306_Line>

    return;
 800494e:	bf00      	nop
}
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	bd90      	pop	{r4, r7, pc}

08004956 <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8004956:	b580      	push	{r7, lr}
 8004958:	b084      	sub	sp, #16
 800495a:	af00      	add	r7, sp, #0
 800495c:	603a      	str	r2, [r7, #0]
 800495e:	461a      	mov	r2, r3
 8004960:	4603      	mov	r3, r0
 8004962:	71fb      	strb	r3, [r7, #7]
 8004964:	460b      	mov	r3, r1
 8004966:	71bb      	strb	r3, [r7, #6]
 8004968:	4613      	mov	r3, r2
 800496a:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800496c:	797b      	ldrb	r3, [r7, #5]
 800496e:	3307      	adds	r3, #7
 8004970:	2b00      	cmp	r3, #0
 8004972:	da00      	bge.n	8004976 <ssd1306_DrawBitmap+0x20>
 8004974:	3307      	adds	r3, #7
 8004976:	10db      	asrs	r3, r3, #3
 8004978:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 800497a:	2300      	movs	r3, #0
 800497c:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800497e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004982:	2b00      	cmp	r3, #0
 8004984:	db3e      	blt.n	8004a04 <ssd1306_DrawBitmap+0xae>
 8004986:	79bb      	ldrb	r3, [r7, #6]
 8004988:	2b3f      	cmp	r3, #63	@ 0x3f
 800498a:	d83b      	bhi.n	8004a04 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 800498c:	2300      	movs	r3, #0
 800498e:	73bb      	strb	r3, [r7, #14]
 8004990:	e033      	b.n	80049fa <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8004992:	2300      	movs	r3, #0
 8004994:	737b      	strb	r3, [r7, #13]
 8004996:	e026      	b.n	80049e6 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8004998:	7b7b      	ldrb	r3, [r7, #13]
 800499a:	f003 0307 	and.w	r3, r3, #7
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 80049a2:	7bfb      	ldrb	r3, [r7, #15]
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	73fb      	strb	r3, [r7, #15]
 80049a8:	e00d      	b.n	80049c6 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80049aa:	7bbb      	ldrb	r3, [r7, #14]
 80049ac:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80049b0:	fb02 f303 	mul.w	r3, r2, r3
 80049b4:	7b7a      	ldrb	r2, [r7, #13]
 80049b6:	08d2      	lsrs	r2, r2, #3
 80049b8:	b2d2      	uxtb	r2, r2
 80049ba:	4413      	add	r3, r2
 80049bc:	461a      	mov	r2, r3
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	4413      	add	r3, r2
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 80049c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	da08      	bge.n	80049e0 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 80049ce:	79fa      	ldrb	r2, [r7, #7]
 80049d0:	7b7b      	ldrb	r3, [r7, #13]
 80049d2:	4413      	add	r3, r2
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	7f3a      	ldrb	r2, [r7, #28]
 80049d8:	79b9      	ldrb	r1, [r7, #6]
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff fdf6 	bl	80045cc <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 80049e0:	7b7b      	ldrb	r3, [r7, #13]
 80049e2:	3301      	adds	r3, #1
 80049e4:	737b      	strb	r3, [r7, #13]
 80049e6:	7b7a      	ldrb	r2, [r7, #13]
 80049e8:	797b      	ldrb	r3, [r7, #5]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d3d4      	bcc.n	8004998 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 80049ee:	7bbb      	ldrb	r3, [r7, #14]
 80049f0:	3301      	adds	r3, #1
 80049f2:	73bb      	strb	r3, [r7, #14]
 80049f4:	79bb      	ldrb	r3, [r7, #6]
 80049f6:	3301      	adds	r3, #1
 80049f8:	71bb      	strb	r3, [r7, #6]
 80049fa:	7bba      	ldrb	r2, [r7, #14]
 80049fc:	7e3b      	ldrb	r3, [r7, #24]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d3c7      	bcc.n	8004992 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8004a02:	e000      	b.n	8004a06 <ssd1306_DrawBitmap+0xb0>
        return;
 8004a04:	bf00      	nop
}
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	4603      	mov	r3, r0
 8004a14:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8004a16:	2381      	movs	r3, #129	@ 0x81
 8004a18:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8004a1a:	7bfb      	ldrb	r3, [r7, #15]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff fcf9 	bl	8004414 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8004a22:	79fb      	ldrb	r3, [r7, #7]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7ff fcf5 	bl	8004414 <ssd1306_WriteCommand>
}
 8004a2a:	bf00      	nop
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
	...

08004a34 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8004a3e:	79fb      	ldrb	r3, [r7, #7]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d005      	beq.n	8004a50 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8004a44:	23af      	movs	r3, #175	@ 0xaf
 8004a46:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8004a48:	4b08      	ldr	r3, [pc, #32]	@ (8004a6c <ssd1306_SetDisplayOn+0x38>)
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	715a      	strb	r2, [r3, #5]
 8004a4e:	e004      	b.n	8004a5a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8004a50:	23ae      	movs	r3, #174	@ 0xae
 8004a52:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8004a54:	4b05      	ldr	r3, [pc, #20]	@ (8004a6c <ssd1306_SetDisplayOn+0x38>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8004a5a:	7bfb      	ldrb	r3, [r7, #15]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7ff fcd9 	bl	8004414 <ssd1306_WriteCommand>
}
 8004a62:	bf00      	nop
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	2000072c 	.word	0x2000072c

08004a70 <__cvt>:
 8004a70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a74:	ec57 6b10 	vmov	r6, r7, d0
 8004a78:	2f00      	cmp	r7, #0
 8004a7a:	460c      	mov	r4, r1
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	463b      	mov	r3, r7
 8004a80:	bfbb      	ittet	lt
 8004a82:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004a86:	461f      	movlt	r7, r3
 8004a88:	2300      	movge	r3, #0
 8004a8a:	232d      	movlt	r3, #45	@ 0x2d
 8004a8c:	700b      	strb	r3, [r1, #0]
 8004a8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004a90:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004a94:	4691      	mov	r9, r2
 8004a96:	f023 0820 	bic.w	r8, r3, #32
 8004a9a:	bfbc      	itt	lt
 8004a9c:	4632      	movlt	r2, r6
 8004a9e:	4616      	movlt	r6, r2
 8004aa0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004aa4:	d005      	beq.n	8004ab2 <__cvt+0x42>
 8004aa6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004aaa:	d100      	bne.n	8004aae <__cvt+0x3e>
 8004aac:	3401      	adds	r4, #1
 8004aae:	2102      	movs	r1, #2
 8004ab0:	e000      	b.n	8004ab4 <__cvt+0x44>
 8004ab2:	2103      	movs	r1, #3
 8004ab4:	ab03      	add	r3, sp, #12
 8004ab6:	9301      	str	r3, [sp, #4]
 8004ab8:	ab02      	add	r3, sp, #8
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	ec47 6b10 	vmov	d0, r6, r7
 8004ac0:	4653      	mov	r3, sl
 8004ac2:	4622      	mov	r2, r4
 8004ac4:	f001 f89c 	bl	8005c00 <_dtoa_r>
 8004ac8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004acc:	4605      	mov	r5, r0
 8004ace:	d119      	bne.n	8004b04 <__cvt+0x94>
 8004ad0:	f019 0f01 	tst.w	r9, #1
 8004ad4:	d00e      	beq.n	8004af4 <__cvt+0x84>
 8004ad6:	eb00 0904 	add.w	r9, r0, r4
 8004ada:	2200      	movs	r2, #0
 8004adc:	2300      	movs	r3, #0
 8004ade:	4630      	mov	r0, r6
 8004ae0:	4639      	mov	r1, r7
 8004ae2:	f7fb fff1 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ae6:	b108      	cbz	r0, 8004aec <__cvt+0x7c>
 8004ae8:	f8cd 900c 	str.w	r9, [sp, #12]
 8004aec:	2230      	movs	r2, #48	@ 0x30
 8004aee:	9b03      	ldr	r3, [sp, #12]
 8004af0:	454b      	cmp	r3, r9
 8004af2:	d31e      	bcc.n	8004b32 <__cvt+0xc2>
 8004af4:	9b03      	ldr	r3, [sp, #12]
 8004af6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004af8:	1b5b      	subs	r3, r3, r5
 8004afa:	4628      	mov	r0, r5
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	b004      	add	sp, #16
 8004b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b04:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004b08:	eb00 0904 	add.w	r9, r0, r4
 8004b0c:	d1e5      	bne.n	8004ada <__cvt+0x6a>
 8004b0e:	7803      	ldrb	r3, [r0, #0]
 8004b10:	2b30      	cmp	r3, #48	@ 0x30
 8004b12:	d10a      	bne.n	8004b2a <__cvt+0xba>
 8004b14:	2200      	movs	r2, #0
 8004b16:	2300      	movs	r3, #0
 8004b18:	4630      	mov	r0, r6
 8004b1a:	4639      	mov	r1, r7
 8004b1c:	f7fb ffd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b20:	b918      	cbnz	r0, 8004b2a <__cvt+0xba>
 8004b22:	f1c4 0401 	rsb	r4, r4, #1
 8004b26:	f8ca 4000 	str.w	r4, [sl]
 8004b2a:	f8da 3000 	ldr.w	r3, [sl]
 8004b2e:	4499      	add	r9, r3
 8004b30:	e7d3      	b.n	8004ada <__cvt+0x6a>
 8004b32:	1c59      	adds	r1, r3, #1
 8004b34:	9103      	str	r1, [sp, #12]
 8004b36:	701a      	strb	r2, [r3, #0]
 8004b38:	e7d9      	b.n	8004aee <__cvt+0x7e>

08004b3a <__exponent>:
 8004b3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b3c:	2900      	cmp	r1, #0
 8004b3e:	bfba      	itte	lt
 8004b40:	4249      	neglt	r1, r1
 8004b42:	232d      	movlt	r3, #45	@ 0x2d
 8004b44:	232b      	movge	r3, #43	@ 0x2b
 8004b46:	2909      	cmp	r1, #9
 8004b48:	7002      	strb	r2, [r0, #0]
 8004b4a:	7043      	strb	r3, [r0, #1]
 8004b4c:	dd29      	ble.n	8004ba2 <__exponent+0x68>
 8004b4e:	f10d 0307 	add.w	r3, sp, #7
 8004b52:	461d      	mov	r5, r3
 8004b54:	270a      	movs	r7, #10
 8004b56:	461a      	mov	r2, r3
 8004b58:	fbb1 f6f7 	udiv	r6, r1, r7
 8004b5c:	fb07 1416 	mls	r4, r7, r6, r1
 8004b60:	3430      	adds	r4, #48	@ 0x30
 8004b62:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004b66:	460c      	mov	r4, r1
 8004b68:	2c63      	cmp	r4, #99	@ 0x63
 8004b6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8004b6e:	4631      	mov	r1, r6
 8004b70:	dcf1      	bgt.n	8004b56 <__exponent+0x1c>
 8004b72:	3130      	adds	r1, #48	@ 0x30
 8004b74:	1e94      	subs	r4, r2, #2
 8004b76:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004b7a:	1c41      	adds	r1, r0, #1
 8004b7c:	4623      	mov	r3, r4
 8004b7e:	42ab      	cmp	r3, r5
 8004b80:	d30a      	bcc.n	8004b98 <__exponent+0x5e>
 8004b82:	f10d 0309 	add.w	r3, sp, #9
 8004b86:	1a9b      	subs	r3, r3, r2
 8004b88:	42ac      	cmp	r4, r5
 8004b8a:	bf88      	it	hi
 8004b8c:	2300      	movhi	r3, #0
 8004b8e:	3302      	adds	r3, #2
 8004b90:	4403      	add	r3, r0
 8004b92:	1a18      	subs	r0, r3, r0
 8004b94:	b003      	add	sp, #12
 8004b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b98:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004b9c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004ba0:	e7ed      	b.n	8004b7e <__exponent+0x44>
 8004ba2:	2330      	movs	r3, #48	@ 0x30
 8004ba4:	3130      	adds	r1, #48	@ 0x30
 8004ba6:	7083      	strb	r3, [r0, #2]
 8004ba8:	70c1      	strb	r1, [r0, #3]
 8004baa:	1d03      	adds	r3, r0, #4
 8004bac:	e7f1      	b.n	8004b92 <__exponent+0x58>
	...

08004bb0 <_printf_float>:
 8004bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bb4:	b08d      	sub	sp, #52	@ 0x34
 8004bb6:	460c      	mov	r4, r1
 8004bb8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004bbc:	4616      	mov	r6, r2
 8004bbe:	461f      	mov	r7, r3
 8004bc0:	4605      	mov	r5, r0
 8004bc2:	f000 ff09 	bl	80059d8 <_localeconv_r>
 8004bc6:	6803      	ldr	r3, [r0, #0]
 8004bc8:	9304      	str	r3, [sp, #16]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fb fb50 	bl	8000270 <strlen>
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8004bd4:	f8d8 3000 	ldr.w	r3, [r8]
 8004bd8:	9005      	str	r0, [sp, #20]
 8004bda:	3307      	adds	r3, #7
 8004bdc:	f023 0307 	bic.w	r3, r3, #7
 8004be0:	f103 0208 	add.w	r2, r3, #8
 8004be4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004be8:	f8d4 b000 	ldr.w	fp, [r4]
 8004bec:	f8c8 2000 	str.w	r2, [r8]
 8004bf0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004bf4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004bf8:	9307      	str	r3, [sp, #28]
 8004bfa:	f8cd 8018 	str.w	r8, [sp, #24]
 8004bfe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004c02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c06:	4b9c      	ldr	r3, [pc, #624]	@ (8004e78 <_printf_float+0x2c8>)
 8004c08:	f04f 32ff 	mov.w	r2, #4294967295
 8004c0c:	f7fb ff8e 	bl	8000b2c <__aeabi_dcmpun>
 8004c10:	bb70      	cbnz	r0, 8004c70 <_printf_float+0xc0>
 8004c12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c16:	4b98      	ldr	r3, [pc, #608]	@ (8004e78 <_printf_float+0x2c8>)
 8004c18:	f04f 32ff 	mov.w	r2, #4294967295
 8004c1c:	f7fb ff68 	bl	8000af0 <__aeabi_dcmple>
 8004c20:	bb30      	cbnz	r0, 8004c70 <_printf_float+0xc0>
 8004c22:	2200      	movs	r2, #0
 8004c24:	2300      	movs	r3, #0
 8004c26:	4640      	mov	r0, r8
 8004c28:	4649      	mov	r1, r9
 8004c2a:	f7fb ff57 	bl	8000adc <__aeabi_dcmplt>
 8004c2e:	b110      	cbz	r0, 8004c36 <_printf_float+0x86>
 8004c30:	232d      	movs	r3, #45	@ 0x2d
 8004c32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c36:	4a91      	ldr	r2, [pc, #580]	@ (8004e7c <_printf_float+0x2cc>)
 8004c38:	4b91      	ldr	r3, [pc, #580]	@ (8004e80 <_printf_float+0x2d0>)
 8004c3a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004c3e:	bf94      	ite	ls
 8004c40:	4690      	movls	r8, r2
 8004c42:	4698      	movhi	r8, r3
 8004c44:	2303      	movs	r3, #3
 8004c46:	6123      	str	r3, [r4, #16]
 8004c48:	f02b 0304 	bic.w	r3, fp, #4
 8004c4c:	6023      	str	r3, [r4, #0]
 8004c4e:	f04f 0900 	mov.w	r9, #0
 8004c52:	9700      	str	r7, [sp, #0]
 8004c54:	4633      	mov	r3, r6
 8004c56:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004c58:	4621      	mov	r1, r4
 8004c5a:	4628      	mov	r0, r5
 8004c5c:	f000 f9d2 	bl	8005004 <_printf_common>
 8004c60:	3001      	adds	r0, #1
 8004c62:	f040 808d 	bne.w	8004d80 <_printf_float+0x1d0>
 8004c66:	f04f 30ff 	mov.w	r0, #4294967295
 8004c6a:	b00d      	add	sp, #52	@ 0x34
 8004c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c70:	4642      	mov	r2, r8
 8004c72:	464b      	mov	r3, r9
 8004c74:	4640      	mov	r0, r8
 8004c76:	4649      	mov	r1, r9
 8004c78:	f7fb ff58 	bl	8000b2c <__aeabi_dcmpun>
 8004c7c:	b140      	cbz	r0, 8004c90 <_printf_float+0xe0>
 8004c7e:	464b      	mov	r3, r9
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	bfbc      	itt	lt
 8004c84:	232d      	movlt	r3, #45	@ 0x2d
 8004c86:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004c8a:	4a7e      	ldr	r2, [pc, #504]	@ (8004e84 <_printf_float+0x2d4>)
 8004c8c:	4b7e      	ldr	r3, [pc, #504]	@ (8004e88 <_printf_float+0x2d8>)
 8004c8e:	e7d4      	b.n	8004c3a <_printf_float+0x8a>
 8004c90:	6863      	ldr	r3, [r4, #4]
 8004c92:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004c96:	9206      	str	r2, [sp, #24]
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	d13b      	bne.n	8004d14 <_printf_float+0x164>
 8004c9c:	2306      	movs	r3, #6
 8004c9e:	6063      	str	r3, [r4, #4]
 8004ca0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	6022      	str	r2, [r4, #0]
 8004ca8:	9303      	str	r3, [sp, #12]
 8004caa:	ab0a      	add	r3, sp, #40	@ 0x28
 8004cac:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004cb0:	ab09      	add	r3, sp, #36	@ 0x24
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	6861      	ldr	r1, [r4, #4]
 8004cb6:	ec49 8b10 	vmov	d0, r8, r9
 8004cba:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	f7ff fed6 	bl	8004a70 <__cvt>
 8004cc4:	9b06      	ldr	r3, [sp, #24]
 8004cc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004cc8:	2b47      	cmp	r3, #71	@ 0x47
 8004cca:	4680      	mov	r8, r0
 8004ccc:	d129      	bne.n	8004d22 <_printf_float+0x172>
 8004cce:	1cc8      	adds	r0, r1, #3
 8004cd0:	db02      	blt.n	8004cd8 <_printf_float+0x128>
 8004cd2:	6863      	ldr	r3, [r4, #4]
 8004cd4:	4299      	cmp	r1, r3
 8004cd6:	dd41      	ble.n	8004d5c <_printf_float+0x1ac>
 8004cd8:	f1aa 0a02 	sub.w	sl, sl, #2
 8004cdc:	fa5f fa8a 	uxtb.w	sl, sl
 8004ce0:	3901      	subs	r1, #1
 8004ce2:	4652      	mov	r2, sl
 8004ce4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004ce8:	9109      	str	r1, [sp, #36]	@ 0x24
 8004cea:	f7ff ff26 	bl	8004b3a <__exponent>
 8004cee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004cf0:	1813      	adds	r3, r2, r0
 8004cf2:	2a01      	cmp	r2, #1
 8004cf4:	4681      	mov	r9, r0
 8004cf6:	6123      	str	r3, [r4, #16]
 8004cf8:	dc02      	bgt.n	8004d00 <_printf_float+0x150>
 8004cfa:	6822      	ldr	r2, [r4, #0]
 8004cfc:	07d2      	lsls	r2, r2, #31
 8004cfe:	d501      	bpl.n	8004d04 <_printf_float+0x154>
 8004d00:	3301      	adds	r3, #1
 8004d02:	6123      	str	r3, [r4, #16]
 8004d04:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d0a2      	beq.n	8004c52 <_printf_float+0xa2>
 8004d0c:	232d      	movs	r3, #45	@ 0x2d
 8004d0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d12:	e79e      	b.n	8004c52 <_printf_float+0xa2>
 8004d14:	9a06      	ldr	r2, [sp, #24]
 8004d16:	2a47      	cmp	r2, #71	@ 0x47
 8004d18:	d1c2      	bne.n	8004ca0 <_printf_float+0xf0>
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1c0      	bne.n	8004ca0 <_printf_float+0xf0>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e7bd      	b.n	8004c9e <_printf_float+0xee>
 8004d22:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004d26:	d9db      	bls.n	8004ce0 <_printf_float+0x130>
 8004d28:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004d2c:	d118      	bne.n	8004d60 <_printf_float+0x1b0>
 8004d2e:	2900      	cmp	r1, #0
 8004d30:	6863      	ldr	r3, [r4, #4]
 8004d32:	dd0b      	ble.n	8004d4c <_printf_float+0x19c>
 8004d34:	6121      	str	r1, [r4, #16]
 8004d36:	b913      	cbnz	r3, 8004d3e <_printf_float+0x18e>
 8004d38:	6822      	ldr	r2, [r4, #0]
 8004d3a:	07d0      	lsls	r0, r2, #31
 8004d3c:	d502      	bpl.n	8004d44 <_printf_float+0x194>
 8004d3e:	3301      	adds	r3, #1
 8004d40:	440b      	add	r3, r1
 8004d42:	6123      	str	r3, [r4, #16]
 8004d44:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004d46:	f04f 0900 	mov.w	r9, #0
 8004d4a:	e7db      	b.n	8004d04 <_printf_float+0x154>
 8004d4c:	b913      	cbnz	r3, 8004d54 <_printf_float+0x1a4>
 8004d4e:	6822      	ldr	r2, [r4, #0]
 8004d50:	07d2      	lsls	r2, r2, #31
 8004d52:	d501      	bpl.n	8004d58 <_printf_float+0x1a8>
 8004d54:	3302      	adds	r3, #2
 8004d56:	e7f4      	b.n	8004d42 <_printf_float+0x192>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e7f2      	b.n	8004d42 <_printf_float+0x192>
 8004d5c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004d60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d62:	4299      	cmp	r1, r3
 8004d64:	db05      	blt.n	8004d72 <_printf_float+0x1c2>
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	6121      	str	r1, [r4, #16]
 8004d6a:	07d8      	lsls	r0, r3, #31
 8004d6c:	d5ea      	bpl.n	8004d44 <_printf_float+0x194>
 8004d6e:	1c4b      	adds	r3, r1, #1
 8004d70:	e7e7      	b.n	8004d42 <_printf_float+0x192>
 8004d72:	2900      	cmp	r1, #0
 8004d74:	bfd4      	ite	le
 8004d76:	f1c1 0202 	rsble	r2, r1, #2
 8004d7a:	2201      	movgt	r2, #1
 8004d7c:	4413      	add	r3, r2
 8004d7e:	e7e0      	b.n	8004d42 <_printf_float+0x192>
 8004d80:	6823      	ldr	r3, [r4, #0]
 8004d82:	055a      	lsls	r2, r3, #21
 8004d84:	d407      	bmi.n	8004d96 <_printf_float+0x1e6>
 8004d86:	6923      	ldr	r3, [r4, #16]
 8004d88:	4642      	mov	r2, r8
 8004d8a:	4631      	mov	r1, r6
 8004d8c:	4628      	mov	r0, r5
 8004d8e:	47b8      	blx	r7
 8004d90:	3001      	adds	r0, #1
 8004d92:	d12b      	bne.n	8004dec <_printf_float+0x23c>
 8004d94:	e767      	b.n	8004c66 <_printf_float+0xb6>
 8004d96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004d9a:	f240 80dd 	bls.w	8004f58 <_printf_float+0x3a8>
 8004d9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004da2:	2200      	movs	r2, #0
 8004da4:	2300      	movs	r3, #0
 8004da6:	f7fb fe8f 	bl	8000ac8 <__aeabi_dcmpeq>
 8004daa:	2800      	cmp	r0, #0
 8004dac:	d033      	beq.n	8004e16 <_printf_float+0x266>
 8004dae:	4a37      	ldr	r2, [pc, #220]	@ (8004e8c <_printf_float+0x2dc>)
 8004db0:	2301      	movs	r3, #1
 8004db2:	4631      	mov	r1, r6
 8004db4:	4628      	mov	r0, r5
 8004db6:	47b8      	blx	r7
 8004db8:	3001      	adds	r0, #1
 8004dba:	f43f af54 	beq.w	8004c66 <_printf_float+0xb6>
 8004dbe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004dc2:	4543      	cmp	r3, r8
 8004dc4:	db02      	blt.n	8004dcc <_printf_float+0x21c>
 8004dc6:	6823      	ldr	r3, [r4, #0]
 8004dc8:	07d8      	lsls	r0, r3, #31
 8004dca:	d50f      	bpl.n	8004dec <_printf_float+0x23c>
 8004dcc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dd0:	4631      	mov	r1, r6
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	47b8      	blx	r7
 8004dd6:	3001      	adds	r0, #1
 8004dd8:	f43f af45 	beq.w	8004c66 <_printf_float+0xb6>
 8004ddc:	f04f 0900 	mov.w	r9, #0
 8004de0:	f108 38ff 	add.w	r8, r8, #4294967295
 8004de4:	f104 0a1a 	add.w	sl, r4, #26
 8004de8:	45c8      	cmp	r8, r9
 8004dea:	dc09      	bgt.n	8004e00 <_printf_float+0x250>
 8004dec:	6823      	ldr	r3, [r4, #0]
 8004dee:	079b      	lsls	r3, r3, #30
 8004df0:	f100 8103 	bmi.w	8004ffa <_printf_float+0x44a>
 8004df4:	68e0      	ldr	r0, [r4, #12]
 8004df6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004df8:	4298      	cmp	r0, r3
 8004dfa:	bfb8      	it	lt
 8004dfc:	4618      	movlt	r0, r3
 8004dfe:	e734      	b.n	8004c6a <_printf_float+0xba>
 8004e00:	2301      	movs	r3, #1
 8004e02:	4652      	mov	r2, sl
 8004e04:	4631      	mov	r1, r6
 8004e06:	4628      	mov	r0, r5
 8004e08:	47b8      	blx	r7
 8004e0a:	3001      	adds	r0, #1
 8004e0c:	f43f af2b 	beq.w	8004c66 <_printf_float+0xb6>
 8004e10:	f109 0901 	add.w	r9, r9, #1
 8004e14:	e7e8      	b.n	8004de8 <_printf_float+0x238>
 8004e16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	dc39      	bgt.n	8004e90 <_printf_float+0x2e0>
 8004e1c:	4a1b      	ldr	r2, [pc, #108]	@ (8004e8c <_printf_float+0x2dc>)
 8004e1e:	2301      	movs	r3, #1
 8004e20:	4631      	mov	r1, r6
 8004e22:	4628      	mov	r0, r5
 8004e24:	47b8      	blx	r7
 8004e26:	3001      	adds	r0, #1
 8004e28:	f43f af1d 	beq.w	8004c66 <_printf_float+0xb6>
 8004e2c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004e30:	ea59 0303 	orrs.w	r3, r9, r3
 8004e34:	d102      	bne.n	8004e3c <_printf_float+0x28c>
 8004e36:	6823      	ldr	r3, [r4, #0]
 8004e38:	07d9      	lsls	r1, r3, #31
 8004e3a:	d5d7      	bpl.n	8004dec <_printf_float+0x23c>
 8004e3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e40:	4631      	mov	r1, r6
 8004e42:	4628      	mov	r0, r5
 8004e44:	47b8      	blx	r7
 8004e46:	3001      	adds	r0, #1
 8004e48:	f43f af0d 	beq.w	8004c66 <_printf_float+0xb6>
 8004e4c:	f04f 0a00 	mov.w	sl, #0
 8004e50:	f104 0b1a 	add.w	fp, r4, #26
 8004e54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e56:	425b      	negs	r3, r3
 8004e58:	4553      	cmp	r3, sl
 8004e5a:	dc01      	bgt.n	8004e60 <_printf_float+0x2b0>
 8004e5c:	464b      	mov	r3, r9
 8004e5e:	e793      	b.n	8004d88 <_printf_float+0x1d8>
 8004e60:	2301      	movs	r3, #1
 8004e62:	465a      	mov	r2, fp
 8004e64:	4631      	mov	r1, r6
 8004e66:	4628      	mov	r0, r5
 8004e68:	47b8      	blx	r7
 8004e6a:	3001      	adds	r0, #1
 8004e6c:	f43f aefb 	beq.w	8004c66 <_printf_float+0xb6>
 8004e70:	f10a 0a01 	add.w	sl, sl, #1
 8004e74:	e7ee      	b.n	8004e54 <_printf_float+0x2a4>
 8004e76:	bf00      	nop
 8004e78:	7fefffff 	.word	0x7fefffff
 8004e7c:	0800c954 	.word	0x0800c954
 8004e80:	0800c958 	.word	0x0800c958
 8004e84:	0800c95c 	.word	0x0800c95c
 8004e88:	0800c960 	.word	0x0800c960
 8004e8c:	0800c964 	.word	0x0800c964
 8004e90:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004e92:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004e96:	4553      	cmp	r3, sl
 8004e98:	bfa8      	it	ge
 8004e9a:	4653      	movge	r3, sl
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	4699      	mov	r9, r3
 8004ea0:	dc36      	bgt.n	8004f10 <_printf_float+0x360>
 8004ea2:	f04f 0b00 	mov.w	fp, #0
 8004ea6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004eaa:	f104 021a 	add.w	r2, r4, #26
 8004eae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004eb0:	9306      	str	r3, [sp, #24]
 8004eb2:	eba3 0309 	sub.w	r3, r3, r9
 8004eb6:	455b      	cmp	r3, fp
 8004eb8:	dc31      	bgt.n	8004f1e <_printf_float+0x36e>
 8004eba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ebc:	459a      	cmp	sl, r3
 8004ebe:	dc3a      	bgt.n	8004f36 <_printf_float+0x386>
 8004ec0:	6823      	ldr	r3, [r4, #0]
 8004ec2:	07da      	lsls	r2, r3, #31
 8004ec4:	d437      	bmi.n	8004f36 <_printf_float+0x386>
 8004ec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ec8:	ebaa 0903 	sub.w	r9, sl, r3
 8004ecc:	9b06      	ldr	r3, [sp, #24]
 8004ece:	ebaa 0303 	sub.w	r3, sl, r3
 8004ed2:	4599      	cmp	r9, r3
 8004ed4:	bfa8      	it	ge
 8004ed6:	4699      	movge	r9, r3
 8004ed8:	f1b9 0f00 	cmp.w	r9, #0
 8004edc:	dc33      	bgt.n	8004f46 <_printf_float+0x396>
 8004ede:	f04f 0800 	mov.w	r8, #0
 8004ee2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ee6:	f104 0b1a 	add.w	fp, r4, #26
 8004eea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004eec:	ebaa 0303 	sub.w	r3, sl, r3
 8004ef0:	eba3 0309 	sub.w	r3, r3, r9
 8004ef4:	4543      	cmp	r3, r8
 8004ef6:	f77f af79 	ble.w	8004dec <_printf_float+0x23c>
 8004efa:	2301      	movs	r3, #1
 8004efc:	465a      	mov	r2, fp
 8004efe:	4631      	mov	r1, r6
 8004f00:	4628      	mov	r0, r5
 8004f02:	47b8      	blx	r7
 8004f04:	3001      	adds	r0, #1
 8004f06:	f43f aeae 	beq.w	8004c66 <_printf_float+0xb6>
 8004f0a:	f108 0801 	add.w	r8, r8, #1
 8004f0e:	e7ec      	b.n	8004eea <_printf_float+0x33a>
 8004f10:	4642      	mov	r2, r8
 8004f12:	4631      	mov	r1, r6
 8004f14:	4628      	mov	r0, r5
 8004f16:	47b8      	blx	r7
 8004f18:	3001      	adds	r0, #1
 8004f1a:	d1c2      	bne.n	8004ea2 <_printf_float+0x2f2>
 8004f1c:	e6a3      	b.n	8004c66 <_printf_float+0xb6>
 8004f1e:	2301      	movs	r3, #1
 8004f20:	4631      	mov	r1, r6
 8004f22:	4628      	mov	r0, r5
 8004f24:	9206      	str	r2, [sp, #24]
 8004f26:	47b8      	blx	r7
 8004f28:	3001      	adds	r0, #1
 8004f2a:	f43f ae9c 	beq.w	8004c66 <_printf_float+0xb6>
 8004f2e:	9a06      	ldr	r2, [sp, #24]
 8004f30:	f10b 0b01 	add.w	fp, fp, #1
 8004f34:	e7bb      	b.n	8004eae <_printf_float+0x2fe>
 8004f36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f3a:	4631      	mov	r1, r6
 8004f3c:	4628      	mov	r0, r5
 8004f3e:	47b8      	blx	r7
 8004f40:	3001      	adds	r0, #1
 8004f42:	d1c0      	bne.n	8004ec6 <_printf_float+0x316>
 8004f44:	e68f      	b.n	8004c66 <_printf_float+0xb6>
 8004f46:	9a06      	ldr	r2, [sp, #24]
 8004f48:	464b      	mov	r3, r9
 8004f4a:	4442      	add	r2, r8
 8004f4c:	4631      	mov	r1, r6
 8004f4e:	4628      	mov	r0, r5
 8004f50:	47b8      	blx	r7
 8004f52:	3001      	adds	r0, #1
 8004f54:	d1c3      	bne.n	8004ede <_printf_float+0x32e>
 8004f56:	e686      	b.n	8004c66 <_printf_float+0xb6>
 8004f58:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004f5c:	f1ba 0f01 	cmp.w	sl, #1
 8004f60:	dc01      	bgt.n	8004f66 <_printf_float+0x3b6>
 8004f62:	07db      	lsls	r3, r3, #31
 8004f64:	d536      	bpl.n	8004fd4 <_printf_float+0x424>
 8004f66:	2301      	movs	r3, #1
 8004f68:	4642      	mov	r2, r8
 8004f6a:	4631      	mov	r1, r6
 8004f6c:	4628      	mov	r0, r5
 8004f6e:	47b8      	blx	r7
 8004f70:	3001      	adds	r0, #1
 8004f72:	f43f ae78 	beq.w	8004c66 <_printf_float+0xb6>
 8004f76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f7a:	4631      	mov	r1, r6
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	47b8      	blx	r7
 8004f80:	3001      	adds	r0, #1
 8004f82:	f43f ae70 	beq.w	8004c66 <_printf_float+0xb6>
 8004f86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f92:	f7fb fd99 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f96:	b9c0      	cbnz	r0, 8004fca <_printf_float+0x41a>
 8004f98:	4653      	mov	r3, sl
 8004f9a:	f108 0201 	add.w	r2, r8, #1
 8004f9e:	4631      	mov	r1, r6
 8004fa0:	4628      	mov	r0, r5
 8004fa2:	47b8      	blx	r7
 8004fa4:	3001      	adds	r0, #1
 8004fa6:	d10c      	bne.n	8004fc2 <_printf_float+0x412>
 8004fa8:	e65d      	b.n	8004c66 <_printf_float+0xb6>
 8004faa:	2301      	movs	r3, #1
 8004fac:	465a      	mov	r2, fp
 8004fae:	4631      	mov	r1, r6
 8004fb0:	4628      	mov	r0, r5
 8004fb2:	47b8      	blx	r7
 8004fb4:	3001      	adds	r0, #1
 8004fb6:	f43f ae56 	beq.w	8004c66 <_printf_float+0xb6>
 8004fba:	f108 0801 	add.w	r8, r8, #1
 8004fbe:	45d0      	cmp	r8, sl
 8004fc0:	dbf3      	blt.n	8004faa <_printf_float+0x3fa>
 8004fc2:	464b      	mov	r3, r9
 8004fc4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004fc8:	e6df      	b.n	8004d8a <_printf_float+0x1da>
 8004fca:	f04f 0800 	mov.w	r8, #0
 8004fce:	f104 0b1a 	add.w	fp, r4, #26
 8004fd2:	e7f4      	b.n	8004fbe <_printf_float+0x40e>
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	4642      	mov	r2, r8
 8004fd8:	e7e1      	b.n	8004f9e <_printf_float+0x3ee>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	464a      	mov	r2, r9
 8004fde:	4631      	mov	r1, r6
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	47b8      	blx	r7
 8004fe4:	3001      	adds	r0, #1
 8004fe6:	f43f ae3e 	beq.w	8004c66 <_printf_float+0xb6>
 8004fea:	f108 0801 	add.w	r8, r8, #1
 8004fee:	68e3      	ldr	r3, [r4, #12]
 8004ff0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004ff2:	1a5b      	subs	r3, r3, r1
 8004ff4:	4543      	cmp	r3, r8
 8004ff6:	dcf0      	bgt.n	8004fda <_printf_float+0x42a>
 8004ff8:	e6fc      	b.n	8004df4 <_printf_float+0x244>
 8004ffa:	f04f 0800 	mov.w	r8, #0
 8004ffe:	f104 0919 	add.w	r9, r4, #25
 8005002:	e7f4      	b.n	8004fee <_printf_float+0x43e>

08005004 <_printf_common>:
 8005004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005008:	4616      	mov	r6, r2
 800500a:	4698      	mov	r8, r3
 800500c:	688a      	ldr	r2, [r1, #8]
 800500e:	690b      	ldr	r3, [r1, #16]
 8005010:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005014:	4293      	cmp	r3, r2
 8005016:	bfb8      	it	lt
 8005018:	4613      	movlt	r3, r2
 800501a:	6033      	str	r3, [r6, #0]
 800501c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005020:	4607      	mov	r7, r0
 8005022:	460c      	mov	r4, r1
 8005024:	b10a      	cbz	r2, 800502a <_printf_common+0x26>
 8005026:	3301      	adds	r3, #1
 8005028:	6033      	str	r3, [r6, #0]
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	0699      	lsls	r1, r3, #26
 800502e:	bf42      	ittt	mi
 8005030:	6833      	ldrmi	r3, [r6, #0]
 8005032:	3302      	addmi	r3, #2
 8005034:	6033      	strmi	r3, [r6, #0]
 8005036:	6825      	ldr	r5, [r4, #0]
 8005038:	f015 0506 	ands.w	r5, r5, #6
 800503c:	d106      	bne.n	800504c <_printf_common+0x48>
 800503e:	f104 0a19 	add.w	sl, r4, #25
 8005042:	68e3      	ldr	r3, [r4, #12]
 8005044:	6832      	ldr	r2, [r6, #0]
 8005046:	1a9b      	subs	r3, r3, r2
 8005048:	42ab      	cmp	r3, r5
 800504a:	dc26      	bgt.n	800509a <_printf_common+0x96>
 800504c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005050:	6822      	ldr	r2, [r4, #0]
 8005052:	3b00      	subs	r3, #0
 8005054:	bf18      	it	ne
 8005056:	2301      	movne	r3, #1
 8005058:	0692      	lsls	r2, r2, #26
 800505a:	d42b      	bmi.n	80050b4 <_printf_common+0xb0>
 800505c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005060:	4641      	mov	r1, r8
 8005062:	4638      	mov	r0, r7
 8005064:	47c8      	blx	r9
 8005066:	3001      	adds	r0, #1
 8005068:	d01e      	beq.n	80050a8 <_printf_common+0xa4>
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	6922      	ldr	r2, [r4, #16]
 800506e:	f003 0306 	and.w	r3, r3, #6
 8005072:	2b04      	cmp	r3, #4
 8005074:	bf02      	ittt	eq
 8005076:	68e5      	ldreq	r5, [r4, #12]
 8005078:	6833      	ldreq	r3, [r6, #0]
 800507a:	1aed      	subeq	r5, r5, r3
 800507c:	68a3      	ldr	r3, [r4, #8]
 800507e:	bf0c      	ite	eq
 8005080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005084:	2500      	movne	r5, #0
 8005086:	4293      	cmp	r3, r2
 8005088:	bfc4      	itt	gt
 800508a:	1a9b      	subgt	r3, r3, r2
 800508c:	18ed      	addgt	r5, r5, r3
 800508e:	2600      	movs	r6, #0
 8005090:	341a      	adds	r4, #26
 8005092:	42b5      	cmp	r5, r6
 8005094:	d11a      	bne.n	80050cc <_printf_common+0xc8>
 8005096:	2000      	movs	r0, #0
 8005098:	e008      	b.n	80050ac <_printf_common+0xa8>
 800509a:	2301      	movs	r3, #1
 800509c:	4652      	mov	r2, sl
 800509e:	4641      	mov	r1, r8
 80050a0:	4638      	mov	r0, r7
 80050a2:	47c8      	blx	r9
 80050a4:	3001      	adds	r0, #1
 80050a6:	d103      	bne.n	80050b0 <_printf_common+0xac>
 80050a8:	f04f 30ff 	mov.w	r0, #4294967295
 80050ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050b0:	3501      	adds	r5, #1
 80050b2:	e7c6      	b.n	8005042 <_printf_common+0x3e>
 80050b4:	18e1      	adds	r1, r4, r3
 80050b6:	1c5a      	adds	r2, r3, #1
 80050b8:	2030      	movs	r0, #48	@ 0x30
 80050ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80050be:	4422      	add	r2, r4
 80050c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80050c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80050c8:	3302      	adds	r3, #2
 80050ca:	e7c7      	b.n	800505c <_printf_common+0x58>
 80050cc:	2301      	movs	r3, #1
 80050ce:	4622      	mov	r2, r4
 80050d0:	4641      	mov	r1, r8
 80050d2:	4638      	mov	r0, r7
 80050d4:	47c8      	blx	r9
 80050d6:	3001      	adds	r0, #1
 80050d8:	d0e6      	beq.n	80050a8 <_printf_common+0xa4>
 80050da:	3601      	adds	r6, #1
 80050dc:	e7d9      	b.n	8005092 <_printf_common+0x8e>
	...

080050e0 <_printf_i>:
 80050e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050e4:	7e0f      	ldrb	r7, [r1, #24]
 80050e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80050e8:	2f78      	cmp	r7, #120	@ 0x78
 80050ea:	4691      	mov	r9, r2
 80050ec:	4680      	mov	r8, r0
 80050ee:	460c      	mov	r4, r1
 80050f0:	469a      	mov	sl, r3
 80050f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80050f6:	d807      	bhi.n	8005108 <_printf_i+0x28>
 80050f8:	2f62      	cmp	r7, #98	@ 0x62
 80050fa:	d80a      	bhi.n	8005112 <_printf_i+0x32>
 80050fc:	2f00      	cmp	r7, #0
 80050fe:	f000 80d2 	beq.w	80052a6 <_printf_i+0x1c6>
 8005102:	2f58      	cmp	r7, #88	@ 0x58
 8005104:	f000 80b9 	beq.w	800527a <_printf_i+0x19a>
 8005108:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800510c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005110:	e03a      	b.n	8005188 <_printf_i+0xa8>
 8005112:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005116:	2b15      	cmp	r3, #21
 8005118:	d8f6      	bhi.n	8005108 <_printf_i+0x28>
 800511a:	a101      	add	r1, pc, #4	@ (adr r1, 8005120 <_printf_i+0x40>)
 800511c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005120:	08005179 	.word	0x08005179
 8005124:	0800518d 	.word	0x0800518d
 8005128:	08005109 	.word	0x08005109
 800512c:	08005109 	.word	0x08005109
 8005130:	08005109 	.word	0x08005109
 8005134:	08005109 	.word	0x08005109
 8005138:	0800518d 	.word	0x0800518d
 800513c:	08005109 	.word	0x08005109
 8005140:	08005109 	.word	0x08005109
 8005144:	08005109 	.word	0x08005109
 8005148:	08005109 	.word	0x08005109
 800514c:	0800528d 	.word	0x0800528d
 8005150:	080051b7 	.word	0x080051b7
 8005154:	08005247 	.word	0x08005247
 8005158:	08005109 	.word	0x08005109
 800515c:	08005109 	.word	0x08005109
 8005160:	080052af 	.word	0x080052af
 8005164:	08005109 	.word	0x08005109
 8005168:	080051b7 	.word	0x080051b7
 800516c:	08005109 	.word	0x08005109
 8005170:	08005109 	.word	0x08005109
 8005174:	0800524f 	.word	0x0800524f
 8005178:	6833      	ldr	r3, [r6, #0]
 800517a:	1d1a      	adds	r2, r3, #4
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	6032      	str	r2, [r6, #0]
 8005180:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005184:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005188:	2301      	movs	r3, #1
 800518a:	e09d      	b.n	80052c8 <_printf_i+0x1e8>
 800518c:	6833      	ldr	r3, [r6, #0]
 800518e:	6820      	ldr	r0, [r4, #0]
 8005190:	1d19      	adds	r1, r3, #4
 8005192:	6031      	str	r1, [r6, #0]
 8005194:	0606      	lsls	r6, r0, #24
 8005196:	d501      	bpl.n	800519c <_printf_i+0xbc>
 8005198:	681d      	ldr	r5, [r3, #0]
 800519a:	e003      	b.n	80051a4 <_printf_i+0xc4>
 800519c:	0645      	lsls	r5, r0, #25
 800519e:	d5fb      	bpl.n	8005198 <_printf_i+0xb8>
 80051a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80051a4:	2d00      	cmp	r5, #0
 80051a6:	da03      	bge.n	80051b0 <_printf_i+0xd0>
 80051a8:	232d      	movs	r3, #45	@ 0x2d
 80051aa:	426d      	negs	r5, r5
 80051ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051b0:	4859      	ldr	r0, [pc, #356]	@ (8005318 <_printf_i+0x238>)
 80051b2:	230a      	movs	r3, #10
 80051b4:	e011      	b.n	80051da <_printf_i+0xfa>
 80051b6:	6821      	ldr	r1, [r4, #0]
 80051b8:	6833      	ldr	r3, [r6, #0]
 80051ba:	0608      	lsls	r0, r1, #24
 80051bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80051c0:	d402      	bmi.n	80051c8 <_printf_i+0xe8>
 80051c2:	0649      	lsls	r1, r1, #25
 80051c4:	bf48      	it	mi
 80051c6:	b2ad      	uxthmi	r5, r5
 80051c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80051ca:	4853      	ldr	r0, [pc, #332]	@ (8005318 <_printf_i+0x238>)
 80051cc:	6033      	str	r3, [r6, #0]
 80051ce:	bf14      	ite	ne
 80051d0:	230a      	movne	r3, #10
 80051d2:	2308      	moveq	r3, #8
 80051d4:	2100      	movs	r1, #0
 80051d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80051da:	6866      	ldr	r6, [r4, #4]
 80051dc:	60a6      	str	r6, [r4, #8]
 80051de:	2e00      	cmp	r6, #0
 80051e0:	bfa2      	ittt	ge
 80051e2:	6821      	ldrge	r1, [r4, #0]
 80051e4:	f021 0104 	bicge.w	r1, r1, #4
 80051e8:	6021      	strge	r1, [r4, #0]
 80051ea:	b90d      	cbnz	r5, 80051f0 <_printf_i+0x110>
 80051ec:	2e00      	cmp	r6, #0
 80051ee:	d04b      	beq.n	8005288 <_printf_i+0x1a8>
 80051f0:	4616      	mov	r6, r2
 80051f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80051f6:	fb03 5711 	mls	r7, r3, r1, r5
 80051fa:	5dc7      	ldrb	r7, [r0, r7]
 80051fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005200:	462f      	mov	r7, r5
 8005202:	42bb      	cmp	r3, r7
 8005204:	460d      	mov	r5, r1
 8005206:	d9f4      	bls.n	80051f2 <_printf_i+0x112>
 8005208:	2b08      	cmp	r3, #8
 800520a:	d10b      	bne.n	8005224 <_printf_i+0x144>
 800520c:	6823      	ldr	r3, [r4, #0]
 800520e:	07df      	lsls	r7, r3, #31
 8005210:	d508      	bpl.n	8005224 <_printf_i+0x144>
 8005212:	6923      	ldr	r3, [r4, #16]
 8005214:	6861      	ldr	r1, [r4, #4]
 8005216:	4299      	cmp	r1, r3
 8005218:	bfde      	ittt	le
 800521a:	2330      	movle	r3, #48	@ 0x30
 800521c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005220:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005224:	1b92      	subs	r2, r2, r6
 8005226:	6122      	str	r2, [r4, #16]
 8005228:	f8cd a000 	str.w	sl, [sp]
 800522c:	464b      	mov	r3, r9
 800522e:	aa03      	add	r2, sp, #12
 8005230:	4621      	mov	r1, r4
 8005232:	4640      	mov	r0, r8
 8005234:	f7ff fee6 	bl	8005004 <_printf_common>
 8005238:	3001      	adds	r0, #1
 800523a:	d14a      	bne.n	80052d2 <_printf_i+0x1f2>
 800523c:	f04f 30ff 	mov.w	r0, #4294967295
 8005240:	b004      	add	sp, #16
 8005242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005246:	6823      	ldr	r3, [r4, #0]
 8005248:	f043 0320 	orr.w	r3, r3, #32
 800524c:	6023      	str	r3, [r4, #0]
 800524e:	4833      	ldr	r0, [pc, #204]	@ (800531c <_printf_i+0x23c>)
 8005250:	2778      	movs	r7, #120	@ 0x78
 8005252:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005256:	6823      	ldr	r3, [r4, #0]
 8005258:	6831      	ldr	r1, [r6, #0]
 800525a:	061f      	lsls	r7, r3, #24
 800525c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005260:	d402      	bmi.n	8005268 <_printf_i+0x188>
 8005262:	065f      	lsls	r7, r3, #25
 8005264:	bf48      	it	mi
 8005266:	b2ad      	uxthmi	r5, r5
 8005268:	6031      	str	r1, [r6, #0]
 800526a:	07d9      	lsls	r1, r3, #31
 800526c:	bf44      	itt	mi
 800526e:	f043 0320 	orrmi.w	r3, r3, #32
 8005272:	6023      	strmi	r3, [r4, #0]
 8005274:	b11d      	cbz	r5, 800527e <_printf_i+0x19e>
 8005276:	2310      	movs	r3, #16
 8005278:	e7ac      	b.n	80051d4 <_printf_i+0xf4>
 800527a:	4827      	ldr	r0, [pc, #156]	@ (8005318 <_printf_i+0x238>)
 800527c:	e7e9      	b.n	8005252 <_printf_i+0x172>
 800527e:	6823      	ldr	r3, [r4, #0]
 8005280:	f023 0320 	bic.w	r3, r3, #32
 8005284:	6023      	str	r3, [r4, #0]
 8005286:	e7f6      	b.n	8005276 <_printf_i+0x196>
 8005288:	4616      	mov	r6, r2
 800528a:	e7bd      	b.n	8005208 <_printf_i+0x128>
 800528c:	6833      	ldr	r3, [r6, #0]
 800528e:	6825      	ldr	r5, [r4, #0]
 8005290:	6961      	ldr	r1, [r4, #20]
 8005292:	1d18      	adds	r0, r3, #4
 8005294:	6030      	str	r0, [r6, #0]
 8005296:	062e      	lsls	r6, r5, #24
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	d501      	bpl.n	80052a0 <_printf_i+0x1c0>
 800529c:	6019      	str	r1, [r3, #0]
 800529e:	e002      	b.n	80052a6 <_printf_i+0x1c6>
 80052a0:	0668      	lsls	r0, r5, #25
 80052a2:	d5fb      	bpl.n	800529c <_printf_i+0x1bc>
 80052a4:	8019      	strh	r1, [r3, #0]
 80052a6:	2300      	movs	r3, #0
 80052a8:	6123      	str	r3, [r4, #16]
 80052aa:	4616      	mov	r6, r2
 80052ac:	e7bc      	b.n	8005228 <_printf_i+0x148>
 80052ae:	6833      	ldr	r3, [r6, #0]
 80052b0:	1d1a      	adds	r2, r3, #4
 80052b2:	6032      	str	r2, [r6, #0]
 80052b4:	681e      	ldr	r6, [r3, #0]
 80052b6:	6862      	ldr	r2, [r4, #4]
 80052b8:	2100      	movs	r1, #0
 80052ba:	4630      	mov	r0, r6
 80052bc:	f7fa ff88 	bl	80001d0 <memchr>
 80052c0:	b108      	cbz	r0, 80052c6 <_printf_i+0x1e6>
 80052c2:	1b80      	subs	r0, r0, r6
 80052c4:	6060      	str	r0, [r4, #4]
 80052c6:	6863      	ldr	r3, [r4, #4]
 80052c8:	6123      	str	r3, [r4, #16]
 80052ca:	2300      	movs	r3, #0
 80052cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052d0:	e7aa      	b.n	8005228 <_printf_i+0x148>
 80052d2:	6923      	ldr	r3, [r4, #16]
 80052d4:	4632      	mov	r2, r6
 80052d6:	4649      	mov	r1, r9
 80052d8:	4640      	mov	r0, r8
 80052da:	47d0      	blx	sl
 80052dc:	3001      	adds	r0, #1
 80052de:	d0ad      	beq.n	800523c <_printf_i+0x15c>
 80052e0:	6823      	ldr	r3, [r4, #0]
 80052e2:	079b      	lsls	r3, r3, #30
 80052e4:	d413      	bmi.n	800530e <_printf_i+0x22e>
 80052e6:	68e0      	ldr	r0, [r4, #12]
 80052e8:	9b03      	ldr	r3, [sp, #12]
 80052ea:	4298      	cmp	r0, r3
 80052ec:	bfb8      	it	lt
 80052ee:	4618      	movlt	r0, r3
 80052f0:	e7a6      	b.n	8005240 <_printf_i+0x160>
 80052f2:	2301      	movs	r3, #1
 80052f4:	4632      	mov	r2, r6
 80052f6:	4649      	mov	r1, r9
 80052f8:	4640      	mov	r0, r8
 80052fa:	47d0      	blx	sl
 80052fc:	3001      	adds	r0, #1
 80052fe:	d09d      	beq.n	800523c <_printf_i+0x15c>
 8005300:	3501      	adds	r5, #1
 8005302:	68e3      	ldr	r3, [r4, #12]
 8005304:	9903      	ldr	r1, [sp, #12]
 8005306:	1a5b      	subs	r3, r3, r1
 8005308:	42ab      	cmp	r3, r5
 800530a:	dcf2      	bgt.n	80052f2 <_printf_i+0x212>
 800530c:	e7eb      	b.n	80052e6 <_printf_i+0x206>
 800530e:	2500      	movs	r5, #0
 8005310:	f104 0619 	add.w	r6, r4, #25
 8005314:	e7f5      	b.n	8005302 <_printf_i+0x222>
 8005316:	bf00      	nop
 8005318:	0800c966 	.word	0x0800c966
 800531c:	0800c977 	.word	0x0800c977

08005320 <_scanf_float>:
 8005320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005324:	b087      	sub	sp, #28
 8005326:	4617      	mov	r7, r2
 8005328:	9303      	str	r3, [sp, #12]
 800532a:	688b      	ldr	r3, [r1, #8]
 800532c:	1e5a      	subs	r2, r3, #1
 800532e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005332:	bf81      	itttt	hi
 8005334:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005338:	eb03 0b05 	addhi.w	fp, r3, r5
 800533c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005340:	608b      	strhi	r3, [r1, #8]
 8005342:	680b      	ldr	r3, [r1, #0]
 8005344:	460a      	mov	r2, r1
 8005346:	f04f 0500 	mov.w	r5, #0
 800534a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800534e:	f842 3b1c 	str.w	r3, [r2], #28
 8005352:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005356:	4680      	mov	r8, r0
 8005358:	460c      	mov	r4, r1
 800535a:	bf98      	it	ls
 800535c:	f04f 0b00 	movls.w	fp, #0
 8005360:	9201      	str	r2, [sp, #4]
 8005362:	4616      	mov	r6, r2
 8005364:	46aa      	mov	sl, r5
 8005366:	46a9      	mov	r9, r5
 8005368:	9502      	str	r5, [sp, #8]
 800536a:	68a2      	ldr	r2, [r4, #8]
 800536c:	b152      	cbz	r2, 8005384 <_scanf_float+0x64>
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	2b4e      	cmp	r3, #78	@ 0x4e
 8005374:	d864      	bhi.n	8005440 <_scanf_float+0x120>
 8005376:	2b40      	cmp	r3, #64	@ 0x40
 8005378:	d83c      	bhi.n	80053f4 <_scanf_float+0xd4>
 800537a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800537e:	b2c8      	uxtb	r0, r1
 8005380:	280e      	cmp	r0, #14
 8005382:	d93a      	bls.n	80053fa <_scanf_float+0xda>
 8005384:	f1b9 0f00 	cmp.w	r9, #0
 8005388:	d003      	beq.n	8005392 <_scanf_float+0x72>
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005390:	6023      	str	r3, [r4, #0]
 8005392:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005396:	f1ba 0f01 	cmp.w	sl, #1
 800539a:	f200 8117 	bhi.w	80055cc <_scanf_float+0x2ac>
 800539e:	9b01      	ldr	r3, [sp, #4]
 80053a0:	429e      	cmp	r6, r3
 80053a2:	f200 8108 	bhi.w	80055b6 <_scanf_float+0x296>
 80053a6:	2001      	movs	r0, #1
 80053a8:	b007      	add	sp, #28
 80053aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ae:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80053b2:	2a0d      	cmp	r2, #13
 80053b4:	d8e6      	bhi.n	8005384 <_scanf_float+0x64>
 80053b6:	a101      	add	r1, pc, #4	@ (adr r1, 80053bc <_scanf_float+0x9c>)
 80053b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80053bc:	08005503 	.word	0x08005503
 80053c0:	08005385 	.word	0x08005385
 80053c4:	08005385 	.word	0x08005385
 80053c8:	08005385 	.word	0x08005385
 80053cc:	08005563 	.word	0x08005563
 80053d0:	0800553b 	.word	0x0800553b
 80053d4:	08005385 	.word	0x08005385
 80053d8:	08005385 	.word	0x08005385
 80053dc:	08005511 	.word	0x08005511
 80053e0:	08005385 	.word	0x08005385
 80053e4:	08005385 	.word	0x08005385
 80053e8:	08005385 	.word	0x08005385
 80053ec:	08005385 	.word	0x08005385
 80053f0:	080054c9 	.word	0x080054c9
 80053f4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80053f8:	e7db      	b.n	80053b2 <_scanf_float+0x92>
 80053fa:	290e      	cmp	r1, #14
 80053fc:	d8c2      	bhi.n	8005384 <_scanf_float+0x64>
 80053fe:	a001      	add	r0, pc, #4	@ (adr r0, 8005404 <_scanf_float+0xe4>)
 8005400:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005404:	080054b9 	.word	0x080054b9
 8005408:	08005385 	.word	0x08005385
 800540c:	080054b9 	.word	0x080054b9
 8005410:	0800554f 	.word	0x0800554f
 8005414:	08005385 	.word	0x08005385
 8005418:	08005461 	.word	0x08005461
 800541c:	0800549f 	.word	0x0800549f
 8005420:	0800549f 	.word	0x0800549f
 8005424:	0800549f 	.word	0x0800549f
 8005428:	0800549f 	.word	0x0800549f
 800542c:	0800549f 	.word	0x0800549f
 8005430:	0800549f 	.word	0x0800549f
 8005434:	0800549f 	.word	0x0800549f
 8005438:	0800549f 	.word	0x0800549f
 800543c:	0800549f 	.word	0x0800549f
 8005440:	2b6e      	cmp	r3, #110	@ 0x6e
 8005442:	d809      	bhi.n	8005458 <_scanf_float+0x138>
 8005444:	2b60      	cmp	r3, #96	@ 0x60
 8005446:	d8b2      	bhi.n	80053ae <_scanf_float+0x8e>
 8005448:	2b54      	cmp	r3, #84	@ 0x54
 800544a:	d07b      	beq.n	8005544 <_scanf_float+0x224>
 800544c:	2b59      	cmp	r3, #89	@ 0x59
 800544e:	d199      	bne.n	8005384 <_scanf_float+0x64>
 8005450:	2d07      	cmp	r5, #7
 8005452:	d197      	bne.n	8005384 <_scanf_float+0x64>
 8005454:	2508      	movs	r5, #8
 8005456:	e02c      	b.n	80054b2 <_scanf_float+0x192>
 8005458:	2b74      	cmp	r3, #116	@ 0x74
 800545a:	d073      	beq.n	8005544 <_scanf_float+0x224>
 800545c:	2b79      	cmp	r3, #121	@ 0x79
 800545e:	e7f6      	b.n	800544e <_scanf_float+0x12e>
 8005460:	6821      	ldr	r1, [r4, #0]
 8005462:	05c8      	lsls	r0, r1, #23
 8005464:	d51b      	bpl.n	800549e <_scanf_float+0x17e>
 8005466:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800546a:	6021      	str	r1, [r4, #0]
 800546c:	f109 0901 	add.w	r9, r9, #1
 8005470:	f1bb 0f00 	cmp.w	fp, #0
 8005474:	d003      	beq.n	800547e <_scanf_float+0x15e>
 8005476:	3201      	adds	r2, #1
 8005478:	f10b 3bff 	add.w	fp, fp, #4294967295
 800547c:	60a2      	str	r2, [r4, #8]
 800547e:	68a3      	ldr	r3, [r4, #8]
 8005480:	3b01      	subs	r3, #1
 8005482:	60a3      	str	r3, [r4, #8]
 8005484:	6923      	ldr	r3, [r4, #16]
 8005486:	3301      	adds	r3, #1
 8005488:	6123      	str	r3, [r4, #16]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	3b01      	subs	r3, #1
 800548e:	2b00      	cmp	r3, #0
 8005490:	607b      	str	r3, [r7, #4]
 8005492:	f340 8087 	ble.w	80055a4 <_scanf_float+0x284>
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	3301      	adds	r3, #1
 800549a:	603b      	str	r3, [r7, #0]
 800549c:	e765      	b.n	800536a <_scanf_float+0x4a>
 800549e:	eb1a 0105 	adds.w	r1, sl, r5
 80054a2:	f47f af6f 	bne.w	8005384 <_scanf_float+0x64>
 80054a6:	6822      	ldr	r2, [r4, #0]
 80054a8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80054ac:	6022      	str	r2, [r4, #0]
 80054ae:	460d      	mov	r5, r1
 80054b0:	468a      	mov	sl, r1
 80054b2:	f806 3b01 	strb.w	r3, [r6], #1
 80054b6:	e7e2      	b.n	800547e <_scanf_float+0x15e>
 80054b8:	6822      	ldr	r2, [r4, #0]
 80054ba:	0610      	lsls	r0, r2, #24
 80054bc:	f57f af62 	bpl.w	8005384 <_scanf_float+0x64>
 80054c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80054c4:	6022      	str	r2, [r4, #0]
 80054c6:	e7f4      	b.n	80054b2 <_scanf_float+0x192>
 80054c8:	f1ba 0f00 	cmp.w	sl, #0
 80054cc:	d10e      	bne.n	80054ec <_scanf_float+0x1cc>
 80054ce:	f1b9 0f00 	cmp.w	r9, #0
 80054d2:	d10e      	bne.n	80054f2 <_scanf_float+0x1d2>
 80054d4:	6822      	ldr	r2, [r4, #0]
 80054d6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80054da:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80054de:	d108      	bne.n	80054f2 <_scanf_float+0x1d2>
 80054e0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80054e4:	6022      	str	r2, [r4, #0]
 80054e6:	f04f 0a01 	mov.w	sl, #1
 80054ea:	e7e2      	b.n	80054b2 <_scanf_float+0x192>
 80054ec:	f1ba 0f02 	cmp.w	sl, #2
 80054f0:	d055      	beq.n	800559e <_scanf_float+0x27e>
 80054f2:	2d01      	cmp	r5, #1
 80054f4:	d002      	beq.n	80054fc <_scanf_float+0x1dc>
 80054f6:	2d04      	cmp	r5, #4
 80054f8:	f47f af44 	bne.w	8005384 <_scanf_float+0x64>
 80054fc:	3501      	adds	r5, #1
 80054fe:	b2ed      	uxtb	r5, r5
 8005500:	e7d7      	b.n	80054b2 <_scanf_float+0x192>
 8005502:	f1ba 0f01 	cmp.w	sl, #1
 8005506:	f47f af3d 	bne.w	8005384 <_scanf_float+0x64>
 800550a:	f04f 0a02 	mov.w	sl, #2
 800550e:	e7d0      	b.n	80054b2 <_scanf_float+0x192>
 8005510:	b97d      	cbnz	r5, 8005532 <_scanf_float+0x212>
 8005512:	f1b9 0f00 	cmp.w	r9, #0
 8005516:	f47f af38 	bne.w	800538a <_scanf_float+0x6a>
 800551a:	6822      	ldr	r2, [r4, #0]
 800551c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005520:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005524:	f040 8108 	bne.w	8005738 <_scanf_float+0x418>
 8005528:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800552c:	6022      	str	r2, [r4, #0]
 800552e:	2501      	movs	r5, #1
 8005530:	e7bf      	b.n	80054b2 <_scanf_float+0x192>
 8005532:	2d03      	cmp	r5, #3
 8005534:	d0e2      	beq.n	80054fc <_scanf_float+0x1dc>
 8005536:	2d05      	cmp	r5, #5
 8005538:	e7de      	b.n	80054f8 <_scanf_float+0x1d8>
 800553a:	2d02      	cmp	r5, #2
 800553c:	f47f af22 	bne.w	8005384 <_scanf_float+0x64>
 8005540:	2503      	movs	r5, #3
 8005542:	e7b6      	b.n	80054b2 <_scanf_float+0x192>
 8005544:	2d06      	cmp	r5, #6
 8005546:	f47f af1d 	bne.w	8005384 <_scanf_float+0x64>
 800554a:	2507      	movs	r5, #7
 800554c:	e7b1      	b.n	80054b2 <_scanf_float+0x192>
 800554e:	6822      	ldr	r2, [r4, #0]
 8005550:	0591      	lsls	r1, r2, #22
 8005552:	f57f af17 	bpl.w	8005384 <_scanf_float+0x64>
 8005556:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800555a:	6022      	str	r2, [r4, #0]
 800555c:	f8cd 9008 	str.w	r9, [sp, #8]
 8005560:	e7a7      	b.n	80054b2 <_scanf_float+0x192>
 8005562:	6822      	ldr	r2, [r4, #0]
 8005564:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005568:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800556c:	d006      	beq.n	800557c <_scanf_float+0x25c>
 800556e:	0550      	lsls	r0, r2, #21
 8005570:	f57f af08 	bpl.w	8005384 <_scanf_float+0x64>
 8005574:	f1b9 0f00 	cmp.w	r9, #0
 8005578:	f000 80de 	beq.w	8005738 <_scanf_float+0x418>
 800557c:	0591      	lsls	r1, r2, #22
 800557e:	bf58      	it	pl
 8005580:	9902      	ldrpl	r1, [sp, #8]
 8005582:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005586:	bf58      	it	pl
 8005588:	eba9 0101 	subpl.w	r1, r9, r1
 800558c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005590:	bf58      	it	pl
 8005592:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005596:	6022      	str	r2, [r4, #0]
 8005598:	f04f 0900 	mov.w	r9, #0
 800559c:	e789      	b.n	80054b2 <_scanf_float+0x192>
 800559e:	f04f 0a03 	mov.w	sl, #3
 80055a2:	e786      	b.n	80054b2 <_scanf_float+0x192>
 80055a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80055a8:	4639      	mov	r1, r7
 80055aa:	4640      	mov	r0, r8
 80055ac:	4798      	blx	r3
 80055ae:	2800      	cmp	r0, #0
 80055b0:	f43f aedb 	beq.w	800536a <_scanf_float+0x4a>
 80055b4:	e6e6      	b.n	8005384 <_scanf_float+0x64>
 80055b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80055ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80055be:	463a      	mov	r2, r7
 80055c0:	4640      	mov	r0, r8
 80055c2:	4798      	blx	r3
 80055c4:	6923      	ldr	r3, [r4, #16]
 80055c6:	3b01      	subs	r3, #1
 80055c8:	6123      	str	r3, [r4, #16]
 80055ca:	e6e8      	b.n	800539e <_scanf_float+0x7e>
 80055cc:	1e6b      	subs	r3, r5, #1
 80055ce:	2b06      	cmp	r3, #6
 80055d0:	d824      	bhi.n	800561c <_scanf_float+0x2fc>
 80055d2:	2d02      	cmp	r5, #2
 80055d4:	d836      	bhi.n	8005644 <_scanf_float+0x324>
 80055d6:	9b01      	ldr	r3, [sp, #4]
 80055d8:	429e      	cmp	r6, r3
 80055da:	f67f aee4 	bls.w	80053a6 <_scanf_float+0x86>
 80055de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80055e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80055e6:	463a      	mov	r2, r7
 80055e8:	4640      	mov	r0, r8
 80055ea:	4798      	blx	r3
 80055ec:	6923      	ldr	r3, [r4, #16]
 80055ee:	3b01      	subs	r3, #1
 80055f0:	6123      	str	r3, [r4, #16]
 80055f2:	e7f0      	b.n	80055d6 <_scanf_float+0x2b6>
 80055f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80055f8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80055fc:	463a      	mov	r2, r7
 80055fe:	4640      	mov	r0, r8
 8005600:	4798      	blx	r3
 8005602:	6923      	ldr	r3, [r4, #16]
 8005604:	3b01      	subs	r3, #1
 8005606:	6123      	str	r3, [r4, #16]
 8005608:	f10a 3aff 	add.w	sl, sl, #4294967295
 800560c:	fa5f fa8a 	uxtb.w	sl, sl
 8005610:	f1ba 0f02 	cmp.w	sl, #2
 8005614:	d1ee      	bne.n	80055f4 <_scanf_float+0x2d4>
 8005616:	3d03      	subs	r5, #3
 8005618:	b2ed      	uxtb	r5, r5
 800561a:	1b76      	subs	r6, r6, r5
 800561c:	6823      	ldr	r3, [r4, #0]
 800561e:	05da      	lsls	r2, r3, #23
 8005620:	d530      	bpl.n	8005684 <_scanf_float+0x364>
 8005622:	055b      	lsls	r3, r3, #21
 8005624:	d511      	bpl.n	800564a <_scanf_float+0x32a>
 8005626:	9b01      	ldr	r3, [sp, #4]
 8005628:	429e      	cmp	r6, r3
 800562a:	f67f aebc 	bls.w	80053a6 <_scanf_float+0x86>
 800562e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005632:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005636:	463a      	mov	r2, r7
 8005638:	4640      	mov	r0, r8
 800563a:	4798      	blx	r3
 800563c:	6923      	ldr	r3, [r4, #16]
 800563e:	3b01      	subs	r3, #1
 8005640:	6123      	str	r3, [r4, #16]
 8005642:	e7f0      	b.n	8005626 <_scanf_float+0x306>
 8005644:	46aa      	mov	sl, r5
 8005646:	46b3      	mov	fp, r6
 8005648:	e7de      	b.n	8005608 <_scanf_float+0x2e8>
 800564a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800564e:	6923      	ldr	r3, [r4, #16]
 8005650:	2965      	cmp	r1, #101	@ 0x65
 8005652:	f103 33ff 	add.w	r3, r3, #4294967295
 8005656:	f106 35ff 	add.w	r5, r6, #4294967295
 800565a:	6123      	str	r3, [r4, #16]
 800565c:	d00c      	beq.n	8005678 <_scanf_float+0x358>
 800565e:	2945      	cmp	r1, #69	@ 0x45
 8005660:	d00a      	beq.n	8005678 <_scanf_float+0x358>
 8005662:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005666:	463a      	mov	r2, r7
 8005668:	4640      	mov	r0, r8
 800566a:	4798      	blx	r3
 800566c:	6923      	ldr	r3, [r4, #16]
 800566e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005672:	3b01      	subs	r3, #1
 8005674:	1eb5      	subs	r5, r6, #2
 8005676:	6123      	str	r3, [r4, #16]
 8005678:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800567c:	463a      	mov	r2, r7
 800567e:	4640      	mov	r0, r8
 8005680:	4798      	blx	r3
 8005682:	462e      	mov	r6, r5
 8005684:	6822      	ldr	r2, [r4, #0]
 8005686:	f012 0210 	ands.w	r2, r2, #16
 800568a:	d001      	beq.n	8005690 <_scanf_float+0x370>
 800568c:	2000      	movs	r0, #0
 800568e:	e68b      	b.n	80053a8 <_scanf_float+0x88>
 8005690:	7032      	strb	r2, [r6, #0]
 8005692:	6823      	ldr	r3, [r4, #0]
 8005694:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005698:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800569c:	d11c      	bne.n	80056d8 <_scanf_float+0x3b8>
 800569e:	9b02      	ldr	r3, [sp, #8]
 80056a0:	454b      	cmp	r3, r9
 80056a2:	eba3 0209 	sub.w	r2, r3, r9
 80056a6:	d123      	bne.n	80056f0 <_scanf_float+0x3d0>
 80056a8:	9901      	ldr	r1, [sp, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	4640      	mov	r0, r8
 80056ae:	f002 fc1f 	bl	8007ef0 <_strtod_r>
 80056b2:	9b03      	ldr	r3, [sp, #12]
 80056b4:	6821      	ldr	r1, [r4, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f011 0f02 	tst.w	r1, #2
 80056bc:	ec57 6b10 	vmov	r6, r7, d0
 80056c0:	f103 0204 	add.w	r2, r3, #4
 80056c4:	d01f      	beq.n	8005706 <_scanf_float+0x3e6>
 80056c6:	9903      	ldr	r1, [sp, #12]
 80056c8:	600a      	str	r2, [r1, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	e9c3 6700 	strd	r6, r7, [r3]
 80056d0:	68e3      	ldr	r3, [r4, #12]
 80056d2:	3301      	adds	r3, #1
 80056d4:	60e3      	str	r3, [r4, #12]
 80056d6:	e7d9      	b.n	800568c <_scanf_float+0x36c>
 80056d8:	9b04      	ldr	r3, [sp, #16]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d0e4      	beq.n	80056a8 <_scanf_float+0x388>
 80056de:	9905      	ldr	r1, [sp, #20]
 80056e0:	230a      	movs	r3, #10
 80056e2:	3101      	adds	r1, #1
 80056e4:	4640      	mov	r0, r8
 80056e6:	f002 fc83 	bl	8007ff0 <_strtol_r>
 80056ea:	9b04      	ldr	r3, [sp, #16]
 80056ec:	9e05      	ldr	r6, [sp, #20]
 80056ee:	1ac2      	subs	r2, r0, r3
 80056f0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80056f4:	429e      	cmp	r6, r3
 80056f6:	bf28      	it	cs
 80056f8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80056fc:	4910      	ldr	r1, [pc, #64]	@ (8005740 <_scanf_float+0x420>)
 80056fe:	4630      	mov	r0, r6
 8005700:	f000 f8e4 	bl	80058cc <siprintf>
 8005704:	e7d0      	b.n	80056a8 <_scanf_float+0x388>
 8005706:	f011 0f04 	tst.w	r1, #4
 800570a:	9903      	ldr	r1, [sp, #12]
 800570c:	600a      	str	r2, [r1, #0]
 800570e:	d1dc      	bne.n	80056ca <_scanf_float+0x3aa>
 8005710:	681d      	ldr	r5, [r3, #0]
 8005712:	4632      	mov	r2, r6
 8005714:	463b      	mov	r3, r7
 8005716:	4630      	mov	r0, r6
 8005718:	4639      	mov	r1, r7
 800571a:	f7fb fa07 	bl	8000b2c <__aeabi_dcmpun>
 800571e:	b128      	cbz	r0, 800572c <_scanf_float+0x40c>
 8005720:	4808      	ldr	r0, [pc, #32]	@ (8005744 <_scanf_float+0x424>)
 8005722:	f000 f9df 	bl	8005ae4 <nanf>
 8005726:	ed85 0a00 	vstr	s0, [r5]
 800572a:	e7d1      	b.n	80056d0 <_scanf_float+0x3b0>
 800572c:	4630      	mov	r0, r6
 800572e:	4639      	mov	r1, r7
 8005730:	f7fb fa5a 	bl	8000be8 <__aeabi_d2f>
 8005734:	6028      	str	r0, [r5, #0]
 8005736:	e7cb      	b.n	80056d0 <_scanf_float+0x3b0>
 8005738:	f04f 0900 	mov.w	r9, #0
 800573c:	e629      	b.n	8005392 <_scanf_float+0x72>
 800573e:	bf00      	nop
 8005740:	0800c988 	.word	0x0800c988
 8005744:	0800cd1d 	.word	0x0800cd1d

08005748 <std>:
 8005748:	2300      	movs	r3, #0
 800574a:	b510      	push	{r4, lr}
 800574c:	4604      	mov	r4, r0
 800574e:	e9c0 3300 	strd	r3, r3, [r0]
 8005752:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005756:	6083      	str	r3, [r0, #8]
 8005758:	8181      	strh	r1, [r0, #12]
 800575a:	6643      	str	r3, [r0, #100]	@ 0x64
 800575c:	81c2      	strh	r2, [r0, #14]
 800575e:	6183      	str	r3, [r0, #24]
 8005760:	4619      	mov	r1, r3
 8005762:	2208      	movs	r2, #8
 8005764:	305c      	adds	r0, #92	@ 0x5c
 8005766:	f000 f92e 	bl	80059c6 <memset>
 800576a:	4b0d      	ldr	r3, [pc, #52]	@ (80057a0 <std+0x58>)
 800576c:	6263      	str	r3, [r4, #36]	@ 0x24
 800576e:	4b0d      	ldr	r3, [pc, #52]	@ (80057a4 <std+0x5c>)
 8005770:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005772:	4b0d      	ldr	r3, [pc, #52]	@ (80057a8 <std+0x60>)
 8005774:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005776:	4b0d      	ldr	r3, [pc, #52]	@ (80057ac <std+0x64>)
 8005778:	6323      	str	r3, [r4, #48]	@ 0x30
 800577a:	4b0d      	ldr	r3, [pc, #52]	@ (80057b0 <std+0x68>)
 800577c:	6224      	str	r4, [r4, #32]
 800577e:	429c      	cmp	r4, r3
 8005780:	d006      	beq.n	8005790 <std+0x48>
 8005782:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005786:	4294      	cmp	r4, r2
 8005788:	d002      	beq.n	8005790 <std+0x48>
 800578a:	33d0      	adds	r3, #208	@ 0xd0
 800578c:	429c      	cmp	r4, r3
 800578e:	d105      	bne.n	800579c <std+0x54>
 8005790:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005798:	f000 b992 	b.w	8005ac0 <__retarget_lock_init_recursive>
 800579c:	bd10      	pop	{r4, pc}
 800579e:	bf00      	nop
 80057a0:	0800590d 	.word	0x0800590d
 80057a4:	0800592f 	.word	0x0800592f
 80057a8:	08005967 	.word	0x08005967
 80057ac:	0800598b 	.word	0x0800598b
 80057b0:	20000734 	.word	0x20000734

080057b4 <stdio_exit_handler>:
 80057b4:	4a02      	ldr	r2, [pc, #8]	@ (80057c0 <stdio_exit_handler+0xc>)
 80057b6:	4903      	ldr	r1, [pc, #12]	@ (80057c4 <stdio_exit_handler+0x10>)
 80057b8:	4803      	ldr	r0, [pc, #12]	@ (80057c8 <stdio_exit_handler+0x14>)
 80057ba:	f000 b869 	b.w	8005890 <_fwalk_sglue>
 80057be:	bf00      	nop
 80057c0:	2000006c 	.word	0x2000006c
 80057c4:	080083ad 	.word	0x080083ad
 80057c8:	2000007c 	.word	0x2000007c

080057cc <cleanup_stdio>:
 80057cc:	6841      	ldr	r1, [r0, #4]
 80057ce:	4b0c      	ldr	r3, [pc, #48]	@ (8005800 <cleanup_stdio+0x34>)
 80057d0:	4299      	cmp	r1, r3
 80057d2:	b510      	push	{r4, lr}
 80057d4:	4604      	mov	r4, r0
 80057d6:	d001      	beq.n	80057dc <cleanup_stdio+0x10>
 80057d8:	f002 fde8 	bl	80083ac <_fflush_r>
 80057dc:	68a1      	ldr	r1, [r4, #8]
 80057de:	4b09      	ldr	r3, [pc, #36]	@ (8005804 <cleanup_stdio+0x38>)
 80057e0:	4299      	cmp	r1, r3
 80057e2:	d002      	beq.n	80057ea <cleanup_stdio+0x1e>
 80057e4:	4620      	mov	r0, r4
 80057e6:	f002 fde1 	bl	80083ac <_fflush_r>
 80057ea:	68e1      	ldr	r1, [r4, #12]
 80057ec:	4b06      	ldr	r3, [pc, #24]	@ (8005808 <cleanup_stdio+0x3c>)
 80057ee:	4299      	cmp	r1, r3
 80057f0:	d004      	beq.n	80057fc <cleanup_stdio+0x30>
 80057f2:	4620      	mov	r0, r4
 80057f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057f8:	f002 bdd8 	b.w	80083ac <_fflush_r>
 80057fc:	bd10      	pop	{r4, pc}
 80057fe:	bf00      	nop
 8005800:	20000734 	.word	0x20000734
 8005804:	2000079c 	.word	0x2000079c
 8005808:	20000804 	.word	0x20000804

0800580c <global_stdio_init.part.0>:
 800580c:	b510      	push	{r4, lr}
 800580e:	4b0b      	ldr	r3, [pc, #44]	@ (800583c <global_stdio_init.part.0+0x30>)
 8005810:	4c0b      	ldr	r4, [pc, #44]	@ (8005840 <global_stdio_init.part.0+0x34>)
 8005812:	4a0c      	ldr	r2, [pc, #48]	@ (8005844 <global_stdio_init.part.0+0x38>)
 8005814:	601a      	str	r2, [r3, #0]
 8005816:	4620      	mov	r0, r4
 8005818:	2200      	movs	r2, #0
 800581a:	2104      	movs	r1, #4
 800581c:	f7ff ff94 	bl	8005748 <std>
 8005820:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005824:	2201      	movs	r2, #1
 8005826:	2109      	movs	r1, #9
 8005828:	f7ff ff8e 	bl	8005748 <std>
 800582c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005830:	2202      	movs	r2, #2
 8005832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005836:	2112      	movs	r1, #18
 8005838:	f7ff bf86 	b.w	8005748 <std>
 800583c:	2000086c 	.word	0x2000086c
 8005840:	20000734 	.word	0x20000734
 8005844:	080057b5 	.word	0x080057b5

08005848 <__sfp_lock_acquire>:
 8005848:	4801      	ldr	r0, [pc, #4]	@ (8005850 <__sfp_lock_acquire+0x8>)
 800584a:	f000 b93a 	b.w	8005ac2 <__retarget_lock_acquire_recursive>
 800584e:	bf00      	nop
 8005850:	20000875 	.word	0x20000875

08005854 <__sfp_lock_release>:
 8005854:	4801      	ldr	r0, [pc, #4]	@ (800585c <__sfp_lock_release+0x8>)
 8005856:	f000 b935 	b.w	8005ac4 <__retarget_lock_release_recursive>
 800585a:	bf00      	nop
 800585c:	20000875 	.word	0x20000875

08005860 <__sinit>:
 8005860:	b510      	push	{r4, lr}
 8005862:	4604      	mov	r4, r0
 8005864:	f7ff fff0 	bl	8005848 <__sfp_lock_acquire>
 8005868:	6a23      	ldr	r3, [r4, #32]
 800586a:	b11b      	cbz	r3, 8005874 <__sinit+0x14>
 800586c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005870:	f7ff bff0 	b.w	8005854 <__sfp_lock_release>
 8005874:	4b04      	ldr	r3, [pc, #16]	@ (8005888 <__sinit+0x28>)
 8005876:	6223      	str	r3, [r4, #32]
 8005878:	4b04      	ldr	r3, [pc, #16]	@ (800588c <__sinit+0x2c>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1f5      	bne.n	800586c <__sinit+0xc>
 8005880:	f7ff ffc4 	bl	800580c <global_stdio_init.part.0>
 8005884:	e7f2      	b.n	800586c <__sinit+0xc>
 8005886:	bf00      	nop
 8005888:	080057cd 	.word	0x080057cd
 800588c:	2000086c 	.word	0x2000086c

08005890 <_fwalk_sglue>:
 8005890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005894:	4607      	mov	r7, r0
 8005896:	4688      	mov	r8, r1
 8005898:	4614      	mov	r4, r2
 800589a:	2600      	movs	r6, #0
 800589c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058a0:	f1b9 0901 	subs.w	r9, r9, #1
 80058a4:	d505      	bpl.n	80058b2 <_fwalk_sglue+0x22>
 80058a6:	6824      	ldr	r4, [r4, #0]
 80058a8:	2c00      	cmp	r4, #0
 80058aa:	d1f7      	bne.n	800589c <_fwalk_sglue+0xc>
 80058ac:	4630      	mov	r0, r6
 80058ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058b2:	89ab      	ldrh	r3, [r5, #12]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d907      	bls.n	80058c8 <_fwalk_sglue+0x38>
 80058b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058bc:	3301      	adds	r3, #1
 80058be:	d003      	beq.n	80058c8 <_fwalk_sglue+0x38>
 80058c0:	4629      	mov	r1, r5
 80058c2:	4638      	mov	r0, r7
 80058c4:	47c0      	blx	r8
 80058c6:	4306      	orrs	r6, r0
 80058c8:	3568      	adds	r5, #104	@ 0x68
 80058ca:	e7e9      	b.n	80058a0 <_fwalk_sglue+0x10>

080058cc <siprintf>:
 80058cc:	b40e      	push	{r1, r2, r3}
 80058ce:	b500      	push	{lr}
 80058d0:	b09c      	sub	sp, #112	@ 0x70
 80058d2:	ab1d      	add	r3, sp, #116	@ 0x74
 80058d4:	9002      	str	r0, [sp, #8]
 80058d6:	9006      	str	r0, [sp, #24]
 80058d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80058dc:	4809      	ldr	r0, [pc, #36]	@ (8005904 <siprintf+0x38>)
 80058de:	9107      	str	r1, [sp, #28]
 80058e0:	9104      	str	r1, [sp, #16]
 80058e2:	4909      	ldr	r1, [pc, #36]	@ (8005908 <siprintf+0x3c>)
 80058e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80058e8:	9105      	str	r1, [sp, #20]
 80058ea:	6800      	ldr	r0, [r0, #0]
 80058ec:	9301      	str	r3, [sp, #4]
 80058ee:	a902      	add	r1, sp, #8
 80058f0:	f002 fbdc 	bl	80080ac <_svfiprintf_r>
 80058f4:	9b02      	ldr	r3, [sp, #8]
 80058f6:	2200      	movs	r2, #0
 80058f8:	701a      	strb	r2, [r3, #0]
 80058fa:	b01c      	add	sp, #112	@ 0x70
 80058fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005900:	b003      	add	sp, #12
 8005902:	4770      	bx	lr
 8005904:	20000078 	.word	0x20000078
 8005908:	ffff0208 	.word	0xffff0208

0800590c <__sread>:
 800590c:	b510      	push	{r4, lr}
 800590e:	460c      	mov	r4, r1
 8005910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005914:	f000 f886 	bl	8005a24 <_read_r>
 8005918:	2800      	cmp	r0, #0
 800591a:	bfab      	itete	ge
 800591c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800591e:	89a3      	ldrhlt	r3, [r4, #12]
 8005920:	181b      	addge	r3, r3, r0
 8005922:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005926:	bfac      	ite	ge
 8005928:	6563      	strge	r3, [r4, #84]	@ 0x54
 800592a:	81a3      	strhlt	r3, [r4, #12]
 800592c:	bd10      	pop	{r4, pc}

0800592e <__swrite>:
 800592e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005932:	461f      	mov	r7, r3
 8005934:	898b      	ldrh	r3, [r1, #12]
 8005936:	05db      	lsls	r3, r3, #23
 8005938:	4605      	mov	r5, r0
 800593a:	460c      	mov	r4, r1
 800593c:	4616      	mov	r6, r2
 800593e:	d505      	bpl.n	800594c <__swrite+0x1e>
 8005940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005944:	2302      	movs	r3, #2
 8005946:	2200      	movs	r2, #0
 8005948:	f000 f85a 	bl	8005a00 <_lseek_r>
 800594c:	89a3      	ldrh	r3, [r4, #12]
 800594e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005952:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005956:	81a3      	strh	r3, [r4, #12]
 8005958:	4632      	mov	r2, r6
 800595a:	463b      	mov	r3, r7
 800595c:	4628      	mov	r0, r5
 800595e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005962:	f000 b871 	b.w	8005a48 <_write_r>

08005966 <__sseek>:
 8005966:	b510      	push	{r4, lr}
 8005968:	460c      	mov	r4, r1
 800596a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800596e:	f000 f847 	bl	8005a00 <_lseek_r>
 8005972:	1c43      	adds	r3, r0, #1
 8005974:	89a3      	ldrh	r3, [r4, #12]
 8005976:	bf15      	itete	ne
 8005978:	6560      	strne	r0, [r4, #84]	@ 0x54
 800597a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800597e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005982:	81a3      	strheq	r3, [r4, #12]
 8005984:	bf18      	it	ne
 8005986:	81a3      	strhne	r3, [r4, #12]
 8005988:	bd10      	pop	{r4, pc}

0800598a <__sclose>:
 800598a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800598e:	f000 b827 	b.w	80059e0 <_close_r>

08005992 <memmove>:
 8005992:	4288      	cmp	r0, r1
 8005994:	b510      	push	{r4, lr}
 8005996:	eb01 0402 	add.w	r4, r1, r2
 800599a:	d902      	bls.n	80059a2 <memmove+0x10>
 800599c:	4284      	cmp	r4, r0
 800599e:	4623      	mov	r3, r4
 80059a0:	d807      	bhi.n	80059b2 <memmove+0x20>
 80059a2:	1e43      	subs	r3, r0, #1
 80059a4:	42a1      	cmp	r1, r4
 80059a6:	d008      	beq.n	80059ba <memmove+0x28>
 80059a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059ac:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059b0:	e7f8      	b.n	80059a4 <memmove+0x12>
 80059b2:	4402      	add	r2, r0
 80059b4:	4601      	mov	r1, r0
 80059b6:	428a      	cmp	r2, r1
 80059b8:	d100      	bne.n	80059bc <memmove+0x2a>
 80059ba:	bd10      	pop	{r4, pc}
 80059bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059c0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80059c4:	e7f7      	b.n	80059b6 <memmove+0x24>

080059c6 <memset>:
 80059c6:	4402      	add	r2, r0
 80059c8:	4603      	mov	r3, r0
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d100      	bne.n	80059d0 <memset+0xa>
 80059ce:	4770      	bx	lr
 80059d0:	f803 1b01 	strb.w	r1, [r3], #1
 80059d4:	e7f9      	b.n	80059ca <memset+0x4>
	...

080059d8 <_localeconv_r>:
 80059d8:	4800      	ldr	r0, [pc, #0]	@ (80059dc <_localeconv_r+0x4>)
 80059da:	4770      	bx	lr
 80059dc:	200001b8 	.word	0x200001b8

080059e0 <_close_r>:
 80059e0:	b538      	push	{r3, r4, r5, lr}
 80059e2:	4d06      	ldr	r5, [pc, #24]	@ (80059fc <_close_r+0x1c>)
 80059e4:	2300      	movs	r3, #0
 80059e6:	4604      	mov	r4, r0
 80059e8:	4608      	mov	r0, r1
 80059ea:	602b      	str	r3, [r5, #0]
 80059ec:	f7fc f9f3 	bl	8001dd6 <_close>
 80059f0:	1c43      	adds	r3, r0, #1
 80059f2:	d102      	bne.n	80059fa <_close_r+0x1a>
 80059f4:	682b      	ldr	r3, [r5, #0]
 80059f6:	b103      	cbz	r3, 80059fa <_close_r+0x1a>
 80059f8:	6023      	str	r3, [r4, #0]
 80059fa:	bd38      	pop	{r3, r4, r5, pc}
 80059fc:	20000870 	.word	0x20000870

08005a00 <_lseek_r>:
 8005a00:	b538      	push	{r3, r4, r5, lr}
 8005a02:	4d07      	ldr	r5, [pc, #28]	@ (8005a20 <_lseek_r+0x20>)
 8005a04:	4604      	mov	r4, r0
 8005a06:	4608      	mov	r0, r1
 8005a08:	4611      	mov	r1, r2
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	602a      	str	r2, [r5, #0]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	f7fc fa08 	bl	8001e24 <_lseek>
 8005a14:	1c43      	adds	r3, r0, #1
 8005a16:	d102      	bne.n	8005a1e <_lseek_r+0x1e>
 8005a18:	682b      	ldr	r3, [r5, #0]
 8005a1a:	b103      	cbz	r3, 8005a1e <_lseek_r+0x1e>
 8005a1c:	6023      	str	r3, [r4, #0]
 8005a1e:	bd38      	pop	{r3, r4, r5, pc}
 8005a20:	20000870 	.word	0x20000870

08005a24 <_read_r>:
 8005a24:	b538      	push	{r3, r4, r5, lr}
 8005a26:	4d07      	ldr	r5, [pc, #28]	@ (8005a44 <_read_r+0x20>)
 8005a28:	4604      	mov	r4, r0
 8005a2a:	4608      	mov	r0, r1
 8005a2c:	4611      	mov	r1, r2
 8005a2e:	2200      	movs	r2, #0
 8005a30:	602a      	str	r2, [r5, #0]
 8005a32:	461a      	mov	r2, r3
 8005a34:	f7fc f996 	bl	8001d64 <_read>
 8005a38:	1c43      	adds	r3, r0, #1
 8005a3a:	d102      	bne.n	8005a42 <_read_r+0x1e>
 8005a3c:	682b      	ldr	r3, [r5, #0]
 8005a3e:	b103      	cbz	r3, 8005a42 <_read_r+0x1e>
 8005a40:	6023      	str	r3, [r4, #0]
 8005a42:	bd38      	pop	{r3, r4, r5, pc}
 8005a44:	20000870 	.word	0x20000870

08005a48 <_write_r>:
 8005a48:	b538      	push	{r3, r4, r5, lr}
 8005a4a:	4d07      	ldr	r5, [pc, #28]	@ (8005a68 <_write_r+0x20>)
 8005a4c:	4604      	mov	r4, r0
 8005a4e:	4608      	mov	r0, r1
 8005a50:	4611      	mov	r1, r2
 8005a52:	2200      	movs	r2, #0
 8005a54:	602a      	str	r2, [r5, #0]
 8005a56:	461a      	mov	r2, r3
 8005a58:	f7fc f9a1 	bl	8001d9e <_write>
 8005a5c:	1c43      	adds	r3, r0, #1
 8005a5e:	d102      	bne.n	8005a66 <_write_r+0x1e>
 8005a60:	682b      	ldr	r3, [r5, #0]
 8005a62:	b103      	cbz	r3, 8005a66 <_write_r+0x1e>
 8005a64:	6023      	str	r3, [r4, #0]
 8005a66:	bd38      	pop	{r3, r4, r5, pc}
 8005a68:	20000870 	.word	0x20000870

08005a6c <__errno>:
 8005a6c:	4b01      	ldr	r3, [pc, #4]	@ (8005a74 <__errno+0x8>)
 8005a6e:	6818      	ldr	r0, [r3, #0]
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	20000078 	.word	0x20000078

08005a78 <__libc_init_array>:
 8005a78:	b570      	push	{r4, r5, r6, lr}
 8005a7a:	4d0d      	ldr	r5, [pc, #52]	@ (8005ab0 <__libc_init_array+0x38>)
 8005a7c:	4c0d      	ldr	r4, [pc, #52]	@ (8005ab4 <__libc_init_array+0x3c>)
 8005a7e:	1b64      	subs	r4, r4, r5
 8005a80:	10a4      	asrs	r4, r4, #2
 8005a82:	2600      	movs	r6, #0
 8005a84:	42a6      	cmp	r6, r4
 8005a86:	d109      	bne.n	8005a9c <__libc_init_array+0x24>
 8005a88:	4d0b      	ldr	r5, [pc, #44]	@ (8005ab8 <__libc_init_array+0x40>)
 8005a8a:	4c0c      	ldr	r4, [pc, #48]	@ (8005abc <__libc_init_array+0x44>)
 8005a8c:	f003 fb56 	bl	800913c <_init>
 8005a90:	1b64      	subs	r4, r4, r5
 8005a92:	10a4      	asrs	r4, r4, #2
 8005a94:	2600      	movs	r6, #0
 8005a96:	42a6      	cmp	r6, r4
 8005a98:	d105      	bne.n	8005aa6 <__libc_init_array+0x2e>
 8005a9a:	bd70      	pop	{r4, r5, r6, pc}
 8005a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aa0:	4798      	blx	r3
 8005aa2:	3601      	adds	r6, #1
 8005aa4:	e7ee      	b.n	8005a84 <__libc_init_array+0xc>
 8005aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aaa:	4798      	blx	r3
 8005aac:	3601      	adds	r6, #1
 8005aae:	e7f2      	b.n	8005a96 <__libc_init_array+0x1e>
 8005ab0:	0800cd88 	.word	0x0800cd88
 8005ab4:	0800cd88 	.word	0x0800cd88
 8005ab8:	0800cd88 	.word	0x0800cd88
 8005abc:	0800cd8c 	.word	0x0800cd8c

08005ac0 <__retarget_lock_init_recursive>:
 8005ac0:	4770      	bx	lr

08005ac2 <__retarget_lock_acquire_recursive>:
 8005ac2:	4770      	bx	lr

08005ac4 <__retarget_lock_release_recursive>:
 8005ac4:	4770      	bx	lr

08005ac6 <memcpy>:
 8005ac6:	440a      	add	r2, r1
 8005ac8:	4291      	cmp	r1, r2
 8005aca:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ace:	d100      	bne.n	8005ad2 <memcpy+0xc>
 8005ad0:	4770      	bx	lr
 8005ad2:	b510      	push	{r4, lr}
 8005ad4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ad8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005adc:	4291      	cmp	r1, r2
 8005ade:	d1f9      	bne.n	8005ad4 <memcpy+0xe>
 8005ae0:	bd10      	pop	{r4, pc}
	...

08005ae4 <nanf>:
 8005ae4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005aec <nanf+0x8>
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	7fc00000 	.word	0x7fc00000

08005af0 <quorem>:
 8005af0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005af4:	6903      	ldr	r3, [r0, #16]
 8005af6:	690c      	ldr	r4, [r1, #16]
 8005af8:	42a3      	cmp	r3, r4
 8005afa:	4607      	mov	r7, r0
 8005afc:	db7e      	blt.n	8005bfc <quorem+0x10c>
 8005afe:	3c01      	subs	r4, #1
 8005b00:	f101 0814 	add.w	r8, r1, #20
 8005b04:	00a3      	lsls	r3, r4, #2
 8005b06:	f100 0514 	add.w	r5, r0, #20
 8005b0a:	9300      	str	r3, [sp, #0]
 8005b0c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b10:	9301      	str	r3, [sp, #4]
 8005b12:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b22:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b26:	d32e      	bcc.n	8005b86 <quorem+0x96>
 8005b28:	f04f 0a00 	mov.w	sl, #0
 8005b2c:	46c4      	mov	ip, r8
 8005b2e:	46ae      	mov	lr, r5
 8005b30:	46d3      	mov	fp, sl
 8005b32:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005b36:	b298      	uxth	r0, r3
 8005b38:	fb06 a000 	mla	r0, r6, r0, sl
 8005b3c:	0c02      	lsrs	r2, r0, #16
 8005b3e:	0c1b      	lsrs	r3, r3, #16
 8005b40:	fb06 2303 	mla	r3, r6, r3, r2
 8005b44:	f8de 2000 	ldr.w	r2, [lr]
 8005b48:	b280      	uxth	r0, r0
 8005b4a:	b292      	uxth	r2, r2
 8005b4c:	1a12      	subs	r2, r2, r0
 8005b4e:	445a      	add	r2, fp
 8005b50:	f8de 0000 	ldr.w	r0, [lr]
 8005b54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005b5e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005b62:	b292      	uxth	r2, r2
 8005b64:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005b68:	45e1      	cmp	r9, ip
 8005b6a:	f84e 2b04 	str.w	r2, [lr], #4
 8005b6e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005b72:	d2de      	bcs.n	8005b32 <quorem+0x42>
 8005b74:	9b00      	ldr	r3, [sp, #0]
 8005b76:	58eb      	ldr	r3, [r5, r3]
 8005b78:	b92b      	cbnz	r3, 8005b86 <quorem+0x96>
 8005b7a:	9b01      	ldr	r3, [sp, #4]
 8005b7c:	3b04      	subs	r3, #4
 8005b7e:	429d      	cmp	r5, r3
 8005b80:	461a      	mov	r2, r3
 8005b82:	d32f      	bcc.n	8005be4 <quorem+0xf4>
 8005b84:	613c      	str	r4, [r7, #16]
 8005b86:	4638      	mov	r0, r7
 8005b88:	f001 f9c2 	bl	8006f10 <__mcmp>
 8005b8c:	2800      	cmp	r0, #0
 8005b8e:	db25      	blt.n	8005bdc <quorem+0xec>
 8005b90:	4629      	mov	r1, r5
 8005b92:	2000      	movs	r0, #0
 8005b94:	f858 2b04 	ldr.w	r2, [r8], #4
 8005b98:	f8d1 c000 	ldr.w	ip, [r1]
 8005b9c:	fa1f fe82 	uxth.w	lr, r2
 8005ba0:	fa1f f38c 	uxth.w	r3, ip
 8005ba4:	eba3 030e 	sub.w	r3, r3, lr
 8005ba8:	4403      	add	r3, r0
 8005baa:	0c12      	lsrs	r2, r2, #16
 8005bac:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005bb0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bba:	45c1      	cmp	r9, r8
 8005bbc:	f841 3b04 	str.w	r3, [r1], #4
 8005bc0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005bc4:	d2e6      	bcs.n	8005b94 <quorem+0xa4>
 8005bc6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bce:	b922      	cbnz	r2, 8005bda <quorem+0xea>
 8005bd0:	3b04      	subs	r3, #4
 8005bd2:	429d      	cmp	r5, r3
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	d30b      	bcc.n	8005bf0 <quorem+0x100>
 8005bd8:	613c      	str	r4, [r7, #16]
 8005bda:	3601      	adds	r6, #1
 8005bdc:	4630      	mov	r0, r6
 8005bde:	b003      	add	sp, #12
 8005be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005be4:	6812      	ldr	r2, [r2, #0]
 8005be6:	3b04      	subs	r3, #4
 8005be8:	2a00      	cmp	r2, #0
 8005bea:	d1cb      	bne.n	8005b84 <quorem+0x94>
 8005bec:	3c01      	subs	r4, #1
 8005bee:	e7c6      	b.n	8005b7e <quorem+0x8e>
 8005bf0:	6812      	ldr	r2, [r2, #0]
 8005bf2:	3b04      	subs	r3, #4
 8005bf4:	2a00      	cmp	r2, #0
 8005bf6:	d1ef      	bne.n	8005bd8 <quorem+0xe8>
 8005bf8:	3c01      	subs	r4, #1
 8005bfa:	e7ea      	b.n	8005bd2 <quorem+0xe2>
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	e7ee      	b.n	8005bde <quorem+0xee>

08005c00 <_dtoa_r>:
 8005c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c04:	69c7      	ldr	r7, [r0, #28]
 8005c06:	b099      	sub	sp, #100	@ 0x64
 8005c08:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005c0c:	ec55 4b10 	vmov	r4, r5, d0
 8005c10:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005c12:	9109      	str	r1, [sp, #36]	@ 0x24
 8005c14:	4683      	mov	fp, r0
 8005c16:	920e      	str	r2, [sp, #56]	@ 0x38
 8005c18:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005c1a:	b97f      	cbnz	r7, 8005c3c <_dtoa_r+0x3c>
 8005c1c:	2010      	movs	r0, #16
 8005c1e:	f000 fdfd 	bl	800681c <malloc>
 8005c22:	4602      	mov	r2, r0
 8005c24:	f8cb 001c 	str.w	r0, [fp, #28]
 8005c28:	b920      	cbnz	r0, 8005c34 <_dtoa_r+0x34>
 8005c2a:	4ba7      	ldr	r3, [pc, #668]	@ (8005ec8 <_dtoa_r+0x2c8>)
 8005c2c:	21ef      	movs	r1, #239	@ 0xef
 8005c2e:	48a7      	ldr	r0, [pc, #668]	@ (8005ecc <_dtoa_r+0x2cc>)
 8005c30:	f002 fc0e 	bl	8008450 <__assert_func>
 8005c34:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005c38:	6007      	str	r7, [r0, #0]
 8005c3a:	60c7      	str	r7, [r0, #12]
 8005c3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c40:	6819      	ldr	r1, [r3, #0]
 8005c42:	b159      	cbz	r1, 8005c5c <_dtoa_r+0x5c>
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	604a      	str	r2, [r1, #4]
 8005c48:	2301      	movs	r3, #1
 8005c4a:	4093      	lsls	r3, r2
 8005c4c:	608b      	str	r3, [r1, #8]
 8005c4e:	4658      	mov	r0, fp
 8005c50:	f000 feda 	bl	8006a08 <_Bfree>
 8005c54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	601a      	str	r2, [r3, #0]
 8005c5c:	1e2b      	subs	r3, r5, #0
 8005c5e:	bfb9      	ittee	lt
 8005c60:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005c64:	9303      	strlt	r3, [sp, #12]
 8005c66:	2300      	movge	r3, #0
 8005c68:	6033      	strge	r3, [r6, #0]
 8005c6a:	9f03      	ldr	r7, [sp, #12]
 8005c6c:	4b98      	ldr	r3, [pc, #608]	@ (8005ed0 <_dtoa_r+0x2d0>)
 8005c6e:	bfbc      	itt	lt
 8005c70:	2201      	movlt	r2, #1
 8005c72:	6032      	strlt	r2, [r6, #0]
 8005c74:	43bb      	bics	r3, r7
 8005c76:	d112      	bne.n	8005c9e <_dtoa_r+0x9e>
 8005c78:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005c7a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005c7e:	6013      	str	r3, [r2, #0]
 8005c80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005c84:	4323      	orrs	r3, r4
 8005c86:	f000 854d 	beq.w	8006724 <_dtoa_r+0xb24>
 8005c8a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005c8c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005ee4 <_dtoa_r+0x2e4>
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f000 854f 	beq.w	8006734 <_dtoa_r+0xb34>
 8005c96:	f10a 0303 	add.w	r3, sl, #3
 8005c9a:	f000 bd49 	b.w	8006730 <_dtoa_r+0xb30>
 8005c9e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	ec51 0b17 	vmov	r0, r1, d7
 8005ca8:	2300      	movs	r3, #0
 8005caa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005cae:	f7fa ff0b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cb2:	4680      	mov	r8, r0
 8005cb4:	b158      	cbz	r0, 8005cce <_dtoa_r+0xce>
 8005cb6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005cb8:	2301      	movs	r3, #1
 8005cba:	6013      	str	r3, [r2, #0]
 8005cbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005cbe:	b113      	cbz	r3, 8005cc6 <_dtoa_r+0xc6>
 8005cc0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005cc2:	4b84      	ldr	r3, [pc, #528]	@ (8005ed4 <_dtoa_r+0x2d4>)
 8005cc4:	6013      	str	r3, [r2, #0]
 8005cc6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005ee8 <_dtoa_r+0x2e8>
 8005cca:	f000 bd33 	b.w	8006734 <_dtoa_r+0xb34>
 8005cce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005cd2:	aa16      	add	r2, sp, #88	@ 0x58
 8005cd4:	a917      	add	r1, sp, #92	@ 0x5c
 8005cd6:	4658      	mov	r0, fp
 8005cd8:	f001 fa3a 	bl	8007150 <__d2b>
 8005cdc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005ce0:	4681      	mov	r9, r0
 8005ce2:	2e00      	cmp	r6, #0
 8005ce4:	d077      	beq.n	8005dd6 <_dtoa_r+0x1d6>
 8005ce6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ce8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005cec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005cf4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005cf8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005cfc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005d00:	4619      	mov	r1, r3
 8005d02:	2200      	movs	r2, #0
 8005d04:	4b74      	ldr	r3, [pc, #464]	@ (8005ed8 <_dtoa_r+0x2d8>)
 8005d06:	f7fa fabf 	bl	8000288 <__aeabi_dsub>
 8005d0a:	a369      	add	r3, pc, #420	@ (adr r3, 8005eb0 <_dtoa_r+0x2b0>)
 8005d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d10:	f7fa fc72 	bl	80005f8 <__aeabi_dmul>
 8005d14:	a368      	add	r3, pc, #416	@ (adr r3, 8005eb8 <_dtoa_r+0x2b8>)
 8005d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1a:	f7fa fab7 	bl	800028c <__adddf3>
 8005d1e:	4604      	mov	r4, r0
 8005d20:	4630      	mov	r0, r6
 8005d22:	460d      	mov	r5, r1
 8005d24:	f7fa fbfe 	bl	8000524 <__aeabi_i2d>
 8005d28:	a365      	add	r3, pc, #404	@ (adr r3, 8005ec0 <_dtoa_r+0x2c0>)
 8005d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2e:	f7fa fc63 	bl	80005f8 <__aeabi_dmul>
 8005d32:	4602      	mov	r2, r0
 8005d34:	460b      	mov	r3, r1
 8005d36:	4620      	mov	r0, r4
 8005d38:	4629      	mov	r1, r5
 8005d3a:	f7fa faa7 	bl	800028c <__adddf3>
 8005d3e:	4604      	mov	r4, r0
 8005d40:	460d      	mov	r5, r1
 8005d42:	f7fa ff09 	bl	8000b58 <__aeabi_d2iz>
 8005d46:	2200      	movs	r2, #0
 8005d48:	4607      	mov	r7, r0
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	4620      	mov	r0, r4
 8005d4e:	4629      	mov	r1, r5
 8005d50:	f7fa fec4 	bl	8000adc <__aeabi_dcmplt>
 8005d54:	b140      	cbz	r0, 8005d68 <_dtoa_r+0x168>
 8005d56:	4638      	mov	r0, r7
 8005d58:	f7fa fbe4 	bl	8000524 <__aeabi_i2d>
 8005d5c:	4622      	mov	r2, r4
 8005d5e:	462b      	mov	r3, r5
 8005d60:	f7fa feb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d64:	b900      	cbnz	r0, 8005d68 <_dtoa_r+0x168>
 8005d66:	3f01      	subs	r7, #1
 8005d68:	2f16      	cmp	r7, #22
 8005d6a:	d851      	bhi.n	8005e10 <_dtoa_r+0x210>
 8005d6c:	4b5b      	ldr	r3, [pc, #364]	@ (8005edc <_dtoa_r+0x2dc>)
 8005d6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d7a:	f7fa feaf 	bl	8000adc <__aeabi_dcmplt>
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	d048      	beq.n	8005e14 <_dtoa_r+0x214>
 8005d82:	3f01      	subs	r7, #1
 8005d84:	2300      	movs	r3, #0
 8005d86:	9312      	str	r3, [sp, #72]	@ 0x48
 8005d88:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005d8a:	1b9b      	subs	r3, r3, r6
 8005d8c:	1e5a      	subs	r2, r3, #1
 8005d8e:	bf44      	itt	mi
 8005d90:	f1c3 0801 	rsbmi	r8, r3, #1
 8005d94:	2300      	movmi	r3, #0
 8005d96:	9208      	str	r2, [sp, #32]
 8005d98:	bf54      	ite	pl
 8005d9a:	f04f 0800 	movpl.w	r8, #0
 8005d9e:	9308      	strmi	r3, [sp, #32]
 8005da0:	2f00      	cmp	r7, #0
 8005da2:	db39      	blt.n	8005e18 <_dtoa_r+0x218>
 8005da4:	9b08      	ldr	r3, [sp, #32]
 8005da6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005da8:	443b      	add	r3, r7
 8005daa:	9308      	str	r3, [sp, #32]
 8005dac:	2300      	movs	r3, #0
 8005dae:	930a      	str	r3, [sp, #40]	@ 0x28
 8005db0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005db2:	2b09      	cmp	r3, #9
 8005db4:	d864      	bhi.n	8005e80 <_dtoa_r+0x280>
 8005db6:	2b05      	cmp	r3, #5
 8005db8:	bfc4      	itt	gt
 8005dba:	3b04      	subgt	r3, #4
 8005dbc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005dbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dc0:	f1a3 0302 	sub.w	r3, r3, #2
 8005dc4:	bfcc      	ite	gt
 8005dc6:	2400      	movgt	r4, #0
 8005dc8:	2401      	movle	r4, #1
 8005dca:	2b03      	cmp	r3, #3
 8005dcc:	d863      	bhi.n	8005e96 <_dtoa_r+0x296>
 8005dce:	e8df f003 	tbb	[pc, r3]
 8005dd2:	372a      	.short	0x372a
 8005dd4:	5535      	.short	0x5535
 8005dd6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005dda:	441e      	add	r6, r3
 8005ddc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005de0:	2b20      	cmp	r3, #32
 8005de2:	bfc1      	itttt	gt
 8005de4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005de8:	409f      	lslgt	r7, r3
 8005dea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005dee:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005df2:	bfd6      	itet	le
 8005df4:	f1c3 0320 	rsble	r3, r3, #32
 8005df8:	ea47 0003 	orrgt.w	r0, r7, r3
 8005dfc:	fa04 f003 	lslle.w	r0, r4, r3
 8005e00:	f7fa fb80 	bl	8000504 <__aeabi_ui2d>
 8005e04:	2201      	movs	r2, #1
 8005e06:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005e0a:	3e01      	subs	r6, #1
 8005e0c:	9214      	str	r2, [sp, #80]	@ 0x50
 8005e0e:	e777      	b.n	8005d00 <_dtoa_r+0x100>
 8005e10:	2301      	movs	r3, #1
 8005e12:	e7b8      	b.n	8005d86 <_dtoa_r+0x186>
 8005e14:	9012      	str	r0, [sp, #72]	@ 0x48
 8005e16:	e7b7      	b.n	8005d88 <_dtoa_r+0x188>
 8005e18:	427b      	negs	r3, r7
 8005e1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	eba8 0807 	sub.w	r8, r8, r7
 8005e22:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005e24:	e7c4      	b.n	8005db0 <_dtoa_r+0x1b0>
 8005e26:	2300      	movs	r3, #0
 8005e28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	dc35      	bgt.n	8005e9c <_dtoa_r+0x29c>
 8005e30:	2301      	movs	r3, #1
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	9307      	str	r3, [sp, #28]
 8005e36:	461a      	mov	r2, r3
 8005e38:	920e      	str	r2, [sp, #56]	@ 0x38
 8005e3a:	e00b      	b.n	8005e54 <_dtoa_r+0x254>
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e7f3      	b.n	8005e28 <_dtoa_r+0x228>
 8005e40:	2300      	movs	r3, #0
 8005e42:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e46:	18fb      	adds	r3, r7, r3
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	9307      	str	r3, [sp, #28]
 8005e50:	bfb8      	it	lt
 8005e52:	2301      	movlt	r3, #1
 8005e54:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005e58:	2100      	movs	r1, #0
 8005e5a:	2204      	movs	r2, #4
 8005e5c:	f102 0514 	add.w	r5, r2, #20
 8005e60:	429d      	cmp	r5, r3
 8005e62:	d91f      	bls.n	8005ea4 <_dtoa_r+0x2a4>
 8005e64:	6041      	str	r1, [r0, #4]
 8005e66:	4658      	mov	r0, fp
 8005e68:	f000 fd8e 	bl	8006988 <_Balloc>
 8005e6c:	4682      	mov	sl, r0
 8005e6e:	2800      	cmp	r0, #0
 8005e70:	d13c      	bne.n	8005eec <_dtoa_r+0x2ec>
 8005e72:	4b1b      	ldr	r3, [pc, #108]	@ (8005ee0 <_dtoa_r+0x2e0>)
 8005e74:	4602      	mov	r2, r0
 8005e76:	f240 11af 	movw	r1, #431	@ 0x1af
 8005e7a:	e6d8      	b.n	8005c2e <_dtoa_r+0x2e>
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e7e0      	b.n	8005e42 <_dtoa_r+0x242>
 8005e80:	2401      	movs	r4, #1
 8005e82:	2300      	movs	r3, #0
 8005e84:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e86:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005e88:	f04f 33ff 	mov.w	r3, #4294967295
 8005e8c:	9300      	str	r3, [sp, #0]
 8005e8e:	9307      	str	r3, [sp, #28]
 8005e90:	2200      	movs	r2, #0
 8005e92:	2312      	movs	r3, #18
 8005e94:	e7d0      	b.n	8005e38 <_dtoa_r+0x238>
 8005e96:	2301      	movs	r3, #1
 8005e98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e9a:	e7f5      	b.n	8005e88 <_dtoa_r+0x288>
 8005e9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e9e:	9300      	str	r3, [sp, #0]
 8005ea0:	9307      	str	r3, [sp, #28]
 8005ea2:	e7d7      	b.n	8005e54 <_dtoa_r+0x254>
 8005ea4:	3101      	adds	r1, #1
 8005ea6:	0052      	lsls	r2, r2, #1
 8005ea8:	e7d8      	b.n	8005e5c <_dtoa_r+0x25c>
 8005eaa:	bf00      	nop
 8005eac:	f3af 8000 	nop.w
 8005eb0:	636f4361 	.word	0x636f4361
 8005eb4:	3fd287a7 	.word	0x3fd287a7
 8005eb8:	8b60c8b3 	.word	0x8b60c8b3
 8005ebc:	3fc68a28 	.word	0x3fc68a28
 8005ec0:	509f79fb 	.word	0x509f79fb
 8005ec4:	3fd34413 	.word	0x3fd34413
 8005ec8:	0800c99a 	.word	0x0800c99a
 8005ecc:	0800c9b1 	.word	0x0800c9b1
 8005ed0:	7ff00000 	.word	0x7ff00000
 8005ed4:	0800c965 	.word	0x0800c965
 8005ed8:	3ff80000 	.word	0x3ff80000
 8005edc:	0800caa8 	.word	0x0800caa8
 8005ee0:	0800ca09 	.word	0x0800ca09
 8005ee4:	0800c996 	.word	0x0800c996
 8005ee8:	0800c964 	.word	0x0800c964
 8005eec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005ef0:	6018      	str	r0, [r3, #0]
 8005ef2:	9b07      	ldr	r3, [sp, #28]
 8005ef4:	2b0e      	cmp	r3, #14
 8005ef6:	f200 80a4 	bhi.w	8006042 <_dtoa_r+0x442>
 8005efa:	2c00      	cmp	r4, #0
 8005efc:	f000 80a1 	beq.w	8006042 <_dtoa_r+0x442>
 8005f00:	2f00      	cmp	r7, #0
 8005f02:	dd33      	ble.n	8005f6c <_dtoa_r+0x36c>
 8005f04:	4bad      	ldr	r3, [pc, #692]	@ (80061bc <_dtoa_r+0x5bc>)
 8005f06:	f007 020f 	and.w	r2, r7, #15
 8005f0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f0e:	ed93 7b00 	vldr	d7, [r3]
 8005f12:	05f8      	lsls	r0, r7, #23
 8005f14:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005f18:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005f1c:	d516      	bpl.n	8005f4c <_dtoa_r+0x34c>
 8005f1e:	4ba8      	ldr	r3, [pc, #672]	@ (80061c0 <_dtoa_r+0x5c0>)
 8005f20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f28:	f7fa fc90 	bl	800084c <__aeabi_ddiv>
 8005f2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f30:	f004 040f 	and.w	r4, r4, #15
 8005f34:	2603      	movs	r6, #3
 8005f36:	4da2      	ldr	r5, [pc, #648]	@ (80061c0 <_dtoa_r+0x5c0>)
 8005f38:	b954      	cbnz	r4, 8005f50 <_dtoa_r+0x350>
 8005f3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f42:	f7fa fc83 	bl	800084c <__aeabi_ddiv>
 8005f46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f4a:	e028      	b.n	8005f9e <_dtoa_r+0x39e>
 8005f4c:	2602      	movs	r6, #2
 8005f4e:	e7f2      	b.n	8005f36 <_dtoa_r+0x336>
 8005f50:	07e1      	lsls	r1, r4, #31
 8005f52:	d508      	bpl.n	8005f66 <_dtoa_r+0x366>
 8005f54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f5c:	f7fa fb4c 	bl	80005f8 <__aeabi_dmul>
 8005f60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f64:	3601      	adds	r6, #1
 8005f66:	1064      	asrs	r4, r4, #1
 8005f68:	3508      	adds	r5, #8
 8005f6a:	e7e5      	b.n	8005f38 <_dtoa_r+0x338>
 8005f6c:	f000 80d2 	beq.w	8006114 <_dtoa_r+0x514>
 8005f70:	427c      	negs	r4, r7
 8005f72:	4b92      	ldr	r3, [pc, #584]	@ (80061bc <_dtoa_r+0x5bc>)
 8005f74:	4d92      	ldr	r5, [pc, #584]	@ (80061c0 <_dtoa_r+0x5c0>)
 8005f76:	f004 020f 	and.w	r2, r4, #15
 8005f7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f86:	f7fa fb37 	bl	80005f8 <__aeabi_dmul>
 8005f8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f8e:	1124      	asrs	r4, r4, #4
 8005f90:	2300      	movs	r3, #0
 8005f92:	2602      	movs	r6, #2
 8005f94:	2c00      	cmp	r4, #0
 8005f96:	f040 80b2 	bne.w	80060fe <_dtoa_r+0x4fe>
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1d3      	bne.n	8005f46 <_dtoa_r+0x346>
 8005f9e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005fa0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 80b7 	beq.w	8006118 <_dtoa_r+0x518>
 8005faa:	4b86      	ldr	r3, [pc, #536]	@ (80061c4 <_dtoa_r+0x5c4>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	4620      	mov	r0, r4
 8005fb0:	4629      	mov	r1, r5
 8005fb2:	f7fa fd93 	bl	8000adc <__aeabi_dcmplt>
 8005fb6:	2800      	cmp	r0, #0
 8005fb8:	f000 80ae 	beq.w	8006118 <_dtoa_r+0x518>
 8005fbc:	9b07      	ldr	r3, [sp, #28]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f000 80aa 	beq.w	8006118 <_dtoa_r+0x518>
 8005fc4:	9b00      	ldr	r3, [sp, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	dd37      	ble.n	800603a <_dtoa_r+0x43a>
 8005fca:	1e7b      	subs	r3, r7, #1
 8005fcc:	9304      	str	r3, [sp, #16]
 8005fce:	4620      	mov	r0, r4
 8005fd0:	4b7d      	ldr	r3, [pc, #500]	@ (80061c8 <_dtoa_r+0x5c8>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	4629      	mov	r1, r5
 8005fd6:	f7fa fb0f 	bl	80005f8 <__aeabi_dmul>
 8005fda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fde:	9c00      	ldr	r4, [sp, #0]
 8005fe0:	3601      	adds	r6, #1
 8005fe2:	4630      	mov	r0, r6
 8005fe4:	f7fa fa9e 	bl	8000524 <__aeabi_i2d>
 8005fe8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005fec:	f7fa fb04 	bl	80005f8 <__aeabi_dmul>
 8005ff0:	4b76      	ldr	r3, [pc, #472]	@ (80061cc <_dtoa_r+0x5cc>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f7fa f94a 	bl	800028c <__adddf3>
 8005ff8:	4605      	mov	r5, r0
 8005ffa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005ffe:	2c00      	cmp	r4, #0
 8006000:	f040 808d 	bne.w	800611e <_dtoa_r+0x51e>
 8006004:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006008:	4b71      	ldr	r3, [pc, #452]	@ (80061d0 <_dtoa_r+0x5d0>)
 800600a:	2200      	movs	r2, #0
 800600c:	f7fa f93c 	bl	8000288 <__aeabi_dsub>
 8006010:	4602      	mov	r2, r0
 8006012:	460b      	mov	r3, r1
 8006014:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006018:	462a      	mov	r2, r5
 800601a:	4633      	mov	r3, r6
 800601c:	f7fa fd7c 	bl	8000b18 <__aeabi_dcmpgt>
 8006020:	2800      	cmp	r0, #0
 8006022:	f040 828b 	bne.w	800653c <_dtoa_r+0x93c>
 8006026:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800602a:	462a      	mov	r2, r5
 800602c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006030:	f7fa fd54 	bl	8000adc <__aeabi_dcmplt>
 8006034:	2800      	cmp	r0, #0
 8006036:	f040 8128 	bne.w	800628a <_dtoa_r+0x68a>
 800603a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800603e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006042:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006044:	2b00      	cmp	r3, #0
 8006046:	f2c0 815a 	blt.w	80062fe <_dtoa_r+0x6fe>
 800604a:	2f0e      	cmp	r7, #14
 800604c:	f300 8157 	bgt.w	80062fe <_dtoa_r+0x6fe>
 8006050:	4b5a      	ldr	r3, [pc, #360]	@ (80061bc <_dtoa_r+0x5bc>)
 8006052:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006056:	ed93 7b00 	vldr	d7, [r3]
 800605a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800605c:	2b00      	cmp	r3, #0
 800605e:	ed8d 7b00 	vstr	d7, [sp]
 8006062:	da03      	bge.n	800606c <_dtoa_r+0x46c>
 8006064:	9b07      	ldr	r3, [sp, #28]
 8006066:	2b00      	cmp	r3, #0
 8006068:	f340 8101 	ble.w	800626e <_dtoa_r+0x66e>
 800606c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006070:	4656      	mov	r6, sl
 8006072:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006076:	4620      	mov	r0, r4
 8006078:	4629      	mov	r1, r5
 800607a:	f7fa fbe7 	bl	800084c <__aeabi_ddiv>
 800607e:	f7fa fd6b 	bl	8000b58 <__aeabi_d2iz>
 8006082:	4680      	mov	r8, r0
 8006084:	f7fa fa4e 	bl	8000524 <__aeabi_i2d>
 8006088:	e9dd 2300 	ldrd	r2, r3, [sp]
 800608c:	f7fa fab4 	bl	80005f8 <__aeabi_dmul>
 8006090:	4602      	mov	r2, r0
 8006092:	460b      	mov	r3, r1
 8006094:	4620      	mov	r0, r4
 8006096:	4629      	mov	r1, r5
 8006098:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800609c:	f7fa f8f4 	bl	8000288 <__aeabi_dsub>
 80060a0:	f806 4b01 	strb.w	r4, [r6], #1
 80060a4:	9d07      	ldr	r5, [sp, #28]
 80060a6:	eba6 040a 	sub.w	r4, r6, sl
 80060aa:	42a5      	cmp	r5, r4
 80060ac:	4602      	mov	r2, r0
 80060ae:	460b      	mov	r3, r1
 80060b0:	f040 8117 	bne.w	80062e2 <_dtoa_r+0x6e2>
 80060b4:	f7fa f8ea 	bl	800028c <__adddf3>
 80060b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060bc:	4604      	mov	r4, r0
 80060be:	460d      	mov	r5, r1
 80060c0:	f7fa fd2a 	bl	8000b18 <__aeabi_dcmpgt>
 80060c4:	2800      	cmp	r0, #0
 80060c6:	f040 80f9 	bne.w	80062bc <_dtoa_r+0x6bc>
 80060ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060ce:	4620      	mov	r0, r4
 80060d0:	4629      	mov	r1, r5
 80060d2:	f7fa fcf9 	bl	8000ac8 <__aeabi_dcmpeq>
 80060d6:	b118      	cbz	r0, 80060e0 <_dtoa_r+0x4e0>
 80060d8:	f018 0f01 	tst.w	r8, #1
 80060dc:	f040 80ee 	bne.w	80062bc <_dtoa_r+0x6bc>
 80060e0:	4649      	mov	r1, r9
 80060e2:	4658      	mov	r0, fp
 80060e4:	f000 fc90 	bl	8006a08 <_Bfree>
 80060e8:	2300      	movs	r3, #0
 80060ea:	7033      	strb	r3, [r6, #0]
 80060ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80060ee:	3701      	adds	r7, #1
 80060f0:	601f      	str	r7, [r3, #0]
 80060f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f000 831d 	beq.w	8006734 <_dtoa_r+0xb34>
 80060fa:	601e      	str	r6, [r3, #0]
 80060fc:	e31a      	b.n	8006734 <_dtoa_r+0xb34>
 80060fe:	07e2      	lsls	r2, r4, #31
 8006100:	d505      	bpl.n	800610e <_dtoa_r+0x50e>
 8006102:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006106:	f7fa fa77 	bl	80005f8 <__aeabi_dmul>
 800610a:	3601      	adds	r6, #1
 800610c:	2301      	movs	r3, #1
 800610e:	1064      	asrs	r4, r4, #1
 8006110:	3508      	adds	r5, #8
 8006112:	e73f      	b.n	8005f94 <_dtoa_r+0x394>
 8006114:	2602      	movs	r6, #2
 8006116:	e742      	b.n	8005f9e <_dtoa_r+0x39e>
 8006118:	9c07      	ldr	r4, [sp, #28]
 800611a:	9704      	str	r7, [sp, #16]
 800611c:	e761      	b.n	8005fe2 <_dtoa_r+0x3e2>
 800611e:	4b27      	ldr	r3, [pc, #156]	@ (80061bc <_dtoa_r+0x5bc>)
 8006120:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006122:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006126:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800612a:	4454      	add	r4, sl
 800612c:	2900      	cmp	r1, #0
 800612e:	d053      	beq.n	80061d8 <_dtoa_r+0x5d8>
 8006130:	4928      	ldr	r1, [pc, #160]	@ (80061d4 <_dtoa_r+0x5d4>)
 8006132:	2000      	movs	r0, #0
 8006134:	f7fa fb8a 	bl	800084c <__aeabi_ddiv>
 8006138:	4633      	mov	r3, r6
 800613a:	462a      	mov	r2, r5
 800613c:	f7fa f8a4 	bl	8000288 <__aeabi_dsub>
 8006140:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006144:	4656      	mov	r6, sl
 8006146:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800614a:	f7fa fd05 	bl	8000b58 <__aeabi_d2iz>
 800614e:	4605      	mov	r5, r0
 8006150:	f7fa f9e8 	bl	8000524 <__aeabi_i2d>
 8006154:	4602      	mov	r2, r0
 8006156:	460b      	mov	r3, r1
 8006158:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800615c:	f7fa f894 	bl	8000288 <__aeabi_dsub>
 8006160:	3530      	adds	r5, #48	@ 0x30
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800616a:	f806 5b01 	strb.w	r5, [r6], #1
 800616e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006172:	f7fa fcb3 	bl	8000adc <__aeabi_dcmplt>
 8006176:	2800      	cmp	r0, #0
 8006178:	d171      	bne.n	800625e <_dtoa_r+0x65e>
 800617a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800617e:	4911      	ldr	r1, [pc, #68]	@ (80061c4 <_dtoa_r+0x5c4>)
 8006180:	2000      	movs	r0, #0
 8006182:	f7fa f881 	bl	8000288 <__aeabi_dsub>
 8006186:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800618a:	f7fa fca7 	bl	8000adc <__aeabi_dcmplt>
 800618e:	2800      	cmp	r0, #0
 8006190:	f040 8095 	bne.w	80062be <_dtoa_r+0x6be>
 8006194:	42a6      	cmp	r6, r4
 8006196:	f43f af50 	beq.w	800603a <_dtoa_r+0x43a>
 800619a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800619e:	4b0a      	ldr	r3, [pc, #40]	@ (80061c8 <_dtoa_r+0x5c8>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	f7fa fa29 	bl	80005f8 <__aeabi_dmul>
 80061a6:	4b08      	ldr	r3, [pc, #32]	@ (80061c8 <_dtoa_r+0x5c8>)
 80061a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80061ac:	2200      	movs	r2, #0
 80061ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061b2:	f7fa fa21 	bl	80005f8 <__aeabi_dmul>
 80061b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061ba:	e7c4      	b.n	8006146 <_dtoa_r+0x546>
 80061bc:	0800caa8 	.word	0x0800caa8
 80061c0:	0800ca80 	.word	0x0800ca80
 80061c4:	3ff00000 	.word	0x3ff00000
 80061c8:	40240000 	.word	0x40240000
 80061cc:	401c0000 	.word	0x401c0000
 80061d0:	40140000 	.word	0x40140000
 80061d4:	3fe00000 	.word	0x3fe00000
 80061d8:	4631      	mov	r1, r6
 80061da:	4628      	mov	r0, r5
 80061dc:	f7fa fa0c 	bl	80005f8 <__aeabi_dmul>
 80061e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80061e4:	9415      	str	r4, [sp, #84]	@ 0x54
 80061e6:	4656      	mov	r6, sl
 80061e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061ec:	f7fa fcb4 	bl	8000b58 <__aeabi_d2iz>
 80061f0:	4605      	mov	r5, r0
 80061f2:	f7fa f997 	bl	8000524 <__aeabi_i2d>
 80061f6:	4602      	mov	r2, r0
 80061f8:	460b      	mov	r3, r1
 80061fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061fe:	f7fa f843 	bl	8000288 <__aeabi_dsub>
 8006202:	3530      	adds	r5, #48	@ 0x30
 8006204:	f806 5b01 	strb.w	r5, [r6], #1
 8006208:	4602      	mov	r2, r0
 800620a:	460b      	mov	r3, r1
 800620c:	42a6      	cmp	r6, r4
 800620e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006212:	f04f 0200 	mov.w	r2, #0
 8006216:	d124      	bne.n	8006262 <_dtoa_r+0x662>
 8006218:	4bac      	ldr	r3, [pc, #688]	@ (80064cc <_dtoa_r+0x8cc>)
 800621a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800621e:	f7fa f835 	bl	800028c <__adddf3>
 8006222:	4602      	mov	r2, r0
 8006224:	460b      	mov	r3, r1
 8006226:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800622a:	f7fa fc75 	bl	8000b18 <__aeabi_dcmpgt>
 800622e:	2800      	cmp	r0, #0
 8006230:	d145      	bne.n	80062be <_dtoa_r+0x6be>
 8006232:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006236:	49a5      	ldr	r1, [pc, #660]	@ (80064cc <_dtoa_r+0x8cc>)
 8006238:	2000      	movs	r0, #0
 800623a:	f7fa f825 	bl	8000288 <__aeabi_dsub>
 800623e:	4602      	mov	r2, r0
 8006240:	460b      	mov	r3, r1
 8006242:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006246:	f7fa fc49 	bl	8000adc <__aeabi_dcmplt>
 800624a:	2800      	cmp	r0, #0
 800624c:	f43f aef5 	beq.w	800603a <_dtoa_r+0x43a>
 8006250:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006252:	1e73      	subs	r3, r6, #1
 8006254:	9315      	str	r3, [sp, #84]	@ 0x54
 8006256:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800625a:	2b30      	cmp	r3, #48	@ 0x30
 800625c:	d0f8      	beq.n	8006250 <_dtoa_r+0x650>
 800625e:	9f04      	ldr	r7, [sp, #16]
 8006260:	e73e      	b.n	80060e0 <_dtoa_r+0x4e0>
 8006262:	4b9b      	ldr	r3, [pc, #620]	@ (80064d0 <_dtoa_r+0x8d0>)
 8006264:	f7fa f9c8 	bl	80005f8 <__aeabi_dmul>
 8006268:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800626c:	e7bc      	b.n	80061e8 <_dtoa_r+0x5e8>
 800626e:	d10c      	bne.n	800628a <_dtoa_r+0x68a>
 8006270:	4b98      	ldr	r3, [pc, #608]	@ (80064d4 <_dtoa_r+0x8d4>)
 8006272:	2200      	movs	r2, #0
 8006274:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006278:	f7fa f9be 	bl	80005f8 <__aeabi_dmul>
 800627c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006280:	f7fa fc40 	bl	8000b04 <__aeabi_dcmpge>
 8006284:	2800      	cmp	r0, #0
 8006286:	f000 8157 	beq.w	8006538 <_dtoa_r+0x938>
 800628a:	2400      	movs	r4, #0
 800628c:	4625      	mov	r5, r4
 800628e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006290:	43db      	mvns	r3, r3
 8006292:	9304      	str	r3, [sp, #16]
 8006294:	4656      	mov	r6, sl
 8006296:	2700      	movs	r7, #0
 8006298:	4621      	mov	r1, r4
 800629a:	4658      	mov	r0, fp
 800629c:	f000 fbb4 	bl	8006a08 <_Bfree>
 80062a0:	2d00      	cmp	r5, #0
 80062a2:	d0dc      	beq.n	800625e <_dtoa_r+0x65e>
 80062a4:	b12f      	cbz	r7, 80062b2 <_dtoa_r+0x6b2>
 80062a6:	42af      	cmp	r7, r5
 80062a8:	d003      	beq.n	80062b2 <_dtoa_r+0x6b2>
 80062aa:	4639      	mov	r1, r7
 80062ac:	4658      	mov	r0, fp
 80062ae:	f000 fbab 	bl	8006a08 <_Bfree>
 80062b2:	4629      	mov	r1, r5
 80062b4:	4658      	mov	r0, fp
 80062b6:	f000 fba7 	bl	8006a08 <_Bfree>
 80062ba:	e7d0      	b.n	800625e <_dtoa_r+0x65e>
 80062bc:	9704      	str	r7, [sp, #16]
 80062be:	4633      	mov	r3, r6
 80062c0:	461e      	mov	r6, r3
 80062c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062c6:	2a39      	cmp	r2, #57	@ 0x39
 80062c8:	d107      	bne.n	80062da <_dtoa_r+0x6da>
 80062ca:	459a      	cmp	sl, r3
 80062cc:	d1f8      	bne.n	80062c0 <_dtoa_r+0x6c0>
 80062ce:	9a04      	ldr	r2, [sp, #16]
 80062d0:	3201      	adds	r2, #1
 80062d2:	9204      	str	r2, [sp, #16]
 80062d4:	2230      	movs	r2, #48	@ 0x30
 80062d6:	f88a 2000 	strb.w	r2, [sl]
 80062da:	781a      	ldrb	r2, [r3, #0]
 80062dc:	3201      	adds	r2, #1
 80062de:	701a      	strb	r2, [r3, #0]
 80062e0:	e7bd      	b.n	800625e <_dtoa_r+0x65e>
 80062e2:	4b7b      	ldr	r3, [pc, #492]	@ (80064d0 <_dtoa_r+0x8d0>)
 80062e4:	2200      	movs	r2, #0
 80062e6:	f7fa f987 	bl	80005f8 <__aeabi_dmul>
 80062ea:	2200      	movs	r2, #0
 80062ec:	2300      	movs	r3, #0
 80062ee:	4604      	mov	r4, r0
 80062f0:	460d      	mov	r5, r1
 80062f2:	f7fa fbe9 	bl	8000ac8 <__aeabi_dcmpeq>
 80062f6:	2800      	cmp	r0, #0
 80062f8:	f43f aebb 	beq.w	8006072 <_dtoa_r+0x472>
 80062fc:	e6f0      	b.n	80060e0 <_dtoa_r+0x4e0>
 80062fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006300:	2a00      	cmp	r2, #0
 8006302:	f000 80db 	beq.w	80064bc <_dtoa_r+0x8bc>
 8006306:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006308:	2a01      	cmp	r2, #1
 800630a:	f300 80bf 	bgt.w	800648c <_dtoa_r+0x88c>
 800630e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006310:	2a00      	cmp	r2, #0
 8006312:	f000 80b7 	beq.w	8006484 <_dtoa_r+0x884>
 8006316:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800631a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800631c:	4646      	mov	r6, r8
 800631e:	9a08      	ldr	r2, [sp, #32]
 8006320:	2101      	movs	r1, #1
 8006322:	441a      	add	r2, r3
 8006324:	4658      	mov	r0, fp
 8006326:	4498      	add	r8, r3
 8006328:	9208      	str	r2, [sp, #32]
 800632a:	f000 fc6b 	bl	8006c04 <__i2b>
 800632e:	4605      	mov	r5, r0
 8006330:	b15e      	cbz	r6, 800634a <_dtoa_r+0x74a>
 8006332:	9b08      	ldr	r3, [sp, #32]
 8006334:	2b00      	cmp	r3, #0
 8006336:	dd08      	ble.n	800634a <_dtoa_r+0x74a>
 8006338:	42b3      	cmp	r3, r6
 800633a:	9a08      	ldr	r2, [sp, #32]
 800633c:	bfa8      	it	ge
 800633e:	4633      	movge	r3, r6
 8006340:	eba8 0803 	sub.w	r8, r8, r3
 8006344:	1af6      	subs	r6, r6, r3
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	9308      	str	r3, [sp, #32]
 800634a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800634c:	b1f3      	cbz	r3, 800638c <_dtoa_r+0x78c>
 800634e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006350:	2b00      	cmp	r3, #0
 8006352:	f000 80b7 	beq.w	80064c4 <_dtoa_r+0x8c4>
 8006356:	b18c      	cbz	r4, 800637c <_dtoa_r+0x77c>
 8006358:	4629      	mov	r1, r5
 800635a:	4622      	mov	r2, r4
 800635c:	4658      	mov	r0, fp
 800635e:	f000 fd11 	bl	8006d84 <__pow5mult>
 8006362:	464a      	mov	r2, r9
 8006364:	4601      	mov	r1, r0
 8006366:	4605      	mov	r5, r0
 8006368:	4658      	mov	r0, fp
 800636a:	f000 fc61 	bl	8006c30 <__multiply>
 800636e:	4649      	mov	r1, r9
 8006370:	9004      	str	r0, [sp, #16]
 8006372:	4658      	mov	r0, fp
 8006374:	f000 fb48 	bl	8006a08 <_Bfree>
 8006378:	9b04      	ldr	r3, [sp, #16]
 800637a:	4699      	mov	r9, r3
 800637c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800637e:	1b1a      	subs	r2, r3, r4
 8006380:	d004      	beq.n	800638c <_dtoa_r+0x78c>
 8006382:	4649      	mov	r1, r9
 8006384:	4658      	mov	r0, fp
 8006386:	f000 fcfd 	bl	8006d84 <__pow5mult>
 800638a:	4681      	mov	r9, r0
 800638c:	2101      	movs	r1, #1
 800638e:	4658      	mov	r0, fp
 8006390:	f000 fc38 	bl	8006c04 <__i2b>
 8006394:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006396:	4604      	mov	r4, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 81cf 	beq.w	800673c <_dtoa_r+0xb3c>
 800639e:	461a      	mov	r2, r3
 80063a0:	4601      	mov	r1, r0
 80063a2:	4658      	mov	r0, fp
 80063a4:	f000 fcee 	bl	8006d84 <__pow5mult>
 80063a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	4604      	mov	r4, r0
 80063ae:	f300 8095 	bgt.w	80064dc <_dtoa_r+0x8dc>
 80063b2:	9b02      	ldr	r3, [sp, #8]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f040 8087 	bne.w	80064c8 <_dtoa_r+0x8c8>
 80063ba:	9b03      	ldr	r3, [sp, #12]
 80063bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f040 8089 	bne.w	80064d8 <_dtoa_r+0x8d8>
 80063c6:	9b03      	ldr	r3, [sp, #12]
 80063c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80063cc:	0d1b      	lsrs	r3, r3, #20
 80063ce:	051b      	lsls	r3, r3, #20
 80063d0:	b12b      	cbz	r3, 80063de <_dtoa_r+0x7de>
 80063d2:	9b08      	ldr	r3, [sp, #32]
 80063d4:	3301      	adds	r3, #1
 80063d6:	9308      	str	r3, [sp, #32]
 80063d8:	f108 0801 	add.w	r8, r8, #1
 80063dc:	2301      	movs	r3, #1
 80063de:	930a      	str	r3, [sp, #40]	@ 0x28
 80063e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f000 81b0 	beq.w	8006748 <_dtoa_r+0xb48>
 80063e8:	6923      	ldr	r3, [r4, #16]
 80063ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80063ee:	6918      	ldr	r0, [r3, #16]
 80063f0:	f000 fbbc 	bl	8006b6c <__hi0bits>
 80063f4:	f1c0 0020 	rsb	r0, r0, #32
 80063f8:	9b08      	ldr	r3, [sp, #32]
 80063fa:	4418      	add	r0, r3
 80063fc:	f010 001f 	ands.w	r0, r0, #31
 8006400:	d077      	beq.n	80064f2 <_dtoa_r+0x8f2>
 8006402:	f1c0 0320 	rsb	r3, r0, #32
 8006406:	2b04      	cmp	r3, #4
 8006408:	dd6b      	ble.n	80064e2 <_dtoa_r+0x8e2>
 800640a:	9b08      	ldr	r3, [sp, #32]
 800640c:	f1c0 001c 	rsb	r0, r0, #28
 8006410:	4403      	add	r3, r0
 8006412:	4480      	add	r8, r0
 8006414:	4406      	add	r6, r0
 8006416:	9308      	str	r3, [sp, #32]
 8006418:	f1b8 0f00 	cmp.w	r8, #0
 800641c:	dd05      	ble.n	800642a <_dtoa_r+0x82a>
 800641e:	4649      	mov	r1, r9
 8006420:	4642      	mov	r2, r8
 8006422:	4658      	mov	r0, fp
 8006424:	f000 fd08 	bl	8006e38 <__lshift>
 8006428:	4681      	mov	r9, r0
 800642a:	9b08      	ldr	r3, [sp, #32]
 800642c:	2b00      	cmp	r3, #0
 800642e:	dd05      	ble.n	800643c <_dtoa_r+0x83c>
 8006430:	4621      	mov	r1, r4
 8006432:	461a      	mov	r2, r3
 8006434:	4658      	mov	r0, fp
 8006436:	f000 fcff 	bl	8006e38 <__lshift>
 800643a:	4604      	mov	r4, r0
 800643c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800643e:	2b00      	cmp	r3, #0
 8006440:	d059      	beq.n	80064f6 <_dtoa_r+0x8f6>
 8006442:	4621      	mov	r1, r4
 8006444:	4648      	mov	r0, r9
 8006446:	f000 fd63 	bl	8006f10 <__mcmp>
 800644a:	2800      	cmp	r0, #0
 800644c:	da53      	bge.n	80064f6 <_dtoa_r+0x8f6>
 800644e:	1e7b      	subs	r3, r7, #1
 8006450:	9304      	str	r3, [sp, #16]
 8006452:	4649      	mov	r1, r9
 8006454:	2300      	movs	r3, #0
 8006456:	220a      	movs	r2, #10
 8006458:	4658      	mov	r0, fp
 800645a:	f000 faf7 	bl	8006a4c <__multadd>
 800645e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006460:	4681      	mov	r9, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	f000 8172 	beq.w	800674c <_dtoa_r+0xb4c>
 8006468:	2300      	movs	r3, #0
 800646a:	4629      	mov	r1, r5
 800646c:	220a      	movs	r2, #10
 800646e:	4658      	mov	r0, fp
 8006470:	f000 faec 	bl	8006a4c <__multadd>
 8006474:	9b00      	ldr	r3, [sp, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	4605      	mov	r5, r0
 800647a:	dc67      	bgt.n	800654c <_dtoa_r+0x94c>
 800647c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800647e:	2b02      	cmp	r3, #2
 8006480:	dc41      	bgt.n	8006506 <_dtoa_r+0x906>
 8006482:	e063      	b.n	800654c <_dtoa_r+0x94c>
 8006484:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006486:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800648a:	e746      	b.n	800631a <_dtoa_r+0x71a>
 800648c:	9b07      	ldr	r3, [sp, #28]
 800648e:	1e5c      	subs	r4, r3, #1
 8006490:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006492:	42a3      	cmp	r3, r4
 8006494:	bfbf      	itttt	lt
 8006496:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006498:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800649a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800649c:	1ae3      	sublt	r3, r4, r3
 800649e:	bfb4      	ite	lt
 80064a0:	18d2      	addlt	r2, r2, r3
 80064a2:	1b1c      	subge	r4, r3, r4
 80064a4:	9b07      	ldr	r3, [sp, #28]
 80064a6:	bfbc      	itt	lt
 80064a8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80064aa:	2400      	movlt	r4, #0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	bfb5      	itete	lt
 80064b0:	eba8 0603 	sublt.w	r6, r8, r3
 80064b4:	9b07      	ldrge	r3, [sp, #28]
 80064b6:	2300      	movlt	r3, #0
 80064b8:	4646      	movge	r6, r8
 80064ba:	e730      	b.n	800631e <_dtoa_r+0x71e>
 80064bc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80064be:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80064c0:	4646      	mov	r6, r8
 80064c2:	e735      	b.n	8006330 <_dtoa_r+0x730>
 80064c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80064c6:	e75c      	b.n	8006382 <_dtoa_r+0x782>
 80064c8:	2300      	movs	r3, #0
 80064ca:	e788      	b.n	80063de <_dtoa_r+0x7de>
 80064cc:	3fe00000 	.word	0x3fe00000
 80064d0:	40240000 	.word	0x40240000
 80064d4:	40140000 	.word	0x40140000
 80064d8:	9b02      	ldr	r3, [sp, #8]
 80064da:	e780      	b.n	80063de <_dtoa_r+0x7de>
 80064dc:	2300      	movs	r3, #0
 80064de:	930a      	str	r3, [sp, #40]	@ 0x28
 80064e0:	e782      	b.n	80063e8 <_dtoa_r+0x7e8>
 80064e2:	d099      	beq.n	8006418 <_dtoa_r+0x818>
 80064e4:	9a08      	ldr	r2, [sp, #32]
 80064e6:	331c      	adds	r3, #28
 80064e8:	441a      	add	r2, r3
 80064ea:	4498      	add	r8, r3
 80064ec:	441e      	add	r6, r3
 80064ee:	9208      	str	r2, [sp, #32]
 80064f0:	e792      	b.n	8006418 <_dtoa_r+0x818>
 80064f2:	4603      	mov	r3, r0
 80064f4:	e7f6      	b.n	80064e4 <_dtoa_r+0x8e4>
 80064f6:	9b07      	ldr	r3, [sp, #28]
 80064f8:	9704      	str	r7, [sp, #16]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	dc20      	bgt.n	8006540 <_dtoa_r+0x940>
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006502:	2b02      	cmp	r3, #2
 8006504:	dd1e      	ble.n	8006544 <_dtoa_r+0x944>
 8006506:	9b00      	ldr	r3, [sp, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	f47f aec0 	bne.w	800628e <_dtoa_r+0x68e>
 800650e:	4621      	mov	r1, r4
 8006510:	2205      	movs	r2, #5
 8006512:	4658      	mov	r0, fp
 8006514:	f000 fa9a 	bl	8006a4c <__multadd>
 8006518:	4601      	mov	r1, r0
 800651a:	4604      	mov	r4, r0
 800651c:	4648      	mov	r0, r9
 800651e:	f000 fcf7 	bl	8006f10 <__mcmp>
 8006522:	2800      	cmp	r0, #0
 8006524:	f77f aeb3 	ble.w	800628e <_dtoa_r+0x68e>
 8006528:	4656      	mov	r6, sl
 800652a:	2331      	movs	r3, #49	@ 0x31
 800652c:	f806 3b01 	strb.w	r3, [r6], #1
 8006530:	9b04      	ldr	r3, [sp, #16]
 8006532:	3301      	adds	r3, #1
 8006534:	9304      	str	r3, [sp, #16]
 8006536:	e6ae      	b.n	8006296 <_dtoa_r+0x696>
 8006538:	9c07      	ldr	r4, [sp, #28]
 800653a:	9704      	str	r7, [sp, #16]
 800653c:	4625      	mov	r5, r4
 800653e:	e7f3      	b.n	8006528 <_dtoa_r+0x928>
 8006540:	9b07      	ldr	r3, [sp, #28]
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006546:	2b00      	cmp	r3, #0
 8006548:	f000 8104 	beq.w	8006754 <_dtoa_r+0xb54>
 800654c:	2e00      	cmp	r6, #0
 800654e:	dd05      	ble.n	800655c <_dtoa_r+0x95c>
 8006550:	4629      	mov	r1, r5
 8006552:	4632      	mov	r2, r6
 8006554:	4658      	mov	r0, fp
 8006556:	f000 fc6f 	bl	8006e38 <__lshift>
 800655a:	4605      	mov	r5, r0
 800655c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800655e:	2b00      	cmp	r3, #0
 8006560:	d05a      	beq.n	8006618 <_dtoa_r+0xa18>
 8006562:	6869      	ldr	r1, [r5, #4]
 8006564:	4658      	mov	r0, fp
 8006566:	f000 fa0f 	bl	8006988 <_Balloc>
 800656a:	4606      	mov	r6, r0
 800656c:	b928      	cbnz	r0, 800657a <_dtoa_r+0x97a>
 800656e:	4b84      	ldr	r3, [pc, #528]	@ (8006780 <_dtoa_r+0xb80>)
 8006570:	4602      	mov	r2, r0
 8006572:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006576:	f7ff bb5a 	b.w	8005c2e <_dtoa_r+0x2e>
 800657a:	692a      	ldr	r2, [r5, #16]
 800657c:	3202      	adds	r2, #2
 800657e:	0092      	lsls	r2, r2, #2
 8006580:	f105 010c 	add.w	r1, r5, #12
 8006584:	300c      	adds	r0, #12
 8006586:	f7ff fa9e 	bl	8005ac6 <memcpy>
 800658a:	2201      	movs	r2, #1
 800658c:	4631      	mov	r1, r6
 800658e:	4658      	mov	r0, fp
 8006590:	f000 fc52 	bl	8006e38 <__lshift>
 8006594:	f10a 0301 	add.w	r3, sl, #1
 8006598:	9307      	str	r3, [sp, #28]
 800659a:	9b00      	ldr	r3, [sp, #0]
 800659c:	4453      	add	r3, sl
 800659e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065a0:	9b02      	ldr	r3, [sp, #8]
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	462f      	mov	r7, r5
 80065a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80065aa:	4605      	mov	r5, r0
 80065ac:	9b07      	ldr	r3, [sp, #28]
 80065ae:	4621      	mov	r1, r4
 80065b0:	3b01      	subs	r3, #1
 80065b2:	4648      	mov	r0, r9
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	f7ff fa9b 	bl	8005af0 <quorem>
 80065ba:	4639      	mov	r1, r7
 80065bc:	9002      	str	r0, [sp, #8]
 80065be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80065c2:	4648      	mov	r0, r9
 80065c4:	f000 fca4 	bl	8006f10 <__mcmp>
 80065c8:	462a      	mov	r2, r5
 80065ca:	9008      	str	r0, [sp, #32]
 80065cc:	4621      	mov	r1, r4
 80065ce:	4658      	mov	r0, fp
 80065d0:	f000 fcba 	bl	8006f48 <__mdiff>
 80065d4:	68c2      	ldr	r2, [r0, #12]
 80065d6:	4606      	mov	r6, r0
 80065d8:	bb02      	cbnz	r2, 800661c <_dtoa_r+0xa1c>
 80065da:	4601      	mov	r1, r0
 80065dc:	4648      	mov	r0, r9
 80065de:	f000 fc97 	bl	8006f10 <__mcmp>
 80065e2:	4602      	mov	r2, r0
 80065e4:	4631      	mov	r1, r6
 80065e6:	4658      	mov	r0, fp
 80065e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80065ea:	f000 fa0d 	bl	8006a08 <_Bfree>
 80065ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80065f2:	9e07      	ldr	r6, [sp, #28]
 80065f4:	ea43 0102 	orr.w	r1, r3, r2
 80065f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065fa:	4319      	orrs	r1, r3
 80065fc:	d110      	bne.n	8006620 <_dtoa_r+0xa20>
 80065fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006602:	d029      	beq.n	8006658 <_dtoa_r+0xa58>
 8006604:	9b08      	ldr	r3, [sp, #32]
 8006606:	2b00      	cmp	r3, #0
 8006608:	dd02      	ble.n	8006610 <_dtoa_r+0xa10>
 800660a:	9b02      	ldr	r3, [sp, #8]
 800660c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006610:	9b00      	ldr	r3, [sp, #0]
 8006612:	f883 8000 	strb.w	r8, [r3]
 8006616:	e63f      	b.n	8006298 <_dtoa_r+0x698>
 8006618:	4628      	mov	r0, r5
 800661a:	e7bb      	b.n	8006594 <_dtoa_r+0x994>
 800661c:	2201      	movs	r2, #1
 800661e:	e7e1      	b.n	80065e4 <_dtoa_r+0x9e4>
 8006620:	9b08      	ldr	r3, [sp, #32]
 8006622:	2b00      	cmp	r3, #0
 8006624:	db04      	blt.n	8006630 <_dtoa_r+0xa30>
 8006626:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006628:	430b      	orrs	r3, r1
 800662a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800662c:	430b      	orrs	r3, r1
 800662e:	d120      	bne.n	8006672 <_dtoa_r+0xa72>
 8006630:	2a00      	cmp	r2, #0
 8006632:	dded      	ble.n	8006610 <_dtoa_r+0xa10>
 8006634:	4649      	mov	r1, r9
 8006636:	2201      	movs	r2, #1
 8006638:	4658      	mov	r0, fp
 800663a:	f000 fbfd 	bl	8006e38 <__lshift>
 800663e:	4621      	mov	r1, r4
 8006640:	4681      	mov	r9, r0
 8006642:	f000 fc65 	bl	8006f10 <__mcmp>
 8006646:	2800      	cmp	r0, #0
 8006648:	dc03      	bgt.n	8006652 <_dtoa_r+0xa52>
 800664a:	d1e1      	bne.n	8006610 <_dtoa_r+0xa10>
 800664c:	f018 0f01 	tst.w	r8, #1
 8006650:	d0de      	beq.n	8006610 <_dtoa_r+0xa10>
 8006652:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006656:	d1d8      	bne.n	800660a <_dtoa_r+0xa0a>
 8006658:	9a00      	ldr	r2, [sp, #0]
 800665a:	2339      	movs	r3, #57	@ 0x39
 800665c:	7013      	strb	r3, [r2, #0]
 800665e:	4633      	mov	r3, r6
 8006660:	461e      	mov	r6, r3
 8006662:	3b01      	subs	r3, #1
 8006664:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006668:	2a39      	cmp	r2, #57	@ 0x39
 800666a:	d052      	beq.n	8006712 <_dtoa_r+0xb12>
 800666c:	3201      	adds	r2, #1
 800666e:	701a      	strb	r2, [r3, #0]
 8006670:	e612      	b.n	8006298 <_dtoa_r+0x698>
 8006672:	2a00      	cmp	r2, #0
 8006674:	dd07      	ble.n	8006686 <_dtoa_r+0xa86>
 8006676:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800667a:	d0ed      	beq.n	8006658 <_dtoa_r+0xa58>
 800667c:	9a00      	ldr	r2, [sp, #0]
 800667e:	f108 0301 	add.w	r3, r8, #1
 8006682:	7013      	strb	r3, [r2, #0]
 8006684:	e608      	b.n	8006298 <_dtoa_r+0x698>
 8006686:	9b07      	ldr	r3, [sp, #28]
 8006688:	9a07      	ldr	r2, [sp, #28]
 800668a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800668e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006690:	4293      	cmp	r3, r2
 8006692:	d028      	beq.n	80066e6 <_dtoa_r+0xae6>
 8006694:	4649      	mov	r1, r9
 8006696:	2300      	movs	r3, #0
 8006698:	220a      	movs	r2, #10
 800669a:	4658      	mov	r0, fp
 800669c:	f000 f9d6 	bl	8006a4c <__multadd>
 80066a0:	42af      	cmp	r7, r5
 80066a2:	4681      	mov	r9, r0
 80066a4:	f04f 0300 	mov.w	r3, #0
 80066a8:	f04f 020a 	mov.w	r2, #10
 80066ac:	4639      	mov	r1, r7
 80066ae:	4658      	mov	r0, fp
 80066b0:	d107      	bne.n	80066c2 <_dtoa_r+0xac2>
 80066b2:	f000 f9cb 	bl	8006a4c <__multadd>
 80066b6:	4607      	mov	r7, r0
 80066b8:	4605      	mov	r5, r0
 80066ba:	9b07      	ldr	r3, [sp, #28]
 80066bc:	3301      	adds	r3, #1
 80066be:	9307      	str	r3, [sp, #28]
 80066c0:	e774      	b.n	80065ac <_dtoa_r+0x9ac>
 80066c2:	f000 f9c3 	bl	8006a4c <__multadd>
 80066c6:	4629      	mov	r1, r5
 80066c8:	4607      	mov	r7, r0
 80066ca:	2300      	movs	r3, #0
 80066cc:	220a      	movs	r2, #10
 80066ce:	4658      	mov	r0, fp
 80066d0:	f000 f9bc 	bl	8006a4c <__multadd>
 80066d4:	4605      	mov	r5, r0
 80066d6:	e7f0      	b.n	80066ba <_dtoa_r+0xaba>
 80066d8:	9b00      	ldr	r3, [sp, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	bfcc      	ite	gt
 80066de:	461e      	movgt	r6, r3
 80066e0:	2601      	movle	r6, #1
 80066e2:	4456      	add	r6, sl
 80066e4:	2700      	movs	r7, #0
 80066e6:	4649      	mov	r1, r9
 80066e8:	2201      	movs	r2, #1
 80066ea:	4658      	mov	r0, fp
 80066ec:	f000 fba4 	bl	8006e38 <__lshift>
 80066f0:	4621      	mov	r1, r4
 80066f2:	4681      	mov	r9, r0
 80066f4:	f000 fc0c 	bl	8006f10 <__mcmp>
 80066f8:	2800      	cmp	r0, #0
 80066fa:	dcb0      	bgt.n	800665e <_dtoa_r+0xa5e>
 80066fc:	d102      	bne.n	8006704 <_dtoa_r+0xb04>
 80066fe:	f018 0f01 	tst.w	r8, #1
 8006702:	d1ac      	bne.n	800665e <_dtoa_r+0xa5e>
 8006704:	4633      	mov	r3, r6
 8006706:	461e      	mov	r6, r3
 8006708:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800670c:	2a30      	cmp	r2, #48	@ 0x30
 800670e:	d0fa      	beq.n	8006706 <_dtoa_r+0xb06>
 8006710:	e5c2      	b.n	8006298 <_dtoa_r+0x698>
 8006712:	459a      	cmp	sl, r3
 8006714:	d1a4      	bne.n	8006660 <_dtoa_r+0xa60>
 8006716:	9b04      	ldr	r3, [sp, #16]
 8006718:	3301      	adds	r3, #1
 800671a:	9304      	str	r3, [sp, #16]
 800671c:	2331      	movs	r3, #49	@ 0x31
 800671e:	f88a 3000 	strb.w	r3, [sl]
 8006722:	e5b9      	b.n	8006298 <_dtoa_r+0x698>
 8006724:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006726:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006784 <_dtoa_r+0xb84>
 800672a:	b11b      	cbz	r3, 8006734 <_dtoa_r+0xb34>
 800672c:	f10a 0308 	add.w	r3, sl, #8
 8006730:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006732:	6013      	str	r3, [r2, #0]
 8006734:	4650      	mov	r0, sl
 8006736:	b019      	add	sp, #100	@ 0x64
 8006738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800673c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800673e:	2b01      	cmp	r3, #1
 8006740:	f77f ae37 	ble.w	80063b2 <_dtoa_r+0x7b2>
 8006744:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006746:	930a      	str	r3, [sp, #40]	@ 0x28
 8006748:	2001      	movs	r0, #1
 800674a:	e655      	b.n	80063f8 <_dtoa_r+0x7f8>
 800674c:	9b00      	ldr	r3, [sp, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	f77f aed6 	ble.w	8006500 <_dtoa_r+0x900>
 8006754:	4656      	mov	r6, sl
 8006756:	4621      	mov	r1, r4
 8006758:	4648      	mov	r0, r9
 800675a:	f7ff f9c9 	bl	8005af0 <quorem>
 800675e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006762:	f806 8b01 	strb.w	r8, [r6], #1
 8006766:	9b00      	ldr	r3, [sp, #0]
 8006768:	eba6 020a 	sub.w	r2, r6, sl
 800676c:	4293      	cmp	r3, r2
 800676e:	ddb3      	ble.n	80066d8 <_dtoa_r+0xad8>
 8006770:	4649      	mov	r1, r9
 8006772:	2300      	movs	r3, #0
 8006774:	220a      	movs	r2, #10
 8006776:	4658      	mov	r0, fp
 8006778:	f000 f968 	bl	8006a4c <__multadd>
 800677c:	4681      	mov	r9, r0
 800677e:	e7ea      	b.n	8006756 <_dtoa_r+0xb56>
 8006780:	0800ca09 	.word	0x0800ca09
 8006784:	0800c98d 	.word	0x0800c98d

08006788 <_free_r>:
 8006788:	b538      	push	{r3, r4, r5, lr}
 800678a:	4605      	mov	r5, r0
 800678c:	2900      	cmp	r1, #0
 800678e:	d041      	beq.n	8006814 <_free_r+0x8c>
 8006790:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006794:	1f0c      	subs	r4, r1, #4
 8006796:	2b00      	cmp	r3, #0
 8006798:	bfb8      	it	lt
 800679a:	18e4      	addlt	r4, r4, r3
 800679c:	f000 f8e8 	bl	8006970 <__malloc_lock>
 80067a0:	4a1d      	ldr	r2, [pc, #116]	@ (8006818 <_free_r+0x90>)
 80067a2:	6813      	ldr	r3, [r2, #0]
 80067a4:	b933      	cbnz	r3, 80067b4 <_free_r+0x2c>
 80067a6:	6063      	str	r3, [r4, #4]
 80067a8:	6014      	str	r4, [r2, #0]
 80067aa:	4628      	mov	r0, r5
 80067ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067b0:	f000 b8e4 	b.w	800697c <__malloc_unlock>
 80067b4:	42a3      	cmp	r3, r4
 80067b6:	d908      	bls.n	80067ca <_free_r+0x42>
 80067b8:	6820      	ldr	r0, [r4, #0]
 80067ba:	1821      	adds	r1, r4, r0
 80067bc:	428b      	cmp	r3, r1
 80067be:	bf01      	itttt	eq
 80067c0:	6819      	ldreq	r1, [r3, #0]
 80067c2:	685b      	ldreq	r3, [r3, #4]
 80067c4:	1809      	addeq	r1, r1, r0
 80067c6:	6021      	streq	r1, [r4, #0]
 80067c8:	e7ed      	b.n	80067a6 <_free_r+0x1e>
 80067ca:	461a      	mov	r2, r3
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	b10b      	cbz	r3, 80067d4 <_free_r+0x4c>
 80067d0:	42a3      	cmp	r3, r4
 80067d2:	d9fa      	bls.n	80067ca <_free_r+0x42>
 80067d4:	6811      	ldr	r1, [r2, #0]
 80067d6:	1850      	adds	r0, r2, r1
 80067d8:	42a0      	cmp	r0, r4
 80067da:	d10b      	bne.n	80067f4 <_free_r+0x6c>
 80067dc:	6820      	ldr	r0, [r4, #0]
 80067de:	4401      	add	r1, r0
 80067e0:	1850      	adds	r0, r2, r1
 80067e2:	4283      	cmp	r3, r0
 80067e4:	6011      	str	r1, [r2, #0]
 80067e6:	d1e0      	bne.n	80067aa <_free_r+0x22>
 80067e8:	6818      	ldr	r0, [r3, #0]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	6053      	str	r3, [r2, #4]
 80067ee:	4408      	add	r0, r1
 80067f0:	6010      	str	r0, [r2, #0]
 80067f2:	e7da      	b.n	80067aa <_free_r+0x22>
 80067f4:	d902      	bls.n	80067fc <_free_r+0x74>
 80067f6:	230c      	movs	r3, #12
 80067f8:	602b      	str	r3, [r5, #0]
 80067fa:	e7d6      	b.n	80067aa <_free_r+0x22>
 80067fc:	6820      	ldr	r0, [r4, #0]
 80067fe:	1821      	adds	r1, r4, r0
 8006800:	428b      	cmp	r3, r1
 8006802:	bf04      	itt	eq
 8006804:	6819      	ldreq	r1, [r3, #0]
 8006806:	685b      	ldreq	r3, [r3, #4]
 8006808:	6063      	str	r3, [r4, #4]
 800680a:	bf04      	itt	eq
 800680c:	1809      	addeq	r1, r1, r0
 800680e:	6021      	streq	r1, [r4, #0]
 8006810:	6054      	str	r4, [r2, #4]
 8006812:	e7ca      	b.n	80067aa <_free_r+0x22>
 8006814:	bd38      	pop	{r3, r4, r5, pc}
 8006816:	bf00      	nop
 8006818:	2000087c 	.word	0x2000087c

0800681c <malloc>:
 800681c:	4b02      	ldr	r3, [pc, #8]	@ (8006828 <malloc+0xc>)
 800681e:	4601      	mov	r1, r0
 8006820:	6818      	ldr	r0, [r3, #0]
 8006822:	f000 b825 	b.w	8006870 <_malloc_r>
 8006826:	bf00      	nop
 8006828:	20000078 	.word	0x20000078

0800682c <sbrk_aligned>:
 800682c:	b570      	push	{r4, r5, r6, lr}
 800682e:	4e0f      	ldr	r6, [pc, #60]	@ (800686c <sbrk_aligned+0x40>)
 8006830:	460c      	mov	r4, r1
 8006832:	6831      	ldr	r1, [r6, #0]
 8006834:	4605      	mov	r5, r0
 8006836:	b911      	cbnz	r1, 800683e <sbrk_aligned+0x12>
 8006838:	f001 fdf2 	bl	8008420 <_sbrk_r>
 800683c:	6030      	str	r0, [r6, #0]
 800683e:	4621      	mov	r1, r4
 8006840:	4628      	mov	r0, r5
 8006842:	f001 fded 	bl	8008420 <_sbrk_r>
 8006846:	1c43      	adds	r3, r0, #1
 8006848:	d103      	bne.n	8006852 <sbrk_aligned+0x26>
 800684a:	f04f 34ff 	mov.w	r4, #4294967295
 800684e:	4620      	mov	r0, r4
 8006850:	bd70      	pop	{r4, r5, r6, pc}
 8006852:	1cc4      	adds	r4, r0, #3
 8006854:	f024 0403 	bic.w	r4, r4, #3
 8006858:	42a0      	cmp	r0, r4
 800685a:	d0f8      	beq.n	800684e <sbrk_aligned+0x22>
 800685c:	1a21      	subs	r1, r4, r0
 800685e:	4628      	mov	r0, r5
 8006860:	f001 fdde 	bl	8008420 <_sbrk_r>
 8006864:	3001      	adds	r0, #1
 8006866:	d1f2      	bne.n	800684e <sbrk_aligned+0x22>
 8006868:	e7ef      	b.n	800684a <sbrk_aligned+0x1e>
 800686a:	bf00      	nop
 800686c:	20000878 	.word	0x20000878

08006870 <_malloc_r>:
 8006870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006874:	1ccd      	adds	r5, r1, #3
 8006876:	f025 0503 	bic.w	r5, r5, #3
 800687a:	3508      	adds	r5, #8
 800687c:	2d0c      	cmp	r5, #12
 800687e:	bf38      	it	cc
 8006880:	250c      	movcc	r5, #12
 8006882:	2d00      	cmp	r5, #0
 8006884:	4606      	mov	r6, r0
 8006886:	db01      	blt.n	800688c <_malloc_r+0x1c>
 8006888:	42a9      	cmp	r1, r5
 800688a:	d904      	bls.n	8006896 <_malloc_r+0x26>
 800688c:	230c      	movs	r3, #12
 800688e:	6033      	str	r3, [r6, #0]
 8006890:	2000      	movs	r0, #0
 8006892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006896:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800696c <_malloc_r+0xfc>
 800689a:	f000 f869 	bl	8006970 <__malloc_lock>
 800689e:	f8d8 3000 	ldr.w	r3, [r8]
 80068a2:	461c      	mov	r4, r3
 80068a4:	bb44      	cbnz	r4, 80068f8 <_malloc_r+0x88>
 80068a6:	4629      	mov	r1, r5
 80068a8:	4630      	mov	r0, r6
 80068aa:	f7ff ffbf 	bl	800682c <sbrk_aligned>
 80068ae:	1c43      	adds	r3, r0, #1
 80068b0:	4604      	mov	r4, r0
 80068b2:	d158      	bne.n	8006966 <_malloc_r+0xf6>
 80068b4:	f8d8 4000 	ldr.w	r4, [r8]
 80068b8:	4627      	mov	r7, r4
 80068ba:	2f00      	cmp	r7, #0
 80068bc:	d143      	bne.n	8006946 <_malloc_r+0xd6>
 80068be:	2c00      	cmp	r4, #0
 80068c0:	d04b      	beq.n	800695a <_malloc_r+0xea>
 80068c2:	6823      	ldr	r3, [r4, #0]
 80068c4:	4639      	mov	r1, r7
 80068c6:	4630      	mov	r0, r6
 80068c8:	eb04 0903 	add.w	r9, r4, r3
 80068cc:	f001 fda8 	bl	8008420 <_sbrk_r>
 80068d0:	4581      	cmp	r9, r0
 80068d2:	d142      	bne.n	800695a <_malloc_r+0xea>
 80068d4:	6821      	ldr	r1, [r4, #0]
 80068d6:	1a6d      	subs	r5, r5, r1
 80068d8:	4629      	mov	r1, r5
 80068da:	4630      	mov	r0, r6
 80068dc:	f7ff ffa6 	bl	800682c <sbrk_aligned>
 80068e0:	3001      	adds	r0, #1
 80068e2:	d03a      	beq.n	800695a <_malloc_r+0xea>
 80068e4:	6823      	ldr	r3, [r4, #0]
 80068e6:	442b      	add	r3, r5
 80068e8:	6023      	str	r3, [r4, #0]
 80068ea:	f8d8 3000 	ldr.w	r3, [r8]
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	bb62      	cbnz	r2, 800694c <_malloc_r+0xdc>
 80068f2:	f8c8 7000 	str.w	r7, [r8]
 80068f6:	e00f      	b.n	8006918 <_malloc_r+0xa8>
 80068f8:	6822      	ldr	r2, [r4, #0]
 80068fa:	1b52      	subs	r2, r2, r5
 80068fc:	d420      	bmi.n	8006940 <_malloc_r+0xd0>
 80068fe:	2a0b      	cmp	r2, #11
 8006900:	d917      	bls.n	8006932 <_malloc_r+0xc2>
 8006902:	1961      	adds	r1, r4, r5
 8006904:	42a3      	cmp	r3, r4
 8006906:	6025      	str	r5, [r4, #0]
 8006908:	bf18      	it	ne
 800690a:	6059      	strne	r1, [r3, #4]
 800690c:	6863      	ldr	r3, [r4, #4]
 800690e:	bf08      	it	eq
 8006910:	f8c8 1000 	streq.w	r1, [r8]
 8006914:	5162      	str	r2, [r4, r5]
 8006916:	604b      	str	r3, [r1, #4]
 8006918:	4630      	mov	r0, r6
 800691a:	f000 f82f 	bl	800697c <__malloc_unlock>
 800691e:	f104 000b 	add.w	r0, r4, #11
 8006922:	1d23      	adds	r3, r4, #4
 8006924:	f020 0007 	bic.w	r0, r0, #7
 8006928:	1ac2      	subs	r2, r0, r3
 800692a:	bf1c      	itt	ne
 800692c:	1a1b      	subne	r3, r3, r0
 800692e:	50a3      	strne	r3, [r4, r2]
 8006930:	e7af      	b.n	8006892 <_malloc_r+0x22>
 8006932:	6862      	ldr	r2, [r4, #4]
 8006934:	42a3      	cmp	r3, r4
 8006936:	bf0c      	ite	eq
 8006938:	f8c8 2000 	streq.w	r2, [r8]
 800693c:	605a      	strne	r2, [r3, #4]
 800693e:	e7eb      	b.n	8006918 <_malloc_r+0xa8>
 8006940:	4623      	mov	r3, r4
 8006942:	6864      	ldr	r4, [r4, #4]
 8006944:	e7ae      	b.n	80068a4 <_malloc_r+0x34>
 8006946:	463c      	mov	r4, r7
 8006948:	687f      	ldr	r7, [r7, #4]
 800694a:	e7b6      	b.n	80068ba <_malloc_r+0x4a>
 800694c:	461a      	mov	r2, r3
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	42a3      	cmp	r3, r4
 8006952:	d1fb      	bne.n	800694c <_malloc_r+0xdc>
 8006954:	2300      	movs	r3, #0
 8006956:	6053      	str	r3, [r2, #4]
 8006958:	e7de      	b.n	8006918 <_malloc_r+0xa8>
 800695a:	230c      	movs	r3, #12
 800695c:	6033      	str	r3, [r6, #0]
 800695e:	4630      	mov	r0, r6
 8006960:	f000 f80c 	bl	800697c <__malloc_unlock>
 8006964:	e794      	b.n	8006890 <_malloc_r+0x20>
 8006966:	6005      	str	r5, [r0, #0]
 8006968:	e7d6      	b.n	8006918 <_malloc_r+0xa8>
 800696a:	bf00      	nop
 800696c:	2000087c 	.word	0x2000087c

08006970 <__malloc_lock>:
 8006970:	4801      	ldr	r0, [pc, #4]	@ (8006978 <__malloc_lock+0x8>)
 8006972:	f7ff b8a6 	b.w	8005ac2 <__retarget_lock_acquire_recursive>
 8006976:	bf00      	nop
 8006978:	20000874 	.word	0x20000874

0800697c <__malloc_unlock>:
 800697c:	4801      	ldr	r0, [pc, #4]	@ (8006984 <__malloc_unlock+0x8>)
 800697e:	f7ff b8a1 	b.w	8005ac4 <__retarget_lock_release_recursive>
 8006982:	bf00      	nop
 8006984:	20000874 	.word	0x20000874

08006988 <_Balloc>:
 8006988:	b570      	push	{r4, r5, r6, lr}
 800698a:	69c6      	ldr	r6, [r0, #28]
 800698c:	4604      	mov	r4, r0
 800698e:	460d      	mov	r5, r1
 8006990:	b976      	cbnz	r6, 80069b0 <_Balloc+0x28>
 8006992:	2010      	movs	r0, #16
 8006994:	f7ff ff42 	bl	800681c <malloc>
 8006998:	4602      	mov	r2, r0
 800699a:	61e0      	str	r0, [r4, #28]
 800699c:	b920      	cbnz	r0, 80069a8 <_Balloc+0x20>
 800699e:	4b18      	ldr	r3, [pc, #96]	@ (8006a00 <_Balloc+0x78>)
 80069a0:	4818      	ldr	r0, [pc, #96]	@ (8006a04 <_Balloc+0x7c>)
 80069a2:	216b      	movs	r1, #107	@ 0x6b
 80069a4:	f001 fd54 	bl	8008450 <__assert_func>
 80069a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069ac:	6006      	str	r6, [r0, #0]
 80069ae:	60c6      	str	r6, [r0, #12]
 80069b0:	69e6      	ldr	r6, [r4, #28]
 80069b2:	68f3      	ldr	r3, [r6, #12]
 80069b4:	b183      	cbz	r3, 80069d8 <_Balloc+0x50>
 80069b6:	69e3      	ldr	r3, [r4, #28]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80069be:	b9b8      	cbnz	r0, 80069f0 <_Balloc+0x68>
 80069c0:	2101      	movs	r1, #1
 80069c2:	fa01 f605 	lsl.w	r6, r1, r5
 80069c6:	1d72      	adds	r2, r6, #5
 80069c8:	0092      	lsls	r2, r2, #2
 80069ca:	4620      	mov	r0, r4
 80069cc:	f001 fd5e 	bl	800848c <_calloc_r>
 80069d0:	b160      	cbz	r0, 80069ec <_Balloc+0x64>
 80069d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80069d6:	e00e      	b.n	80069f6 <_Balloc+0x6e>
 80069d8:	2221      	movs	r2, #33	@ 0x21
 80069da:	2104      	movs	r1, #4
 80069dc:	4620      	mov	r0, r4
 80069de:	f001 fd55 	bl	800848c <_calloc_r>
 80069e2:	69e3      	ldr	r3, [r4, #28]
 80069e4:	60f0      	str	r0, [r6, #12]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d1e4      	bne.n	80069b6 <_Balloc+0x2e>
 80069ec:	2000      	movs	r0, #0
 80069ee:	bd70      	pop	{r4, r5, r6, pc}
 80069f0:	6802      	ldr	r2, [r0, #0]
 80069f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80069f6:	2300      	movs	r3, #0
 80069f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80069fc:	e7f7      	b.n	80069ee <_Balloc+0x66>
 80069fe:	bf00      	nop
 8006a00:	0800c99a 	.word	0x0800c99a
 8006a04:	0800ca1a 	.word	0x0800ca1a

08006a08 <_Bfree>:
 8006a08:	b570      	push	{r4, r5, r6, lr}
 8006a0a:	69c6      	ldr	r6, [r0, #28]
 8006a0c:	4605      	mov	r5, r0
 8006a0e:	460c      	mov	r4, r1
 8006a10:	b976      	cbnz	r6, 8006a30 <_Bfree+0x28>
 8006a12:	2010      	movs	r0, #16
 8006a14:	f7ff ff02 	bl	800681c <malloc>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	61e8      	str	r0, [r5, #28]
 8006a1c:	b920      	cbnz	r0, 8006a28 <_Bfree+0x20>
 8006a1e:	4b09      	ldr	r3, [pc, #36]	@ (8006a44 <_Bfree+0x3c>)
 8006a20:	4809      	ldr	r0, [pc, #36]	@ (8006a48 <_Bfree+0x40>)
 8006a22:	218f      	movs	r1, #143	@ 0x8f
 8006a24:	f001 fd14 	bl	8008450 <__assert_func>
 8006a28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a2c:	6006      	str	r6, [r0, #0]
 8006a2e:	60c6      	str	r6, [r0, #12]
 8006a30:	b13c      	cbz	r4, 8006a42 <_Bfree+0x3a>
 8006a32:	69eb      	ldr	r3, [r5, #28]
 8006a34:	6862      	ldr	r2, [r4, #4]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a3c:	6021      	str	r1, [r4, #0]
 8006a3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a42:	bd70      	pop	{r4, r5, r6, pc}
 8006a44:	0800c99a 	.word	0x0800c99a
 8006a48:	0800ca1a 	.word	0x0800ca1a

08006a4c <__multadd>:
 8006a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a50:	690d      	ldr	r5, [r1, #16]
 8006a52:	4607      	mov	r7, r0
 8006a54:	460c      	mov	r4, r1
 8006a56:	461e      	mov	r6, r3
 8006a58:	f101 0c14 	add.w	ip, r1, #20
 8006a5c:	2000      	movs	r0, #0
 8006a5e:	f8dc 3000 	ldr.w	r3, [ip]
 8006a62:	b299      	uxth	r1, r3
 8006a64:	fb02 6101 	mla	r1, r2, r1, r6
 8006a68:	0c1e      	lsrs	r6, r3, #16
 8006a6a:	0c0b      	lsrs	r3, r1, #16
 8006a6c:	fb02 3306 	mla	r3, r2, r6, r3
 8006a70:	b289      	uxth	r1, r1
 8006a72:	3001      	adds	r0, #1
 8006a74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006a78:	4285      	cmp	r5, r0
 8006a7a:	f84c 1b04 	str.w	r1, [ip], #4
 8006a7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006a82:	dcec      	bgt.n	8006a5e <__multadd+0x12>
 8006a84:	b30e      	cbz	r6, 8006aca <__multadd+0x7e>
 8006a86:	68a3      	ldr	r3, [r4, #8]
 8006a88:	42ab      	cmp	r3, r5
 8006a8a:	dc19      	bgt.n	8006ac0 <__multadd+0x74>
 8006a8c:	6861      	ldr	r1, [r4, #4]
 8006a8e:	4638      	mov	r0, r7
 8006a90:	3101      	adds	r1, #1
 8006a92:	f7ff ff79 	bl	8006988 <_Balloc>
 8006a96:	4680      	mov	r8, r0
 8006a98:	b928      	cbnz	r0, 8006aa6 <__multadd+0x5a>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8006ad0 <__multadd+0x84>)
 8006a9e:	480d      	ldr	r0, [pc, #52]	@ (8006ad4 <__multadd+0x88>)
 8006aa0:	21ba      	movs	r1, #186	@ 0xba
 8006aa2:	f001 fcd5 	bl	8008450 <__assert_func>
 8006aa6:	6922      	ldr	r2, [r4, #16]
 8006aa8:	3202      	adds	r2, #2
 8006aaa:	f104 010c 	add.w	r1, r4, #12
 8006aae:	0092      	lsls	r2, r2, #2
 8006ab0:	300c      	adds	r0, #12
 8006ab2:	f7ff f808 	bl	8005ac6 <memcpy>
 8006ab6:	4621      	mov	r1, r4
 8006ab8:	4638      	mov	r0, r7
 8006aba:	f7ff ffa5 	bl	8006a08 <_Bfree>
 8006abe:	4644      	mov	r4, r8
 8006ac0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ac4:	3501      	adds	r5, #1
 8006ac6:	615e      	str	r6, [r3, #20]
 8006ac8:	6125      	str	r5, [r4, #16]
 8006aca:	4620      	mov	r0, r4
 8006acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ad0:	0800ca09 	.word	0x0800ca09
 8006ad4:	0800ca1a 	.word	0x0800ca1a

08006ad8 <__s2b>:
 8006ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006adc:	460c      	mov	r4, r1
 8006ade:	4615      	mov	r5, r2
 8006ae0:	461f      	mov	r7, r3
 8006ae2:	2209      	movs	r2, #9
 8006ae4:	3308      	adds	r3, #8
 8006ae6:	4606      	mov	r6, r0
 8006ae8:	fb93 f3f2 	sdiv	r3, r3, r2
 8006aec:	2100      	movs	r1, #0
 8006aee:	2201      	movs	r2, #1
 8006af0:	429a      	cmp	r2, r3
 8006af2:	db09      	blt.n	8006b08 <__s2b+0x30>
 8006af4:	4630      	mov	r0, r6
 8006af6:	f7ff ff47 	bl	8006988 <_Balloc>
 8006afa:	b940      	cbnz	r0, 8006b0e <__s2b+0x36>
 8006afc:	4602      	mov	r2, r0
 8006afe:	4b19      	ldr	r3, [pc, #100]	@ (8006b64 <__s2b+0x8c>)
 8006b00:	4819      	ldr	r0, [pc, #100]	@ (8006b68 <__s2b+0x90>)
 8006b02:	21d3      	movs	r1, #211	@ 0xd3
 8006b04:	f001 fca4 	bl	8008450 <__assert_func>
 8006b08:	0052      	lsls	r2, r2, #1
 8006b0a:	3101      	adds	r1, #1
 8006b0c:	e7f0      	b.n	8006af0 <__s2b+0x18>
 8006b0e:	9b08      	ldr	r3, [sp, #32]
 8006b10:	6143      	str	r3, [r0, #20]
 8006b12:	2d09      	cmp	r5, #9
 8006b14:	f04f 0301 	mov.w	r3, #1
 8006b18:	6103      	str	r3, [r0, #16]
 8006b1a:	dd16      	ble.n	8006b4a <__s2b+0x72>
 8006b1c:	f104 0909 	add.w	r9, r4, #9
 8006b20:	46c8      	mov	r8, r9
 8006b22:	442c      	add	r4, r5
 8006b24:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006b28:	4601      	mov	r1, r0
 8006b2a:	3b30      	subs	r3, #48	@ 0x30
 8006b2c:	220a      	movs	r2, #10
 8006b2e:	4630      	mov	r0, r6
 8006b30:	f7ff ff8c 	bl	8006a4c <__multadd>
 8006b34:	45a0      	cmp	r8, r4
 8006b36:	d1f5      	bne.n	8006b24 <__s2b+0x4c>
 8006b38:	f1a5 0408 	sub.w	r4, r5, #8
 8006b3c:	444c      	add	r4, r9
 8006b3e:	1b2d      	subs	r5, r5, r4
 8006b40:	1963      	adds	r3, r4, r5
 8006b42:	42bb      	cmp	r3, r7
 8006b44:	db04      	blt.n	8006b50 <__s2b+0x78>
 8006b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b4a:	340a      	adds	r4, #10
 8006b4c:	2509      	movs	r5, #9
 8006b4e:	e7f6      	b.n	8006b3e <__s2b+0x66>
 8006b50:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006b54:	4601      	mov	r1, r0
 8006b56:	3b30      	subs	r3, #48	@ 0x30
 8006b58:	220a      	movs	r2, #10
 8006b5a:	4630      	mov	r0, r6
 8006b5c:	f7ff ff76 	bl	8006a4c <__multadd>
 8006b60:	e7ee      	b.n	8006b40 <__s2b+0x68>
 8006b62:	bf00      	nop
 8006b64:	0800ca09 	.word	0x0800ca09
 8006b68:	0800ca1a 	.word	0x0800ca1a

08006b6c <__hi0bits>:
 8006b6c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006b70:	4603      	mov	r3, r0
 8006b72:	bf36      	itet	cc
 8006b74:	0403      	lslcc	r3, r0, #16
 8006b76:	2000      	movcs	r0, #0
 8006b78:	2010      	movcc	r0, #16
 8006b7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b7e:	bf3c      	itt	cc
 8006b80:	021b      	lslcc	r3, r3, #8
 8006b82:	3008      	addcc	r0, #8
 8006b84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b88:	bf3c      	itt	cc
 8006b8a:	011b      	lslcc	r3, r3, #4
 8006b8c:	3004      	addcc	r0, #4
 8006b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b92:	bf3c      	itt	cc
 8006b94:	009b      	lslcc	r3, r3, #2
 8006b96:	3002      	addcc	r0, #2
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	db05      	blt.n	8006ba8 <__hi0bits+0x3c>
 8006b9c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006ba0:	f100 0001 	add.w	r0, r0, #1
 8006ba4:	bf08      	it	eq
 8006ba6:	2020      	moveq	r0, #32
 8006ba8:	4770      	bx	lr

08006baa <__lo0bits>:
 8006baa:	6803      	ldr	r3, [r0, #0]
 8006bac:	4602      	mov	r2, r0
 8006bae:	f013 0007 	ands.w	r0, r3, #7
 8006bb2:	d00b      	beq.n	8006bcc <__lo0bits+0x22>
 8006bb4:	07d9      	lsls	r1, r3, #31
 8006bb6:	d421      	bmi.n	8006bfc <__lo0bits+0x52>
 8006bb8:	0798      	lsls	r0, r3, #30
 8006bba:	bf49      	itett	mi
 8006bbc:	085b      	lsrmi	r3, r3, #1
 8006bbe:	089b      	lsrpl	r3, r3, #2
 8006bc0:	2001      	movmi	r0, #1
 8006bc2:	6013      	strmi	r3, [r2, #0]
 8006bc4:	bf5c      	itt	pl
 8006bc6:	6013      	strpl	r3, [r2, #0]
 8006bc8:	2002      	movpl	r0, #2
 8006bca:	4770      	bx	lr
 8006bcc:	b299      	uxth	r1, r3
 8006bce:	b909      	cbnz	r1, 8006bd4 <__lo0bits+0x2a>
 8006bd0:	0c1b      	lsrs	r3, r3, #16
 8006bd2:	2010      	movs	r0, #16
 8006bd4:	b2d9      	uxtb	r1, r3
 8006bd6:	b909      	cbnz	r1, 8006bdc <__lo0bits+0x32>
 8006bd8:	3008      	adds	r0, #8
 8006bda:	0a1b      	lsrs	r3, r3, #8
 8006bdc:	0719      	lsls	r1, r3, #28
 8006bde:	bf04      	itt	eq
 8006be0:	091b      	lsreq	r3, r3, #4
 8006be2:	3004      	addeq	r0, #4
 8006be4:	0799      	lsls	r1, r3, #30
 8006be6:	bf04      	itt	eq
 8006be8:	089b      	lsreq	r3, r3, #2
 8006bea:	3002      	addeq	r0, #2
 8006bec:	07d9      	lsls	r1, r3, #31
 8006bee:	d403      	bmi.n	8006bf8 <__lo0bits+0x4e>
 8006bf0:	085b      	lsrs	r3, r3, #1
 8006bf2:	f100 0001 	add.w	r0, r0, #1
 8006bf6:	d003      	beq.n	8006c00 <__lo0bits+0x56>
 8006bf8:	6013      	str	r3, [r2, #0]
 8006bfa:	4770      	bx	lr
 8006bfc:	2000      	movs	r0, #0
 8006bfe:	4770      	bx	lr
 8006c00:	2020      	movs	r0, #32
 8006c02:	4770      	bx	lr

08006c04 <__i2b>:
 8006c04:	b510      	push	{r4, lr}
 8006c06:	460c      	mov	r4, r1
 8006c08:	2101      	movs	r1, #1
 8006c0a:	f7ff febd 	bl	8006988 <_Balloc>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	b928      	cbnz	r0, 8006c1e <__i2b+0x1a>
 8006c12:	4b05      	ldr	r3, [pc, #20]	@ (8006c28 <__i2b+0x24>)
 8006c14:	4805      	ldr	r0, [pc, #20]	@ (8006c2c <__i2b+0x28>)
 8006c16:	f240 1145 	movw	r1, #325	@ 0x145
 8006c1a:	f001 fc19 	bl	8008450 <__assert_func>
 8006c1e:	2301      	movs	r3, #1
 8006c20:	6144      	str	r4, [r0, #20]
 8006c22:	6103      	str	r3, [r0, #16]
 8006c24:	bd10      	pop	{r4, pc}
 8006c26:	bf00      	nop
 8006c28:	0800ca09 	.word	0x0800ca09
 8006c2c:	0800ca1a 	.word	0x0800ca1a

08006c30 <__multiply>:
 8006c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c34:	4614      	mov	r4, r2
 8006c36:	690a      	ldr	r2, [r1, #16]
 8006c38:	6923      	ldr	r3, [r4, #16]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	bfa8      	it	ge
 8006c3e:	4623      	movge	r3, r4
 8006c40:	460f      	mov	r7, r1
 8006c42:	bfa4      	itt	ge
 8006c44:	460c      	movge	r4, r1
 8006c46:	461f      	movge	r7, r3
 8006c48:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006c4c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006c50:	68a3      	ldr	r3, [r4, #8]
 8006c52:	6861      	ldr	r1, [r4, #4]
 8006c54:	eb0a 0609 	add.w	r6, sl, r9
 8006c58:	42b3      	cmp	r3, r6
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	bfb8      	it	lt
 8006c5e:	3101      	addlt	r1, #1
 8006c60:	f7ff fe92 	bl	8006988 <_Balloc>
 8006c64:	b930      	cbnz	r0, 8006c74 <__multiply+0x44>
 8006c66:	4602      	mov	r2, r0
 8006c68:	4b44      	ldr	r3, [pc, #272]	@ (8006d7c <__multiply+0x14c>)
 8006c6a:	4845      	ldr	r0, [pc, #276]	@ (8006d80 <__multiply+0x150>)
 8006c6c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006c70:	f001 fbee 	bl	8008450 <__assert_func>
 8006c74:	f100 0514 	add.w	r5, r0, #20
 8006c78:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c7c:	462b      	mov	r3, r5
 8006c7e:	2200      	movs	r2, #0
 8006c80:	4543      	cmp	r3, r8
 8006c82:	d321      	bcc.n	8006cc8 <__multiply+0x98>
 8006c84:	f107 0114 	add.w	r1, r7, #20
 8006c88:	f104 0214 	add.w	r2, r4, #20
 8006c8c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006c90:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006c94:	9302      	str	r3, [sp, #8]
 8006c96:	1b13      	subs	r3, r2, r4
 8006c98:	3b15      	subs	r3, #21
 8006c9a:	f023 0303 	bic.w	r3, r3, #3
 8006c9e:	3304      	adds	r3, #4
 8006ca0:	f104 0715 	add.w	r7, r4, #21
 8006ca4:	42ba      	cmp	r2, r7
 8006ca6:	bf38      	it	cc
 8006ca8:	2304      	movcc	r3, #4
 8006caa:	9301      	str	r3, [sp, #4]
 8006cac:	9b02      	ldr	r3, [sp, #8]
 8006cae:	9103      	str	r1, [sp, #12]
 8006cb0:	428b      	cmp	r3, r1
 8006cb2:	d80c      	bhi.n	8006cce <__multiply+0x9e>
 8006cb4:	2e00      	cmp	r6, #0
 8006cb6:	dd03      	ble.n	8006cc0 <__multiply+0x90>
 8006cb8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d05b      	beq.n	8006d78 <__multiply+0x148>
 8006cc0:	6106      	str	r6, [r0, #16]
 8006cc2:	b005      	add	sp, #20
 8006cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cc8:	f843 2b04 	str.w	r2, [r3], #4
 8006ccc:	e7d8      	b.n	8006c80 <__multiply+0x50>
 8006cce:	f8b1 a000 	ldrh.w	sl, [r1]
 8006cd2:	f1ba 0f00 	cmp.w	sl, #0
 8006cd6:	d024      	beq.n	8006d22 <__multiply+0xf2>
 8006cd8:	f104 0e14 	add.w	lr, r4, #20
 8006cdc:	46a9      	mov	r9, r5
 8006cde:	f04f 0c00 	mov.w	ip, #0
 8006ce2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006ce6:	f8d9 3000 	ldr.w	r3, [r9]
 8006cea:	fa1f fb87 	uxth.w	fp, r7
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	fb0a 330b 	mla	r3, sl, fp, r3
 8006cf4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006cf8:	f8d9 7000 	ldr.w	r7, [r9]
 8006cfc:	4463      	add	r3, ip
 8006cfe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006d02:	fb0a c70b 	mla	r7, sl, fp, ip
 8006d06:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006d10:	4572      	cmp	r2, lr
 8006d12:	f849 3b04 	str.w	r3, [r9], #4
 8006d16:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006d1a:	d8e2      	bhi.n	8006ce2 <__multiply+0xb2>
 8006d1c:	9b01      	ldr	r3, [sp, #4]
 8006d1e:	f845 c003 	str.w	ip, [r5, r3]
 8006d22:	9b03      	ldr	r3, [sp, #12]
 8006d24:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006d28:	3104      	adds	r1, #4
 8006d2a:	f1b9 0f00 	cmp.w	r9, #0
 8006d2e:	d021      	beq.n	8006d74 <__multiply+0x144>
 8006d30:	682b      	ldr	r3, [r5, #0]
 8006d32:	f104 0c14 	add.w	ip, r4, #20
 8006d36:	46ae      	mov	lr, r5
 8006d38:	f04f 0a00 	mov.w	sl, #0
 8006d3c:	f8bc b000 	ldrh.w	fp, [ip]
 8006d40:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006d44:	fb09 770b 	mla	r7, r9, fp, r7
 8006d48:	4457      	add	r7, sl
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006d50:	f84e 3b04 	str.w	r3, [lr], #4
 8006d54:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006d58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d5c:	f8be 3000 	ldrh.w	r3, [lr]
 8006d60:	fb09 330a 	mla	r3, r9, sl, r3
 8006d64:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006d68:	4562      	cmp	r2, ip
 8006d6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d6e:	d8e5      	bhi.n	8006d3c <__multiply+0x10c>
 8006d70:	9f01      	ldr	r7, [sp, #4]
 8006d72:	51eb      	str	r3, [r5, r7]
 8006d74:	3504      	adds	r5, #4
 8006d76:	e799      	b.n	8006cac <__multiply+0x7c>
 8006d78:	3e01      	subs	r6, #1
 8006d7a:	e79b      	b.n	8006cb4 <__multiply+0x84>
 8006d7c:	0800ca09 	.word	0x0800ca09
 8006d80:	0800ca1a 	.word	0x0800ca1a

08006d84 <__pow5mult>:
 8006d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d88:	4615      	mov	r5, r2
 8006d8a:	f012 0203 	ands.w	r2, r2, #3
 8006d8e:	4607      	mov	r7, r0
 8006d90:	460e      	mov	r6, r1
 8006d92:	d007      	beq.n	8006da4 <__pow5mult+0x20>
 8006d94:	4c25      	ldr	r4, [pc, #148]	@ (8006e2c <__pow5mult+0xa8>)
 8006d96:	3a01      	subs	r2, #1
 8006d98:	2300      	movs	r3, #0
 8006d9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d9e:	f7ff fe55 	bl	8006a4c <__multadd>
 8006da2:	4606      	mov	r6, r0
 8006da4:	10ad      	asrs	r5, r5, #2
 8006da6:	d03d      	beq.n	8006e24 <__pow5mult+0xa0>
 8006da8:	69fc      	ldr	r4, [r7, #28]
 8006daa:	b97c      	cbnz	r4, 8006dcc <__pow5mult+0x48>
 8006dac:	2010      	movs	r0, #16
 8006dae:	f7ff fd35 	bl	800681c <malloc>
 8006db2:	4602      	mov	r2, r0
 8006db4:	61f8      	str	r0, [r7, #28]
 8006db6:	b928      	cbnz	r0, 8006dc4 <__pow5mult+0x40>
 8006db8:	4b1d      	ldr	r3, [pc, #116]	@ (8006e30 <__pow5mult+0xac>)
 8006dba:	481e      	ldr	r0, [pc, #120]	@ (8006e34 <__pow5mult+0xb0>)
 8006dbc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006dc0:	f001 fb46 	bl	8008450 <__assert_func>
 8006dc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006dc8:	6004      	str	r4, [r0, #0]
 8006dca:	60c4      	str	r4, [r0, #12]
 8006dcc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006dd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006dd4:	b94c      	cbnz	r4, 8006dea <__pow5mult+0x66>
 8006dd6:	f240 2171 	movw	r1, #625	@ 0x271
 8006dda:	4638      	mov	r0, r7
 8006ddc:	f7ff ff12 	bl	8006c04 <__i2b>
 8006de0:	2300      	movs	r3, #0
 8006de2:	f8c8 0008 	str.w	r0, [r8, #8]
 8006de6:	4604      	mov	r4, r0
 8006de8:	6003      	str	r3, [r0, #0]
 8006dea:	f04f 0900 	mov.w	r9, #0
 8006dee:	07eb      	lsls	r3, r5, #31
 8006df0:	d50a      	bpl.n	8006e08 <__pow5mult+0x84>
 8006df2:	4631      	mov	r1, r6
 8006df4:	4622      	mov	r2, r4
 8006df6:	4638      	mov	r0, r7
 8006df8:	f7ff ff1a 	bl	8006c30 <__multiply>
 8006dfc:	4631      	mov	r1, r6
 8006dfe:	4680      	mov	r8, r0
 8006e00:	4638      	mov	r0, r7
 8006e02:	f7ff fe01 	bl	8006a08 <_Bfree>
 8006e06:	4646      	mov	r6, r8
 8006e08:	106d      	asrs	r5, r5, #1
 8006e0a:	d00b      	beq.n	8006e24 <__pow5mult+0xa0>
 8006e0c:	6820      	ldr	r0, [r4, #0]
 8006e0e:	b938      	cbnz	r0, 8006e20 <__pow5mult+0x9c>
 8006e10:	4622      	mov	r2, r4
 8006e12:	4621      	mov	r1, r4
 8006e14:	4638      	mov	r0, r7
 8006e16:	f7ff ff0b 	bl	8006c30 <__multiply>
 8006e1a:	6020      	str	r0, [r4, #0]
 8006e1c:	f8c0 9000 	str.w	r9, [r0]
 8006e20:	4604      	mov	r4, r0
 8006e22:	e7e4      	b.n	8006dee <__pow5mult+0x6a>
 8006e24:	4630      	mov	r0, r6
 8006e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e2a:	bf00      	nop
 8006e2c:	0800ca74 	.word	0x0800ca74
 8006e30:	0800c99a 	.word	0x0800c99a
 8006e34:	0800ca1a 	.word	0x0800ca1a

08006e38 <__lshift>:
 8006e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e3c:	460c      	mov	r4, r1
 8006e3e:	6849      	ldr	r1, [r1, #4]
 8006e40:	6923      	ldr	r3, [r4, #16]
 8006e42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006e46:	68a3      	ldr	r3, [r4, #8]
 8006e48:	4607      	mov	r7, r0
 8006e4a:	4691      	mov	r9, r2
 8006e4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e50:	f108 0601 	add.w	r6, r8, #1
 8006e54:	42b3      	cmp	r3, r6
 8006e56:	db0b      	blt.n	8006e70 <__lshift+0x38>
 8006e58:	4638      	mov	r0, r7
 8006e5a:	f7ff fd95 	bl	8006988 <_Balloc>
 8006e5e:	4605      	mov	r5, r0
 8006e60:	b948      	cbnz	r0, 8006e76 <__lshift+0x3e>
 8006e62:	4602      	mov	r2, r0
 8006e64:	4b28      	ldr	r3, [pc, #160]	@ (8006f08 <__lshift+0xd0>)
 8006e66:	4829      	ldr	r0, [pc, #164]	@ (8006f0c <__lshift+0xd4>)
 8006e68:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006e6c:	f001 faf0 	bl	8008450 <__assert_func>
 8006e70:	3101      	adds	r1, #1
 8006e72:	005b      	lsls	r3, r3, #1
 8006e74:	e7ee      	b.n	8006e54 <__lshift+0x1c>
 8006e76:	2300      	movs	r3, #0
 8006e78:	f100 0114 	add.w	r1, r0, #20
 8006e7c:	f100 0210 	add.w	r2, r0, #16
 8006e80:	4618      	mov	r0, r3
 8006e82:	4553      	cmp	r3, sl
 8006e84:	db33      	blt.n	8006eee <__lshift+0xb6>
 8006e86:	6920      	ldr	r0, [r4, #16]
 8006e88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e8c:	f104 0314 	add.w	r3, r4, #20
 8006e90:	f019 091f 	ands.w	r9, r9, #31
 8006e94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006e9c:	d02b      	beq.n	8006ef6 <__lshift+0xbe>
 8006e9e:	f1c9 0e20 	rsb	lr, r9, #32
 8006ea2:	468a      	mov	sl, r1
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	6818      	ldr	r0, [r3, #0]
 8006ea8:	fa00 f009 	lsl.w	r0, r0, r9
 8006eac:	4310      	orrs	r0, r2
 8006eae:	f84a 0b04 	str.w	r0, [sl], #4
 8006eb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eb6:	459c      	cmp	ip, r3
 8006eb8:	fa22 f20e 	lsr.w	r2, r2, lr
 8006ebc:	d8f3      	bhi.n	8006ea6 <__lshift+0x6e>
 8006ebe:	ebac 0304 	sub.w	r3, ip, r4
 8006ec2:	3b15      	subs	r3, #21
 8006ec4:	f023 0303 	bic.w	r3, r3, #3
 8006ec8:	3304      	adds	r3, #4
 8006eca:	f104 0015 	add.w	r0, r4, #21
 8006ece:	4584      	cmp	ip, r0
 8006ed0:	bf38      	it	cc
 8006ed2:	2304      	movcc	r3, #4
 8006ed4:	50ca      	str	r2, [r1, r3]
 8006ed6:	b10a      	cbz	r2, 8006edc <__lshift+0xa4>
 8006ed8:	f108 0602 	add.w	r6, r8, #2
 8006edc:	3e01      	subs	r6, #1
 8006ede:	4638      	mov	r0, r7
 8006ee0:	612e      	str	r6, [r5, #16]
 8006ee2:	4621      	mov	r1, r4
 8006ee4:	f7ff fd90 	bl	8006a08 <_Bfree>
 8006ee8:	4628      	mov	r0, r5
 8006eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eee:	f842 0f04 	str.w	r0, [r2, #4]!
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	e7c5      	b.n	8006e82 <__lshift+0x4a>
 8006ef6:	3904      	subs	r1, #4
 8006ef8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006efc:	f841 2f04 	str.w	r2, [r1, #4]!
 8006f00:	459c      	cmp	ip, r3
 8006f02:	d8f9      	bhi.n	8006ef8 <__lshift+0xc0>
 8006f04:	e7ea      	b.n	8006edc <__lshift+0xa4>
 8006f06:	bf00      	nop
 8006f08:	0800ca09 	.word	0x0800ca09
 8006f0c:	0800ca1a 	.word	0x0800ca1a

08006f10 <__mcmp>:
 8006f10:	690a      	ldr	r2, [r1, #16]
 8006f12:	4603      	mov	r3, r0
 8006f14:	6900      	ldr	r0, [r0, #16]
 8006f16:	1a80      	subs	r0, r0, r2
 8006f18:	b530      	push	{r4, r5, lr}
 8006f1a:	d10e      	bne.n	8006f3a <__mcmp+0x2a>
 8006f1c:	3314      	adds	r3, #20
 8006f1e:	3114      	adds	r1, #20
 8006f20:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006f24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006f28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006f2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006f30:	4295      	cmp	r5, r2
 8006f32:	d003      	beq.n	8006f3c <__mcmp+0x2c>
 8006f34:	d205      	bcs.n	8006f42 <__mcmp+0x32>
 8006f36:	f04f 30ff 	mov.w	r0, #4294967295
 8006f3a:	bd30      	pop	{r4, r5, pc}
 8006f3c:	42a3      	cmp	r3, r4
 8006f3e:	d3f3      	bcc.n	8006f28 <__mcmp+0x18>
 8006f40:	e7fb      	b.n	8006f3a <__mcmp+0x2a>
 8006f42:	2001      	movs	r0, #1
 8006f44:	e7f9      	b.n	8006f3a <__mcmp+0x2a>
	...

08006f48 <__mdiff>:
 8006f48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f4c:	4689      	mov	r9, r1
 8006f4e:	4606      	mov	r6, r0
 8006f50:	4611      	mov	r1, r2
 8006f52:	4648      	mov	r0, r9
 8006f54:	4614      	mov	r4, r2
 8006f56:	f7ff ffdb 	bl	8006f10 <__mcmp>
 8006f5a:	1e05      	subs	r5, r0, #0
 8006f5c:	d112      	bne.n	8006f84 <__mdiff+0x3c>
 8006f5e:	4629      	mov	r1, r5
 8006f60:	4630      	mov	r0, r6
 8006f62:	f7ff fd11 	bl	8006988 <_Balloc>
 8006f66:	4602      	mov	r2, r0
 8006f68:	b928      	cbnz	r0, 8006f76 <__mdiff+0x2e>
 8006f6a:	4b3f      	ldr	r3, [pc, #252]	@ (8007068 <__mdiff+0x120>)
 8006f6c:	f240 2137 	movw	r1, #567	@ 0x237
 8006f70:	483e      	ldr	r0, [pc, #248]	@ (800706c <__mdiff+0x124>)
 8006f72:	f001 fa6d 	bl	8008450 <__assert_func>
 8006f76:	2301      	movs	r3, #1
 8006f78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f7c:	4610      	mov	r0, r2
 8006f7e:	b003      	add	sp, #12
 8006f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f84:	bfbc      	itt	lt
 8006f86:	464b      	movlt	r3, r9
 8006f88:	46a1      	movlt	r9, r4
 8006f8a:	4630      	mov	r0, r6
 8006f8c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006f90:	bfba      	itte	lt
 8006f92:	461c      	movlt	r4, r3
 8006f94:	2501      	movlt	r5, #1
 8006f96:	2500      	movge	r5, #0
 8006f98:	f7ff fcf6 	bl	8006988 <_Balloc>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	b918      	cbnz	r0, 8006fa8 <__mdiff+0x60>
 8006fa0:	4b31      	ldr	r3, [pc, #196]	@ (8007068 <__mdiff+0x120>)
 8006fa2:	f240 2145 	movw	r1, #581	@ 0x245
 8006fa6:	e7e3      	b.n	8006f70 <__mdiff+0x28>
 8006fa8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006fac:	6926      	ldr	r6, [r4, #16]
 8006fae:	60c5      	str	r5, [r0, #12]
 8006fb0:	f109 0310 	add.w	r3, r9, #16
 8006fb4:	f109 0514 	add.w	r5, r9, #20
 8006fb8:	f104 0e14 	add.w	lr, r4, #20
 8006fbc:	f100 0b14 	add.w	fp, r0, #20
 8006fc0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006fc4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006fc8:	9301      	str	r3, [sp, #4]
 8006fca:	46d9      	mov	r9, fp
 8006fcc:	f04f 0c00 	mov.w	ip, #0
 8006fd0:	9b01      	ldr	r3, [sp, #4]
 8006fd2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006fd6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006fda:	9301      	str	r3, [sp, #4]
 8006fdc:	fa1f f38a 	uxth.w	r3, sl
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	b283      	uxth	r3, r0
 8006fe4:	1acb      	subs	r3, r1, r3
 8006fe6:	0c00      	lsrs	r0, r0, #16
 8006fe8:	4463      	add	r3, ip
 8006fea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006fee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006ff8:	4576      	cmp	r6, lr
 8006ffa:	f849 3b04 	str.w	r3, [r9], #4
 8006ffe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007002:	d8e5      	bhi.n	8006fd0 <__mdiff+0x88>
 8007004:	1b33      	subs	r3, r6, r4
 8007006:	3b15      	subs	r3, #21
 8007008:	f023 0303 	bic.w	r3, r3, #3
 800700c:	3415      	adds	r4, #21
 800700e:	3304      	adds	r3, #4
 8007010:	42a6      	cmp	r6, r4
 8007012:	bf38      	it	cc
 8007014:	2304      	movcc	r3, #4
 8007016:	441d      	add	r5, r3
 8007018:	445b      	add	r3, fp
 800701a:	461e      	mov	r6, r3
 800701c:	462c      	mov	r4, r5
 800701e:	4544      	cmp	r4, r8
 8007020:	d30e      	bcc.n	8007040 <__mdiff+0xf8>
 8007022:	f108 0103 	add.w	r1, r8, #3
 8007026:	1b49      	subs	r1, r1, r5
 8007028:	f021 0103 	bic.w	r1, r1, #3
 800702c:	3d03      	subs	r5, #3
 800702e:	45a8      	cmp	r8, r5
 8007030:	bf38      	it	cc
 8007032:	2100      	movcc	r1, #0
 8007034:	440b      	add	r3, r1
 8007036:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800703a:	b191      	cbz	r1, 8007062 <__mdiff+0x11a>
 800703c:	6117      	str	r7, [r2, #16]
 800703e:	e79d      	b.n	8006f7c <__mdiff+0x34>
 8007040:	f854 1b04 	ldr.w	r1, [r4], #4
 8007044:	46e6      	mov	lr, ip
 8007046:	0c08      	lsrs	r0, r1, #16
 8007048:	fa1c fc81 	uxtah	ip, ip, r1
 800704c:	4471      	add	r1, lr
 800704e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007052:	b289      	uxth	r1, r1
 8007054:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007058:	f846 1b04 	str.w	r1, [r6], #4
 800705c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007060:	e7dd      	b.n	800701e <__mdiff+0xd6>
 8007062:	3f01      	subs	r7, #1
 8007064:	e7e7      	b.n	8007036 <__mdiff+0xee>
 8007066:	bf00      	nop
 8007068:	0800ca09 	.word	0x0800ca09
 800706c:	0800ca1a 	.word	0x0800ca1a

08007070 <__ulp>:
 8007070:	b082      	sub	sp, #8
 8007072:	ed8d 0b00 	vstr	d0, [sp]
 8007076:	9a01      	ldr	r2, [sp, #4]
 8007078:	4b0f      	ldr	r3, [pc, #60]	@ (80070b8 <__ulp+0x48>)
 800707a:	4013      	ands	r3, r2
 800707c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007080:	2b00      	cmp	r3, #0
 8007082:	dc08      	bgt.n	8007096 <__ulp+0x26>
 8007084:	425b      	negs	r3, r3
 8007086:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800708a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800708e:	da04      	bge.n	800709a <__ulp+0x2a>
 8007090:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007094:	4113      	asrs	r3, r2
 8007096:	2200      	movs	r2, #0
 8007098:	e008      	b.n	80070ac <__ulp+0x3c>
 800709a:	f1a2 0314 	sub.w	r3, r2, #20
 800709e:	2b1e      	cmp	r3, #30
 80070a0:	bfda      	itte	le
 80070a2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80070a6:	40da      	lsrle	r2, r3
 80070a8:	2201      	movgt	r2, #1
 80070aa:	2300      	movs	r3, #0
 80070ac:	4619      	mov	r1, r3
 80070ae:	4610      	mov	r0, r2
 80070b0:	ec41 0b10 	vmov	d0, r0, r1
 80070b4:	b002      	add	sp, #8
 80070b6:	4770      	bx	lr
 80070b8:	7ff00000 	.word	0x7ff00000

080070bc <__b2d>:
 80070bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070c0:	6906      	ldr	r6, [r0, #16]
 80070c2:	f100 0814 	add.w	r8, r0, #20
 80070c6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80070ca:	1f37      	subs	r7, r6, #4
 80070cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80070d0:	4610      	mov	r0, r2
 80070d2:	f7ff fd4b 	bl	8006b6c <__hi0bits>
 80070d6:	f1c0 0320 	rsb	r3, r0, #32
 80070da:	280a      	cmp	r0, #10
 80070dc:	600b      	str	r3, [r1, #0]
 80070de:	491b      	ldr	r1, [pc, #108]	@ (800714c <__b2d+0x90>)
 80070e0:	dc15      	bgt.n	800710e <__b2d+0x52>
 80070e2:	f1c0 0c0b 	rsb	ip, r0, #11
 80070e6:	fa22 f30c 	lsr.w	r3, r2, ip
 80070ea:	45b8      	cmp	r8, r7
 80070ec:	ea43 0501 	orr.w	r5, r3, r1
 80070f0:	bf34      	ite	cc
 80070f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80070f6:	2300      	movcs	r3, #0
 80070f8:	3015      	adds	r0, #21
 80070fa:	fa02 f000 	lsl.w	r0, r2, r0
 80070fe:	fa23 f30c 	lsr.w	r3, r3, ip
 8007102:	4303      	orrs	r3, r0
 8007104:	461c      	mov	r4, r3
 8007106:	ec45 4b10 	vmov	d0, r4, r5
 800710a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800710e:	45b8      	cmp	r8, r7
 8007110:	bf3a      	itte	cc
 8007112:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007116:	f1a6 0708 	subcc.w	r7, r6, #8
 800711a:	2300      	movcs	r3, #0
 800711c:	380b      	subs	r0, #11
 800711e:	d012      	beq.n	8007146 <__b2d+0x8a>
 8007120:	f1c0 0120 	rsb	r1, r0, #32
 8007124:	fa23 f401 	lsr.w	r4, r3, r1
 8007128:	4082      	lsls	r2, r0
 800712a:	4322      	orrs	r2, r4
 800712c:	4547      	cmp	r7, r8
 800712e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007132:	bf8c      	ite	hi
 8007134:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007138:	2200      	movls	r2, #0
 800713a:	4083      	lsls	r3, r0
 800713c:	40ca      	lsrs	r2, r1
 800713e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007142:	4313      	orrs	r3, r2
 8007144:	e7de      	b.n	8007104 <__b2d+0x48>
 8007146:	ea42 0501 	orr.w	r5, r2, r1
 800714a:	e7db      	b.n	8007104 <__b2d+0x48>
 800714c:	3ff00000 	.word	0x3ff00000

08007150 <__d2b>:
 8007150:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007154:	460f      	mov	r7, r1
 8007156:	2101      	movs	r1, #1
 8007158:	ec59 8b10 	vmov	r8, r9, d0
 800715c:	4616      	mov	r6, r2
 800715e:	f7ff fc13 	bl	8006988 <_Balloc>
 8007162:	4604      	mov	r4, r0
 8007164:	b930      	cbnz	r0, 8007174 <__d2b+0x24>
 8007166:	4602      	mov	r2, r0
 8007168:	4b23      	ldr	r3, [pc, #140]	@ (80071f8 <__d2b+0xa8>)
 800716a:	4824      	ldr	r0, [pc, #144]	@ (80071fc <__d2b+0xac>)
 800716c:	f240 310f 	movw	r1, #783	@ 0x30f
 8007170:	f001 f96e 	bl	8008450 <__assert_func>
 8007174:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007178:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800717c:	b10d      	cbz	r5, 8007182 <__d2b+0x32>
 800717e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007182:	9301      	str	r3, [sp, #4]
 8007184:	f1b8 0300 	subs.w	r3, r8, #0
 8007188:	d023      	beq.n	80071d2 <__d2b+0x82>
 800718a:	4668      	mov	r0, sp
 800718c:	9300      	str	r3, [sp, #0]
 800718e:	f7ff fd0c 	bl	8006baa <__lo0bits>
 8007192:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007196:	b1d0      	cbz	r0, 80071ce <__d2b+0x7e>
 8007198:	f1c0 0320 	rsb	r3, r0, #32
 800719c:	fa02 f303 	lsl.w	r3, r2, r3
 80071a0:	430b      	orrs	r3, r1
 80071a2:	40c2      	lsrs	r2, r0
 80071a4:	6163      	str	r3, [r4, #20]
 80071a6:	9201      	str	r2, [sp, #4]
 80071a8:	9b01      	ldr	r3, [sp, #4]
 80071aa:	61a3      	str	r3, [r4, #24]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	bf0c      	ite	eq
 80071b0:	2201      	moveq	r2, #1
 80071b2:	2202      	movne	r2, #2
 80071b4:	6122      	str	r2, [r4, #16]
 80071b6:	b1a5      	cbz	r5, 80071e2 <__d2b+0x92>
 80071b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80071bc:	4405      	add	r5, r0
 80071be:	603d      	str	r5, [r7, #0]
 80071c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80071c4:	6030      	str	r0, [r6, #0]
 80071c6:	4620      	mov	r0, r4
 80071c8:	b003      	add	sp, #12
 80071ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071ce:	6161      	str	r1, [r4, #20]
 80071d0:	e7ea      	b.n	80071a8 <__d2b+0x58>
 80071d2:	a801      	add	r0, sp, #4
 80071d4:	f7ff fce9 	bl	8006baa <__lo0bits>
 80071d8:	9b01      	ldr	r3, [sp, #4]
 80071da:	6163      	str	r3, [r4, #20]
 80071dc:	3020      	adds	r0, #32
 80071de:	2201      	movs	r2, #1
 80071e0:	e7e8      	b.n	80071b4 <__d2b+0x64>
 80071e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80071e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80071ea:	6038      	str	r0, [r7, #0]
 80071ec:	6918      	ldr	r0, [r3, #16]
 80071ee:	f7ff fcbd 	bl	8006b6c <__hi0bits>
 80071f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80071f6:	e7e5      	b.n	80071c4 <__d2b+0x74>
 80071f8:	0800ca09 	.word	0x0800ca09
 80071fc:	0800ca1a 	.word	0x0800ca1a

08007200 <__ratio>:
 8007200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007204:	b085      	sub	sp, #20
 8007206:	e9cd 1000 	strd	r1, r0, [sp]
 800720a:	a902      	add	r1, sp, #8
 800720c:	f7ff ff56 	bl	80070bc <__b2d>
 8007210:	9800      	ldr	r0, [sp, #0]
 8007212:	a903      	add	r1, sp, #12
 8007214:	ec55 4b10 	vmov	r4, r5, d0
 8007218:	f7ff ff50 	bl	80070bc <__b2d>
 800721c:	9b01      	ldr	r3, [sp, #4]
 800721e:	6919      	ldr	r1, [r3, #16]
 8007220:	9b00      	ldr	r3, [sp, #0]
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	1ac9      	subs	r1, r1, r3
 8007226:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800722a:	1a9b      	subs	r3, r3, r2
 800722c:	ec5b ab10 	vmov	sl, fp, d0
 8007230:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007234:	2b00      	cmp	r3, #0
 8007236:	bfce      	itee	gt
 8007238:	462a      	movgt	r2, r5
 800723a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800723e:	465a      	movle	r2, fp
 8007240:	462f      	mov	r7, r5
 8007242:	46d9      	mov	r9, fp
 8007244:	bfcc      	ite	gt
 8007246:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800724a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800724e:	464b      	mov	r3, r9
 8007250:	4652      	mov	r2, sl
 8007252:	4620      	mov	r0, r4
 8007254:	4639      	mov	r1, r7
 8007256:	f7f9 faf9 	bl	800084c <__aeabi_ddiv>
 800725a:	ec41 0b10 	vmov	d0, r0, r1
 800725e:	b005      	add	sp, #20
 8007260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007264 <__copybits>:
 8007264:	3901      	subs	r1, #1
 8007266:	b570      	push	{r4, r5, r6, lr}
 8007268:	1149      	asrs	r1, r1, #5
 800726a:	6914      	ldr	r4, [r2, #16]
 800726c:	3101      	adds	r1, #1
 800726e:	f102 0314 	add.w	r3, r2, #20
 8007272:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007276:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800727a:	1f05      	subs	r5, r0, #4
 800727c:	42a3      	cmp	r3, r4
 800727e:	d30c      	bcc.n	800729a <__copybits+0x36>
 8007280:	1aa3      	subs	r3, r4, r2
 8007282:	3b11      	subs	r3, #17
 8007284:	f023 0303 	bic.w	r3, r3, #3
 8007288:	3211      	adds	r2, #17
 800728a:	42a2      	cmp	r2, r4
 800728c:	bf88      	it	hi
 800728e:	2300      	movhi	r3, #0
 8007290:	4418      	add	r0, r3
 8007292:	2300      	movs	r3, #0
 8007294:	4288      	cmp	r0, r1
 8007296:	d305      	bcc.n	80072a4 <__copybits+0x40>
 8007298:	bd70      	pop	{r4, r5, r6, pc}
 800729a:	f853 6b04 	ldr.w	r6, [r3], #4
 800729e:	f845 6f04 	str.w	r6, [r5, #4]!
 80072a2:	e7eb      	b.n	800727c <__copybits+0x18>
 80072a4:	f840 3b04 	str.w	r3, [r0], #4
 80072a8:	e7f4      	b.n	8007294 <__copybits+0x30>

080072aa <__any_on>:
 80072aa:	f100 0214 	add.w	r2, r0, #20
 80072ae:	6900      	ldr	r0, [r0, #16]
 80072b0:	114b      	asrs	r3, r1, #5
 80072b2:	4298      	cmp	r0, r3
 80072b4:	b510      	push	{r4, lr}
 80072b6:	db11      	blt.n	80072dc <__any_on+0x32>
 80072b8:	dd0a      	ble.n	80072d0 <__any_on+0x26>
 80072ba:	f011 011f 	ands.w	r1, r1, #31
 80072be:	d007      	beq.n	80072d0 <__any_on+0x26>
 80072c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80072c4:	fa24 f001 	lsr.w	r0, r4, r1
 80072c8:	fa00 f101 	lsl.w	r1, r0, r1
 80072cc:	428c      	cmp	r4, r1
 80072ce:	d10b      	bne.n	80072e8 <__any_on+0x3e>
 80072d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d803      	bhi.n	80072e0 <__any_on+0x36>
 80072d8:	2000      	movs	r0, #0
 80072da:	bd10      	pop	{r4, pc}
 80072dc:	4603      	mov	r3, r0
 80072de:	e7f7      	b.n	80072d0 <__any_on+0x26>
 80072e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80072e4:	2900      	cmp	r1, #0
 80072e6:	d0f5      	beq.n	80072d4 <__any_on+0x2a>
 80072e8:	2001      	movs	r0, #1
 80072ea:	e7f6      	b.n	80072da <__any_on+0x30>

080072ec <sulp>:
 80072ec:	b570      	push	{r4, r5, r6, lr}
 80072ee:	4604      	mov	r4, r0
 80072f0:	460d      	mov	r5, r1
 80072f2:	ec45 4b10 	vmov	d0, r4, r5
 80072f6:	4616      	mov	r6, r2
 80072f8:	f7ff feba 	bl	8007070 <__ulp>
 80072fc:	ec51 0b10 	vmov	r0, r1, d0
 8007300:	b17e      	cbz	r6, 8007322 <sulp+0x36>
 8007302:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007306:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800730a:	2b00      	cmp	r3, #0
 800730c:	dd09      	ble.n	8007322 <sulp+0x36>
 800730e:	051b      	lsls	r3, r3, #20
 8007310:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007314:	2400      	movs	r4, #0
 8007316:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800731a:	4622      	mov	r2, r4
 800731c:	462b      	mov	r3, r5
 800731e:	f7f9 f96b 	bl	80005f8 <__aeabi_dmul>
 8007322:	ec41 0b10 	vmov	d0, r0, r1
 8007326:	bd70      	pop	{r4, r5, r6, pc}

08007328 <_strtod_l>:
 8007328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800732c:	b09f      	sub	sp, #124	@ 0x7c
 800732e:	460c      	mov	r4, r1
 8007330:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007332:	2200      	movs	r2, #0
 8007334:	921a      	str	r2, [sp, #104]	@ 0x68
 8007336:	9005      	str	r0, [sp, #20]
 8007338:	f04f 0a00 	mov.w	sl, #0
 800733c:	f04f 0b00 	mov.w	fp, #0
 8007340:	460a      	mov	r2, r1
 8007342:	9219      	str	r2, [sp, #100]	@ 0x64
 8007344:	7811      	ldrb	r1, [r2, #0]
 8007346:	292b      	cmp	r1, #43	@ 0x2b
 8007348:	d04a      	beq.n	80073e0 <_strtod_l+0xb8>
 800734a:	d838      	bhi.n	80073be <_strtod_l+0x96>
 800734c:	290d      	cmp	r1, #13
 800734e:	d832      	bhi.n	80073b6 <_strtod_l+0x8e>
 8007350:	2908      	cmp	r1, #8
 8007352:	d832      	bhi.n	80073ba <_strtod_l+0x92>
 8007354:	2900      	cmp	r1, #0
 8007356:	d03b      	beq.n	80073d0 <_strtod_l+0xa8>
 8007358:	2200      	movs	r2, #0
 800735a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800735c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800735e:	782a      	ldrb	r2, [r5, #0]
 8007360:	2a30      	cmp	r2, #48	@ 0x30
 8007362:	f040 80b3 	bne.w	80074cc <_strtod_l+0x1a4>
 8007366:	786a      	ldrb	r2, [r5, #1]
 8007368:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800736c:	2a58      	cmp	r2, #88	@ 0x58
 800736e:	d16e      	bne.n	800744e <_strtod_l+0x126>
 8007370:	9302      	str	r3, [sp, #8]
 8007372:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007374:	9301      	str	r3, [sp, #4]
 8007376:	ab1a      	add	r3, sp, #104	@ 0x68
 8007378:	9300      	str	r3, [sp, #0]
 800737a:	4a8e      	ldr	r2, [pc, #568]	@ (80075b4 <_strtod_l+0x28c>)
 800737c:	9805      	ldr	r0, [sp, #20]
 800737e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007380:	a919      	add	r1, sp, #100	@ 0x64
 8007382:	f001 f8ff 	bl	8008584 <__gethex>
 8007386:	f010 060f 	ands.w	r6, r0, #15
 800738a:	4604      	mov	r4, r0
 800738c:	d005      	beq.n	800739a <_strtod_l+0x72>
 800738e:	2e06      	cmp	r6, #6
 8007390:	d128      	bne.n	80073e4 <_strtod_l+0xbc>
 8007392:	3501      	adds	r5, #1
 8007394:	2300      	movs	r3, #0
 8007396:	9519      	str	r5, [sp, #100]	@ 0x64
 8007398:	930b      	str	r3, [sp, #44]	@ 0x2c
 800739a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800739c:	2b00      	cmp	r3, #0
 800739e:	f040 858e 	bne.w	8007ebe <_strtod_l+0xb96>
 80073a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073a4:	b1cb      	cbz	r3, 80073da <_strtod_l+0xb2>
 80073a6:	4652      	mov	r2, sl
 80073a8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80073ac:	ec43 2b10 	vmov	d0, r2, r3
 80073b0:	b01f      	add	sp, #124	@ 0x7c
 80073b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b6:	2920      	cmp	r1, #32
 80073b8:	d1ce      	bne.n	8007358 <_strtod_l+0x30>
 80073ba:	3201      	adds	r2, #1
 80073bc:	e7c1      	b.n	8007342 <_strtod_l+0x1a>
 80073be:	292d      	cmp	r1, #45	@ 0x2d
 80073c0:	d1ca      	bne.n	8007358 <_strtod_l+0x30>
 80073c2:	2101      	movs	r1, #1
 80073c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80073c6:	1c51      	adds	r1, r2, #1
 80073c8:	9119      	str	r1, [sp, #100]	@ 0x64
 80073ca:	7852      	ldrb	r2, [r2, #1]
 80073cc:	2a00      	cmp	r2, #0
 80073ce:	d1c5      	bne.n	800735c <_strtod_l+0x34>
 80073d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80073d2:	9419      	str	r4, [sp, #100]	@ 0x64
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f040 8570 	bne.w	8007eba <_strtod_l+0xb92>
 80073da:	4652      	mov	r2, sl
 80073dc:	465b      	mov	r3, fp
 80073de:	e7e5      	b.n	80073ac <_strtod_l+0x84>
 80073e0:	2100      	movs	r1, #0
 80073e2:	e7ef      	b.n	80073c4 <_strtod_l+0x9c>
 80073e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80073e6:	b13a      	cbz	r2, 80073f8 <_strtod_l+0xd0>
 80073e8:	2135      	movs	r1, #53	@ 0x35
 80073ea:	a81c      	add	r0, sp, #112	@ 0x70
 80073ec:	f7ff ff3a 	bl	8007264 <__copybits>
 80073f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80073f2:	9805      	ldr	r0, [sp, #20]
 80073f4:	f7ff fb08 	bl	8006a08 <_Bfree>
 80073f8:	3e01      	subs	r6, #1
 80073fa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80073fc:	2e04      	cmp	r6, #4
 80073fe:	d806      	bhi.n	800740e <_strtod_l+0xe6>
 8007400:	e8df f006 	tbb	[pc, r6]
 8007404:	201d0314 	.word	0x201d0314
 8007408:	14          	.byte	0x14
 8007409:	00          	.byte	0x00
 800740a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800740e:	05e1      	lsls	r1, r4, #23
 8007410:	bf48      	it	mi
 8007412:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007416:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800741a:	0d1b      	lsrs	r3, r3, #20
 800741c:	051b      	lsls	r3, r3, #20
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1bb      	bne.n	800739a <_strtod_l+0x72>
 8007422:	f7fe fb23 	bl	8005a6c <__errno>
 8007426:	2322      	movs	r3, #34	@ 0x22
 8007428:	6003      	str	r3, [r0, #0]
 800742a:	e7b6      	b.n	800739a <_strtod_l+0x72>
 800742c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007430:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007434:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007438:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800743c:	e7e7      	b.n	800740e <_strtod_l+0xe6>
 800743e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80075bc <_strtod_l+0x294>
 8007442:	e7e4      	b.n	800740e <_strtod_l+0xe6>
 8007444:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007448:	f04f 3aff 	mov.w	sl, #4294967295
 800744c:	e7df      	b.n	800740e <_strtod_l+0xe6>
 800744e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007450:	1c5a      	adds	r2, r3, #1
 8007452:	9219      	str	r2, [sp, #100]	@ 0x64
 8007454:	785b      	ldrb	r3, [r3, #1]
 8007456:	2b30      	cmp	r3, #48	@ 0x30
 8007458:	d0f9      	beq.n	800744e <_strtod_l+0x126>
 800745a:	2b00      	cmp	r3, #0
 800745c:	d09d      	beq.n	800739a <_strtod_l+0x72>
 800745e:	2301      	movs	r3, #1
 8007460:	9309      	str	r3, [sp, #36]	@ 0x24
 8007462:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007464:	930c      	str	r3, [sp, #48]	@ 0x30
 8007466:	2300      	movs	r3, #0
 8007468:	9308      	str	r3, [sp, #32]
 800746a:	930a      	str	r3, [sp, #40]	@ 0x28
 800746c:	461f      	mov	r7, r3
 800746e:	220a      	movs	r2, #10
 8007470:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007472:	7805      	ldrb	r5, [r0, #0]
 8007474:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007478:	b2d9      	uxtb	r1, r3
 800747a:	2909      	cmp	r1, #9
 800747c:	d928      	bls.n	80074d0 <_strtod_l+0x1a8>
 800747e:	494e      	ldr	r1, [pc, #312]	@ (80075b8 <_strtod_l+0x290>)
 8007480:	2201      	movs	r2, #1
 8007482:	f000 ffbb 	bl	80083fc <strncmp>
 8007486:	2800      	cmp	r0, #0
 8007488:	d032      	beq.n	80074f0 <_strtod_l+0x1c8>
 800748a:	2000      	movs	r0, #0
 800748c:	462a      	mov	r2, r5
 800748e:	4681      	mov	r9, r0
 8007490:	463d      	mov	r5, r7
 8007492:	4603      	mov	r3, r0
 8007494:	2a65      	cmp	r2, #101	@ 0x65
 8007496:	d001      	beq.n	800749c <_strtod_l+0x174>
 8007498:	2a45      	cmp	r2, #69	@ 0x45
 800749a:	d114      	bne.n	80074c6 <_strtod_l+0x19e>
 800749c:	b91d      	cbnz	r5, 80074a6 <_strtod_l+0x17e>
 800749e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074a0:	4302      	orrs	r2, r0
 80074a2:	d095      	beq.n	80073d0 <_strtod_l+0xa8>
 80074a4:	2500      	movs	r5, #0
 80074a6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80074a8:	1c62      	adds	r2, r4, #1
 80074aa:	9219      	str	r2, [sp, #100]	@ 0x64
 80074ac:	7862      	ldrb	r2, [r4, #1]
 80074ae:	2a2b      	cmp	r2, #43	@ 0x2b
 80074b0:	d077      	beq.n	80075a2 <_strtod_l+0x27a>
 80074b2:	2a2d      	cmp	r2, #45	@ 0x2d
 80074b4:	d07b      	beq.n	80075ae <_strtod_l+0x286>
 80074b6:	f04f 0c00 	mov.w	ip, #0
 80074ba:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80074be:	2909      	cmp	r1, #9
 80074c0:	f240 8082 	bls.w	80075c8 <_strtod_l+0x2a0>
 80074c4:	9419      	str	r4, [sp, #100]	@ 0x64
 80074c6:	f04f 0800 	mov.w	r8, #0
 80074ca:	e0a2      	b.n	8007612 <_strtod_l+0x2ea>
 80074cc:	2300      	movs	r3, #0
 80074ce:	e7c7      	b.n	8007460 <_strtod_l+0x138>
 80074d0:	2f08      	cmp	r7, #8
 80074d2:	bfd5      	itete	le
 80074d4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80074d6:	9908      	ldrgt	r1, [sp, #32]
 80074d8:	fb02 3301 	mlale	r3, r2, r1, r3
 80074dc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80074e0:	f100 0001 	add.w	r0, r0, #1
 80074e4:	bfd4      	ite	le
 80074e6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80074e8:	9308      	strgt	r3, [sp, #32]
 80074ea:	3701      	adds	r7, #1
 80074ec:	9019      	str	r0, [sp, #100]	@ 0x64
 80074ee:	e7bf      	b.n	8007470 <_strtod_l+0x148>
 80074f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80074f2:	1c5a      	adds	r2, r3, #1
 80074f4:	9219      	str	r2, [sp, #100]	@ 0x64
 80074f6:	785a      	ldrb	r2, [r3, #1]
 80074f8:	b37f      	cbz	r7, 800755a <_strtod_l+0x232>
 80074fa:	4681      	mov	r9, r0
 80074fc:	463d      	mov	r5, r7
 80074fe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007502:	2b09      	cmp	r3, #9
 8007504:	d912      	bls.n	800752c <_strtod_l+0x204>
 8007506:	2301      	movs	r3, #1
 8007508:	e7c4      	b.n	8007494 <_strtod_l+0x16c>
 800750a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800750c:	1c5a      	adds	r2, r3, #1
 800750e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007510:	785a      	ldrb	r2, [r3, #1]
 8007512:	3001      	adds	r0, #1
 8007514:	2a30      	cmp	r2, #48	@ 0x30
 8007516:	d0f8      	beq.n	800750a <_strtod_l+0x1e2>
 8007518:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800751c:	2b08      	cmp	r3, #8
 800751e:	f200 84d3 	bhi.w	8007ec8 <_strtod_l+0xba0>
 8007522:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007524:	930c      	str	r3, [sp, #48]	@ 0x30
 8007526:	4681      	mov	r9, r0
 8007528:	2000      	movs	r0, #0
 800752a:	4605      	mov	r5, r0
 800752c:	3a30      	subs	r2, #48	@ 0x30
 800752e:	f100 0301 	add.w	r3, r0, #1
 8007532:	d02a      	beq.n	800758a <_strtod_l+0x262>
 8007534:	4499      	add	r9, r3
 8007536:	eb00 0c05 	add.w	ip, r0, r5
 800753a:	462b      	mov	r3, r5
 800753c:	210a      	movs	r1, #10
 800753e:	4563      	cmp	r3, ip
 8007540:	d10d      	bne.n	800755e <_strtod_l+0x236>
 8007542:	1c69      	adds	r1, r5, #1
 8007544:	4401      	add	r1, r0
 8007546:	4428      	add	r0, r5
 8007548:	2808      	cmp	r0, #8
 800754a:	dc16      	bgt.n	800757a <_strtod_l+0x252>
 800754c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800754e:	230a      	movs	r3, #10
 8007550:	fb03 2300 	mla	r3, r3, r0, r2
 8007554:	930a      	str	r3, [sp, #40]	@ 0x28
 8007556:	2300      	movs	r3, #0
 8007558:	e018      	b.n	800758c <_strtod_l+0x264>
 800755a:	4638      	mov	r0, r7
 800755c:	e7da      	b.n	8007514 <_strtod_l+0x1ec>
 800755e:	2b08      	cmp	r3, #8
 8007560:	f103 0301 	add.w	r3, r3, #1
 8007564:	dc03      	bgt.n	800756e <_strtod_l+0x246>
 8007566:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007568:	434e      	muls	r6, r1
 800756a:	960a      	str	r6, [sp, #40]	@ 0x28
 800756c:	e7e7      	b.n	800753e <_strtod_l+0x216>
 800756e:	2b10      	cmp	r3, #16
 8007570:	bfde      	ittt	le
 8007572:	9e08      	ldrle	r6, [sp, #32]
 8007574:	434e      	mulle	r6, r1
 8007576:	9608      	strle	r6, [sp, #32]
 8007578:	e7e1      	b.n	800753e <_strtod_l+0x216>
 800757a:	280f      	cmp	r0, #15
 800757c:	dceb      	bgt.n	8007556 <_strtod_l+0x22e>
 800757e:	9808      	ldr	r0, [sp, #32]
 8007580:	230a      	movs	r3, #10
 8007582:	fb03 2300 	mla	r3, r3, r0, r2
 8007586:	9308      	str	r3, [sp, #32]
 8007588:	e7e5      	b.n	8007556 <_strtod_l+0x22e>
 800758a:	4629      	mov	r1, r5
 800758c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800758e:	1c50      	adds	r0, r2, #1
 8007590:	9019      	str	r0, [sp, #100]	@ 0x64
 8007592:	7852      	ldrb	r2, [r2, #1]
 8007594:	4618      	mov	r0, r3
 8007596:	460d      	mov	r5, r1
 8007598:	e7b1      	b.n	80074fe <_strtod_l+0x1d6>
 800759a:	f04f 0900 	mov.w	r9, #0
 800759e:	2301      	movs	r3, #1
 80075a0:	e77d      	b.n	800749e <_strtod_l+0x176>
 80075a2:	f04f 0c00 	mov.w	ip, #0
 80075a6:	1ca2      	adds	r2, r4, #2
 80075a8:	9219      	str	r2, [sp, #100]	@ 0x64
 80075aa:	78a2      	ldrb	r2, [r4, #2]
 80075ac:	e785      	b.n	80074ba <_strtod_l+0x192>
 80075ae:	f04f 0c01 	mov.w	ip, #1
 80075b2:	e7f8      	b.n	80075a6 <_strtod_l+0x27e>
 80075b4:	0800cb88 	.word	0x0800cb88
 80075b8:	0800cb70 	.word	0x0800cb70
 80075bc:	7ff00000 	.word	0x7ff00000
 80075c0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80075c2:	1c51      	adds	r1, r2, #1
 80075c4:	9119      	str	r1, [sp, #100]	@ 0x64
 80075c6:	7852      	ldrb	r2, [r2, #1]
 80075c8:	2a30      	cmp	r2, #48	@ 0x30
 80075ca:	d0f9      	beq.n	80075c0 <_strtod_l+0x298>
 80075cc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80075d0:	2908      	cmp	r1, #8
 80075d2:	f63f af78 	bhi.w	80074c6 <_strtod_l+0x19e>
 80075d6:	3a30      	subs	r2, #48	@ 0x30
 80075d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80075da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80075dc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80075de:	f04f 080a 	mov.w	r8, #10
 80075e2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80075e4:	1c56      	adds	r6, r2, #1
 80075e6:	9619      	str	r6, [sp, #100]	@ 0x64
 80075e8:	7852      	ldrb	r2, [r2, #1]
 80075ea:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80075ee:	f1be 0f09 	cmp.w	lr, #9
 80075f2:	d939      	bls.n	8007668 <_strtod_l+0x340>
 80075f4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80075f6:	1a76      	subs	r6, r6, r1
 80075f8:	2e08      	cmp	r6, #8
 80075fa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80075fe:	dc03      	bgt.n	8007608 <_strtod_l+0x2e0>
 8007600:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007602:	4588      	cmp	r8, r1
 8007604:	bfa8      	it	ge
 8007606:	4688      	movge	r8, r1
 8007608:	f1bc 0f00 	cmp.w	ip, #0
 800760c:	d001      	beq.n	8007612 <_strtod_l+0x2ea>
 800760e:	f1c8 0800 	rsb	r8, r8, #0
 8007612:	2d00      	cmp	r5, #0
 8007614:	d14e      	bne.n	80076b4 <_strtod_l+0x38c>
 8007616:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007618:	4308      	orrs	r0, r1
 800761a:	f47f aebe 	bne.w	800739a <_strtod_l+0x72>
 800761e:	2b00      	cmp	r3, #0
 8007620:	f47f aed6 	bne.w	80073d0 <_strtod_l+0xa8>
 8007624:	2a69      	cmp	r2, #105	@ 0x69
 8007626:	d028      	beq.n	800767a <_strtod_l+0x352>
 8007628:	dc25      	bgt.n	8007676 <_strtod_l+0x34e>
 800762a:	2a49      	cmp	r2, #73	@ 0x49
 800762c:	d025      	beq.n	800767a <_strtod_l+0x352>
 800762e:	2a4e      	cmp	r2, #78	@ 0x4e
 8007630:	f47f aece 	bne.w	80073d0 <_strtod_l+0xa8>
 8007634:	499b      	ldr	r1, [pc, #620]	@ (80078a4 <_strtod_l+0x57c>)
 8007636:	a819      	add	r0, sp, #100	@ 0x64
 8007638:	f001 f9c6 	bl	80089c8 <__match>
 800763c:	2800      	cmp	r0, #0
 800763e:	f43f aec7 	beq.w	80073d0 <_strtod_l+0xa8>
 8007642:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	2b28      	cmp	r3, #40	@ 0x28
 8007648:	d12e      	bne.n	80076a8 <_strtod_l+0x380>
 800764a:	4997      	ldr	r1, [pc, #604]	@ (80078a8 <_strtod_l+0x580>)
 800764c:	aa1c      	add	r2, sp, #112	@ 0x70
 800764e:	a819      	add	r0, sp, #100	@ 0x64
 8007650:	f001 f9ce 	bl	80089f0 <__hexnan>
 8007654:	2805      	cmp	r0, #5
 8007656:	d127      	bne.n	80076a8 <_strtod_l+0x380>
 8007658:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800765a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800765e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007662:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007666:	e698      	b.n	800739a <_strtod_l+0x72>
 8007668:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800766a:	fb08 2101 	mla	r1, r8, r1, r2
 800766e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007672:	920e      	str	r2, [sp, #56]	@ 0x38
 8007674:	e7b5      	b.n	80075e2 <_strtod_l+0x2ba>
 8007676:	2a6e      	cmp	r2, #110	@ 0x6e
 8007678:	e7da      	b.n	8007630 <_strtod_l+0x308>
 800767a:	498c      	ldr	r1, [pc, #560]	@ (80078ac <_strtod_l+0x584>)
 800767c:	a819      	add	r0, sp, #100	@ 0x64
 800767e:	f001 f9a3 	bl	80089c8 <__match>
 8007682:	2800      	cmp	r0, #0
 8007684:	f43f aea4 	beq.w	80073d0 <_strtod_l+0xa8>
 8007688:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800768a:	4989      	ldr	r1, [pc, #548]	@ (80078b0 <_strtod_l+0x588>)
 800768c:	3b01      	subs	r3, #1
 800768e:	a819      	add	r0, sp, #100	@ 0x64
 8007690:	9319      	str	r3, [sp, #100]	@ 0x64
 8007692:	f001 f999 	bl	80089c8 <__match>
 8007696:	b910      	cbnz	r0, 800769e <_strtod_l+0x376>
 8007698:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800769a:	3301      	adds	r3, #1
 800769c:	9319      	str	r3, [sp, #100]	@ 0x64
 800769e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80078c0 <_strtod_l+0x598>
 80076a2:	f04f 0a00 	mov.w	sl, #0
 80076a6:	e678      	b.n	800739a <_strtod_l+0x72>
 80076a8:	4882      	ldr	r0, [pc, #520]	@ (80078b4 <_strtod_l+0x58c>)
 80076aa:	f000 fec9 	bl	8008440 <nan>
 80076ae:	ec5b ab10 	vmov	sl, fp, d0
 80076b2:	e672      	b.n	800739a <_strtod_l+0x72>
 80076b4:	eba8 0309 	sub.w	r3, r8, r9
 80076b8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80076ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80076bc:	2f00      	cmp	r7, #0
 80076be:	bf08      	it	eq
 80076c0:	462f      	moveq	r7, r5
 80076c2:	2d10      	cmp	r5, #16
 80076c4:	462c      	mov	r4, r5
 80076c6:	bfa8      	it	ge
 80076c8:	2410      	movge	r4, #16
 80076ca:	f7f8 ff1b 	bl	8000504 <__aeabi_ui2d>
 80076ce:	2d09      	cmp	r5, #9
 80076d0:	4682      	mov	sl, r0
 80076d2:	468b      	mov	fp, r1
 80076d4:	dc13      	bgt.n	80076fe <_strtod_l+0x3d6>
 80076d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076d8:	2b00      	cmp	r3, #0
 80076da:	f43f ae5e 	beq.w	800739a <_strtod_l+0x72>
 80076de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076e0:	dd78      	ble.n	80077d4 <_strtod_l+0x4ac>
 80076e2:	2b16      	cmp	r3, #22
 80076e4:	dc5f      	bgt.n	80077a6 <_strtod_l+0x47e>
 80076e6:	4974      	ldr	r1, [pc, #464]	@ (80078b8 <_strtod_l+0x590>)
 80076e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80076ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076f0:	4652      	mov	r2, sl
 80076f2:	465b      	mov	r3, fp
 80076f4:	f7f8 ff80 	bl	80005f8 <__aeabi_dmul>
 80076f8:	4682      	mov	sl, r0
 80076fa:	468b      	mov	fp, r1
 80076fc:	e64d      	b.n	800739a <_strtod_l+0x72>
 80076fe:	4b6e      	ldr	r3, [pc, #440]	@ (80078b8 <_strtod_l+0x590>)
 8007700:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007704:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007708:	f7f8 ff76 	bl	80005f8 <__aeabi_dmul>
 800770c:	4682      	mov	sl, r0
 800770e:	9808      	ldr	r0, [sp, #32]
 8007710:	468b      	mov	fp, r1
 8007712:	f7f8 fef7 	bl	8000504 <__aeabi_ui2d>
 8007716:	4602      	mov	r2, r0
 8007718:	460b      	mov	r3, r1
 800771a:	4650      	mov	r0, sl
 800771c:	4659      	mov	r1, fp
 800771e:	f7f8 fdb5 	bl	800028c <__adddf3>
 8007722:	2d0f      	cmp	r5, #15
 8007724:	4682      	mov	sl, r0
 8007726:	468b      	mov	fp, r1
 8007728:	ddd5      	ble.n	80076d6 <_strtod_l+0x3ae>
 800772a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800772c:	1b2c      	subs	r4, r5, r4
 800772e:	441c      	add	r4, r3
 8007730:	2c00      	cmp	r4, #0
 8007732:	f340 8096 	ble.w	8007862 <_strtod_l+0x53a>
 8007736:	f014 030f 	ands.w	r3, r4, #15
 800773a:	d00a      	beq.n	8007752 <_strtod_l+0x42a>
 800773c:	495e      	ldr	r1, [pc, #376]	@ (80078b8 <_strtod_l+0x590>)
 800773e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007742:	4652      	mov	r2, sl
 8007744:	465b      	mov	r3, fp
 8007746:	e9d1 0100 	ldrd	r0, r1, [r1]
 800774a:	f7f8 ff55 	bl	80005f8 <__aeabi_dmul>
 800774e:	4682      	mov	sl, r0
 8007750:	468b      	mov	fp, r1
 8007752:	f034 040f 	bics.w	r4, r4, #15
 8007756:	d073      	beq.n	8007840 <_strtod_l+0x518>
 8007758:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800775c:	dd48      	ble.n	80077f0 <_strtod_l+0x4c8>
 800775e:	2400      	movs	r4, #0
 8007760:	46a0      	mov	r8, r4
 8007762:	940a      	str	r4, [sp, #40]	@ 0x28
 8007764:	46a1      	mov	r9, r4
 8007766:	9a05      	ldr	r2, [sp, #20]
 8007768:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80078c0 <_strtod_l+0x598>
 800776c:	2322      	movs	r3, #34	@ 0x22
 800776e:	6013      	str	r3, [r2, #0]
 8007770:	f04f 0a00 	mov.w	sl, #0
 8007774:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007776:	2b00      	cmp	r3, #0
 8007778:	f43f ae0f 	beq.w	800739a <_strtod_l+0x72>
 800777c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800777e:	9805      	ldr	r0, [sp, #20]
 8007780:	f7ff f942 	bl	8006a08 <_Bfree>
 8007784:	9805      	ldr	r0, [sp, #20]
 8007786:	4649      	mov	r1, r9
 8007788:	f7ff f93e 	bl	8006a08 <_Bfree>
 800778c:	9805      	ldr	r0, [sp, #20]
 800778e:	4641      	mov	r1, r8
 8007790:	f7ff f93a 	bl	8006a08 <_Bfree>
 8007794:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007796:	9805      	ldr	r0, [sp, #20]
 8007798:	f7ff f936 	bl	8006a08 <_Bfree>
 800779c:	9805      	ldr	r0, [sp, #20]
 800779e:	4621      	mov	r1, r4
 80077a0:	f7ff f932 	bl	8006a08 <_Bfree>
 80077a4:	e5f9      	b.n	800739a <_strtod_l+0x72>
 80077a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077a8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80077ac:	4293      	cmp	r3, r2
 80077ae:	dbbc      	blt.n	800772a <_strtod_l+0x402>
 80077b0:	4c41      	ldr	r4, [pc, #260]	@ (80078b8 <_strtod_l+0x590>)
 80077b2:	f1c5 050f 	rsb	r5, r5, #15
 80077b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80077ba:	4652      	mov	r2, sl
 80077bc:	465b      	mov	r3, fp
 80077be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077c2:	f7f8 ff19 	bl	80005f8 <__aeabi_dmul>
 80077c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077c8:	1b5d      	subs	r5, r3, r5
 80077ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80077ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80077d2:	e78f      	b.n	80076f4 <_strtod_l+0x3cc>
 80077d4:	3316      	adds	r3, #22
 80077d6:	dba8      	blt.n	800772a <_strtod_l+0x402>
 80077d8:	4b37      	ldr	r3, [pc, #220]	@ (80078b8 <_strtod_l+0x590>)
 80077da:	eba9 0808 	sub.w	r8, r9, r8
 80077de:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80077e2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80077e6:	4650      	mov	r0, sl
 80077e8:	4659      	mov	r1, fp
 80077ea:	f7f9 f82f 	bl	800084c <__aeabi_ddiv>
 80077ee:	e783      	b.n	80076f8 <_strtod_l+0x3d0>
 80077f0:	4b32      	ldr	r3, [pc, #200]	@ (80078bc <_strtod_l+0x594>)
 80077f2:	9308      	str	r3, [sp, #32]
 80077f4:	2300      	movs	r3, #0
 80077f6:	1124      	asrs	r4, r4, #4
 80077f8:	4650      	mov	r0, sl
 80077fa:	4659      	mov	r1, fp
 80077fc:	461e      	mov	r6, r3
 80077fe:	2c01      	cmp	r4, #1
 8007800:	dc21      	bgt.n	8007846 <_strtod_l+0x51e>
 8007802:	b10b      	cbz	r3, 8007808 <_strtod_l+0x4e0>
 8007804:	4682      	mov	sl, r0
 8007806:	468b      	mov	fp, r1
 8007808:	492c      	ldr	r1, [pc, #176]	@ (80078bc <_strtod_l+0x594>)
 800780a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800780e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007812:	4652      	mov	r2, sl
 8007814:	465b      	mov	r3, fp
 8007816:	e9d1 0100 	ldrd	r0, r1, [r1]
 800781a:	f7f8 feed 	bl	80005f8 <__aeabi_dmul>
 800781e:	4b28      	ldr	r3, [pc, #160]	@ (80078c0 <_strtod_l+0x598>)
 8007820:	460a      	mov	r2, r1
 8007822:	400b      	ands	r3, r1
 8007824:	4927      	ldr	r1, [pc, #156]	@ (80078c4 <_strtod_l+0x59c>)
 8007826:	428b      	cmp	r3, r1
 8007828:	4682      	mov	sl, r0
 800782a:	d898      	bhi.n	800775e <_strtod_l+0x436>
 800782c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007830:	428b      	cmp	r3, r1
 8007832:	bf86      	itte	hi
 8007834:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80078c8 <_strtod_l+0x5a0>
 8007838:	f04f 3aff 	movhi.w	sl, #4294967295
 800783c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007840:	2300      	movs	r3, #0
 8007842:	9308      	str	r3, [sp, #32]
 8007844:	e07a      	b.n	800793c <_strtod_l+0x614>
 8007846:	07e2      	lsls	r2, r4, #31
 8007848:	d505      	bpl.n	8007856 <_strtod_l+0x52e>
 800784a:	9b08      	ldr	r3, [sp, #32]
 800784c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007850:	f7f8 fed2 	bl	80005f8 <__aeabi_dmul>
 8007854:	2301      	movs	r3, #1
 8007856:	9a08      	ldr	r2, [sp, #32]
 8007858:	3208      	adds	r2, #8
 800785a:	3601      	adds	r6, #1
 800785c:	1064      	asrs	r4, r4, #1
 800785e:	9208      	str	r2, [sp, #32]
 8007860:	e7cd      	b.n	80077fe <_strtod_l+0x4d6>
 8007862:	d0ed      	beq.n	8007840 <_strtod_l+0x518>
 8007864:	4264      	negs	r4, r4
 8007866:	f014 020f 	ands.w	r2, r4, #15
 800786a:	d00a      	beq.n	8007882 <_strtod_l+0x55a>
 800786c:	4b12      	ldr	r3, [pc, #72]	@ (80078b8 <_strtod_l+0x590>)
 800786e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007872:	4650      	mov	r0, sl
 8007874:	4659      	mov	r1, fp
 8007876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787a:	f7f8 ffe7 	bl	800084c <__aeabi_ddiv>
 800787e:	4682      	mov	sl, r0
 8007880:	468b      	mov	fp, r1
 8007882:	1124      	asrs	r4, r4, #4
 8007884:	d0dc      	beq.n	8007840 <_strtod_l+0x518>
 8007886:	2c1f      	cmp	r4, #31
 8007888:	dd20      	ble.n	80078cc <_strtod_l+0x5a4>
 800788a:	2400      	movs	r4, #0
 800788c:	46a0      	mov	r8, r4
 800788e:	940a      	str	r4, [sp, #40]	@ 0x28
 8007890:	46a1      	mov	r9, r4
 8007892:	9a05      	ldr	r2, [sp, #20]
 8007894:	2322      	movs	r3, #34	@ 0x22
 8007896:	f04f 0a00 	mov.w	sl, #0
 800789a:	f04f 0b00 	mov.w	fp, #0
 800789e:	6013      	str	r3, [r2, #0]
 80078a0:	e768      	b.n	8007774 <_strtod_l+0x44c>
 80078a2:	bf00      	nop
 80078a4:	0800c961 	.word	0x0800c961
 80078a8:	0800cb74 	.word	0x0800cb74
 80078ac:	0800c959 	.word	0x0800c959
 80078b0:	0800c990 	.word	0x0800c990
 80078b4:	0800cd1d 	.word	0x0800cd1d
 80078b8:	0800caa8 	.word	0x0800caa8
 80078bc:	0800ca80 	.word	0x0800ca80
 80078c0:	7ff00000 	.word	0x7ff00000
 80078c4:	7ca00000 	.word	0x7ca00000
 80078c8:	7fefffff 	.word	0x7fefffff
 80078cc:	f014 0310 	ands.w	r3, r4, #16
 80078d0:	bf18      	it	ne
 80078d2:	236a      	movne	r3, #106	@ 0x6a
 80078d4:	4ea9      	ldr	r6, [pc, #676]	@ (8007b7c <_strtod_l+0x854>)
 80078d6:	9308      	str	r3, [sp, #32]
 80078d8:	4650      	mov	r0, sl
 80078da:	4659      	mov	r1, fp
 80078dc:	2300      	movs	r3, #0
 80078de:	07e2      	lsls	r2, r4, #31
 80078e0:	d504      	bpl.n	80078ec <_strtod_l+0x5c4>
 80078e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80078e6:	f7f8 fe87 	bl	80005f8 <__aeabi_dmul>
 80078ea:	2301      	movs	r3, #1
 80078ec:	1064      	asrs	r4, r4, #1
 80078ee:	f106 0608 	add.w	r6, r6, #8
 80078f2:	d1f4      	bne.n	80078de <_strtod_l+0x5b6>
 80078f4:	b10b      	cbz	r3, 80078fa <_strtod_l+0x5d2>
 80078f6:	4682      	mov	sl, r0
 80078f8:	468b      	mov	fp, r1
 80078fa:	9b08      	ldr	r3, [sp, #32]
 80078fc:	b1b3      	cbz	r3, 800792c <_strtod_l+0x604>
 80078fe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007902:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007906:	2b00      	cmp	r3, #0
 8007908:	4659      	mov	r1, fp
 800790a:	dd0f      	ble.n	800792c <_strtod_l+0x604>
 800790c:	2b1f      	cmp	r3, #31
 800790e:	dd55      	ble.n	80079bc <_strtod_l+0x694>
 8007910:	2b34      	cmp	r3, #52	@ 0x34
 8007912:	bfde      	ittt	le
 8007914:	f04f 33ff 	movle.w	r3, #4294967295
 8007918:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800791c:	4093      	lslle	r3, r2
 800791e:	f04f 0a00 	mov.w	sl, #0
 8007922:	bfcc      	ite	gt
 8007924:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007928:	ea03 0b01 	andle.w	fp, r3, r1
 800792c:	2200      	movs	r2, #0
 800792e:	2300      	movs	r3, #0
 8007930:	4650      	mov	r0, sl
 8007932:	4659      	mov	r1, fp
 8007934:	f7f9 f8c8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007938:	2800      	cmp	r0, #0
 800793a:	d1a6      	bne.n	800788a <_strtod_l+0x562>
 800793c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800793e:	9300      	str	r3, [sp, #0]
 8007940:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007942:	9805      	ldr	r0, [sp, #20]
 8007944:	462b      	mov	r3, r5
 8007946:	463a      	mov	r2, r7
 8007948:	f7ff f8c6 	bl	8006ad8 <__s2b>
 800794c:	900a      	str	r0, [sp, #40]	@ 0x28
 800794e:	2800      	cmp	r0, #0
 8007950:	f43f af05 	beq.w	800775e <_strtod_l+0x436>
 8007954:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007956:	2a00      	cmp	r2, #0
 8007958:	eba9 0308 	sub.w	r3, r9, r8
 800795c:	bfa8      	it	ge
 800795e:	2300      	movge	r3, #0
 8007960:	9312      	str	r3, [sp, #72]	@ 0x48
 8007962:	2400      	movs	r4, #0
 8007964:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007968:	9316      	str	r3, [sp, #88]	@ 0x58
 800796a:	46a0      	mov	r8, r4
 800796c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800796e:	9805      	ldr	r0, [sp, #20]
 8007970:	6859      	ldr	r1, [r3, #4]
 8007972:	f7ff f809 	bl	8006988 <_Balloc>
 8007976:	4681      	mov	r9, r0
 8007978:	2800      	cmp	r0, #0
 800797a:	f43f aef4 	beq.w	8007766 <_strtod_l+0x43e>
 800797e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007980:	691a      	ldr	r2, [r3, #16]
 8007982:	3202      	adds	r2, #2
 8007984:	f103 010c 	add.w	r1, r3, #12
 8007988:	0092      	lsls	r2, r2, #2
 800798a:	300c      	adds	r0, #12
 800798c:	f7fe f89b 	bl	8005ac6 <memcpy>
 8007990:	ec4b ab10 	vmov	d0, sl, fp
 8007994:	9805      	ldr	r0, [sp, #20]
 8007996:	aa1c      	add	r2, sp, #112	@ 0x70
 8007998:	a91b      	add	r1, sp, #108	@ 0x6c
 800799a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800799e:	f7ff fbd7 	bl	8007150 <__d2b>
 80079a2:	901a      	str	r0, [sp, #104]	@ 0x68
 80079a4:	2800      	cmp	r0, #0
 80079a6:	f43f aede 	beq.w	8007766 <_strtod_l+0x43e>
 80079aa:	9805      	ldr	r0, [sp, #20]
 80079ac:	2101      	movs	r1, #1
 80079ae:	f7ff f929 	bl	8006c04 <__i2b>
 80079b2:	4680      	mov	r8, r0
 80079b4:	b948      	cbnz	r0, 80079ca <_strtod_l+0x6a2>
 80079b6:	f04f 0800 	mov.w	r8, #0
 80079ba:	e6d4      	b.n	8007766 <_strtod_l+0x43e>
 80079bc:	f04f 32ff 	mov.w	r2, #4294967295
 80079c0:	fa02 f303 	lsl.w	r3, r2, r3
 80079c4:	ea03 0a0a 	and.w	sl, r3, sl
 80079c8:	e7b0      	b.n	800792c <_strtod_l+0x604>
 80079ca:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80079cc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80079ce:	2d00      	cmp	r5, #0
 80079d0:	bfab      	itete	ge
 80079d2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80079d4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80079d6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80079d8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80079da:	bfac      	ite	ge
 80079dc:	18ef      	addge	r7, r5, r3
 80079de:	1b5e      	sublt	r6, r3, r5
 80079e0:	9b08      	ldr	r3, [sp, #32]
 80079e2:	1aed      	subs	r5, r5, r3
 80079e4:	4415      	add	r5, r2
 80079e6:	4b66      	ldr	r3, [pc, #408]	@ (8007b80 <_strtod_l+0x858>)
 80079e8:	3d01      	subs	r5, #1
 80079ea:	429d      	cmp	r5, r3
 80079ec:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80079f0:	da50      	bge.n	8007a94 <_strtod_l+0x76c>
 80079f2:	1b5b      	subs	r3, r3, r5
 80079f4:	2b1f      	cmp	r3, #31
 80079f6:	eba2 0203 	sub.w	r2, r2, r3
 80079fa:	f04f 0101 	mov.w	r1, #1
 80079fe:	dc3d      	bgt.n	8007a7c <_strtod_l+0x754>
 8007a00:	fa01 f303 	lsl.w	r3, r1, r3
 8007a04:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007a06:	2300      	movs	r3, #0
 8007a08:	9310      	str	r3, [sp, #64]	@ 0x40
 8007a0a:	18bd      	adds	r5, r7, r2
 8007a0c:	9b08      	ldr	r3, [sp, #32]
 8007a0e:	42af      	cmp	r7, r5
 8007a10:	4416      	add	r6, r2
 8007a12:	441e      	add	r6, r3
 8007a14:	463b      	mov	r3, r7
 8007a16:	bfa8      	it	ge
 8007a18:	462b      	movge	r3, r5
 8007a1a:	42b3      	cmp	r3, r6
 8007a1c:	bfa8      	it	ge
 8007a1e:	4633      	movge	r3, r6
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	bfc2      	ittt	gt
 8007a24:	1aed      	subgt	r5, r5, r3
 8007a26:	1af6      	subgt	r6, r6, r3
 8007a28:	1aff      	subgt	r7, r7, r3
 8007a2a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	dd16      	ble.n	8007a5e <_strtod_l+0x736>
 8007a30:	4641      	mov	r1, r8
 8007a32:	9805      	ldr	r0, [sp, #20]
 8007a34:	461a      	mov	r2, r3
 8007a36:	f7ff f9a5 	bl	8006d84 <__pow5mult>
 8007a3a:	4680      	mov	r8, r0
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	d0ba      	beq.n	80079b6 <_strtod_l+0x68e>
 8007a40:	4601      	mov	r1, r0
 8007a42:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007a44:	9805      	ldr	r0, [sp, #20]
 8007a46:	f7ff f8f3 	bl	8006c30 <__multiply>
 8007a4a:	900e      	str	r0, [sp, #56]	@ 0x38
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	f43f ae8a 	beq.w	8007766 <_strtod_l+0x43e>
 8007a52:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007a54:	9805      	ldr	r0, [sp, #20]
 8007a56:	f7fe ffd7 	bl	8006a08 <_Bfree>
 8007a5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a5c:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a5e:	2d00      	cmp	r5, #0
 8007a60:	dc1d      	bgt.n	8007a9e <_strtod_l+0x776>
 8007a62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	dd23      	ble.n	8007ab0 <_strtod_l+0x788>
 8007a68:	4649      	mov	r1, r9
 8007a6a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007a6c:	9805      	ldr	r0, [sp, #20]
 8007a6e:	f7ff f989 	bl	8006d84 <__pow5mult>
 8007a72:	4681      	mov	r9, r0
 8007a74:	b9e0      	cbnz	r0, 8007ab0 <_strtod_l+0x788>
 8007a76:	f04f 0900 	mov.w	r9, #0
 8007a7a:	e674      	b.n	8007766 <_strtod_l+0x43e>
 8007a7c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007a80:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007a84:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007a88:	35e2      	adds	r5, #226	@ 0xe2
 8007a8a:	fa01 f305 	lsl.w	r3, r1, r5
 8007a8e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007a90:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007a92:	e7ba      	b.n	8007a0a <_strtod_l+0x6e2>
 8007a94:	2300      	movs	r3, #0
 8007a96:	9310      	str	r3, [sp, #64]	@ 0x40
 8007a98:	2301      	movs	r3, #1
 8007a9a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007a9c:	e7b5      	b.n	8007a0a <_strtod_l+0x6e2>
 8007a9e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007aa0:	9805      	ldr	r0, [sp, #20]
 8007aa2:	462a      	mov	r2, r5
 8007aa4:	f7ff f9c8 	bl	8006e38 <__lshift>
 8007aa8:	901a      	str	r0, [sp, #104]	@ 0x68
 8007aaa:	2800      	cmp	r0, #0
 8007aac:	d1d9      	bne.n	8007a62 <_strtod_l+0x73a>
 8007aae:	e65a      	b.n	8007766 <_strtod_l+0x43e>
 8007ab0:	2e00      	cmp	r6, #0
 8007ab2:	dd07      	ble.n	8007ac4 <_strtod_l+0x79c>
 8007ab4:	4649      	mov	r1, r9
 8007ab6:	9805      	ldr	r0, [sp, #20]
 8007ab8:	4632      	mov	r2, r6
 8007aba:	f7ff f9bd 	bl	8006e38 <__lshift>
 8007abe:	4681      	mov	r9, r0
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	d0d8      	beq.n	8007a76 <_strtod_l+0x74e>
 8007ac4:	2f00      	cmp	r7, #0
 8007ac6:	dd08      	ble.n	8007ada <_strtod_l+0x7b2>
 8007ac8:	4641      	mov	r1, r8
 8007aca:	9805      	ldr	r0, [sp, #20]
 8007acc:	463a      	mov	r2, r7
 8007ace:	f7ff f9b3 	bl	8006e38 <__lshift>
 8007ad2:	4680      	mov	r8, r0
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	f43f ae46 	beq.w	8007766 <_strtod_l+0x43e>
 8007ada:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007adc:	9805      	ldr	r0, [sp, #20]
 8007ade:	464a      	mov	r2, r9
 8007ae0:	f7ff fa32 	bl	8006f48 <__mdiff>
 8007ae4:	4604      	mov	r4, r0
 8007ae6:	2800      	cmp	r0, #0
 8007ae8:	f43f ae3d 	beq.w	8007766 <_strtod_l+0x43e>
 8007aec:	68c3      	ldr	r3, [r0, #12]
 8007aee:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007af0:	2300      	movs	r3, #0
 8007af2:	60c3      	str	r3, [r0, #12]
 8007af4:	4641      	mov	r1, r8
 8007af6:	f7ff fa0b 	bl	8006f10 <__mcmp>
 8007afa:	2800      	cmp	r0, #0
 8007afc:	da46      	bge.n	8007b8c <_strtod_l+0x864>
 8007afe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b00:	ea53 030a 	orrs.w	r3, r3, sl
 8007b04:	d16c      	bne.n	8007be0 <_strtod_l+0x8b8>
 8007b06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d168      	bne.n	8007be0 <_strtod_l+0x8b8>
 8007b0e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007b12:	0d1b      	lsrs	r3, r3, #20
 8007b14:	051b      	lsls	r3, r3, #20
 8007b16:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007b1a:	d961      	bls.n	8007be0 <_strtod_l+0x8b8>
 8007b1c:	6963      	ldr	r3, [r4, #20]
 8007b1e:	b913      	cbnz	r3, 8007b26 <_strtod_l+0x7fe>
 8007b20:	6923      	ldr	r3, [r4, #16]
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	dd5c      	ble.n	8007be0 <_strtod_l+0x8b8>
 8007b26:	4621      	mov	r1, r4
 8007b28:	2201      	movs	r2, #1
 8007b2a:	9805      	ldr	r0, [sp, #20]
 8007b2c:	f7ff f984 	bl	8006e38 <__lshift>
 8007b30:	4641      	mov	r1, r8
 8007b32:	4604      	mov	r4, r0
 8007b34:	f7ff f9ec 	bl	8006f10 <__mcmp>
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	dd51      	ble.n	8007be0 <_strtod_l+0x8b8>
 8007b3c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007b40:	9a08      	ldr	r2, [sp, #32]
 8007b42:	0d1b      	lsrs	r3, r3, #20
 8007b44:	051b      	lsls	r3, r3, #20
 8007b46:	2a00      	cmp	r2, #0
 8007b48:	d06b      	beq.n	8007c22 <_strtod_l+0x8fa>
 8007b4a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007b4e:	d868      	bhi.n	8007c22 <_strtod_l+0x8fa>
 8007b50:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007b54:	f67f ae9d 	bls.w	8007892 <_strtod_l+0x56a>
 8007b58:	4b0a      	ldr	r3, [pc, #40]	@ (8007b84 <_strtod_l+0x85c>)
 8007b5a:	4650      	mov	r0, sl
 8007b5c:	4659      	mov	r1, fp
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f7f8 fd4a 	bl	80005f8 <__aeabi_dmul>
 8007b64:	4b08      	ldr	r3, [pc, #32]	@ (8007b88 <_strtod_l+0x860>)
 8007b66:	400b      	ands	r3, r1
 8007b68:	4682      	mov	sl, r0
 8007b6a:	468b      	mov	fp, r1
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f47f ae05 	bne.w	800777c <_strtod_l+0x454>
 8007b72:	9a05      	ldr	r2, [sp, #20]
 8007b74:	2322      	movs	r3, #34	@ 0x22
 8007b76:	6013      	str	r3, [r2, #0]
 8007b78:	e600      	b.n	800777c <_strtod_l+0x454>
 8007b7a:	bf00      	nop
 8007b7c:	0800cba0 	.word	0x0800cba0
 8007b80:	fffffc02 	.word	0xfffffc02
 8007b84:	39500000 	.word	0x39500000
 8007b88:	7ff00000 	.word	0x7ff00000
 8007b8c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007b90:	d165      	bne.n	8007c5e <_strtod_l+0x936>
 8007b92:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007b94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b98:	b35a      	cbz	r2, 8007bf2 <_strtod_l+0x8ca>
 8007b9a:	4a9f      	ldr	r2, [pc, #636]	@ (8007e18 <_strtod_l+0xaf0>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d12b      	bne.n	8007bf8 <_strtod_l+0x8d0>
 8007ba0:	9b08      	ldr	r3, [sp, #32]
 8007ba2:	4651      	mov	r1, sl
 8007ba4:	b303      	cbz	r3, 8007be8 <_strtod_l+0x8c0>
 8007ba6:	4b9d      	ldr	r3, [pc, #628]	@ (8007e1c <_strtod_l+0xaf4>)
 8007ba8:	465a      	mov	r2, fp
 8007baa:	4013      	ands	r3, r2
 8007bac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8007bb4:	d81b      	bhi.n	8007bee <_strtod_l+0x8c6>
 8007bb6:	0d1b      	lsrs	r3, r3, #20
 8007bb8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc0:	4299      	cmp	r1, r3
 8007bc2:	d119      	bne.n	8007bf8 <_strtod_l+0x8d0>
 8007bc4:	4b96      	ldr	r3, [pc, #600]	@ (8007e20 <_strtod_l+0xaf8>)
 8007bc6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d102      	bne.n	8007bd2 <_strtod_l+0x8aa>
 8007bcc:	3101      	adds	r1, #1
 8007bce:	f43f adca 	beq.w	8007766 <_strtod_l+0x43e>
 8007bd2:	4b92      	ldr	r3, [pc, #584]	@ (8007e1c <_strtod_l+0xaf4>)
 8007bd4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007bd6:	401a      	ands	r2, r3
 8007bd8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007bdc:	f04f 0a00 	mov.w	sl, #0
 8007be0:	9b08      	ldr	r3, [sp, #32]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1b8      	bne.n	8007b58 <_strtod_l+0x830>
 8007be6:	e5c9      	b.n	800777c <_strtod_l+0x454>
 8007be8:	f04f 33ff 	mov.w	r3, #4294967295
 8007bec:	e7e8      	b.n	8007bc0 <_strtod_l+0x898>
 8007bee:	4613      	mov	r3, r2
 8007bf0:	e7e6      	b.n	8007bc0 <_strtod_l+0x898>
 8007bf2:	ea53 030a 	orrs.w	r3, r3, sl
 8007bf6:	d0a1      	beq.n	8007b3c <_strtod_l+0x814>
 8007bf8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007bfa:	b1db      	cbz	r3, 8007c34 <_strtod_l+0x90c>
 8007bfc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007bfe:	4213      	tst	r3, r2
 8007c00:	d0ee      	beq.n	8007be0 <_strtod_l+0x8b8>
 8007c02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c04:	9a08      	ldr	r2, [sp, #32]
 8007c06:	4650      	mov	r0, sl
 8007c08:	4659      	mov	r1, fp
 8007c0a:	b1bb      	cbz	r3, 8007c3c <_strtod_l+0x914>
 8007c0c:	f7ff fb6e 	bl	80072ec <sulp>
 8007c10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c14:	ec53 2b10 	vmov	r2, r3, d0
 8007c18:	f7f8 fb38 	bl	800028c <__adddf3>
 8007c1c:	4682      	mov	sl, r0
 8007c1e:	468b      	mov	fp, r1
 8007c20:	e7de      	b.n	8007be0 <_strtod_l+0x8b8>
 8007c22:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007c26:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007c2a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007c2e:	f04f 3aff 	mov.w	sl, #4294967295
 8007c32:	e7d5      	b.n	8007be0 <_strtod_l+0x8b8>
 8007c34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007c36:	ea13 0f0a 	tst.w	r3, sl
 8007c3a:	e7e1      	b.n	8007c00 <_strtod_l+0x8d8>
 8007c3c:	f7ff fb56 	bl	80072ec <sulp>
 8007c40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c44:	ec53 2b10 	vmov	r2, r3, d0
 8007c48:	f7f8 fb1e 	bl	8000288 <__aeabi_dsub>
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	2300      	movs	r3, #0
 8007c50:	4682      	mov	sl, r0
 8007c52:	468b      	mov	fp, r1
 8007c54:	f7f8 ff38 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	d0c1      	beq.n	8007be0 <_strtod_l+0x8b8>
 8007c5c:	e619      	b.n	8007892 <_strtod_l+0x56a>
 8007c5e:	4641      	mov	r1, r8
 8007c60:	4620      	mov	r0, r4
 8007c62:	f7ff facd 	bl	8007200 <__ratio>
 8007c66:	ec57 6b10 	vmov	r6, r7, d0
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007c70:	4630      	mov	r0, r6
 8007c72:	4639      	mov	r1, r7
 8007c74:	f7f8 ff3c 	bl	8000af0 <__aeabi_dcmple>
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	d06f      	beq.n	8007d5c <_strtod_l+0xa34>
 8007c7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d17a      	bne.n	8007d78 <_strtod_l+0xa50>
 8007c82:	f1ba 0f00 	cmp.w	sl, #0
 8007c86:	d158      	bne.n	8007d3a <_strtod_l+0xa12>
 8007c88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d15a      	bne.n	8007d48 <_strtod_l+0xa20>
 8007c92:	4b64      	ldr	r3, [pc, #400]	@ (8007e24 <_strtod_l+0xafc>)
 8007c94:	2200      	movs	r2, #0
 8007c96:	4630      	mov	r0, r6
 8007c98:	4639      	mov	r1, r7
 8007c9a:	f7f8 ff1f 	bl	8000adc <__aeabi_dcmplt>
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	d159      	bne.n	8007d56 <_strtod_l+0xa2e>
 8007ca2:	4630      	mov	r0, r6
 8007ca4:	4639      	mov	r1, r7
 8007ca6:	4b60      	ldr	r3, [pc, #384]	@ (8007e28 <_strtod_l+0xb00>)
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f7f8 fca5 	bl	80005f8 <__aeabi_dmul>
 8007cae:	4606      	mov	r6, r0
 8007cb0:	460f      	mov	r7, r1
 8007cb2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007cb6:	9606      	str	r6, [sp, #24]
 8007cb8:	9307      	str	r3, [sp, #28]
 8007cba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007cbe:	4d57      	ldr	r5, [pc, #348]	@ (8007e1c <_strtod_l+0xaf4>)
 8007cc0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007cc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cc6:	401d      	ands	r5, r3
 8007cc8:	4b58      	ldr	r3, [pc, #352]	@ (8007e2c <_strtod_l+0xb04>)
 8007cca:	429d      	cmp	r5, r3
 8007ccc:	f040 80b2 	bne.w	8007e34 <_strtod_l+0xb0c>
 8007cd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cd2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007cd6:	ec4b ab10 	vmov	d0, sl, fp
 8007cda:	f7ff f9c9 	bl	8007070 <__ulp>
 8007cde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ce2:	ec51 0b10 	vmov	r0, r1, d0
 8007ce6:	f7f8 fc87 	bl	80005f8 <__aeabi_dmul>
 8007cea:	4652      	mov	r2, sl
 8007cec:	465b      	mov	r3, fp
 8007cee:	f7f8 facd 	bl	800028c <__adddf3>
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	4949      	ldr	r1, [pc, #292]	@ (8007e1c <_strtod_l+0xaf4>)
 8007cf6:	4a4e      	ldr	r2, [pc, #312]	@ (8007e30 <_strtod_l+0xb08>)
 8007cf8:	4019      	ands	r1, r3
 8007cfa:	4291      	cmp	r1, r2
 8007cfc:	4682      	mov	sl, r0
 8007cfe:	d942      	bls.n	8007d86 <_strtod_l+0xa5e>
 8007d00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007d02:	4b47      	ldr	r3, [pc, #284]	@ (8007e20 <_strtod_l+0xaf8>)
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d103      	bne.n	8007d10 <_strtod_l+0x9e8>
 8007d08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	f43f ad2b 	beq.w	8007766 <_strtod_l+0x43e>
 8007d10:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007e20 <_strtod_l+0xaf8>
 8007d14:	f04f 3aff 	mov.w	sl, #4294967295
 8007d18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d1a:	9805      	ldr	r0, [sp, #20]
 8007d1c:	f7fe fe74 	bl	8006a08 <_Bfree>
 8007d20:	9805      	ldr	r0, [sp, #20]
 8007d22:	4649      	mov	r1, r9
 8007d24:	f7fe fe70 	bl	8006a08 <_Bfree>
 8007d28:	9805      	ldr	r0, [sp, #20]
 8007d2a:	4641      	mov	r1, r8
 8007d2c:	f7fe fe6c 	bl	8006a08 <_Bfree>
 8007d30:	9805      	ldr	r0, [sp, #20]
 8007d32:	4621      	mov	r1, r4
 8007d34:	f7fe fe68 	bl	8006a08 <_Bfree>
 8007d38:	e618      	b.n	800796c <_strtod_l+0x644>
 8007d3a:	f1ba 0f01 	cmp.w	sl, #1
 8007d3e:	d103      	bne.n	8007d48 <_strtod_l+0xa20>
 8007d40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	f43f ada5 	beq.w	8007892 <_strtod_l+0x56a>
 8007d48:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007df8 <_strtod_l+0xad0>
 8007d4c:	4f35      	ldr	r7, [pc, #212]	@ (8007e24 <_strtod_l+0xafc>)
 8007d4e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007d52:	2600      	movs	r6, #0
 8007d54:	e7b1      	b.n	8007cba <_strtod_l+0x992>
 8007d56:	4f34      	ldr	r7, [pc, #208]	@ (8007e28 <_strtod_l+0xb00>)
 8007d58:	2600      	movs	r6, #0
 8007d5a:	e7aa      	b.n	8007cb2 <_strtod_l+0x98a>
 8007d5c:	4b32      	ldr	r3, [pc, #200]	@ (8007e28 <_strtod_l+0xb00>)
 8007d5e:	4630      	mov	r0, r6
 8007d60:	4639      	mov	r1, r7
 8007d62:	2200      	movs	r2, #0
 8007d64:	f7f8 fc48 	bl	80005f8 <__aeabi_dmul>
 8007d68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d6a:	4606      	mov	r6, r0
 8007d6c:	460f      	mov	r7, r1
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d09f      	beq.n	8007cb2 <_strtod_l+0x98a>
 8007d72:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007d76:	e7a0      	b.n	8007cba <_strtod_l+0x992>
 8007d78:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007e00 <_strtod_l+0xad8>
 8007d7c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007d80:	ec57 6b17 	vmov	r6, r7, d7
 8007d84:	e799      	b.n	8007cba <_strtod_l+0x992>
 8007d86:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007d8a:	9b08      	ldr	r3, [sp, #32]
 8007d8c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1c1      	bne.n	8007d18 <_strtod_l+0x9f0>
 8007d94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007d98:	0d1b      	lsrs	r3, r3, #20
 8007d9a:	051b      	lsls	r3, r3, #20
 8007d9c:	429d      	cmp	r5, r3
 8007d9e:	d1bb      	bne.n	8007d18 <_strtod_l+0x9f0>
 8007da0:	4630      	mov	r0, r6
 8007da2:	4639      	mov	r1, r7
 8007da4:	f7f8 ff88 	bl	8000cb8 <__aeabi_d2lz>
 8007da8:	f7f8 fbf8 	bl	800059c <__aeabi_l2d>
 8007dac:	4602      	mov	r2, r0
 8007dae:	460b      	mov	r3, r1
 8007db0:	4630      	mov	r0, r6
 8007db2:	4639      	mov	r1, r7
 8007db4:	f7f8 fa68 	bl	8000288 <__aeabi_dsub>
 8007db8:	460b      	mov	r3, r1
 8007dba:	4602      	mov	r2, r0
 8007dbc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007dc0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007dc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dc6:	ea46 060a 	orr.w	r6, r6, sl
 8007dca:	431e      	orrs	r6, r3
 8007dcc:	d06f      	beq.n	8007eae <_strtod_l+0xb86>
 8007dce:	a30e      	add	r3, pc, #56	@ (adr r3, 8007e08 <_strtod_l+0xae0>)
 8007dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd4:	f7f8 fe82 	bl	8000adc <__aeabi_dcmplt>
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	f47f accf 	bne.w	800777c <_strtod_l+0x454>
 8007dde:	a30c      	add	r3, pc, #48	@ (adr r3, 8007e10 <_strtod_l+0xae8>)
 8007de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007de8:	f7f8 fe96 	bl	8000b18 <__aeabi_dcmpgt>
 8007dec:	2800      	cmp	r0, #0
 8007dee:	d093      	beq.n	8007d18 <_strtod_l+0x9f0>
 8007df0:	e4c4      	b.n	800777c <_strtod_l+0x454>
 8007df2:	bf00      	nop
 8007df4:	f3af 8000 	nop.w
 8007df8:	00000000 	.word	0x00000000
 8007dfc:	bff00000 	.word	0xbff00000
 8007e00:	00000000 	.word	0x00000000
 8007e04:	3ff00000 	.word	0x3ff00000
 8007e08:	94a03595 	.word	0x94a03595
 8007e0c:	3fdfffff 	.word	0x3fdfffff
 8007e10:	35afe535 	.word	0x35afe535
 8007e14:	3fe00000 	.word	0x3fe00000
 8007e18:	000fffff 	.word	0x000fffff
 8007e1c:	7ff00000 	.word	0x7ff00000
 8007e20:	7fefffff 	.word	0x7fefffff
 8007e24:	3ff00000 	.word	0x3ff00000
 8007e28:	3fe00000 	.word	0x3fe00000
 8007e2c:	7fe00000 	.word	0x7fe00000
 8007e30:	7c9fffff 	.word	0x7c9fffff
 8007e34:	9b08      	ldr	r3, [sp, #32]
 8007e36:	b323      	cbz	r3, 8007e82 <_strtod_l+0xb5a>
 8007e38:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007e3c:	d821      	bhi.n	8007e82 <_strtod_l+0xb5a>
 8007e3e:	a328      	add	r3, pc, #160	@ (adr r3, 8007ee0 <_strtod_l+0xbb8>)
 8007e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e44:	4630      	mov	r0, r6
 8007e46:	4639      	mov	r1, r7
 8007e48:	f7f8 fe52 	bl	8000af0 <__aeabi_dcmple>
 8007e4c:	b1a0      	cbz	r0, 8007e78 <_strtod_l+0xb50>
 8007e4e:	4639      	mov	r1, r7
 8007e50:	4630      	mov	r0, r6
 8007e52:	f7f8 fea9 	bl	8000ba8 <__aeabi_d2uiz>
 8007e56:	2801      	cmp	r0, #1
 8007e58:	bf38      	it	cc
 8007e5a:	2001      	movcc	r0, #1
 8007e5c:	f7f8 fb52 	bl	8000504 <__aeabi_ui2d>
 8007e60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e62:	4606      	mov	r6, r0
 8007e64:	460f      	mov	r7, r1
 8007e66:	b9fb      	cbnz	r3, 8007ea8 <_strtod_l+0xb80>
 8007e68:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007e6c:	9014      	str	r0, [sp, #80]	@ 0x50
 8007e6e:	9315      	str	r3, [sp, #84]	@ 0x54
 8007e70:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007e74:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007e78:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007e7a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007e7e:	1b5b      	subs	r3, r3, r5
 8007e80:	9311      	str	r3, [sp, #68]	@ 0x44
 8007e82:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007e86:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007e8a:	f7ff f8f1 	bl	8007070 <__ulp>
 8007e8e:	4650      	mov	r0, sl
 8007e90:	ec53 2b10 	vmov	r2, r3, d0
 8007e94:	4659      	mov	r1, fp
 8007e96:	f7f8 fbaf 	bl	80005f8 <__aeabi_dmul>
 8007e9a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007e9e:	f7f8 f9f5 	bl	800028c <__adddf3>
 8007ea2:	4682      	mov	sl, r0
 8007ea4:	468b      	mov	fp, r1
 8007ea6:	e770      	b.n	8007d8a <_strtod_l+0xa62>
 8007ea8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007eac:	e7e0      	b.n	8007e70 <_strtod_l+0xb48>
 8007eae:	a30e      	add	r3, pc, #56	@ (adr r3, 8007ee8 <_strtod_l+0xbc0>)
 8007eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb4:	f7f8 fe12 	bl	8000adc <__aeabi_dcmplt>
 8007eb8:	e798      	b.n	8007dec <_strtod_l+0xac4>
 8007eba:	2300      	movs	r3, #0
 8007ebc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ebe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007ec0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ec2:	6013      	str	r3, [r2, #0]
 8007ec4:	f7ff ba6d 	b.w	80073a2 <_strtod_l+0x7a>
 8007ec8:	2a65      	cmp	r2, #101	@ 0x65
 8007eca:	f43f ab66 	beq.w	800759a <_strtod_l+0x272>
 8007ece:	2a45      	cmp	r2, #69	@ 0x45
 8007ed0:	f43f ab63 	beq.w	800759a <_strtod_l+0x272>
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	f7ff bb9e 	b.w	8007616 <_strtod_l+0x2ee>
 8007eda:	bf00      	nop
 8007edc:	f3af 8000 	nop.w
 8007ee0:	ffc00000 	.word	0xffc00000
 8007ee4:	41dfffff 	.word	0x41dfffff
 8007ee8:	94a03595 	.word	0x94a03595
 8007eec:	3fcfffff 	.word	0x3fcfffff

08007ef0 <_strtod_r>:
 8007ef0:	4b01      	ldr	r3, [pc, #4]	@ (8007ef8 <_strtod_r+0x8>)
 8007ef2:	f7ff ba19 	b.w	8007328 <_strtod_l>
 8007ef6:	bf00      	nop
 8007ef8:	200000c8 	.word	0x200000c8

08007efc <_strtol_l.constprop.0>:
 8007efc:	2b24      	cmp	r3, #36	@ 0x24
 8007efe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f02:	4686      	mov	lr, r0
 8007f04:	4690      	mov	r8, r2
 8007f06:	d801      	bhi.n	8007f0c <_strtol_l.constprop.0+0x10>
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d106      	bne.n	8007f1a <_strtol_l.constprop.0+0x1e>
 8007f0c:	f7fd fdae 	bl	8005a6c <__errno>
 8007f10:	2316      	movs	r3, #22
 8007f12:	6003      	str	r3, [r0, #0]
 8007f14:	2000      	movs	r0, #0
 8007f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f1a:	4834      	ldr	r0, [pc, #208]	@ (8007fec <_strtol_l.constprop.0+0xf0>)
 8007f1c:	460d      	mov	r5, r1
 8007f1e:	462a      	mov	r2, r5
 8007f20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f24:	5d06      	ldrb	r6, [r0, r4]
 8007f26:	f016 0608 	ands.w	r6, r6, #8
 8007f2a:	d1f8      	bne.n	8007f1e <_strtol_l.constprop.0+0x22>
 8007f2c:	2c2d      	cmp	r4, #45	@ 0x2d
 8007f2e:	d12d      	bne.n	8007f8c <_strtol_l.constprop.0+0x90>
 8007f30:	782c      	ldrb	r4, [r5, #0]
 8007f32:	2601      	movs	r6, #1
 8007f34:	1c95      	adds	r5, r2, #2
 8007f36:	f033 0210 	bics.w	r2, r3, #16
 8007f3a:	d109      	bne.n	8007f50 <_strtol_l.constprop.0+0x54>
 8007f3c:	2c30      	cmp	r4, #48	@ 0x30
 8007f3e:	d12a      	bne.n	8007f96 <_strtol_l.constprop.0+0x9a>
 8007f40:	782a      	ldrb	r2, [r5, #0]
 8007f42:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007f46:	2a58      	cmp	r2, #88	@ 0x58
 8007f48:	d125      	bne.n	8007f96 <_strtol_l.constprop.0+0x9a>
 8007f4a:	786c      	ldrb	r4, [r5, #1]
 8007f4c:	2310      	movs	r3, #16
 8007f4e:	3502      	adds	r5, #2
 8007f50:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007f54:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007f58:	2200      	movs	r2, #0
 8007f5a:	fbbc f9f3 	udiv	r9, ip, r3
 8007f5e:	4610      	mov	r0, r2
 8007f60:	fb03 ca19 	mls	sl, r3, r9, ip
 8007f64:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007f68:	2f09      	cmp	r7, #9
 8007f6a:	d81b      	bhi.n	8007fa4 <_strtol_l.constprop.0+0xa8>
 8007f6c:	463c      	mov	r4, r7
 8007f6e:	42a3      	cmp	r3, r4
 8007f70:	dd27      	ble.n	8007fc2 <_strtol_l.constprop.0+0xc6>
 8007f72:	1c57      	adds	r7, r2, #1
 8007f74:	d007      	beq.n	8007f86 <_strtol_l.constprop.0+0x8a>
 8007f76:	4581      	cmp	r9, r0
 8007f78:	d320      	bcc.n	8007fbc <_strtol_l.constprop.0+0xc0>
 8007f7a:	d101      	bne.n	8007f80 <_strtol_l.constprop.0+0x84>
 8007f7c:	45a2      	cmp	sl, r4
 8007f7e:	db1d      	blt.n	8007fbc <_strtol_l.constprop.0+0xc0>
 8007f80:	fb00 4003 	mla	r0, r0, r3, r4
 8007f84:	2201      	movs	r2, #1
 8007f86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f8a:	e7eb      	b.n	8007f64 <_strtol_l.constprop.0+0x68>
 8007f8c:	2c2b      	cmp	r4, #43	@ 0x2b
 8007f8e:	bf04      	itt	eq
 8007f90:	782c      	ldrbeq	r4, [r5, #0]
 8007f92:	1c95      	addeq	r5, r2, #2
 8007f94:	e7cf      	b.n	8007f36 <_strtol_l.constprop.0+0x3a>
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1da      	bne.n	8007f50 <_strtol_l.constprop.0+0x54>
 8007f9a:	2c30      	cmp	r4, #48	@ 0x30
 8007f9c:	bf0c      	ite	eq
 8007f9e:	2308      	moveq	r3, #8
 8007fa0:	230a      	movne	r3, #10
 8007fa2:	e7d5      	b.n	8007f50 <_strtol_l.constprop.0+0x54>
 8007fa4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007fa8:	2f19      	cmp	r7, #25
 8007faa:	d801      	bhi.n	8007fb0 <_strtol_l.constprop.0+0xb4>
 8007fac:	3c37      	subs	r4, #55	@ 0x37
 8007fae:	e7de      	b.n	8007f6e <_strtol_l.constprop.0+0x72>
 8007fb0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007fb4:	2f19      	cmp	r7, #25
 8007fb6:	d804      	bhi.n	8007fc2 <_strtol_l.constprop.0+0xc6>
 8007fb8:	3c57      	subs	r4, #87	@ 0x57
 8007fba:	e7d8      	b.n	8007f6e <_strtol_l.constprop.0+0x72>
 8007fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8007fc0:	e7e1      	b.n	8007f86 <_strtol_l.constprop.0+0x8a>
 8007fc2:	1c53      	adds	r3, r2, #1
 8007fc4:	d108      	bne.n	8007fd8 <_strtol_l.constprop.0+0xdc>
 8007fc6:	2322      	movs	r3, #34	@ 0x22
 8007fc8:	f8ce 3000 	str.w	r3, [lr]
 8007fcc:	4660      	mov	r0, ip
 8007fce:	f1b8 0f00 	cmp.w	r8, #0
 8007fd2:	d0a0      	beq.n	8007f16 <_strtol_l.constprop.0+0x1a>
 8007fd4:	1e69      	subs	r1, r5, #1
 8007fd6:	e006      	b.n	8007fe6 <_strtol_l.constprop.0+0xea>
 8007fd8:	b106      	cbz	r6, 8007fdc <_strtol_l.constprop.0+0xe0>
 8007fda:	4240      	negs	r0, r0
 8007fdc:	f1b8 0f00 	cmp.w	r8, #0
 8007fe0:	d099      	beq.n	8007f16 <_strtol_l.constprop.0+0x1a>
 8007fe2:	2a00      	cmp	r2, #0
 8007fe4:	d1f6      	bne.n	8007fd4 <_strtol_l.constprop.0+0xd8>
 8007fe6:	f8c8 1000 	str.w	r1, [r8]
 8007fea:	e794      	b.n	8007f16 <_strtol_l.constprop.0+0x1a>
 8007fec:	0800cbc9 	.word	0x0800cbc9

08007ff0 <_strtol_r>:
 8007ff0:	f7ff bf84 	b.w	8007efc <_strtol_l.constprop.0>

08007ff4 <__ssputs_r>:
 8007ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ff8:	688e      	ldr	r6, [r1, #8]
 8007ffa:	461f      	mov	r7, r3
 8007ffc:	42be      	cmp	r6, r7
 8007ffe:	680b      	ldr	r3, [r1, #0]
 8008000:	4682      	mov	sl, r0
 8008002:	460c      	mov	r4, r1
 8008004:	4690      	mov	r8, r2
 8008006:	d82d      	bhi.n	8008064 <__ssputs_r+0x70>
 8008008:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800800c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008010:	d026      	beq.n	8008060 <__ssputs_r+0x6c>
 8008012:	6965      	ldr	r5, [r4, #20]
 8008014:	6909      	ldr	r1, [r1, #16]
 8008016:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800801a:	eba3 0901 	sub.w	r9, r3, r1
 800801e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008022:	1c7b      	adds	r3, r7, #1
 8008024:	444b      	add	r3, r9
 8008026:	106d      	asrs	r5, r5, #1
 8008028:	429d      	cmp	r5, r3
 800802a:	bf38      	it	cc
 800802c:	461d      	movcc	r5, r3
 800802e:	0553      	lsls	r3, r2, #21
 8008030:	d527      	bpl.n	8008082 <__ssputs_r+0x8e>
 8008032:	4629      	mov	r1, r5
 8008034:	f7fe fc1c 	bl	8006870 <_malloc_r>
 8008038:	4606      	mov	r6, r0
 800803a:	b360      	cbz	r0, 8008096 <__ssputs_r+0xa2>
 800803c:	6921      	ldr	r1, [r4, #16]
 800803e:	464a      	mov	r2, r9
 8008040:	f7fd fd41 	bl	8005ac6 <memcpy>
 8008044:	89a3      	ldrh	r3, [r4, #12]
 8008046:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800804a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800804e:	81a3      	strh	r3, [r4, #12]
 8008050:	6126      	str	r6, [r4, #16]
 8008052:	6165      	str	r5, [r4, #20]
 8008054:	444e      	add	r6, r9
 8008056:	eba5 0509 	sub.w	r5, r5, r9
 800805a:	6026      	str	r6, [r4, #0]
 800805c:	60a5      	str	r5, [r4, #8]
 800805e:	463e      	mov	r6, r7
 8008060:	42be      	cmp	r6, r7
 8008062:	d900      	bls.n	8008066 <__ssputs_r+0x72>
 8008064:	463e      	mov	r6, r7
 8008066:	6820      	ldr	r0, [r4, #0]
 8008068:	4632      	mov	r2, r6
 800806a:	4641      	mov	r1, r8
 800806c:	f7fd fc91 	bl	8005992 <memmove>
 8008070:	68a3      	ldr	r3, [r4, #8]
 8008072:	1b9b      	subs	r3, r3, r6
 8008074:	60a3      	str	r3, [r4, #8]
 8008076:	6823      	ldr	r3, [r4, #0]
 8008078:	4433      	add	r3, r6
 800807a:	6023      	str	r3, [r4, #0]
 800807c:	2000      	movs	r0, #0
 800807e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008082:	462a      	mov	r2, r5
 8008084:	f000 fd61 	bl	8008b4a <_realloc_r>
 8008088:	4606      	mov	r6, r0
 800808a:	2800      	cmp	r0, #0
 800808c:	d1e0      	bne.n	8008050 <__ssputs_r+0x5c>
 800808e:	6921      	ldr	r1, [r4, #16]
 8008090:	4650      	mov	r0, sl
 8008092:	f7fe fb79 	bl	8006788 <_free_r>
 8008096:	230c      	movs	r3, #12
 8008098:	f8ca 3000 	str.w	r3, [sl]
 800809c:	89a3      	ldrh	r3, [r4, #12]
 800809e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080a2:	81a3      	strh	r3, [r4, #12]
 80080a4:	f04f 30ff 	mov.w	r0, #4294967295
 80080a8:	e7e9      	b.n	800807e <__ssputs_r+0x8a>
	...

080080ac <_svfiprintf_r>:
 80080ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b0:	4698      	mov	r8, r3
 80080b2:	898b      	ldrh	r3, [r1, #12]
 80080b4:	061b      	lsls	r3, r3, #24
 80080b6:	b09d      	sub	sp, #116	@ 0x74
 80080b8:	4607      	mov	r7, r0
 80080ba:	460d      	mov	r5, r1
 80080bc:	4614      	mov	r4, r2
 80080be:	d510      	bpl.n	80080e2 <_svfiprintf_r+0x36>
 80080c0:	690b      	ldr	r3, [r1, #16]
 80080c2:	b973      	cbnz	r3, 80080e2 <_svfiprintf_r+0x36>
 80080c4:	2140      	movs	r1, #64	@ 0x40
 80080c6:	f7fe fbd3 	bl	8006870 <_malloc_r>
 80080ca:	6028      	str	r0, [r5, #0]
 80080cc:	6128      	str	r0, [r5, #16]
 80080ce:	b930      	cbnz	r0, 80080de <_svfiprintf_r+0x32>
 80080d0:	230c      	movs	r3, #12
 80080d2:	603b      	str	r3, [r7, #0]
 80080d4:	f04f 30ff 	mov.w	r0, #4294967295
 80080d8:	b01d      	add	sp, #116	@ 0x74
 80080da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080de:	2340      	movs	r3, #64	@ 0x40
 80080e0:	616b      	str	r3, [r5, #20]
 80080e2:	2300      	movs	r3, #0
 80080e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80080e6:	2320      	movs	r3, #32
 80080e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80080ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80080f0:	2330      	movs	r3, #48	@ 0x30
 80080f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008290 <_svfiprintf_r+0x1e4>
 80080f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80080fa:	f04f 0901 	mov.w	r9, #1
 80080fe:	4623      	mov	r3, r4
 8008100:	469a      	mov	sl, r3
 8008102:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008106:	b10a      	cbz	r2, 800810c <_svfiprintf_r+0x60>
 8008108:	2a25      	cmp	r2, #37	@ 0x25
 800810a:	d1f9      	bne.n	8008100 <_svfiprintf_r+0x54>
 800810c:	ebba 0b04 	subs.w	fp, sl, r4
 8008110:	d00b      	beq.n	800812a <_svfiprintf_r+0x7e>
 8008112:	465b      	mov	r3, fp
 8008114:	4622      	mov	r2, r4
 8008116:	4629      	mov	r1, r5
 8008118:	4638      	mov	r0, r7
 800811a:	f7ff ff6b 	bl	8007ff4 <__ssputs_r>
 800811e:	3001      	adds	r0, #1
 8008120:	f000 80a7 	beq.w	8008272 <_svfiprintf_r+0x1c6>
 8008124:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008126:	445a      	add	r2, fp
 8008128:	9209      	str	r2, [sp, #36]	@ 0x24
 800812a:	f89a 3000 	ldrb.w	r3, [sl]
 800812e:	2b00      	cmp	r3, #0
 8008130:	f000 809f 	beq.w	8008272 <_svfiprintf_r+0x1c6>
 8008134:	2300      	movs	r3, #0
 8008136:	f04f 32ff 	mov.w	r2, #4294967295
 800813a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800813e:	f10a 0a01 	add.w	sl, sl, #1
 8008142:	9304      	str	r3, [sp, #16]
 8008144:	9307      	str	r3, [sp, #28]
 8008146:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800814a:	931a      	str	r3, [sp, #104]	@ 0x68
 800814c:	4654      	mov	r4, sl
 800814e:	2205      	movs	r2, #5
 8008150:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008154:	484e      	ldr	r0, [pc, #312]	@ (8008290 <_svfiprintf_r+0x1e4>)
 8008156:	f7f8 f83b 	bl	80001d0 <memchr>
 800815a:	9a04      	ldr	r2, [sp, #16]
 800815c:	b9d8      	cbnz	r0, 8008196 <_svfiprintf_r+0xea>
 800815e:	06d0      	lsls	r0, r2, #27
 8008160:	bf44      	itt	mi
 8008162:	2320      	movmi	r3, #32
 8008164:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008168:	0711      	lsls	r1, r2, #28
 800816a:	bf44      	itt	mi
 800816c:	232b      	movmi	r3, #43	@ 0x2b
 800816e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008172:	f89a 3000 	ldrb.w	r3, [sl]
 8008176:	2b2a      	cmp	r3, #42	@ 0x2a
 8008178:	d015      	beq.n	80081a6 <_svfiprintf_r+0xfa>
 800817a:	9a07      	ldr	r2, [sp, #28]
 800817c:	4654      	mov	r4, sl
 800817e:	2000      	movs	r0, #0
 8008180:	f04f 0c0a 	mov.w	ip, #10
 8008184:	4621      	mov	r1, r4
 8008186:	f811 3b01 	ldrb.w	r3, [r1], #1
 800818a:	3b30      	subs	r3, #48	@ 0x30
 800818c:	2b09      	cmp	r3, #9
 800818e:	d94b      	bls.n	8008228 <_svfiprintf_r+0x17c>
 8008190:	b1b0      	cbz	r0, 80081c0 <_svfiprintf_r+0x114>
 8008192:	9207      	str	r2, [sp, #28]
 8008194:	e014      	b.n	80081c0 <_svfiprintf_r+0x114>
 8008196:	eba0 0308 	sub.w	r3, r0, r8
 800819a:	fa09 f303 	lsl.w	r3, r9, r3
 800819e:	4313      	orrs	r3, r2
 80081a0:	9304      	str	r3, [sp, #16]
 80081a2:	46a2      	mov	sl, r4
 80081a4:	e7d2      	b.n	800814c <_svfiprintf_r+0xa0>
 80081a6:	9b03      	ldr	r3, [sp, #12]
 80081a8:	1d19      	adds	r1, r3, #4
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	9103      	str	r1, [sp, #12]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	bfbb      	ittet	lt
 80081b2:	425b      	neglt	r3, r3
 80081b4:	f042 0202 	orrlt.w	r2, r2, #2
 80081b8:	9307      	strge	r3, [sp, #28]
 80081ba:	9307      	strlt	r3, [sp, #28]
 80081bc:	bfb8      	it	lt
 80081be:	9204      	strlt	r2, [sp, #16]
 80081c0:	7823      	ldrb	r3, [r4, #0]
 80081c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80081c4:	d10a      	bne.n	80081dc <_svfiprintf_r+0x130>
 80081c6:	7863      	ldrb	r3, [r4, #1]
 80081c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80081ca:	d132      	bne.n	8008232 <_svfiprintf_r+0x186>
 80081cc:	9b03      	ldr	r3, [sp, #12]
 80081ce:	1d1a      	adds	r2, r3, #4
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	9203      	str	r2, [sp, #12]
 80081d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80081d8:	3402      	adds	r4, #2
 80081da:	9305      	str	r3, [sp, #20]
 80081dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80082a0 <_svfiprintf_r+0x1f4>
 80081e0:	7821      	ldrb	r1, [r4, #0]
 80081e2:	2203      	movs	r2, #3
 80081e4:	4650      	mov	r0, sl
 80081e6:	f7f7 fff3 	bl	80001d0 <memchr>
 80081ea:	b138      	cbz	r0, 80081fc <_svfiprintf_r+0x150>
 80081ec:	9b04      	ldr	r3, [sp, #16]
 80081ee:	eba0 000a 	sub.w	r0, r0, sl
 80081f2:	2240      	movs	r2, #64	@ 0x40
 80081f4:	4082      	lsls	r2, r0
 80081f6:	4313      	orrs	r3, r2
 80081f8:	3401      	adds	r4, #1
 80081fa:	9304      	str	r3, [sp, #16]
 80081fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008200:	4824      	ldr	r0, [pc, #144]	@ (8008294 <_svfiprintf_r+0x1e8>)
 8008202:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008206:	2206      	movs	r2, #6
 8008208:	f7f7 ffe2 	bl	80001d0 <memchr>
 800820c:	2800      	cmp	r0, #0
 800820e:	d036      	beq.n	800827e <_svfiprintf_r+0x1d2>
 8008210:	4b21      	ldr	r3, [pc, #132]	@ (8008298 <_svfiprintf_r+0x1ec>)
 8008212:	bb1b      	cbnz	r3, 800825c <_svfiprintf_r+0x1b0>
 8008214:	9b03      	ldr	r3, [sp, #12]
 8008216:	3307      	adds	r3, #7
 8008218:	f023 0307 	bic.w	r3, r3, #7
 800821c:	3308      	adds	r3, #8
 800821e:	9303      	str	r3, [sp, #12]
 8008220:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008222:	4433      	add	r3, r6
 8008224:	9309      	str	r3, [sp, #36]	@ 0x24
 8008226:	e76a      	b.n	80080fe <_svfiprintf_r+0x52>
 8008228:	fb0c 3202 	mla	r2, ip, r2, r3
 800822c:	460c      	mov	r4, r1
 800822e:	2001      	movs	r0, #1
 8008230:	e7a8      	b.n	8008184 <_svfiprintf_r+0xd8>
 8008232:	2300      	movs	r3, #0
 8008234:	3401      	adds	r4, #1
 8008236:	9305      	str	r3, [sp, #20]
 8008238:	4619      	mov	r1, r3
 800823a:	f04f 0c0a 	mov.w	ip, #10
 800823e:	4620      	mov	r0, r4
 8008240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008244:	3a30      	subs	r2, #48	@ 0x30
 8008246:	2a09      	cmp	r2, #9
 8008248:	d903      	bls.n	8008252 <_svfiprintf_r+0x1a6>
 800824a:	2b00      	cmp	r3, #0
 800824c:	d0c6      	beq.n	80081dc <_svfiprintf_r+0x130>
 800824e:	9105      	str	r1, [sp, #20]
 8008250:	e7c4      	b.n	80081dc <_svfiprintf_r+0x130>
 8008252:	fb0c 2101 	mla	r1, ip, r1, r2
 8008256:	4604      	mov	r4, r0
 8008258:	2301      	movs	r3, #1
 800825a:	e7f0      	b.n	800823e <_svfiprintf_r+0x192>
 800825c:	ab03      	add	r3, sp, #12
 800825e:	9300      	str	r3, [sp, #0]
 8008260:	462a      	mov	r2, r5
 8008262:	4b0e      	ldr	r3, [pc, #56]	@ (800829c <_svfiprintf_r+0x1f0>)
 8008264:	a904      	add	r1, sp, #16
 8008266:	4638      	mov	r0, r7
 8008268:	f7fc fca2 	bl	8004bb0 <_printf_float>
 800826c:	1c42      	adds	r2, r0, #1
 800826e:	4606      	mov	r6, r0
 8008270:	d1d6      	bne.n	8008220 <_svfiprintf_r+0x174>
 8008272:	89ab      	ldrh	r3, [r5, #12]
 8008274:	065b      	lsls	r3, r3, #25
 8008276:	f53f af2d 	bmi.w	80080d4 <_svfiprintf_r+0x28>
 800827a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800827c:	e72c      	b.n	80080d8 <_svfiprintf_r+0x2c>
 800827e:	ab03      	add	r3, sp, #12
 8008280:	9300      	str	r3, [sp, #0]
 8008282:	462a      	mov	r2, r5
 8008284:	4b05      	ldr	r3, [pc, #20]	@ (800829c <_svfiprintf_r+0x1f0>)
 8008286:	a904      	add	r1, sp, #16
 8008288:	4638      	mov	r0, r7
 800828a:	f7fc ff29 	bl	80050e0 <_printf_i>
 800828e:	e7ed      	b.n	800826c <_svfiprintf_r+0x1c0>
 8008290:	0800ccc9 	.word	0x0800ccc9
 8008294:	0800ccd3 	.word	0x0800ccd3
 8008298:	08004bb1 	.word	0x08004bb1
 800829c:	08007ff5 	.word	0x08007ff5
 80082a0:	0800cccf 	.word	0x0800cccf

080082a4 <__sflush_r>:
 80082a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80082a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082ac:	0716      	lsls	r6, r2, #28
 80082ae:	4605      	mov	r5, r0
 80082b0:	460c      	mov	r4, r1
 80082b2:	d454      	bmi.n	800835e <__sflush_r+0xba>
 80082b4:	684b      	ldr	r3, [r1, #4]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	dc02      	bgt.n	80082c0 <__sflush_r+0x1c>
 80082ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80082bc:	2b00      	cmp	r3, #0
 80082be:	dd48      	ble.n	8008352 <__sflush_r+0xae>
 80082c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80082c2:	2e00      	cmp	r6, #0
 80082c4:	d045      	beq.n	8008352 <__sflush_r+0xae>
 80082c6:	2300      	movs	r3, #0
 80082c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80082cc:	682f      	ldr	r7, [r5, #0]
 80082ce:	6a21      	ldr	r1, [r4, #32]
 80082d0:	602b      	str	r3, [r5, #0]
 80082d2:	d030      	beq.n	8008336 <__sflush_r+0x92>
 80082d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80082d6:	89a3      	ldrh	r3, [r4, #12]
 80082d8:	0759      	lsls	r1, r3, #29
 80082da:	d505      	bpl.n	80082e8 <__sflush_r+0x44>
 80082dc:	6863      	ldr	r3, [r4, #4]
 80082de:	1ad2      	subs	r2, r2, r3
 80082e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80082e2:	b10b      	cbz	r3, 80082e8 <__sflush_r+0x44>
 80082e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80082e6:	1ad2      	subs	r2, r2, r3
 80082e8:	2300      	movs	r3, #0
 80082ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80082ec:	6a21      	ldr	r1, [r4, #32]
 80082ee:	4628      	mov	r0, r5
 80082f0:	47b0      	blx	r6
 80082f2:	1c43      	adds	r3, r0, #1
 80082f4:	89a3      	ldrh	r3, [r4, #12]
 80082f6:	d106      	bne.n	8008306 <__sflush_r+0x62>
 80082f8:	6829      	ldr	r1, [r5, #0]
 80082fa:	291d      	cmp	r1, #29
 80082fc:	d82b      	bhi.n	8008356 <__sflush_r+0xb2>
 80082fe:	4a2a      	ldr	r2, [pc, #168]	@ (80083a8 <__sflush_r+0x104>)
 8008300:	410a      	asrs	r2, r1
 8008302:	07d6      	lsls	r6, r2, #31
 8008304:	d427      	bmi.n	8008356 <__sflush_r+0xb2>
 8008306:	2200      	movs	r2, #0
 8008308:	6062      	str	r2, [r4, #4]
 800830a:	04d9      	lsls	r1, r3, #19
 800830c:	6922      	ldr	r2, [r4, #16]
 800830e:	6022      	str	r2, [r4, #0]
 8008310:	d504      	bpl.n	800831c <__sflush_r+0x78>
 8008312:	1c42      	adds	r2, r0, #1
 8008314:	d101      	bne.n	800831a <__sflush_r+0x76>
 8008316:	682b      	ldr	r3, [r5, #0]
 8008318:	b903      	cbnz	r3, 800831c <__sflush_r+0x78>
 800831a:	6560      	str	r0, [r4, #84]	@ 0x54
 800831c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800831e:	602f      	str	r7, [r5, #0]
 8008320:	b1b9      	cbz	r1, 8008352 <__sflush_r+0xae>
 8008322:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008326:	4299      	cmp	r1, r3
 8008328:	d002      	beq.n	8008330 <__sflush_r+0x8c>
 800832a:	4628      	mov	r0, r5
 800832c:	f7fe fa2c 	bl	8006788 <_free_r>
 8008330:	2300      	movs	r3, #0
 8008332:	6363      	str	r3, [r4, #52]	@ 0x34
 8008334:	e00d      	b.n	8008352 <__sflush_r+0xae>
 8008336:	2301      	movs	r3, #1
 8008338:	4628      	mov	r0, r5
 800833a:	47b0      	blx	r6
 800833c:	4602      	mov	r2, r0
 800833e:	1c50      	adds	r0, r2, #1
 8008340:	d1c9      	bne.n	80082d6 <__sflush_r+0x32>
 8008342:	682b      	ldr	r3, [r5, #0]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d0c6      	beq.n	80082d6 <__sflush_r+0x32>
 8008348:	2b1d      	cmp	r3, #29
 800834a:	d001      	beq.n	8008350 <__sflush_r+0xac>
 800834c:	2b16      	cmp	r3, #22
 800834e:	d11e      	bne.n	800838e <__sflush_r+0xea>
 8008350:	602f      	str	r7, [r5, #0]
 8008352:	2000      	movs	r0, #0
 8008354:	e022      	b.n	800839c <__sflush_r+0xf8>
 8008356:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800835a:	b21b      	sxth	r3, r3
 800835c:	e01b      	b.n	8008396 <__sflush_r+0xf2>
 800835e:	690f      	ldr	r7, [r1, #16]
 8008360:	2f00      	cmp	r7, #0
 8008362:	d0f6      	beq.n	8008352 <__sflush_r+0xae>
 8008364:	0793      	lsls	r3, r2, #30
 8008366:	680e      	ldr	r6, [r1, #0]
 8008368:	bf08      	it	eq
 800836a:	694b      	ldreq	r3, [r1, #20]
 800836c:	600f      	str	r7, [r1, #0]
 800836e:	bf18      	it	ne
 8008370:	2300      	movne	r3, #0
 8008372:	eba6 0807 	sub.w	r8, r6, r7
 8008376:	608b      	str	r3, [r1, #8]
 8008378:	f1b8 0f00 	cmp.w	r8, #0
 800837c:	dde9      	ble.n	8008352 <__sflush_r+0xae>
 800837e:	6a21      	ldr	r1, [r4, #32]
 8008380:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008382:	4643      	mov	r3, r8
 8008384:	463a      	mov	r2, r7
 8008386:	4628      	mov	r0, r5
 8008388:	47b0      	blx	r6
 800838a:	2800      	cmp	r0, #0
 800838c:	dc08      	bgt.n	80083a0 <__sflush_r+0xfc>
 800838e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008392:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008396:	81a3      	strh	r3, [r4, #12]
 8008398:	f04f 30ff 	mov.w	r0, #4294967295
 800839c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083a0:	4407      	add	r7, r0
 80083a2:	eba8 0800 	sub.w	r8, r8, r0
 80083a6:	e7e7      	b.n	8008378 <__sflush_r+0xd4>
 80083a8:	dfbffffe 	.word	0xdfbffffe

080083ac <_fflush_r>:
 80083ac:	b538      	push	{r3, r4, r5, lr}
 80083ae:	690b      	ldr	r3, [r1, #16]
 80083b0:	4605      	mov	r5, r0
 80083b2:	460c      	mov	r4, r1
 80083b4:	b913      	cbnz	r3, 80083bc <_fflush_r+0x10>
 80083b6:	2500      	movs	r5, #0
 80083b8:	4628      	mov	r0, r5
 80083ba:	bd38      	pop	{r3, r4, r5, pc}
 80083bc:	b118      	cbz	r0, 80083c6 <_fflush_r+0x1a>
 80083be:	6a03      	ldr	r3, [r0, #32]
 80083c0:	b90b      	cbnz	r3, 80083c6 <_fflush_r+0x1a>
 80083c2:	f7fd fa4d 	bl	8005860 <__sinit>
 80083c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d0f3      	beq.n	80083b6 <_fflush_r+0xa>
 80083ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80083d0:	07d0      	lsls	r0, r2, #31
 80083d2:	d404      	bmi.n	80083de <_fflush_r+0x32>
 80083d4:	0599      	lsls	r1, r3, #22
 80083d6:	d402      	bmi.n	80083de <_fflush_r+0x32>
 80083d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083da:	f7fd fb72 	bl	8005ac2 <__retarget_lock_acquire_recursive>
 80083de:	4628      	mov	r0, r5
 80083e0:	4621      	mov	r1, r4
 80083e2:	f7ff ff5f 	bl	80082a4 <__sflush_r>
 80083e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80083e8:	07da      	lsls	r2, r3, #31
 80083ea:	4605      	mov	r5, r0
 80083ec:	d4e4      	bmi.n	80083b8 <_fflush_r+0xc>
 80083ee:	89a3      	ldrh	r3, [r4, #12]
 80083f0:	059b      	lsls	r3, r3, #22
 80083f2:	d4e1      	bmi.n	80083b8 <_fflush_r+0xc>
 80083f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083f6:	f7fd fb65 	bl	8005ac4 <__retarget_lock_release_recursive>
 80083fa:	e7dd      	b.n	80083b8 <_fflush_r+0xc>

080083fc <strncmp>:
 80083fc:	b510      	push	{r4, lr}
 80083fe:	b16a      	cbz	r2, 800841c <strncmp+0x20>
 8008400:	3901      	subs	r1, #1
 8008402:	1884      	adds	r4, r0, r2
 8008404:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008408:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800840c:	429a      	cmp	r2, r3
 800840e:	d103      	bne.n	8008418 <strncmp+0x1c>
 8008410:	42a0      	cmp	r0, r4
 8008412:	d001      	beq.n	8008418 <strncmp+0x1c>
 8008414:	2a00      	cmp	r2, #0
 8008416:	d1f5      	bne.n	8008404 <strncmp+0x8>
 8008418:	1ad0      	subs	r0, r2, r3
 800841a:	bd10      	pop	{r4, pc}
 800841c:	4610      	mov	r0, r2
 800841e:	e7fc      	b.n	800841a <strncmp+0x1e>

08008420 <_sbrk_r>:
 8008420:	b538      	push	{r3, r4, r5, lr}
 8008422:	4d06      	ldr	r5, [pc, #24]	@ (800843c <_sbrk_r+0x1c>)
 8008424:	2300      	movs	r3, #0
 8008426:	4604      	mov	r4, r0
 8008428:	4608      	mov	r0, r1
 800842a:	602b      	str	r3, [r5, #0]
 800842c:	f7f9 fd08 	bl	8001e40 <_sbrk>
 8008430:	1c43      	adds	r3, r0, #1
 8008432:	d102      	bne.n	800843a <_sbrk_r+0x1a>
 8008434:	682b      	ldr	r3, [r5, #0]
 8008436:	b103      	cbz	r3, 800843a <_sbrk_r+0x1a>
 8008438:	6023      	str	r3, [r4, #0]
 800843a:	bd38      	pop	{r3, r4, r5, pc}
 800843c:	20000870 	.word	0x20000870

08008440 <nan>:
 8008440:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008448 <nan+0x8>
 8008444:	4770      	bx	lr
 8008446:	bf00      	nop
 8008448:	00000000 	.word	0x00000000
 800844c:	7ff80000 	.word	0x7ff80000

08008450 <__assert_func>:
 8008450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008452:	4614      	mov	r4, r2
 8008454:	461a      	mov	r2, r3
 8008456:	4b09      	ldr	r3, [pc, #36]	@ (800847c <__assert_func+0x2c>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4605      	mov	r5, r0
 800845c:	68d8      	ldr	r0, [r3, #12]
 800845e:	b954      	cbnz	r4, 8008476 <__assert_func+0x26>
 8008460:	4b07      	ldr	r3, [pc, #28]	@ (8008480 <__assert_func+0x30>)
 8008462:	461c      	mov	r4, r3
 8008464:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008468:	9100      	str	r1, [sp, #0]
 800846a:	462b      	mov	r3, r5
 800846c:	4905      	ldr	r1, [pc, #20]	@ (8008484 <__assert_func+0x34>)
 800846e:	f000 fba7 	bl	8008bc0 <fiprintf>
 8008472:	f000 fbb7 	bl	8008be4 <abort>
 8008476:	4b04      	ldr	r3, [pc, #16]	@ (8008488 <__assert_func+0x38>)
 8008478:	e7f4      	b.n	8008464 <__assert_func+0x14>
 800847a:	bf00      	nop
 800847c:	20000078 	.word	0x20000078
 8008480:	0800cd1d 	.word	0x0800cd1d
 8008484:	0800ccef 	.word	0x0800ccef
 8008488:	0800cce2 	.word	0x0800cce2

0800848c <_calloc_r>:
 800848c:	b570      	push	{r4, r5, r6, lr}
 800848e:	fba1 5402 	umull	r5, r4, r1, r2
 8008492:	b93c      	cbnz	r4, 80084a4 <_calloc_r+0x18>
 8008494:	4629      	mov	r1, r5
 8008496:	f7fe f9eb 	bl	8006870 <_malloc_r>
 800849a:	4606      	mov	r6, r0
 800849c:	b928      	cbnz	r0, 80084aa <_calloc_r+0x1e>
 800849e:	2600      	movs	r6, #0
 80084a0:	4630      	mov	r0, r6
 80084a2:	bd70      	pop	{r4, r5, r6, pc}
 80084a4:	220c      	movs	r2, #12
 80084a6:	6002      	str	r2, [r0, #0]
 80084a8:	e7f9      	b.n	800849e <_calloc_r+0x12>
 80084aa:	462a      	mov	r2, r5
 80084ac:	4621      	mov	r1, r4
 80084ae:	f7fd fa8a 	bl	80059c6 <memset>
 80084b2:	e7f5      	b.n	80084a0 <_calloc_r+0x14>

080084b4 <rshift>:
 80084b4:	6903      	ldr	r3, [r0, #16]
 80084b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80084ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084be:	ea4f 1261 	mov.w	r2, r1, asr #5
 80084c2:	f100 0414 	add.w	r4, r0, #20
 80084c6:	dd45      	ble.n	8008554 <rshift+0xa0>
 80084c8:	f011 011f 	ands.w	r1, r1, #31
 80084cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80084d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80084d4:	d10c      	bne.n	80084f0 <rshift+0x3c>
 80084d6:	f100 0710 	add.w	r7, r0, #16
 80084da:	4629      	mov	r1, r5
 80084dc:	42b1      	cmp	r1, r6
 80084de:	d334      	bcc.n	800854a <rshift+0x96>
 80084e0:	1a9b      	subs	r3, r3, r2
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	1eea      	subs	r2, r5, #3
 80084e6:	4296      	cmp	r6, r2
 80084e8:	bf38      	it	cc
 80084ea:	2300      	movcc	r3, #0
 80084ec:	4423      	add	r3, r4
 80084ee:	e015      	b.n	800851c <rshift+0x68>
 80084f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80084f4:	f1c1 0820 	rsb	r8, r1, #32
 80084f8:	40cf      	lsrs	r7, r1
 80084fa:	f105 0e04 	add.w	lr, r5, #4
 80084fe:	46a1      	mov	r9, r4
 8008500:	4576      	cmp	r6, lr
 8008502:	46f4      	mov	ip, lr
 8008504:	d815      	bhi.n	8008532 <rshift+0x7e>
 8008506:	1a9a      	subs	r2, r3, r2
 8008508:	0092      	lsls	r2, r2, #2
 800850a:	3a04      	subs	r2, #4
 800850c:	3501      	adds	r5, #1
 800850e:	42ae      	cmp	r6, r5
 8008510:	bf38      	it	cc
 8008512:	2200      	movcc	r2, #0
 8008514:	18a3      	adds	r3, r4, r2
 8008516:	50a7      	str	r7, [r4, r2]
 8008518:	b107      	cbz	r7, 800851c <rshift+0x68>
 800851a:	3304      	adds	r3, #4
 800851c:	1b1a      	subs	r2, r3, r4
 800851e:	42a3      	cmp	r3, r4
 8008520:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008524:	bf08      	it	eq
 8008526:	2300      	moveq	r3, #0
 8008528:	6102      	str	r2, [r0, #16]
 800852a:	bf08      	it	eq
 800852c:	6143      	streq	r3, [r0, #20]
 800852e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008532:	f8dc c000 	ldr.w	ip, [ip]
 8008536:	fa0c fc08 	lsl.w	ip, ip, r8
 800853a:	ea4c 0707 	orr.w	r7, ip, r7
 800853e:	f849 7b04 	str.w	r7, [r9], #4
 8008542:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008546:	40cf      	lsrs	r7, r1
 8008548:	e7da      	b.n	8008500 <rshift+0x4c>
 800854a:	f851 cb04 	ldr.w	ip, [r1], #4
 800854e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008552:	e7c3      	b.n	80084dc <rshift+0x28>
 8008554:	4623      	mov	r3, r4
 8008556:	e7e1      	b.n	800851c <rshift+0x68>

08008558 <__hexdig_fun>:
 8008558:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800855c:	2b09      	cmp	r3, #9
 800855e:	d802      	bhi.n	8008566 <__hexdig_fun+0xe>
 8008560:	3820      	subs	r0, #32
 8008562:	b2c0      	uxtb	r0, r0
 8008564:	4770      	bx	lr
 8008566:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800856a:	2b05      	cmp	r3, #5
 800856c:	d801      	bhi.n	8008572 <__hexdig_fun+0x1a>
 800856e:	3847      	subs	r0, #71	@ 0x47
 8008570:	e7f7      	b.n	8008562 <__hexdig_fun+0xa>
 8008572:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008576:	2b05      	cmp	r3, #5
 8008578:	d801      	bhi.n	800857e <__hexdig_fun+0x26>
 800857a:	3827      	subs	r0, #39	@ 0x27
 800857c:	e7f1      	b.n	8008562 <__hexdig_fun+0xa>
 800857e:	2000      	movs	r0, #0
 8008580:	4770      	bx	lr
	...

08008584 <__gethex>:
 8008584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008588:	b085      	sub	sp, #20
 800858a:	468a      	mov	sl, r1
 800858c:	9302      	str	r3, [sp, #8]
 800858e:	680b      	ldr	r3, [r1, #0]
 8008590:	9001      	str	r0, [sp, #4]
 8008592:	4690      	mov	r8, r2
 8008594:	1c9c      	adds	r4, r3, #2
 8008596:	46a1      	mov	r9, r4
 8008598:	f814 0b01 	ldrb.w	r0, [r4], #1
 800859c:	2830      	cmp	r0, #48	@ 0x30
 800859e:	d0fa      	beq.n	8008596 <__gethex+0x12>
 80085a0:	eba9 0303 	sub.w	r3, r9, r3
 80085a4:	f1a3 0b02 	sub.w	fp, r3, #2
 80085a8:	f7ff ffd6 	bl	8008558 <__hexdig_fun>
 80085ac:	4605      	mov	r5, r0
 80085ae:	2800      	cmp	r0, #0
 80085b0:	d168      	bne.n	8008684 <__gethex+0x100>
 80085b2:	49a0      	ldr	r1, [pc, #640]	@ (8008834 <__gethex+0x2b0>)
 80085b4:	2201      	movs	r2, #1
 80085b6:	4648      	mov	r0, r9
 80085b8:	f7ff ff20 	bl	80083fc <strncmp>
 80085bc:	4607      	mov	r7, r0
 80085be:	2800      	cmp	r0, #0
 80085c0:	d167      	bne.n	8008692 <__gethex+0x10e>
 80085c2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80085c6:	4626      	mov	r6, r4
 80085c8:	f7ff ffc6 	bl	8008558 <__hexdig_fun>
 80085cc:	2800      	cmp	r0, #0
 80085ce:	d062      	beq.n	8008696 <__gethex+0x112>
 80085d0:	4623      	mov	r3, r4
 80085d2:	7818      	ldrb	r0, [r3, #0]
 80085d4:	2830      	cmp	r0, #48	@ 0x30
 80085d6:	4699      	mov	r9, r3
 80085d8:	f103 0301 	add.w	r3, r3, #1
 80085dc:	d0f9      	beq.n	80085d2 <__gethex+0x4e>
 80085de:	f7ff ffbb 	bl	8008558 <__hexdig_fun>
 80085e2:	fab0 f580 	clz	r5, r0
 80085e6:	096d      	lsrs	r5, r5, #5
 80085e8:	f04f 0b01 	mov.w	fp, #1
 80085ec:	464a      	mov	r2, r9
 80085ee:	4616      	mov	r6, r2
 80085f0:	3201      	adds	r2, #1
 80085f2:	7830      	ldrb	r0, [r6, #0]
 80085f4:	f7ff ffb0 	bl	8008558 <__hexdig_fun>
 80085f8:	2800      	cmp	r0, #0
 80085fa:	d1f8      	bne.n	80085ee <__gethex+0x6a>
 80085fc:	498d      	ldr	r1, [pc, #564]	@ (8008834 <__gethex+0x2b0>)
 80085fe:	2201      	movs	r2, #1
 8008600:	4630      	mov	r0, r6
 8008602:	f7ff fefb 	bl	80083fc <strncmp>
 8008606:	2800      	cmp	r0, #0
 8008608:	d13f      	bne.n	800868a <__gethex+0x106>
 800860a:	b944      	cbnz	r4, 800861e <__gethex+0x9a>
 800860c:	1c74      	adds	r4, r6, #1
 800860e:	4622      	mov	r2, r4
 8008610:	4616      	mov	r6, r2
 8008612:	3201      	adds	r2, #1
 8008614:	7830      	ldrb	r0, [r6, #0]
 8008616:	f7ff ff9f 	bl	8008558 <__hexdig_fun>
 800861a:	2800      	cmp	r0, #0
 800861c:	d1f8      	bne.n	8008610 <__gethex+0x8c>
 800861e:	1ba4      	subs	r4, r4, r6
 8008620:	00a7      	lsls	r7, r4, #2
 8008622:	7833      	ldrb	r3, [r6, #0]
 8008624:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008628:	2b50      	cmp	r3, #80	@ 0x50
 800862a:	d13e      	bne.n	80086aa <__gethex+0x126>
 800862c:	7873      	ldrb	r3, [r6, #1]
 800862e:	2b2b      	cmp	r3, #43	@ 0x2b
 8008630:	d033      	beq.n	800869a <__gethex+0x116>
 8008632:	2b2d      	cmp	r3, #45	@ 0x2d
 8008634:	d034      	beq.n	80086a0 <__gethex+0x11c>
 8008636:	1c71      	adds	r1, r6, #1
 8008638:	2400      	movs	r4, #0
 800863a:	7808      	ldrb	r0, [r1, #0]
 800863c:	f7ff ff8c 	bl	8008558 <__hexdig_fun>
 8008640:	1e43      	subs	r3, r0, #1
 8008642:	b2db      	uxtb	r3, r3
 8008644:	2b18      	cmp	r3, #24
 8008646:	d830      	bhi.n	80086aa <__gethex+0x126>
 8008648:	f1a0 0210 	sub.w	r2, r0, #16
 800864c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008650:	f7ff ff82 	bl	8008558 <__hexdig_fun>
 8008654:	f100 3cff 	add.w	ip, r0, #4294967295
 8008658:	fa5f fc8c 	uxtb.w	ip, ip
 800865c:	f1bc 0f18 	cmp.w	ip, #24
 8008660:	f04f 030a 	mov.w	r3, #10
 8008664:	d91e      	bls.n	80086a4 <__gethex+0x120>
 8008666:	b104      	cbz	r4, 800866a <__gethex+0xe6>
 8008668:	4252      	negs	r2, r2
 800866a:	4417      	add	r7, r2
 800866c:	f8ca 1000 	str.w	r1, [sl]
 8008670:	b1ed      	cbz	r5, 80086ae <__gethex+0x12a>
 8008672:	f1bb 0f00 	cmp.w	fp, #0
 8008676:	bf0c      	ite	eq
 8008678:	2506      	moveq	r5, #6
 800867a:	2500      	movne	r5, #0
 800867c:	4628      	mov	r0, r5
 800867e:	b005      	add	sp, #20
 8008680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008684:	2500      	movs	r5, #0
 8008686:	462c      	mov	r4, r5
 8008688:	e7b0      	b.n	80085ec <__gethex+0x68>
 800868a:	2c00      	cmp	r4, #0
 800868c:	d1c7      	bne.n	800861e <__gethex+0x9a>
 800868e:	4627      	mov	r7, r4
 8008690:	e7c7      	b.n	8008622 <__gethex+0x9e>
 8008692:	464e      	mov	r6, r9
 8008694:	462f      	mov	r7, r5
 8008696:	2501      	movs	r5, #1
 8008698:	e7c3      	b.n	8008622 <__gethex+0x9e>
 800869a:	2400      	movs	r4, #0
 800869c:	1cb1      	adds	r1, r6, #2
 800869e:	e7cc      	b.n	800863a <__gethex+0xb6>
 80086a0:	2401      	movs	r4, #1
 80086a2:	e7fb      	b.n	800869c <__gethex+0x118>
 80086a4:	fb03 0002 	mla	r0, r3, r2, r0
 80086a8:	e7ce      	b.n	8008648 <__gethex+0xc4>
 80086aa:	4631      	mov	r1, r6
 80086ac:	e7de      	b.n	800866c <__gethex+0xe8>
 80086ae:	eba6 0309 	sub.w	r3, r6, r9
 80086b2:	3b01      	subs	r3, #1
 80086b4:	4629      	mov	r1, r5
 80086b6:	2b07      	cmp	r3, #7
 80086b8:	dc0a      	bgt.n	80086d0 <__gethex+0x14c>
 80086ba:	9801      	ldr	r0, [sp, #4]
 80086bc:	f7fe f964 	bl	8006988 <_Balloc>
 80086c0:	4604      	mov	r4, r0
 80086c2:	b940      	cbnz	r0, 80086d6 <__gethex+0x152>
 80086c4:	4b5c      	ldr	r3, [pc, #368]	@ (8008838 <__gethex+0x2b4>)
 80086c6:	4602      	mov	r2, r0
 80086c8:	21e4      	movs	r1, #228	@ 0xe4
 80086ca:	485c      	ldr	r0, [pc, #368]	@ (800883c <__gethex+0x2b8>)
 80086cc:	f7ff fec0 	bl	8008450 <__assert_func>
 80086d0:	3101      	adds	r1, #1
 80086d2:	105b      	asrs	r3, r3, #1
 80086d4:	e7ef      	b.n	80086b6 <__gethex+0x132>
 80086d6:	f100 0a14 	add.w	sl, r0, #20
 80086da:	2300      	movs	r3, #0
 80086dc:	4655      	mov	r5, sl
 80086de:	469b      	mov	fp, r3
 80086e0:	45b1      	cmp	r9, r6
 80086e2:	d337      	bcc.n	8008754 <__gethex+0x1d0>
 80086e4:	f845 bb04 	str.w	fp, [r5], #4
 80086e8:	eba5 050a 	sub.w	r5, r5, sl
 80086ec:	10ad      	asrs	r5, r5, #2
 80086ee:	6125      	str	r5, [r4, #16]
 80086f0:	4658      	mov	r0, fp
 80086f2:	f7fe fa3b 	bl	8006b6c <__hi0bits>
 80086f6:	016d      	lsls	r5, r5, #5
 80086f8:	f8d8 6000 	ldr.w	r6, [r8]
 80086fc:	1a2d      	subs	r5, r5, r0
 80086fe:	42b5      	cmp	r5, r6
 8008700:	dd54      	ble.n	80087ac <__gethex+0x228>
 8008702:	1bad      	subs	r5, r5, r6
 8008704:	4629      	mov	r1, r5
 8008706:	4620      	mov	r0, r4
 8008708:	f7fe fdcf 	bl	80072aa <__any_on>
 800870c:	4681      	mov	r9, r0
 800870e:	b178      	cbz	r0, 8008730 <__gethex+0x1ac>
 8008710:	1e6b      	subs	r3, r5, #1
 8008712:	1159      	asrs	r1, r3, #5
 8008714:	f003 021f 	and.w	r2, r3, #31
 8008718:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800871c:	f04f 0901 	mov.w	r9, #1
 8008720:	fa09 f202 	lsl.w	r2, r9, r2
 8008724:	420a      	tst	r2, r1
 8008726:	d003      	beq.n	8008730 <__gethex+0x1ac>
 8008728:	454b      	cmp	r3, r9
 800872a:	dc36      	bgt.n	800879a <__gethex+0x216>
 800872c:	f04f 0902 	mov.w	r9, #2
 8008730:	4629      	mov	r1, r5
 8008732:	4620      	mov	r0, r4
 8008734:	f7ff febe 	bl	80084b4 <rshift>
 8008738:	442f      	add	r7, r5
 800873a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800873e:	42bb      	cmp	r3, r7
 8008740:	da42      	bge.n	80087c8 <__gethex+0x244>
 8008742:	9801      	ldr	r0, [sp, #4]
 8008744:	4621      	mov	r1, r4
 8008746:	f7fe f95f 	bl	8006a08 <_Bfree>
 800874a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800874c:	2300      	movs	r3, #0
 800874e:	6013      	str	r3, [r2, #0]
 8008750:	25a3      	movs	r5, #163	@ 0xa3
 8008752:	e793      	b.n	800867c <__gethex+0xf8>
 8008754:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008758:	2a2e      	cmp	r2, #46	@ 0x2e
 800875a:	d012      	beq.n	8008782 <__gethex+0x1fe>
 800875c:	2b20      	cmp	r3, #32
 800875e:	d104      	bne.n	800876a <__gethex+0x1e6>
 8008760:	f845 bb04 	str.w	fp, [r5], #4
 8008764:	f04f 0b00 	mov.w	fp, #0
 8008768:	465b      	mov	r3, fp
 800876a:	7830      	ldrb	r0, [r6, #0]
 800876c:	9303      	str	r3, [sp, #12]
 800876e:	f7ff fef3 	bl	8008558 <__hexdig_fun>
 8008772:	9b03      	ldr	r3, [sp, #12]
 8008774:	f000 000f 	and.w	r0, r0, #15
 8008778:	4098      	lsls	r0, r3
 800877a:	ea4b 0b00 	orr.w	fp, fp, r0
 800877e:	3304      	adds	r3, #4
 8008780:	e7ae      	b.n	80086e0 <__gethex+0x15c>
 8008782:	45b1      	cmp	r9, r6
 8008784:	d8ea      	bhi.n	800875c <__gethex+0x1d8>
 8008786:	492b      	ldr	r1, [pc, #172]	@ (8008834 <__gethex+0x2b0>)
 8008788:	9303      	str	r3, [sp, #12]
 800878a:	2201      	movs	r2, #1
 800878c:	4630      	mov	r0, r6
 800878e:	f7ff fe35 	bl	80083fc <strncmp>
 8008792:	9b03      	ldr	r3, [sp, #12]
 8008794:	2800      	cmp	r0, #0
 8008796:	d1e1      	bne.n	800875c <__gethex+0x1d8>
 8008798:	e7a2      	b.n	80086e0 <__gethex+0x15c>
 800879a:	1ea9      	subs	r1, r5, #2
 800879c:	4620      	mov	r0, r4
 800879e:	f7fe fd84 	bl	80072aa <__any_on>
 80087a2:	2800      	cmp	r0, #0
 80087a4:	d0c2      	beq.n	800872c <__gethex+0x1a8>
 80087a6:	f04f 0903 	mov.w	r9, #3
 80087aa:	e7c1      	b.n	8008730 <__gethex+0x1ac>
 80087ac:	da09      	bge.n	80087c2 <__gethex+0x23e>
 80087ae:	1b75      	subs	r5, r6, r5
 80087b0:	4621      	mov	r1, r4
 80087b2:	9801      	ldr	r0, [sp, #4]
 80087b4:	462a      	mov	r2, r5
 80087b6:	f7fe fb3f 	bl	8006e38 <__lshift>
 80087ba:	1b7f      	subs	r7, r7, r5
 80087bc:	4604      	mov	r4, r0
 80087be:	f100 0a14 	add.w	sl, r0, #20
 80087c2:	f04f 0900 	mov.w	r9, #0
 80087c6:	e7b8      	b.n	800873a <__gethex+0x1b6>
 80087c8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80087cc:	42bd      	cmp	r5, r7
 80087ce:	dd6f      	ble.n	80088b0 <__gethex+0x32c>
 80087d0:	1bed      	subs	r5, r5, r7
 80087d2:	42ae      	cmp	r6, r5
 80087d4:	dc34      	bgt.n	8008840 <__gethex+0x2bc>
 80087d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80087da:	2b02      	cmp	r3, #2
 80087dc:	d022      	beq.n	8008824 <__gethex+0x2a0>
 80087de:	2b03      	cmp	r3, #3
 80087e0:	d024      	beq.n	800882c <__gethex+0x2a8>
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d115      	bne.n	8008812 <__gethex+0x28e>
 80087e6:	42ae      	cmp	r6, r5
 80087e8:	d113      	bne.n	8008812 <__gethex+0x28e>
 80087ea:	2e01      	cmp	r6, #1
 80087ec:	d10b      	bne.n	8008806 <__gethex+0x282>
 80087ee:	9a02      	ldr	r2, [sp, #8]
 80087f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80087f4:	6013      	str	r3, [r2, #0]
 80087f6:	2301      	movs	r3, #1
 80087f8:	6123      	str	r3, [r4, #16]
 80087fa:	f8ca 3000 	str.w	r3, [sl]
 80087fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008800:	2562      	movs	r5, #98	@ 0x62
 8008802:	601c      	str	r4, [r3, #0]
 8008804:	e73a      	b.n	800867c <__gethex+0xf8>
 8008806:	1e71      	subs	r1, r6, #1
 8008808:	4620      	mov	r0, r4
 800880a:	f7fe fd4e 	bl	80072aa <__any_on>
 800880e:	2800      	cmp	r0, #0
 8008810:	d1ed      	bne.n	80087ee <__gethex+0x26a>
 8008812:	9801      	ldr	r0, [sp, #4]
 8008814:	4621      	mov	r1, r4
 8008816:	f7fe f8f7 	bl	8006a08 <_Bfree>
 800881a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800881c:	2300      	movs	r3, #0
 800881e:	6013      	str	r3, [r2, #0]
 8008820:	2550      	movs	r5, #80	@ 0x50
 8008822:	e72b      	b.n	800867c <__gethex+0xf8>
 8008824:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1f3      	bne.n	8008812 <__gethex+0x28e>
 800882a:	e7e0      	b.n	80087ee <__gethex+0x26a>
 800882c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1dd      	bne.n	80087ee <__gethex+0x26a>
 8008832:	e7ee      	b.n	8008812 <__gethex+0x28e>
 8008834:	0800cb70 	.word	0x0800cb70
 8008838:	0800ca09 	.word	0x0800ca09
 800883c:	0800cd1e 	.word	0x0800cd1e
 8008840:	1e6f      	subs	r7, r5, #1
 8008842:	f1b9 0f00 	cmp.w	r9, #0
 8008846:	d130      	bne.n	80088aa <__gethex+0x326>
 8008848:	b127      	cbz	r7, 8008854 <__gethex+0x2d0>
 800884a:	4639      	mov	r1, r7
 800884c:	4620      	mov	r0, r4
 800884e:	f7fe fd2c 	bl	80072aa <__any_on>
 8008852:	4681      	mov	r9, r0
 8008854:	117a      	asrs	r2, r7, #5
 8008856:	2301      	movs	r3, #1
 8008858:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800885c:	f007 071f 	and.w	r7, r7, #31
 8008860:	40bb      	lsls	r3, r7
 8008862:	4213      	tst	r3, r2
 8008864:	4629      	mov	r1, r5
 8008866:	4620      	mov	r0, r4
 8008868:	bf18      	it	ne
 800886a:	f049 0902 	orrne.w	r9, r9, #2
 800886e:	f7ff fe21 	bl	80084b4 <rshift>
 8008872:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008876:	1b76      	subs	r6, r6, r5
 8008878:	2502      	movs	r5, #2
 800887a:	f1b9 0f00 	cmp.w	r9, #0
 800887e:	d047      	beq.n	8008910 <__gethex+0x38c>
 8008880:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008884:	2b02      	cmp	r3, #2
 8008886:	d015      	beq.n	80088b4 <__gethex+0x330>
 8008888:	2b03      	cmp	r3, #3
 800888a:	d017      	beq.n	80088bc <__gethex+0x338>
 800888c:	2b01      	cmp	r3, #1
 800888e:	d109      	bne.n	80088a4 <__gethex+0x320>
 8008890:	f019 0f02 	tst.w	r9, #2
 8008894:	d006      	beq.n	80088a4 <__gethex+0x320>
 8008896:	f8da 3000 	ldr.w	r3, [sl]
 800889a:	ea49 0903 	orr.w	r9, r9, r3
 800889e:	f019 0f01 	tst.w	r9, #1
 80088a2:	d10e      	bne.n	80088c2 <__gethex+0x33e>
 80088a4:	f045 0510 	orr.w	r5, r5, #16
 80088a8:	e032      	b.n	8008910 <__gethex+0x38c>
 80088aa:	f04f 0901 	mov.w	r9, #1
 80088ae:	e7d1      	b.n	8008854 <__gethex+0x2d0>
 80088b0:	2501      	movs	r5, #1
 80088b2:	e7e2      	b.n	800887a <__gethex+0x2f6>
 80088b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088b6:	f1c3 0301 	rsb	r3, r3, #1
 80088ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80088bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d0f0      	beq.n	80088a4 <__gethex+0x320>
 80088c2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80088c6:	f104 0314 	add.w	r3, r4, #20
 80088ca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80088ce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80088d2:	f04f 0c00 	mov.w	ip, #0
 80088d6:	4618      	mov	r0, r3
 80088d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80088dc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80088e0:	d01b      	beq.n	800891a <__gethex+0x396>
 80088e2:	3201      	adds	r2, #1
 80088e4:	6002      	str	r2, [r0, #0]
 80088e6:	2d02      	cmp	r5, #2
 80088e8:	f104 0314 	add.w	r3, r4, #20
 80088ec:	d13c      	bne.n	8008968 <__gethex+0x3e4>
 80088ee:	f8d8 2000 	ldr.w	r2, [r8]
 80088f2:	3a01      	subs	r2, #1
 80088f4:	42b2      	cmp	r2, r6
 80088f6:	d109      	bne.n	800890c <__gethex+0x388>
 80088f8:	1171      	asrs	r1, r6, #5
 80088fa:	2201      	movs	r2, #1
 80088fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008900:	f006 061f 	and.w	r6, r6, #31
 8008904:	fa02 f606 	lsl.w	r6, r2, r6
 8008908:	421e      	tst	r6, r3
 800890a:	d13a      	bne.n	8008982 <__gethex+0x3fe>
 800890c:	f045 0520 	orr.w	r5, r5, #32
 8008910:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008912:	601c      	str	r4, [r3, #0]
 8008914:	9b02      	ldr	r3, [sp, #8]
 8008916:	601f      	str	r7, [r3, #0]
 8008918:	e6b0      	b.n	800867c <__gethex+0xf8>
 800891a:	4299      	cmp	r1, r3
 800891c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008920:	d8d9      	bhi.n	80088d6 <__gethex+0x352>
 8008922:	68a3      	ldr	r3, [r4, #8]
 8008924:	459b      	cmp	fp, r3
 8008926:	db17      	blt.n	8008958 <__gethex+0x3d4>
 8008928:	6861      	ldr	r1, [r4, #4]
 800892a:	9801      	ldr	r0, [sp, #4]
 800892c:	3101      	adds	r1, #1
 800892e:	f7fe f82b 	bl	8006988 <_Balloc>
 8008932:	4681      	mov	r9, r0
 8008934:	b918      	cbnz	r0, 800893e <__gethex+0x3ba>
 8008936:	4b1a      	ldr	r3, [pc, #104]	@ (80089a0 <__gethex+0x41c>)
 8008938:	4602      	mov	r2, r0
 800893a:	2184      	movs	r1, #132	@ 0x84
 800893c:	e6c5      	b.n	80086ca <__gethex+0x146>
 800893e:	6922      	ldr	r2, [r4, #16]
 8008940:	3202      	adds	r2, #2
 8008942:	f104 010c 	add.w	r1, r4, #12
 8008946:	0092      	lsls	r2, r2, #2
 8008948:	300c      	adds	r0, #12
 800894a:	f7fd f8bc 	bl	8005ac6 <memcpy>
 800894e:	4621      	mov	r1, r4
 8008950:	9801      	ldr	r0, [sp, #4]
 8008952:	f7fe f859 	bl	8006a08 <_Bfree>
 8008956:	464c      	mov	r4, r9
 8008958:	6923      	ldr	r3, [r4, #16]
 800895a:	1c5a      	adds	r2, r3, #1
 800895c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008960:	6122      	str	r2, [r4, #16]
 8008962:	2201      	movs	r2, #1
 8008964:	615a      	str	r2, [r3, #20]
 8008966:	e7be      	b.n	80088e6 <__gethex+0x362>
 8008968:	6922      	ldr	r2, [r4, #16]
 800896a:	455a      	cmp	r2, fp
 800896c:	dd0b      	ble.n	8008986 <__gethex+0x402>
 800896e:	2101      	movs	r1, #1
 8008970:	4620      	mov	r0, r4
 8008972:	f7ff fd9f 	bl	80084b4 <rshift>
 8008976:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800897a:	3701      	adds	r7, #1
 800897c:	42bb      	cmp	r3, r7
 800897e:	f6ff aee0 	blt.w	8008742 <__gethex+0x1be>
 8008982:	2501      	movs	r5, #1
 8008984:	e7c2      	b.n	800890c <__gethex+0x388>
 8008986:	f016 061f 	ands.w	r6, r6, #31
 800898a:	d0fa      	beq.n	8008982 <__gethex+0x3fe>
 800898c:	4453      	add	r3, sl
 800898e:	f1c6 0620 	rsb	r6, r6, #32
 8008992:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008996:	f7fe f8e9 	bl	8006b6c <__hi0bits>
 800899a:	42b0      	cmp	r0, r6
 800899c:	dbe7      	blt.n	800896e <__gethex+0x3ea>
 800899e:	e7f0      	b.n	8008982 <__gethex+0x3fe>
 80089a0:	0800ca09 	.word	0x0800ca09

080089a4 <L_shift>:
 80089a4:	f1c2 0208 	rsb	r2, r2, #8
 80089a8:	0092      	lsls	r2, r2, #2
 80089aa:	b570      	push	{r4, r5, r6, lr}
 80089ac:	f1c2 0620 	rsb	r6, r2, #32
 80089b0:	6843      	ldr	r3, [r0, #4]
 80089b2:	6804      	ldr	r4, [r0, #0]
 80089b4:	fa03 f506 	lsl.w	r5, r3, r6
 80089b8:	432c      	orrs	r4, r5
 80089ba:	40d3      	lsrs	r3, r2
 80089bc:	6004      	str	r4, [r0, #0]
 80089be:	f840 3f04 	str.w	r3, [r0, #4]!
 80089c2:	4288      	cmp	r0, r1
 80089c4:	d3f4      	bcc.n	80089b0 <L_shift+0xc>
 80089c6:	bd70      	pop	{r4, r5, r6, pc}

080089c8 <__match>:
 80089c8:	b530      	push	{r4, r5, lr}
 80089ca:	6803      	ldr	r3, [r0, #0]
 80089cc:	3301      	adds	r3, #1
 80089ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089d2:	b914      	cbnz	r4, 80089da <__match+0x12>
 80089d4:	6003      	str	r3, [r0, #0]
 80089d6:	2001      	movs	r0, #1
 80089d8:	bd30      	pop	{r4, r5, pc}
 80089da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089de:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80089e2:	2d19      	cmp	r5, #25
 80089e4:	bf98      	it	ls
 80089e6:	3220      	addls	r2, #32
 80089e8:	42a2      	cmp	r2, r4
 80089ea:	d0f0      	beq.n	80089ce <__match+0x6>
 80089ec:	2000      	movs	r0, #0
 80089ee:	e7f3      	b.n	80089d8 <__match+0x10>

080089f0 <__hexnan>:
 80089f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089f4:	680b      	ldr	r3, [r1, #0]
 80089f6:	6801      	ldr	r1, [r0, #0]
 80089f8:	115e      	asrs	r6, r3, #5
 80089fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80089fe:	f013 031f 	ands.w	r3, r3, #31
 8008a02:	b087      	sub	sp, #28
 8008a04:	bf18      	it	ne
 8008a06:	3604      	addne	r6, #4
 8008a08:	2500      	movs	r5, #0
 8008a0a:	1f37      	subs	r7, r6, #4
 8008a0c:	4682      	mov	sl, r0
 8008a0e:	4690      	mov	r8, r2
 8008a10:	9301      	str	r3, [sp, #4]
 8008a12:	f846 5c04 	str.w	r5, [r6, #-4]
 8008a16:	46b9      	mov	r9, r7
 8008a18:	463c      	mov	r4, r7
 8008a1a:	9502      	str	r5, [sp, #8]
 8008a1c:	46ab      	mov	fp, r5
 8008a1e:	784a      	ldrb	r2, [r1, #1]
 8008a20:	1c4b      	adds	r3, r1, #1
 8008a22:	9303      	str	r3, [sp, #12]
 8008a24:	b342      	cbz	r2, 8008a78 <__hexnan+0x88>
 8008a26:	4610      	mov	r0, r2
 8008a28:	9105      	str	r1, [sp, #20]
 8008a2a:	9204      	str	r2, [sp, #16]
 8008a2c:	f7ff fd94 	bl	8008558 <__hexdig_fun>
 8008a30:	2800      	cmp	r0, #0
 8008a32:	d151      	bne.n	8008ad8 <__hexnan+0xe8>
 8008a34:	9a04      	ldr	r2, [sp, #16]
 8008a36:	9905      	ldr	r1, [sp, #20]
 8008a38:	2a20      	cmp	r2, #32
 8008a3a:	d818      	bhi.n	8008a6e <__hexnan+0x7e>
 8008a3c:	9b02      	ldr	r3, [sp, #8]
 8008a3e:	459b      	cmp	fp, r3
 8008a40:	dd13      	ble.n	8008a6a <__hexnan+0x7a>
 8008a42:	454c      	cmp	r4, r9
 8008a44:	d206      	bcs.n	8008a54 <__hexnan+0x64>
 8008a46:	2d07      	cmp	r5, #7
 8008a48:	dc04      	bgt.n	8008a54 <__hexnan+0x64>
 8008a4a:	462a      	mov	r2, r5
 8008a4c:	4649      	mov	r1, r9
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f7ff ffa8 	bl	80089a4 <L_shift>
 8008a54:	4544      	cmp	r4, r8
 8008a56:	d952      	bls.n	8008afe <__hexnan+0x10e>
 8008a58:	2300      	movs	r3, #0
 8008a5a:	f1a4 0904 	sub.w	r9, r4, #4
 8008a5e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008a62:	f8cd b008 	str.w	fp, [sp, #8]
 8008a66:	464c      	mov	r4, r9
 8008a68:	461d      	mov	r5, r3
 8008a6a:	9903      	ldr	r1, [sp, #12]
 8008a6c:	e7d7      	b.n	8008a1e <__hexnan+0x2e>
 8008a6e:	2a29      	cmp	r2, #41	@ 0x29
 8008a70:	d157      	bne.n	8008b22 <__hexnan+0x132>
 8008a72:	3102      	adds	r1, #2
 8008a74:	f8ca 1000 	str.w	r1, [sl]
 8008a78:	f1bb 0f00 	cmp.w	fp, #0
 8008a7c:	d051      	beq.n	8008b22 <__hexnan+0x132>
 8008a7e:	454c      	cmp	r4, r9
 8008a80:	d206      	bcs.n	8008a90 <__hexnan+0xa0>
 8008a82:	2d07      	cmp	r5, #7
 8008a84:	dc04      	bgt.n	8008a90 <__hexnan+0xa0>
 8008a86:	462a      	mov	r2, r5
 8008a88:	4649      	mov	r1, r9
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	f7ff ff8a 	bl	80089a4 <L_shift>
 8008a90:	4544      	cmp	r4, r8
 8008a92:	d936      	bls.n	8008b02 <__hexnan+0x112>
 8008a94:	f1a8 0204 	sub.w	r2, r8, #4
 8008a98:	4623      	mov	r3, r4
 8008a9a:	f853 1b04 	ldr.w	r1, [r3], #4
 8008a9e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008aa2:	429f      	cmp	r7, r3
 8008aa4:	d2f9      	bcs.n	8008a9a <__hexnan+0xaa>
 8008aa6:	1b3b      	subs	r3, r7, r4
 8008aa8:	f023 0303 	bic.w	r3, r3, #3
 8008aac:	3304      	adds	r3, #4
 8008aae:	3401      	adds	r4, #1
 8008ab0:	3e03      	subs	r6, #3
 8008ab2:	42b4      	cmp	r4, r6
 8008ab4:	bf88      	it	hi
 8008ab6:	2304      	movhi	r3, #4
 8008ab8:	4443      	add	r3, r8
 8008aba:	2200      	movs	r2, #0
 8008abc:	f843 2b04 	str.w	r2, [r3], #4
 8008ac0:	429f      	cmp	r7, r3
 8008ac2:	d2fb      	bcs.n	8008abc <__hexnan+0xcc>
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	b91b      	cbnz	r3, 8008ad0 <__hexnan+0xe0>
 8008ac8:	4547      	cmp	r7, r8
 8008aca:	d128      	bne.n	8008b1e <__hexnan+0x12e>
 8008acc:	2301      	movs	r3, #1
 8008ace:	603b      	str	r3, [r7, #0]
 8008ad0:	2005      	movs	r0, #5
 8008ad2:	b007      	add	sp, #28
 8008ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ad8:	3501      	adds	r5, #1
 8008ada:	2d08      	cmp	r5, #8
 8008adc:	f10b 0b01 	add.w	fp, fp, #1
 8008ae0:	dd06      	ble.n	8008af0 <__hexnan+0x100>
 8008ae2:	4544      	cmp	r4, r8
 8008ae4:	d9c1      	bls.n	8008a6a <__hexnan+0x7a>
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	f844 3c04 	str.w	r3, [r4, #-4]
 8008aec:	2501      	movs	r5, #1
 8008aee:	3c04      	subs	r4, #4
 8008af0:	6822      	ldr	r2, [r4, #0]
 8008af2:	f000 000f 	and.w	r0, r0, #15
 8008af6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008afa:	6020      	str	r0, [r4, #0]
 8008afc:	e7b5      	b.n	8008a6a <__hexnan+0x7a>
 8008afe:	2508      	movs	r5, #8
 8008b00:	e7b3      	b.n	8008a6a <__hexnan+0x7a>
 8008b02:	9b01      	ldr	r3, [sp, #4]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d0dd      	beq.n	8008ac4 <__hexnan+0xd4>
 8008b08:	f1c3 0320 	rsb	r3, r3, #32
 8008b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b10:	40da      	lsrs	r2, r3
 8008b12:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008b16:	4013      	ands	r3, r2
 8008b18:	f846 3c04 	str.w	r3, [r6, #-4]
 8008b1c:	e7d2      	b.n	8008ac4 <__hexnan+0xd4>
 8008b1e:	3f04      	subs	r7, #4
 8008b20:	e7d0      	b.n	8008ac4 <__hexnan+0xd4>
 8008b22:	2004      	movs	r0, #4
 8008b24:	e7d5      	b.n	8008ad2 <__hexnan+0xe2>

08008b26 <__ascii_mbtowc>:
 8008b26:	b082      	sub	sp, #8
 8008b28:	b901      	cbnz	r1, 8008b2c <__ascii_mbtowc+0x6>
 8008b2a:	a901      	add	r1, sp, #4
 8008b2c:	b142      	cbz	r2, 8008b40 <__ascii_mbtowc+0x1a>
 8008b2e:	b14b      	cbz	r3, 8008b44 <__ascii_mbtowc+0x1e>
 8008b30:	7813      	ldrb	r3, [r2, #0]
 8008b32:	600b      	str	r3, [r1, #0]
 8008b34:	7812      	ldrb	r2, [r2, #0]
 8008b36:	1e10      	subs	r0, r2, #0
 8008b38:	bf18      	it	ne
 8008b3a:	2001      	movne	r0, #1
 8008b3c:	b002      	add	sp, #8
 8008b3e:	4770      	bx	lr
 8008b40:	4610      	mov	r0, r2
 8008b42:	e7fb      	b.n	8008b3c <__ascii_mbtowc+0x16>
 8008b44:	f06f 0001 	mvn.w	r0, #1
 8008b48:	e7f8      	b.n	8008b3c <__ascii_mbtowc+0x16>

08008b4a <_realloc_r>:
 8008b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b4e:	4680      	mov	r8, r0
 8008b50:	4615      	mov	r5, r2
 8008b52:	460c      	mov	r4, r1
 8008b54:	b921      	cbnz	r1, 8008b60 <_realloc_r+0x16>
 8008b56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b5a:	4611      	mov	r1, r2
 8008b5c:	f7fd be88 	b.w	8006870 <_malloc_r>
 8008b60:	b92a      	cbnz	r2, 8008b6e <_realloc_r+0x24>
 8008b62:	f7fd fe11 	bl	8006788 <_free_r>
 8008b66:	2400      	movs	r4, #0
 8008b68:	4620      	mov	r0, r4
 8008b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b6e:	f000 f840 	bl	8008bf2 <_malloc_usable_size_r>
 8008b72:	4285      	cmp	r5, r0
 8008b74:	4606      	mov	r6, r0
 8008b76:	d802      	bhi.n	8008b7e <_realloc_r+0x34>
 8008b78:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008b7c:	d8f4      	bhi.n	8008b68 <_realloc_r+0x1e>
 8008b7e:	4629      	mov	r1, r5
 8008b80:	4640      	mov	r0, r8
 8008b82:	f7fd fe75 	bl	8006870 <_malloc_r>
 8008b86:	4607      	mov	r7, r0
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	d0ec      	beq.n	8008b66 <_realloc_r+0x1c>
 8008b8c:	42b5      	cmp	r5, r6
 8008b8e:	462a      	mov	r2, r5
 8008b90:	4621      	mov	r1, r4
 8008b92:	bf28      	it	cs
 8008b94:	4632      	movcs	r2, r6
 8008b96:	f7fc ff96 	bl	8005ac6 <memcpy>
 8008b9a:	4621      	mov	r1, r4
 8008b9c:	4640      	mov	r0, r8
 8008b9e:	f7fd fdf3 	bl	8006788 <_free_r>
 8008ba2:	463c      	mov	r4, r7
 8008ba4:	e7e0      	b.n	8008b68 <_realloc_r+0x1e>

08008ba6 <__ascii_wctomb>:
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	4608      	mov	r0, r1
 8008baa:	b141      	cbz	r1, 8008bbe <__ascii_wctomb+0x18>
 8008bac:	2aff      	cmp	r2, #255	@ 0xff
 8008bae:	d904      	bls.n	8008bba <__ascii_wctomb+0x14>
 8008bb0:	228a      	movs	r2, #138	@ 0x8a
 8008bb2:	601a      	str	r2, [r3, #0]
 8008bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb8:	4770      	bx	lr
 8008bba:	700a      	strb	r2, [r1, #0]
 8008bbc:	2001      	movs	r0, #1
 8008bbe:	4770      	bx	lr

08008bc0 <fiprintf>:
 8008bc0:	b40e      	push	{r1, r2, r3}
 8008bc2:	b503      	push	{r0, r1, lr}
 8008bc4:	4601      	mov	r1, r0
 8008bc6:	ab03      	add	r3, sp, #12
 8008bc8:	4805      	ldr	r0, [pc, #20]	@ (8008be0 <fiprintf+0x20>)
 8008bca:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bce:	6800      	ldr	r0, [r0, #0]
 8008bd0:	9301      	str	r3, [sp, #4]
 8008bd2:	f000 f83f 	bl	8008c54 <_vfiprintf_r>
 8008bd6:	b002      	add	sp, #8
 8008bd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bdc:	b003      	add	sp, #12
 8008bde:	4770      	bx	lr
 8008be0:	20000078 	.word	0x20000078

08008be4 <abort>:
 8008be4:	b508      	push	{r3, lr}
 8008be6:	2006      	movs	r0, #6
 8008be8:	f000 fa08 	bl	8008ffc <raise>
 8008bec:	2001      	movs	r0, #1
 8008bee:	f7f9 f8ae 	bl	8001d4e <_exit>

08008bf2 <_malloc_usable_size_r>:
 8008bf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bf6:	1f18      	subs	r0, r3, #4
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	bfbc      	itt	lt
 8008bfc:	580b      	ldrlt	r3, [r1, r0]
 8008bfe:	18c0      	addlt	r0, r0, r3
 8008c00:	4770      	bx	lr

08008c02 <__sfputc_r>:
 8008c02:	6893      	ldr	r3, [r2, #8]
 8008c04:	3b01      	subs	r3, #1
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	b410      	push	{r4}
 8008c0a:	6093      	str	r3, [r2, #8]
 8008c0c:	da08      	bge.n	8008c20 <__sfputc_r+0x1e>
 8008c0e:	6994      	ldr	r4, [r2, #24]
 8008c10:	42a3      	cmp	r3, r4
 8008c12:	db01      	blt.n	8008c18 <__sfputc_r+0x16>
 8008c14:	290a      	cmp	r1, #10
 8008c16:	d103      	bne.n	8008c20 <__sfputc_r+0x1e>
 8008c18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c1c:	f000 b932 	b.w	8008e84 <__swbuf_r>
 8008c20:	6813      	ldr	r3, [r2, #0]
 8008c22:	1c58      	adds	r0, r3, #1
 8008c24:	6010      	str	r0, [r2, #0]
 8008c26:	7019      	strb	r1, [r3, #0]
 8008c28:	4608      	mov	r0, r1
 8008c2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <__sfputs_r>:
 8008c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c32:	4606      	mov	r6, r0
 8008c34:	460f      	mov	r7, r1
 8008c36:	4614      	mov	r4, r2
 8008c38:	18d5      	adds	r5, r2, r3
 8008c3a:	42ac      	cmp	r4, r5
 8008c3c:	d101      	bne.n	8008c42 <__sfputs_r+0x12>
 8008c3e:	2000      	movs	r0, #0
 8008c40:	e007      	b.n	8008c52 <__sfputs_r+0x22>
 8008c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c46:	463a      	mov	r2, r7
 8008c48:	4630      	mov	r0, r6
 8008c4a:	f7ff ffda 	bl	8008c02 <__sfputc_r>
 8008c4e:	1c43      	adds	r3, r0, #1
 8008c50:	d1f3      	bne.n	8008c3a <__sfputs_r+0xa>
 8008c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c54 <_vfiprintf_r>:
 8008c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c58:	460d      	mov	r5, r1
 8008c5a:	b09d      	sub	sp, #116	@ 0x74
 8008c5c:	4614      	mov	r4, r2
 8008c5e:	4698      	mov	r8, r3
 8008c60:	4606      	mov	r6, r0
 8008c62:	b118      	cbz	r0, 8008c6c <_vfiprintf_r+0x18>
 8008c64:	6a03      	ldr	r3, [r0, #32]
 8008c66:	b90b      	cbnz	r3, 8008c6c <_vfiprintf_r+0x18>
 8008c68:	f7fc fdfa 	bl	8005860 <__sinit>
 8008c6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c6e:	07d9      	lsls	r1, r3, #31
 8008c70:	d405      	bmi.n	8008c7e <_vfiprintf_r+0x2a>
 8008c72:	89ab      	ldrh	r3, [r5, #12]
 8008c74:	059a      	lsls	r2, r3, #22
 8008c76:	d402      	bmi.n	8008c7e <_vfiprintf_r+0x2a>
 8008c78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c7a:	f7fc ff22 	bl	8005ac2 <__retarget_lock_acquire_recursive>
 8008c7e:	89ab      	ldrh	r3, [r5, #12]
 8008c80:	071b      	lsls	r3, r3, #28
 8008c82:	d501      	bpl.n	8008c88 <_vfiprintf_r+0x34>
 8008c84:	692b      	ldr	r3, [r5, #16]
 8008c86:	b99b      	cbnz	r3, 8008cb0 <_vfiprintf_r+0x5c>
 8008c88:	4629      	mov	r1, r5
 8008c8a:	4630      	mov	r0, r6
 8008c8c:	f000 f938 	bl	8008f00 <__swsetup_r>
 8008c90:	b170      	cbz	r0, 8008cb0 <_vfiprintf_r+0x5c>
 8008c92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c94:	07dc      	lsls	r4, r3, #31
 8008c96:	d504      	bpl.n	8008ca2 <_vfiprintf_r+0x4e>
 8008c98:	f04f 30ff 	mov.w	r0, #4294967295
 8008c9c:	b01d      	add	sp, #116	@ 0x74
 8008c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ca2:	89ab      	ldrh	r3, [r5, #12]
 8008ca4:	0598      	lsls	r0, r3, #22
 8008ca6:	d4f7      	bmi.n	8008c98 <_vfiprintf_r+0x44>
 8008ca8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008caa:	f7fc ff0b 	bl	8005ac4 <__retarget_lock_release_recursive>
 8008cae:	e7f3      	b.n	8008c98 <_vfiprintf_r+0x44>
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cb4:	2320      	movs	r3, #32
 8008cb6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008cba:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cbe:	2330      	movs	r3, #48	@ 0x30
 8008cc0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008e70 <_vfiprintf_r+0x21c>
 8008cc4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008cc8:	f04f 0901 	mov.w	r9, #1
 8008ccc:	4623      	mov	r3, r4
 8008cce:	469a      	mov	sl, r3
 8008cd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cd4:	b10a      	cbz	r2, 8008cda <_vfiprintf_r+0x86>
 8008cd6:	2a25      	cmp	r2, #37	@ 0x25
 8008cd8:	d1f9      	bne.n	8008cce <_vfiprintf_r+0x7a>
 8008cda:	ebba 0b04 	subs.w	fp, sl, r4
 8008cde:	d00b      	beq.n	8008cf8 <_vfiprintf_r+0xa4>
 8008ce0:	465b      	mov	r3, fp
 8008ce2:	4622      	mov	r2, r4
 8008ce4:	4629      	mov	r1, r5
 8008ce6:	4630      	mov	r0, r6
 8008ce8:	f7ff ffa2 	bl	8008c30 <__sfputs_r>
 8008cec:	3001      	adds	r0, #1
 8008cee:	f000 80a7 	beq.w	8008e40 <_vfiprintf_r+0x1ec>
 8008cf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008cf4:	445a      	add	r2, fp
 8008cf6:	9209      	str	r2, [sp, #36]	@ 0x24
 8008cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	f000 809f 	beq.w	8008e40 <_vfiprintf_r+0x1ec>
 8008d02:	2300      	movs	r3, #0
 8008d04:	f04f 32ff 	mov.w	r2, #4294967295
 8008d08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d0c:	f10a 0a01 	add.w	sl, sl, #1
 8008d10:	9304      	str	r3, [sp, #16]
 8008d12:	9307      	str	r3, [sp, #28]
 8008d14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d18:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d1a:	4654      	mov	r4, sl
 8008d1c:	2205      	movs	r2, #5
 8008d1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d22:	4853      	ldr	r0, [pc, #332]	@ (8008e70 <_vfiprintf_r+0x21c>)
 8008d24:	f7f7 fa54 	bl	80001d0 <memchr>
 8008d28:	9a04      	ldr	r2, [sp, #16]
 8008d2a:	b9d8      	cbnz	r0, 8008d64 <_vfiprintf_r+0x110>
 8008d2c:	06d1      	lsls	r1, r2, #27
 8008d2e:	bf44      	itt	mi
 8008d30:	2320      	movmi	r3, #32
 8008d32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d36:	0713      	lsls	r3, r2, #28
 8008d38:	bf44      	itt	mi
 8008d3a:	232b      	movmi	r3, #43	@ 0x2b
 8008d3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d40:	f89a 3000 	ldrb.w	r3, [sl]
 8008d44:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d46:	d015      	beq.n	8008d74 <_vfiprintf_r+0x120>
 8008d48:	9a07      	ldr	r2, [sp, #28]
 8008d4a:	4654      	mov	r4, sl
 8008d4c:	2000      	movs	r0, #0
 8008d4e:	f04f 0c0a 	mov.w	ip, #10
 8008d52:	4621      	mov	r1, r4
 8008d54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d58:	3b30      	subs	r3, #48	@ 0x30
 8008d5a:	2b09      	cmp	r3, #9
 8008d5c:	d94b      	bls.n	8008df6 <_vfiprintf_r+0x1a2>
 8008d5e:	b1b0      	cbz	r0, 8008d8e <_vfiprintf_r+0x13a>
 8008d60:	9207      	str	r2, [sp, #28]
 8008d62:	e014      	b.n	8008d8e <_vfiprintf_r+0x13a>
 8008d64:	eba0 0308 	sub.w	r3, r0, r8
 8008d68:	fa09 f303 	lsl.w	r3, r9, r3
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	9304      	str	r3, [sp, #16]
 8008d70:	46a2      	mov	sl, r4
 8008d72:	e7d2      	b.n	8008d1a <_vfiprintf_r+0xc6>
 8008d74:	9b03      	ldr	r3, [sp, #12]
 8008d76:	1d19      	adds	r1, r3, #4
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	9103      	str	r1, [sp, #12]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	bfbb      	ittet	lt
 8008d80:	425b      	neglt	r3, r3
 8008d82:	f042 0202 	orrlt.w	r2, r2, #2
 8008d86:	9307      	strge	r3, [sp, #28]
 8008d88:	9307      	strlt	r3, [sp, #28]
 8008d8a:	bfb8      	it	lt
 8008d8c:	9204      	strlt	r2, [sp, #16]
 8008d8e:	7823      	ldrb	r3, [r4, #0]
 8008d90:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d92:	d10a      	bne.n	8008daa <_vfiprintf_r+0x156>
 8008d94:	7863      	ldrb	r3, [r4, #1]
 8008d96:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d98:	d132      	bne.n	8008e00 <_vfiprintf_r+0x1ac>
 8008d9a:	9b03      	ldr	r3, [sp, #12]
 8008d9c:	1d1a      	adds	r2, r3, #4
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	9203      	str	r2, [sp, #12]
 8008da2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008da6:	3402      	adds	r4, #2
 8008da8:	9305      	str	r3, [sp, #20]
 8008daa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008e80 <_vfiprintf_r+0x22c>
 8008dae:	7821      	ldrb	r1, [r4, #0]
 8008db0:	2203      	movs	r2, #3
 8008db2:	4650      	mov	r0, sl
 8008db4:	f7f7 fa0c 	bl	80001d0 <memchr>
 8008db8:	b138      	cbz	r0, 8008dca <_vfiprintf_r+0x176>
 8008dba:	9b04      	ldr	r3, [sp, #16]
 8008dbc:	eba0 000a 	sub.w	r0, r0, sl
 8008dc0:	2240      	movs	r2, #64	@ 0x40
 8008dc2:	4082      	lsls	r2, r0
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	3401      	adds	r4, #1
 8008dc8:	9304      	str	r3, [sp, #16]
 8008dca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dce:	4829      	ldr	r0, [pc, #164]	@ (8008e74 <_vfiprintf_r+0x220>)
 8008dd0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008dd4:	2206      	movs	r2, #6
 8008dd6:	f7f7 f9fb 	bl	80001d0 <memchr>
 8008dda:	2800      	cmp	r0, #0
 8008ddc:	d03f      	beq.n	8008e5e <_vfiprintf_r+0x20a>
 8008dde:	4b26      	ldr	r3, [pc, #152]	@ (8008e78 <_vfiprintf_r+0x224>)
 8008de0:	bb1b      	cbnz	r3, 8008e2a <_vfiprintf_r+0x1d6>
 8008de2:	9b03      	ldr	r3, [sp, #12]
 8008de4:	3307      	adds	r3, #7
 8008de6:	f023 0307 	bic.w	r3, r3, #7
 8008dea:	3308      	adds	r3, #8
 8008dec:	9303      	str	r3, [sp, #12]
 8008dee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008df0:	443b      	add	r3, r7
 8008df2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008df4:	e76a      	b.n	8008ccc <_vfiprintf_r+0x78>
 8008df6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dfa:	460c      	mov	r4, r1
 8008dfc:	2001      	movs	r0, #1
 8008dfe:	e7a8      	b.n	8008d52 <_vfiprintf_r+0xfe>
 8008e00:	2300      	movs	r3, #0
 8008e02:	3401      	adds	r4, #1
 8008e04:	9305      	str	r3, [sp, #20]
 8008e06:	4619      	mov	r1, r3
 8008e08:	f04f 0c0a 	mov.w	ip, #10
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e12:	3a30      	subs	r2, #48	@ 0x30
 8008e14:	2a09      	cmp	r2, #9
 8008e16:	d903      	bls.n	8008e20 <_vfiprintf_r+0x1cc>
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d0c6      	beq.n	8008daa <_vfiprintf_r+0x156>
 8008e1c:	9105      	str	r1, [sp, #20]
 8008e1e:	e7c4      	b.n	8008daa <_vfiprintf_r+0x156>
 8008e20:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e24:	4604      	mov	r4, r0
 8008e26:	2301      	movs	r3, #1
 8008e28:	e7f0      	b.n	8008e0c <_vfiprintf_r+0x1b8>
 8008e2a:	ab03      	add	r3, sp, #12
 8008e2c:	9300      	str	r3, [sp, #0]
 8008e2e:	462a      	mov	r2, r5
 8008e30:	4b12      	ldr	r3, [pc, #72]	@ (8008e7c <_vfiprintf_r+0x228>)
 8008e32:	a904      	add	r1, sp, #16
 8008e34:	4630      	mov	r0, r6
 8008e36:	f7fb febb 	bl	8004bb0 <_printf_float>
 8008e3a:	4607      	mov	r7, r0
 8008e3c:	1c78      	adds	r0, r7, #1
 8008e3e:	d1d6      	bne.n	8008dee <_vfiprintf_r+0x19a>
 8008e40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e42:	07d9      	lsls	r1, r3, #31
 8008e44:	d405      	bmi.n	8008e52 <_vfiprintf_r+0x1fe>
 8008e46:	89ab      	ldrh	r3, [r5, #12]
 8008e48:	059a      	lsls	r2, r3, #22
 8008e4a:	d402      	bmi.n	8008e52 <_vfiprintf_r+0x1fe>
 8008e4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e4e:	f7fc fe39 	bl	8005ac4 <__retarget_lock_release_recursive>
 8008e52:	89ab      	ldrh	r3, [r5, #12]
 8008e54:	065b      	lsls	r3, r3, #25
 8008e56:	f53f af1f 	bmi.w	8008c98 <_vfiprintf_r+0x44>
 8008e5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e5c:	e71e      	b.n	8008c9c <_vfiprintf_r+0x48>
 8008e5e:	ab03      	add	r3, sp, #12
 8008e60:	9300      	str	r3, [sp, #0]
 8008e62:	462a      	mov	r2, r5
 8008e64:	4b05      	ldr	r3, [pc, #20]	@ (8008e7c <_vfiprintf_r+0x228>)
 8008e66:	a904      	add	r1, sp, #16
 8008e68:	4630      	mov	r0, r6
 8008e6a:	f7fc f939 	bl	80050e0 <_printf_i>
 8008e6e:	e7e4      	b.n	8008e3a <_vfiprintf_r+0x1e6>
 8008e70:	0800ccc9 	.word	0x0800ccc9
 8008e74:	0800ccd3 	.word	0x0800ccd3
 8008e78:	08004bb1 	.word	0x08004bb1
 8008e7c:	08008c31 	.word	0x08008c31
 8008e80:	0800cccf 	.word	0x0800cccf

08008e84 <__swbuf_r>:
 8008e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e86:	460e      	mov	r6, r1
 8008e88:	4614      	mov	r4, r2
 8008e8a:	4605      	mov	r5, r0
 8008e8c:	b118      	cbz	r0, 8008e96 <__swbuf_r+0x12>
 8008e8e:	6a03      	ldr	r3, [r0, #32]
 8008e90:	b90b      	cbnz	r3, 8008e96 <__swbuf_r+0x12>
 8008e92:	f7fc fce5 	bl	8005860 <__sinit>
 8008e96:	69a3      	ldr	r3, [r4, #24]
 8008e98:	60a3      	str	r3, [r4, #8]
 8008e9a:	89a3      	ldrh	r3, [r4, #12]
 8008e9c:	071a      	lsls	r2, r3, #28
 8008e9e:	d501      	bpl.n	8008ea4 <__swbuf_r+0x20>
 8008ea0:	6923      	ldr	r3, [r4, #16]
 8008ea2:	b943      	cbnz	r3, 8008eb6 <__swbuf_r+0x32>
 8008ea4:	4621      	mov	r1, r4
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	f000 f82a 	bl	8008f00 <__swsetup_r>
 8008eac:	b118      	cbz	r0, 8008eb6 <__swbuf_r+0x32>
 8008eae:	f04f 37ff 	mov.w	r7, #4294967295
 8008eb2:	4638      	mov	r0, r7
 8008eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eb6:	6823      	ldr	r3, [r4, #0]
 8008eb8:	6922      	ldr	r2, [r4, #16]
 8008eba:	1a98      	subs	r0, r3, r2
 8008ebc:	6963      	ldr	r3, [r4, #20]
 8008ebe:	b2f6      	uxtb	r6, r6
 8008ec0:	4283      	cmp	r3, r0
 8008ec2:	4637      	mov	r7, r6
 8008ec4:	dc05      	bgt.n	8008ed2 <__swbuf_r+0x4e>
 8008ec6:	4621      	mov	r1, r4
 8008ec8:	4628      	mov	r0, r5
 8008eca:	f7ff fa6f 	bl	80083ac <_fflush_r>
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	d1ed      	bne.n	8008eae <__swbuf_r+0x2a>
 8008ed2:	68a3      	ldr	r3, [r4, #8]
 8008ed4:	3b01      	subs	r3, #1
 8008ed6:	60a3      	str	r3, [r4, #8]
 8008ed8:	6823      	ldr	r3, [r4, #0]
 8008eda:	1c5a      	adds	r2, r3, #1
 8008edc:	6022      	str	r2, [r4, #0]
 8008ede:	701e      	strb	r6, [r3, #0]
 8008ee0:	6962      	ldr	r2, [r4, #20]
 8008ee2:	1c43      	adds	r3, r0, #1
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d004      	beq.n	8008ef2 <__swbuf_r+0x6e>
 8008ee8:	89a3      	ldrh	r3, [r4, #12]
 8008eea:	07db      	lsls	r3, r3, #31
 8008eec:	d5e1      	bpl.n	8008eb2 <__swbuf_r+0x2e>
 8008eee:	2e0a      	cmp	r6, #10
 8008ef0:	d1df      	bne.n	8008eb2 <__swbuf_r+0x2e>
 8008ef2:	4621      	mov	r1, r4
 8008ef4:	4628      	mov	r0, r5
 8008ef6:	f7ff fa59 	bl	80083ac <_fflush_r>
 8008efa:	2800      	cmp	r0, #0
 8008efc:	d0d9      	beq.n	8008eb2 <__swbuf_r+0x2e>
 8008efe:	e7d6      	b.n	8008eae <__swbuf_r+0x2a>

08008f00 <__swsetup_r>:
 8008f00:	b538      	push	{r3, r4, r5, lr}
 8008f02:	4b29      	ldr	r3, [pc, #164]	@ (8008fa8 <__swsetup_r+0xa8>)
 8008f04:	4605      	mov	r5, r0
 8008f06:	6818      	ldr	r0, [r3, #0]
 8008f08:	460c      	mov	r4, r1
 8008f0a:	b118      	cbz	r0, 8008f14 <__swsetup_r+0x14>
 8008f0c:	6a03      	ldr	r3, [r0, #32]
 8008f0e:	b90b      	cbnz	r3, 8008f14 <__swsetup_r+0x14>
 8008f10:	f7fc fca6 	bl	8005860 <__sinit>
 8008f14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f18:	0719      	lsls	r1, r3, #28
 8008f1a:	d422      	bmi.n	8008f62 <__swsetup_r+0x62>
 8008f1c:	06da      	lsls	r2, r3, #27
 8008f1e:	d407      	bmi.n	8008f30 <__swsetup_r+0x30>
 8008f20:	2209      	movs	r2, #9
 8008f22:	602a      	str	r2, [r5, #0]
 8008f24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f28:	81a3      	strh	r3, [r4, #12]
 8008f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f2e:	e033      	b.n	8008f98 <__swsetup_r+0x98>
 8008f30:	0758      	lsls	r0, r3, #29
 8008f32:	d512      	bpl.n	8008f5a <__swsetup_r+0x5a>
 8008f34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f36:	b141      	cbz	r1, 8008f4a <__swsetup_r+0x4a>
 8008f38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f3c:	4299      	cmp	r1, r3
 8008f3e:	d002      	beq.n	8008f46 <__swsetup_r+0x46>
 8008f40:	4628      	mov	r0, r5
 8008f42:	f7fd fc21 	bl	8006788 <_free_r>
 8008f46:	2300      	movs	r3, #0
 8008f48:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f4a:	89a3      	ldrh	r3, [r4, #12]
 8008f4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008f50:	81a3      	strh	r3, [r4, #12]
 8008f52:	2300      	movs	r3, #0
 8008f54:	6063      	str	r3, [r4, #4]
 8008f56:	6923      	ldr	r3, [r4, #16]
 8008f58:	6023      	str	r3, [r4, #0]
 8008f5a:	89a3      	ldrh	r3, [r4, #12]
 8008f5c:	f043 0308 	orr.w	r3, r3, #8
 8008f60:	81a3      	strh	r3, [r4, #12]
 8008f62:	6923      	ldr	r3, [r4, #16]
 8008f64:	b94b      	cbnz	r3, 8008f7a <__swsetup_r+0x7a>
 8008f66:	89a3      	ldrh	r3, [r4, #12]
 8008f68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008f6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f70:	d003      	beq.n	8008f7a <__swsetup_r+0x7a>
 8008f72:	4621      	mov	r1, r4
 8008f74:	4628      	mov	r0, r5
 8008f76:	f000 f883 	bl	8009080 <__smakebuf_r>
 8008f7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f7e:	f013 0201 	ands.w	r2, r3, #1
 8008f82:	d00a      	beq.n	8008f9a <__swsetup_r+0x9a>
 8008f84:	2200      	movs	r2, #0
 8008f86:	60a2      	str	r2, [r4, #8]
 8008f88:	6962      	ldr	r2, [r4, #20]
 8008f8a:	4252      	negs	r2, r2
 8008f8c:	61a2      	str	r2, [r4, #24]
 8008f8e:	6922      	ldr	r2, [r4, #16]
 8008f90:	b942      	cbnz	r2, 8008fa4 <__swsetup_r+0xa4>
 8008f92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008f96:	d1c5      	bne.n	8008f24 <__swsetup_r+0x24>
 8008f98:	bd38      	pop	{r3, r4, r5, pc}
 8008f9a:	0799      	lsls	r1, r3, #30
 8008f9c:	bf58      	it	pl
 8008f9e:	6962      	ldrpl	r2, [r4, #20]
 8008fa0:	60a2      	str	r2, [r4, #8]
 8008fa2:	e7f4      	b.n	8008f8e <__swsetup_r+0x8e>
 8008fa4:	2000      	movs	r0, #0
 8008fa6:	e7f7      	b.n	8008f98 <__swsetup_r+0x98>
 8008fa8:	20000078 	.word	0x20000078

08008fac <_raise_r>:
 8008fac:	291f      	cmp	r1, #31
 8008fae:	b538      	push	{r3, r4, r5, lr}
 8008fb0:	4605      	mov	r5, r0
 8008fb2:	460c      	mov	r4, r1
 8008fb4:	d904      	bls.n	8008fc0 <_raise_r+0x14>
 8008fb6:	2316      	movs	r3, #22
 8008fb8:	6003      	str	r3, [r0, #0]
 8008fba:	f04f 30ff 	mov.w	r0, #4294967295
 8008fbe:	bd38      	pop	{r3, r4, r5, pc}
 8008fc0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008fc2:	b112      	cbz	r2, 8008fca <_raise_r+0x1e>
 8008fc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fc8:	b94b      	cbnz	r3, 8008fde <_raise_r+0x32>
 8008fca:	4628      	mov	r0, r5
 8008fcc:	f000 f830 	bl	8009030 <_getpid_r>
 8008fd0:	4622      	mov	r2, r4
 8008fd2:	4601      	mov	r1, r0
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fda:	f000 b817 	b.w	800900c <_kill_r>
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d00a      	beq.n	8008ff8 <_raise_r+0x4c>
 8008fe2:	1c59      	adds	r1, r3, #1
 8008fe4:	d103      	bne.n	8008fee <_raise_r+0x42>
 8008fe6:	2316      	movs	r3, #22
 8008fe8:	6003      	str	r3, [r0, #0]
 8008fea:	2001      	movs	r0, #1
 8008fec:	e7e7      	b.n	8008fbe <_raise_r+0x12>
 8008fee:	2100      	movs	r1, #0
 8008ff0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	4798      	blx	r3
 8008ff8:	2000      	movs	r0, #0
 8008ffa:	e7e0      	b.n	8008fbe <_raise_r+0x12>

08008ffc <raise>:
 8008ffc:	4b02      	ldr	r3, [pc, #8]	@ (8009008 <raise+0xc>)
 8008ffe:	4601      	mov	r1, r0
 8009000:	6818      	ldr	r0, [r3, #0]
 8009002:	f7ff bfd3 	b.w	8008fac <_raise_r>
 8009006:	bf00      	nop
 8009008:	20000078 	.word	0x20000078

0800900c <_kill_r>:
 800900c:	b538      	push	{r3, r4, r5, lr}
 800900e:	4d07      	ldr	r5, [pc, #28]	@ (800902c <_kill_r+0x20>)
 8009010:	2300      	movs	r3, #0
 8009012:	4604      	mov	r4, r0
 8009014:	4608      	mov	r0, r1
 8009016:	4611      	mov	r1, r2
 8009018:	602b      	str	r3, [r5, #0]
 800901a:	f7f8 fe88 	bl	8001d2e <_kill>
 800901e:	1c43      	adds	r3, r0, #1
 8009020:	d102      	bne.n	8009028 <_kill_r+0x1c>
 8009022:	682b      	ldr	r3, [r5, #0]
 8009024:	b103      	cbz	r3, 8009028 <_kill_r+0x1c>
 8009026:	6023      	str	r3, [r4, #0]
 8009028:	bd38      	pop	{r3, r4, r5, pc}
 800902a:	bf00      	nop
 800902c:	20000870 	.word	0x20000870

08009030 <_getpid_r>:
 8009030:	f7f8 be75 	b.w	8001d1e <_getpid>

08009034 <__swhatbuf_r>:
 8009034:	b570      	push	{r4, r5, r6, lr}
 8009036:	460c      	mov	r4, r1
 8009038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800903c:	2900      	cmp	r1, #0
 800903e:	b096      	sub	sp, #88	@ 0x58
 8009040:	4615      	mov	r5, r2
 8009042:	461e      	mov	r6, r3
 8009044:	da0d      	bge.n	8009062 <__swhatbuf_r+0x2e>
 8009046:	89a3      	ldrh	r3, [r4, #12]
 8009048:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800904c:	f04f 0100 	mov.w	r1, #0
 8009050:	bf14      	ite	ne
 8009052:	2340      	movne	r3, #64	@ 0x40
 8009054:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009058:	2000      	movs	r0, #0
 800905a:	6031      	str	r1, [r6, #0]
 800905c:	602b      	str	r3, [r5, #0]
 800905e:	b016      	add	sp, #88	@ 0x58
 8009060:	bd70      	pop	{r4, r5, r6, pc}
 8009062:	466a      	mov	r2, sp
 8009064:	f000 f848 	bl	80090f8 <_fstat_r>
 8009068:	2800      	cmp	r0, #0
 800906a:	dbec      	blt.n	8009046 <__swhatbuf_r+0x12>
 800906c:	9901      	ldr	r1, [sp, #4]
 800906e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009072:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009076:	4259      	negs	r1, r3
 8009078:	4159      	adcs	r1, r3
 800907a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800907e:	e7eb      	b.n	8009058 <__swhatbuf_r+0x24>

08009080 <__smakebuf_r>:
 8009080:	898b      	ldrh	r3, [r1, #12]
 8009082:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009084:	079d      	lsls	r5, r3, #30
 8009086:	4606      	mov	r6, r0
 8009088:	460c      	mov	r4, r1
 800908a:	d507      	bpl.n	800909c <__smakebuf_r+0x1c>
 800908c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009090:	6023      	str	r3, [r4, #0]
 8009092:	6123      	str	r3, [r4, #16]
 8009094:	2301      	movs	r3, #1
 8009096:	6163      	str	r3, [r4, #20]
 8009098:	b003      	add	sp, #12
 800909a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800909c:	ab01      	add	r3, sp, #4
 800909e:	466a      	mov	r2, sp
 80090a0:	f7ff ffc8 	bl	8009034 <__swhatbuf_r>
 80090a4:	9f00      	ldr	r7, [sp, #0]
 80090a6:	4605      	mov	r5, r0
 80090a8:	4639      	mov	r1, r7
 80090aa:	4630      	mov	r0, r6
 80090ac:	f7fd fbe0 	bl	8006870 <_malloc_r>
 80090b0:	b948      	cbnz	r0, 80090c6 <__smakebuf_r+0x46>
 80090b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090b6:	059a      	lsls	r2, r3, #22
 80090b8:	d4ee      	bmi.n	8009098 <__smakebuf_r+0x18>
 80090ba:	f023 0303 	bic.w	r3, r3, #3
 80090be:	f043 0302 	orr.w	r3, r3, #2
 80090c2:	81a3      	strh	r3, [r4, #12]
 80090c4:	e7e2      	b.n	800908c <__smakebuf_r+0xc>
 80090c6:	89a3      	ldrh	r3, [r4, #12]
 80090c8:	6020      	str	r0, [r4, #0]
 80090ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090ce:	81a3      	strh	r3, [r4, #12]
 80090d0:	9b01      	ldr	r3, [sp, #4]
 80090d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80090d6:	b15b      	cbz	r3, 80090f0 <__smakebuf_r+0x70>
 80090d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090dc:	4630      	mov	r0, r6
 80090de:	f000 f81d 	bl	800911c <_isatty_r>
 80090e2:	b128      	cbz	r0, 80090f0 <__smakebuf_r+0x70>
 80090e4:	89a3      	ldrh	r3, [r4, #12]
 80090e6:	f023 0303 	bic.w	r3, r3, #3
 80090ea:	f043 0301 	orr.w	r3, r3, #1
 80090ee:	81a3      	strh	r3, [r4, #12]
 80090f0:	89a3      	ldrh	r3, [r4, #12]
 80090f2:	431d      	orrs	r5, r3
 80090f4:	81a5      	strh	r5, [r4, #12]
 80090f6:	e7cf      	b.n	8009098 <__smakebuf_r+0x18>

080090f8 <_fstat_r>:
 80090f8:	b538      	push	{r3, r4, r5, lr}
 80090fa:	4d07      	ldr	r5, [pc, #28]	@ (8009118 <_fstat_r+0x20>)
 80090fc:	2300      	movs	r3, #0
 80090fe:	4604      	mov	r4, r0
 8009100:	4608      	mov	r0, r1
 8009102:	4611      	mov	r1, r2
 8009104:	602b      	str	r3, [r5, #0]
 8009106:	f7f8 fe72 	bl	8001dee <_fstat>
 800910a:	1c43      	adds	r3, r0, #1
 800910c:	d102      	bne.n	8009114 <_fstat_r+0x1c>
 800910e:	682b      	ldr	r3, [r5, #0]
 8009110:	b103      	cbz	r3, 8009114 <_fstat_r+0x1c>
 8009112:	6023      	str	r3, [r4, #0]
 8009114:	bd38      	pop	{r3, r4, r5, pc}
 8009116:	bf00      	nop
 8009118:	20000870 	.word	0x20000870

0800911c <_isatty_r>:
 800911c:	b538      	push	{r3, r4, r5, lr}
 800911e:	4d06      	ldr	r5, [pc, #24]	@ (8009138 <_isatty_r+0x1c>)
 8009120:	2300      	movs	r3, #0
 8009122:	4604      	mov	r4, r0
 8009124:	4608      	mov	r0, r1
 8009126:	602b      	str	r3, [r5, #0]
 8009128:	f7f8 fe71 	bl	8001e0e <_isatty>
 800912c:	1c43      	adds	r3, r0, #1
 800912e:	d102      	bne.n	8009136 <_isatty_r+0x1a>
 8009130:	682b      	ldr	r3, [r5, #0]
 8009132:	b103      	cbz	r3, 8009136 <_isatty_r+0x1a>
 8009134:	6023      	str	r3, [r4, #0]
 8009136:	bd38      	pop	{r3, r4, r5, pc}
 8009138:	20000870 	.word	0x20000870

0800913c <_init>:
 800913c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800913e:	bf00      	nop
 8009140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009142:	bc08      	pop	{r3}
 8009144:	469e      	mov	lr, r3
 8009146:	4770      	bx	lr

08009148 <_fini>:
 8009148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800914a:	bf00      	nop
 800914c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800914e:	bc08      	pop	{r3}
 8009150:	469e      	mov	lr, r3
 8009152:	4770      	bx	lr
