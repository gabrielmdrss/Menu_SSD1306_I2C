
Menu_ssd1306.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090ec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003c18  08009280  08009280  0000a280  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce98  0800ce98  0000e234  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce98  0800ce98  0000de98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cea0  0800cea0  0000e234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cea0  0800cea0  0000dea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cea4  0800cea4  0000dea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000234  20000000  0800cea8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e234  2**0
                  CONTENTS
 10 .bss          00000664  20000234  20000234  0000e234  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000898  20000898  0000e234  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e234  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bfac  00000000  00000000  0000e264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d33  00000000  00000000  0001a210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b08  00000000  00000000  0001bf48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000088c  00000000  00000000  0001ca50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021ae4  00000000  00000000  0001d2dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e592  00000000  00000000  0003edc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7ed9  00000000  00000000  0004d352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000086  00000000  00000000  0011522b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000042a4  00000000  00000000  001152b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00119558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000234 	.word	0x20000234
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009264 	.word	0x08009264

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000238 	.word	0x20000238
 80001cc:	08009264 	.word	0x08009264

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <MPU6050_Init>:
int16_t BMP280_dig_P9;
int32_t t_fine;
float t, p;

/* Functions */
void MPU6050_Init(void) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;
// check device ID WHO_AM_I
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x75, 1, &check, 1, 1000);
 8000fea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fee:	9302      	str	r3, [sp, #8]
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	9301      	str	r3, [sp, #4]
 8000ff4:	1dfb      	adds	r3, r7, #7
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	2275      	movs	r2, #117	@ 0x75
 8000ffc:	21d0      	movs	r1, #208	@ 0xd0
 8000ffe:	4823      	ldr	r0, [pc, #140]	@ (800108c <MPU6050_Init+0xa8>)
 8001000:	f001 fd92 	bl	8002b28 <HAL_I2C_Mem_Read>
	if (check == 0x68) // 0x68 will be returned by the sensor if OK
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	2b68      	cmp	r3, #104	@ 0x68
 8001008:	d13b      	bne.n	8001082 <MPU6050_Init+0x9e>
			{
// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x6B, 1, &Data, 1, 1000);
 800100e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001012:	9302      	str	r3, [sp, #8]
 8001014:	2301      	movs	r3, #1
 8001016:	9301      	str	r3, [sp, #4]
 8001018:	1dbb      	adds	r3, r7, #6
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2301      	movs	r3, #1
 800101e:	226b      	movs	r2, #107	@ 0x6b
 8001020:	21d0      	movs	r1, #208	@ 0xd0
 8001022:	481a      	ldr	r0, [pc, #104]	@ (800108c <MPU6050_Init+0xa8>)
 8001024:	f001 fc86 	bl	8002934 <HAL_I2C_Mem_Write>
// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8001028:	2307      	movs	r3, #7
 800102a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x19, 1, &Data, 1, 1000);
 800102c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001030:	9302      	str	r3, [sp, #8]
 8001032:	2301      	movs	r3, #1
 8001034:	9301      	str	r3, [sp, #4]
 8001036:	1dbb      	adds	r3, r7, #6
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	2301      	movs	r3, #1
 800103c:	2219      	movs	r2, #25
 800103e:	21d0      	movs	r1, #208	@ 0xd0
 8001040:	4812      	ldr	r0, [pc, #72]	@ (800108c <MPU6050_Init+0xa8>)
 8001042:	f001 fc77 	bl	8002934 <HAL_I2C_Mem_Write>
// Set Gyroscopic configuration in GYRO_CONFIG Register
		Data = 0x00; // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 ̐/s
 8001046:	2300      	movs	r3, #0
 8001048:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x1B, 1, &Data, 1, 1000);
 800104a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800104e:	9302      	str	r3, [sp, #8]
 8001050:	2301      	movs	r3, #1
 8001052:	9301      	str	r3, [sp, #4]
 8001054:	1dbb      	adds	r3, r7, #6
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	221b      	movs	r2, #27
 800105c:	21d0      	movs	r1, #208	@ 0xd0
 800105e:	480b      	ldr	r0, [pc, #44]	@ (800108c <MPU6050_Init+0xa8>)
 8001060:	f001 fc68 	bl	8002934 <HAL_I2C_Mem_Write>
// Set accelerometer configuration in ACCEL_CONFIG Register
		Data = 0x00; // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
 8001064:	2300      	movs	r3, #0
 8001066:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x1C, 1, &Data, 1, 1000);
 8001068:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800106c:	9302      	str	r3, [sp, #8]
 800106e:	2301      	movs	r3, #1
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	1dbb      	adds	r3, r7, #6
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2301      	movs	r3, #1
 8001078:	221c      	movs	r2, #28
 800107a:	21d0      	movs	r1, #208	@ 0xd0
 800107c:	4803      	ldr	r0, [pc, #12]	@ (800108c <MPU6050_Init+0xa8>)
 800107e:	f001 fc59 	bl	8002934 <HAL_I2C_Mem_Write>
	}
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200002a0 	.word	0x200002a0

08001090 <BMP280_Init>:

void MPU6500_Read_Values(void) {
}

void BMP280_Init(void) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b08c      	sub	sp, #48	@ 0x30
 8001094:	af04      	add	r7, sp, #16

	uint8_t Data;
	HAL_Delay(5);				//aguarda o start-up time (mínimo de 2ms)
 8001096:	2005      	movs	r0, #5
 8001098:	f001 f84a 	bl	8002130 <HAL_Delay>

	//Reseta o sensor e aguarda o start-up time novamente (mínimo de 2ms)
	Data = 0xB6;
 800109c:	23b6      	movs	r3, #182	@ 0xb6
 800109e:	77fb      	strb	r3, [r7, #31]
	HAL_I2C_Mem_Write(&hi2c1, BMP280_ADDR, RESET, 1, &Data, 1, 1000);
 80010a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010a4:	9302      	str	r3, [sp, #8]
 80010a6:	2301      	movs	r3, #1
 80010a8:	9301      	str	r3, [sp, #4]
 80010aa:	f107 031f 	add.w	r3, r7, #31
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	2301      	movs	r3, #1
 80010b2:	22e0      	movs	r2, #224	@ 0xe0
 80010b4:	21ec      	movs	r1, #236	@ 0xec
 80010b6:	4852      	ldr	r0, [pc, #328]	@ (8001200 <BMP280_Init+0x170>)
 80010b8:	f001 fc3c 	bl	8002934 <HAL_I2C_Mem_Write>
	HAL_Delay(5);				//aguarda 5 ms
 80010bc:	2005      	movs	r0, #5
 80010be:	f001 f837 	bl	8002130 <HAL_Delay>

	//Coletando os parâmetros de calibração
	uint8_t param[24];
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, CALIB_REGS, 1, param, 24, 1000);
 80010c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010c6:	9302      	str	r3, [sp, #8]
 80010c8:	2318      	movs	r3, #24
 80010ca:	9301      	str	r3, [sp, #4]
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2301      	movs	r3, #1
 80010d2:	2288      	movs	r2, #136	@ 0x88
 80010d4:	21d0      	movs	r1, #208	@ 0xd0
 80010d6:	484a      	ldr	r0, [pc, #296]	@ (8001200 <BMP280_Init+0x170>)
 80010d8:	f001 fd26 	bl	8002b28 <HAL_I2C_Mem_Read>

	//Extraindo os dados de calibração da temperatura
	BMP280_dig_T1 = (param[0] << 8) | param[1];
 80010dc:	793b      	ldrb	r3, [r7, #4]
 80010de:	021b      	lsls	r3, r3, #8
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	797b      	ldrb	r3, [r7, #5]
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	4b45      	ldr	r3, [pc, #276]	@ (8001204 <BMP280_Init+0x174>)
 80010ee:	801a      	strh	r2, [r3, #0]
	BMP280_dig_T2 = (param[2] << 8) | param[3];
 80010f0:	79bb      	ldrb	r3, [r7, #6]
 80010f2:	021b      	lsls	r3, r3, #8
 80010f4:	b21a      	sxth	r2, r3
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	4313      	orrs	r3, r2
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	4b42      	ldr	r3, [pc, #264]	@ (8001208 <BMP280_Init+0x178>)
 8001100:	801a      	strh	r2, [r3, #0]
	BMP280_dig_T3 = (param[4] << 8) | param[5];
 8001102:	7a3b      	ldrb	r3, [r7, #8]
 8001104:	021b      	lsls	r3, r3, #8
 8001106:	b21a      	sxth	r2, r3
 8001108:	7a7b      	ldrb	r3, [r7, #9]
 800110a:	b21b      	sxth	r3, r3
 800110c:	4313      	orrs	r3, r2
 800110e:	b21a      	sxth	r2, r3
 8001110:	4b3e      	ldr	r3, [pc, #248]	@ (800120c <BMP280_Init+0x17c>)
 8001112:	801a      	strh	r2, [r3, #0]

	//Extraindo os dados de calibração da pressão
	BMP280_dig_P1 = (param[6] << 8) | param[7];
 8001114:	7abb      	ldrb	r3, [r7, #10]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	b21a      	sxth	r2, r3
 800111a:	7afb      	ldrb	r3, [r7, #11]
 800111c:	b21b      	sxth	r3, r3
 800111e:	4313      	orrs	r3, r2
 8001120:	b21b      	sxth	r3, r3
 8001122:	b29a      	uxth	r2, r3
 8001124:	4b3a      	ldr	r3, [pc, #232]	@ (8001210 <BMP280_Init+0x180>)
 8001126:	801a      	strh	r2, [r3, #0]
	BMP280_dig_P2 = (param[8] << 8) | param[9];
 8001128:	7b3b      	ldrb	r3, [r7, #12]
 800112a:	021b      	lsls	r3, r3, #8
 800112c:	b21a      	sxth	r2, r3
 800112e:	7b7b      	ldrb	r3, [r7, #13]
 8001130:	b21b      	sxth	r3, r3
 8001132:	4313      	orrs	r3, r2
 8001134:	b21a      	sxth	r2, r3
 8001136:	4b37      	ldr	r3, [pc, #220]	@ (8001214 <BMP280_Init+0x184>)
 8001138:	801a      	strh	r2, [r3, #0]
	BMP280_dig_P3 = (param[10] << 8) | param[11];
 800113a:	7bbb      	ldrb	r3, [r7, #14]
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	b21a      	sxth	r2, r3
 8001140:	7bfb      	ldrb	r3, [r7, #15]
 8001142:	b21b      	sxth	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	b21a      	sxth	r2, r3
 8001148:	4b33      	ldr	r3, [pc, #204]	@ (8001218 <BMP280_Init+0x188>)
 800114a:	801a      	strh	r2, [r3, #0]
	BMP280_dig_P4 = (param[12] << 8) | param[13];
 800114c:	7c3b      	ldrb	r3, [r7, #16]
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	b21a      	sxth	r2, r3
 8001152:	7c7b      	ldrb	r3, [r7, #17]
 8001154:	b21b      	sxth	r3, r3
 8001156:	4313      	orrs	r3, r2
 8001158:	b21a      	sxth	r2, r3
 800115a:	4b30      	ldr	r3, [pc, #192]	@ (800121c <BMP280_Init+0x18c>)
 800115c:	801a      	strh	r2, [r3, #0]
	BMP280_dig_P5 = (param[14] << 8) | param[15];
 800115e:	7cbb      	ldrb	r3, [r7, #18]
 8001160:	021b      	lsls	r3, r3, #8
 8001162:	b21a      	sxth	r2, r3
 8001164:	7cfb      	ldrb	r3, [r7, #19]
 8001166:	b21b      	sxth	r3, r3
 8001168:	4313      	orrs	r3, r2
 800116a:	b21a      	sxth	r2, r3
 800116c:	4b2c      	ldr	r3, [pc, #176]	@ (8001220 <BMP280_Init+0x190>)
 800116e:	801a      	strh	r2, [r3, #0]
	BMP280_dig_P6 = (param[16] << 8) | param[17];
 8001170:	7d3b      	ldrb	r3, [r7, #20]
 8001172:	021b      	lsls	r3, r3, #8
 8001174:	b21a      	sxth	r2, r3
 8001176:	7d7b      	ldrb	r3, [r7, #21]
 8001178:	b21b      	sxth	r3, r3
 800117a:	4313      	orrs	r3, r2
 800117c:	b21a      	sxth	r2, r3
 800117e:	4b29      	ldr	r3, [pc, #164]	@ (8001224 <BMP280_Init+0x194>)
 8001180:	801a      	strh	r2, [r3, #0]
	BMP280_dig_P7 = (param[18] << 8) | param[19];
 8001182:	7dbb      	ldrb	r3, [r7, #22]
 8001184:	021b      	lsls	r3, r3, #8
 8001186:	b21a      	sxth	r2, r3
 8001188:	7dfb      	ldrb	r3, [r7, #23]
 800118a:	b21b      	sxth	r3, r3
 800118c:	4313      	orrs	r3, r2
 800118e:	b21a      	sxth	r2, r3
 8001190:	4b25      	ldr	r3, [pc, #148]	@ (8001228 <BMP280_Init+0x198>)
 8001192:	801a      	strh	r2, [r3, #0]
	BMP280_dig_P8 = (param[20] << 8) | param[21];
 8001194:	7e3b      	ldrb	r3, [r7, #24]
 8001196:	021b      	lsls	r3, r3, #8
 8001198:	b21a      	sxth	r2, r3
 800119a:	7e7b      	ldrb	r3, [r7, #25]
 800119c:	b21b      	sxth	r3, r3
 800119e:	4313      	orrs	r3, r2
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	4b22      	ldr	r3, [pc, #136]	@ (800122c <BMP280_Init+0x19c>)
 80011a4:	801a      	strh	r2, [r3, #0]
	BMP280_dig_P9 = (param[22] << 8) | param[23];
 80011a6:	7ebb      	ldrb	r3, [r7, #26]
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	b21a      	sxth	r2, r3
 80011ac:	7efb      	ldrb	r3, [r7, #27]
 80011ae:	b21b      	sxth	r3, r3
 80011b0:	4313      	orrs	r3, r2
 80011b2:	b21a      	sxth	r2, r3
 80011b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001230 <BMP280_Init+0x1a0>)
 80011b6:	801a      	strh	r2, [r3, #0]

	Data = 0x1C;
 80011b8:	231c      	movs	r3, #28
 80011ba:	77fb      	strb	r3, [r7, #31]
	HAL_I2C_Mem_Write(&hi2c1, BMP280_ADDR, CONFIG, 1, &Data, 1, 1000);
 80011bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c0:	9302      	str	r3, [sp, #8]
 80011c2:	2301      	movs	r3, #1
 80011c4:	9301      	str	r3, [sp, #4]
 80011c6:	f107 031f 	add.w	r3, r7, #31
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	2301      	movs	r3, #1
 80011ce:	22f5      	movs	r2, #245	@ 0xf5
 80011d0:	21ec      	movs	r1, #236	@ 0xec
 80011d2:	480b      	ldr	r0, [pc, #44]	@ (8001200 <BMP280_Init+0x170>)
 80011d4:	f001 fbae 	bl	8002934 <HAL_I2C_Mem_Write>

	//Sensor output in sleep mode(Standard Mode activity)
	//20 bits de resolução, oversampling x16 na pressão, resolução de 0.16 Pa
	//20 bits de resolução, oversampling x16 na temperatura, resolução de 0.0003 °C

	Data = 0xFF;
 80011d8:	23ff      	movs	r3, #255	@ 0xff
 80011da:	77fb      	strb	r3, [r7, #31]
	HAL_I2C_Mem_Write(&hi2c1, BMP280_ADDR, CTRL_MEAS, 1, &Data, 1, 1000);
 80011dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011e0:	9302      	str	r3, [sp, #8]
 80011e2:	2301      	movs	r3, #1
 80011e4:	9301      	str	r3, [sp, #4]
 80011e6:	f107 031f 	add.w	r3, r7, #31
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2301      	movs	r3, #1
 80011ee:	22f4      	movs	r2, #244	@ 0xf4
 80011f0:	21ec      	movs	r1, #236	@ 0xec
 80011f2:	4803      	ldr	r0, [pc, #12]	@ (8001200 <BMP280_Init+0x170>)
 80011f4:	f001 fb9e 	bl	8002934 <HAL_I2C_Mem_Write>
}
 80011f8:	bf00      	nop
 80011fa:	3720      	adds	r7, #32
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	200002a0 	.word	0x200002a0
 8001204:	20000288 	.word	0x20000288
 8001208:	2000028a 	.word	0x2000028a
 800120c:	2000028c 	.word	0x2000028c
 8001210:	2000028e 	.word	0x2000028e
 8001214:	20000290 	.word	0x20000290
 8001218:	20000292 	.word	0x20000292
 800121c:	20000294 	.word	0x20000294
 8001220:	20000296 	.word	0x20000296
 8001224:	20000298 	.word	0x20000298
 8001228:	2000029a 	.word	0x2000029a
 800122c:	2000029c 	.word	0x2000029c
 8001230:	2000029e 	.word	0x2000029e

08001234 <animation>:
		P = P + (var1 + var2 + ((float) BMP280_dig_P7)) / 16;
		*p = P / 100;	//retorna P em hPa (retorno em float)
	}
}

void animation(void) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af02      	add	r7, sp, #8
	ssd1306_Fill(1);
 800123a:	2001      	movs	r0, #1
 800123c:	f003 fa1a 	bl	8004674 <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0, horse1, 128, 64, 0);
 8001240:	2300      	movs	r3, #0
 8001242:	9301      	str	r3, [sp, #4]
 8001244:	2340      	movs	r3, #64	@ 0x40
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2380      	movs	r3, #128	@ 0x80
 800124a:	4a48      	ldr	r2, [pc, #288]	@ (800136c <animation+0x138>)
 800124c:	2100      	movs	r1, #0
 800124e:	2000      	movs	r0, #0
 8001250:	f003 fc15 	bl	8004a7e <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001254:	f003 fa26 	bl	80046a4 <ssd1306_UpdateScreen>

	ssd1306_Fill(1);
 8001258:	2001      	movs	r0, #1
 800125a:	f003 fa0b 	bl	8004674 <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0, horse2, 128, 64, 0);
 800125e:	2300      	movs	r3, #0
 8001260:	9301      	str	r3, [sp, #4]
 8001262:	2340      	movs	r3, #64	@ 0x40
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	2380      	movs	r3, #128	@ 0x80
 8001268:	4a41      	ldr	r2, [pc, #260]	@ (8001370 <animation+0x13c>)
 800126a:	2100      	movs	r1, #0
 800126c:	2000      	movs	r0, #0
 800126e:	f003 fc06 	bl	8004a7e <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001272:	f003 fa17 	bl	80046a4 <ssd1306_UpdateScreen>

	ssd1306_Fill(1);
 8001276:	2001      	movs	r0, #1
 8001278:	f003 f9fc 	bl	8004674 <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0, horse3, 128, 64, 0);
 800127c:	2300      	movs	r3, #0
 800127e:	9301      	str	r3, [sp, #4]
 8001280:	2340      	movs	r3, #64	@ 0x40
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	2380      	movs	r3, #128	@ 0x80
 8001286:	4a3b      	ldr	r2, [pc, #236]	@ (8001374 <animation+0x140>)
 8001288:	2100      	movs	r1, #0
 800128a:	2000      	movs	r0, #0
 800128c:	f003 fbf7 	bl	8004a7e <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001290:	f003 fa08 	bl	80046a4 <ssd1306_UpdateScreen>

	ssd1306_Fill(1);
 8001294:	2001      	movs	r0, #1
 8001296:	f003 f9ed 	bl	8004674 <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0, horse4, 128, 64, 0);
 800129a:	2300      	movs	r3, #0
 800129c:	9301      	str	r3, [sp, #4]
 800129e:	2340      	movs	r3, #64	@ 0x40
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	2380      	movs	r3, #128	@ 0x80
 80012a4:	4a34      	ldr	r2, [pc, #208]	@ (8001378 <animation+0x144>)
 80012a6:	2100      	movs	r1, #0
 80012a8:	2000      	movs	r0, #0
 80012aa:	f003 fbe8 	bl	8004a7e <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 80012ae:	f003 f9f9 	bl	80046a4 <ssd1306_UpdateScreen>

	ssd1306_Fill(1);
 80012b2:	2001      	movs	r0, #1
 80012b4:	f003 f9de 	bl	8004674 <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0, horse5, 128, 64, 0);
 80012b8:	2300      	movs	r3, #0
 80012ba:	9301      	str	r3, [sp, #4]
 80012bc:	2340      	movs	r3, #64	@ 0x40
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	2380      	movs	r3, #128	@ 0x80
 80012c2:	4a2e      	ldr	r2, [pc, #184]	@ (800137c <animation+0x148>)
 80012c4:	2100      	movs	r1, #0
 80012c6:	2000      	movs	r0, #0
 80012c8:	f003 fbd9 	bl	8004a7e <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 80012cc:	f003 f9ea 	bl	80046a4 <ssd1306_UpdateScreen>

	ssd1306_Fill(1);
 80012d0:	2001      	movs	r0, #1
 80012d2:	f003 f9cf 	bl	8004674 <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0, horse6, 128, 64, 0);
 80012d6:	2300      	movs	r3, #0
 80012d8:	9301      	str	r3, [sp, #4]
 80012da:	2340      	movs	r3, #64	@ 0x40
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	2380      	movs	r3, #128	@ 0x80
 80012e0:	4a27      	ldr	r2, [pc, #156]	@ (8001380 <animation+0x14c>)
 80012e2:	2100      	movs	r1, #0
 80012e4:	2000      	movs	r0, #0
 80012e6:	f003 fbca 	bl	8004a7e <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 80012ea:	f003 f9db 	bl	80046a4 <ssd1306_UpdateScreen>

	ssd1306_Fill(1);
 80012ee:	2001      	movs	r0, #1
 80012f0:	f003 f9c0 	bl	8004674 <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0, horse7, 128, 64, 0);
 80012f4:	2300      	movs	r3, #0
 80012f6:	9301      	str	r3, [sp, #4]
 80012f8:	2340      	movs	r3, #64	@ 0x40
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	2380      	movs	r3, #128	@ 0x80
 80012fe:	4a21      	ldr	r2, [pc, #132]	@ (8001384 <animation+0x150>)
 8001300:	2100      	movs	r1, #0
 8001302:	2000      	movs	r0, #0
 8001304:	f003 fbbb 	bl	8004a7e <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001308:	f003 f9cc 	bl	80046a4 <ssd1306_UpdateScreen>

	ssd1306_Fill(1);
 800130c:	2001      	movs	r0, #1
 800130e:	f003 f9b1 	bl	8004674 <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0, horse8, 128, 64, 0);
 8001312:	2300      	movs	r3, #0
 8001314:	9301      	str	r3, [sp, #4]
 8001316:	2340      	movs	r3, #64	@ 0x40
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2380      	movs	r3, #128	@ 0x80
 800131c:	4a1a      	ldr	r2, [pc, #104]	@ (8001388 <animation+0x154>)
 800131e:	2100      	movs	r1, #0
 8001320:	2000      	movs	r0, #0
 8001322:	f003 fbac 	bl	8004a7e <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001326:	f003 f9bd 	bl	80046a4 <ssd1306_UpdateScreen>

	ssd1306_Fill(1);
 800132a:	2001      	movs	r0, #1
 800132c:	f003 f9a2 	bl	8004674 <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0, horse9, 128, 64, 0);
 8001330:	2300      	movs	r3, #0
 8001332:	9301      	str	r3, [sp, #4]
 8001334:	2340      	movs	r3, #64	@ 0x40
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	2380      	movs	r3, #128	@ 0x80
 800133a:	4a14      	ldr	r2, [pc, #80]	@ (800138c <animation+0x158>)
 800133c:	2100      	movs	r1, #0
 800133e:	2000      	movs	r0, #0
 8001340:	f003 fb9d 	bl	8004a7e <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001344:	f003 f9ae 	bl	80046a4 <ssd1306_UpdateScreen>

	ssd1306_Fill(1);
 8001348:	2001      	movs	r0, #1
 800134a:	f003 f993 	bl	8004674 <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0, horse10, 128, 64, 0);
 800134e:	2300      	movs	r3, #0
 8001350:	9301      	str	r3, [sp, #4]
 8001352:	2340      	movs	r3, #64	@ 0x40
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	2380      	movs	r3, #128	@ 0x80
 8001358:	4a0d      	ldr	r2, [pc, #52]	@ (8001390 <animation+0x15c>)
 800135a:	2100      	movs	r1, #0
 800135c:	2000      	movs	r0, #0
 800135e:	f003 fb8e 	bl	8004a7e <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001362:	f003 f99f 	bl	80046a4 <ssd1306_UpdateScreen>
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	080094e0 	.word	0x080094e0
 8001370:	080098e0 	.word	0x080098e0
 8001374:	08009ce0 	.word	0x08009ce0
 8001378:	0800a0e0 	.word	0x0800a0e0
 800137c:	0800a4e0 	.word	0x0800a4e0
 8001380:	0800a8e0 	.word	0x0800a8e0
 8001384:	0800ace0 	.word	0x0800ace0
 8001388:	0800b0e0 	.word	0x0800b0e0
 800138c:	0800b4e0 	.word	0x0800b4e0
 8001390:	0800b8e0 	.word	0x0800b8e0

08001394 <menu>:

void menu(void) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af02      	add	r7, sp, #8
	ssd1306_Fill(0);
 800139a:	2000      	movs	r0, #0
 800139c:	f003 f96a 	bl	8004674 <ssd1306_Fill>
	ssd1306_SetCursor(25, 5);
 80013a0:	2105      	movs	r1, #5
 80013a2:	2019      	movs	r0, #25
 80013a4:	f003 fab0 	bl	8004908 <ssd1306_SetCursor>
	ssd1306_WriteString(menu_items[item_sel_previous], Font_7x10, 1);
 80013a8:	4b4a      	ldr	r3, [pc, #296]	@ (80014d4 <menu+0x140>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4613      	mov	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4a48      	ldr	r2, [pc, #288]	@ (80014d8 <menu+0x144>)
 80013b6:	1898      	adds	r0, r3, r2
 80013b8:	4b48      	ldr	r3, [pc, #288]	@ (80014dc <menu+0x148>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	9200      	str	r2, [sp, #0]
 80013be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013c0:	f003 fa7c 	bl	80048bc <ssd1306_WriteString>
	ssd1306_DrawBitmap(4, 2, bitmap_icons[item_sel_previous], 16, 16, 1);
 80013c4:	4b43      	ldr	r3, [pc, #268]	@ (80014d4 <menu+0x140>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a45      	ldr	r2, [pc, #276]	@ (80014e0 <menu+0x14c>)
 80013ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013ce:	2301      	movs	r3, #1
 80013d0:	9301      	str	r3, [sp, #4]
 80013d2:	2310      	movs	r3, #16
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	2310      	movs	r3, #16
 80013d8:	2102      	movs	r1, #2
 80013da:	2004      	movs	r0, #4
 80013dc:	f003 fb4f 	bl	8004a7e <ssd1306_DrawBitmap>
	ssd1306_SetCursor(25, 5 + 20 + 2);
 80013e0:	211b      	movs	r1, #27
 80013e2:	2019      	movs	r0, #25
 80013e4:	f003 fa90 	bl	8004908 <ssd1306_SetCursor>
	ssd1306_WriteString(menu_items[item_selected], Font_7x10, 1);
 80013e8:	4b3e      	ldr	r3, [pc, #248]	@ (80014e4 <menu+0x150>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4613      	mov	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4413      	add	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4a38      	ldr	r2, [pc, #224]	@ (80014d8 <menu+0x144>)
 80013f6:	1898      	adds	r0, r3, r2
 80013f8:	4b38      	ldr	r3, [pc, #224]	@ (80014dc <menu+0x148>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	9200      	str	r2, [sp, #0]
 80013fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001400:	f003 fa5c 	bl	80048bc <ssd1306_WriteString>
	ssd1306_DrawBitmap(4, 24, bitmap_icons[item_selected], 16, 16, 1);
 8001404:	4b37      	ldr	r3, [pc, #220]	@ (80014e4 <menu+0x150>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a35      	ldr	r2, [pc, #212]	@ (80014e0 <menu+0x14c>)
 800140a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800140e:	2301      	movs	r3, #1
 8001410:	9301      	str	r3, [sp, #4]
 8001412:	2310      	movs	r3, #16
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2310      	movs	r3, #16
 8001418:	2118      	movs	r1, #24
 800141a:	2004      	movs	r0, #4
 800141c:	f003 fb2f 	bl	8004a7e <ssd1306_DrawBitmap>
	ssd1306_SetCursor(25, 5 + 20 + 20 + 2 + 2);
 8001420:	2131      	movs	r1, #49	@ 0x31
 8001422:	2019      	movs	r0, #25
 8001424:	f003 fa70 	bl	8004908 <ssd1306_SetCursor>
	ssd1306_WriteString(menu_items[item_sel_next], Font_7x10, 1);
 8001428:	4b2f      	ldr	r3, [pc, #188]	@ (80014e8 <menu+0x154>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4613      	mov	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4a28      	ldr	r2, [pc, #160]	@ (80014d8 <menu+0x144>)
 8001436:	1898      	adds	r0, r3, r2
 8001438:	4b28      	ldr	r3, [pc, #160]	@ (80014dc <menu+0x148>)
 800143a:	2201      	movs	r2, #1
 800143c:	9200      	str	r2, [sp, #0]
 800143e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001440:	f003 fa3c 	bl	80048bc <ssd1306_WriteString>
	ssd1306_DrawBitmap(4, 46, bitmap_icons[item_sel_next], 16, 16, 1);
 8001444:	4b28      	ldr	r3, [pc, #160]	@ (80014e8 <menu+0x154>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a25      	ldr	r2, [pc, #148]	@ (80014e0 <menu+0x14c>)
 800144a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800144e:	2301      	movs	r3, #1
 8001450:	9301      	str	r3, [sp, #4]
 8001452:	2310      	movs	r3, #16
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	2310      	movs	r3, #16
 8001458:	212e      	movs	r1, #46	@ 0x2e
 800145a:	2004      	movs	r0, #4
 800145c:	f003 fb0f 	bl	8004a7e <ssd1306_DrawBitmap>

	ssd1306_DrawBitmap(0, 22, bitmap_item_sel_outline, 128, 21, 1);
 8001460:	2301      	movs	r3, #1
 8001462:	9301      	str	r3, [sp, #4]
 8001464:	2315      	movs	r3, #21
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	2380      	movs	r3, #128	@ 0x80
 800146a:	4a20      	ldr	r2, [pc, #128]	@ (80014ec <menu+0x158>)
 800146c:	2116      	movs	r1, #22
 800146e:	2000      	movs	r0, #0
 8001470:	f003 fb05 	bl	8004a7e <ssd1306_DrawBitmap>
	ssd1306_DrawBitmap(128 - 8, 0, bitmap_scrollbar_background, 8, 64, 1);
 8001474:	2301      	movs	r3, #1
 8001476:	9301      	str	r3, [sp, #4]
 8001478:	2340      	movs	r3, #64	@ 0x40
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	2308      	movs	r3, #8
 800147e:	4a1c      	ldr	r2, [pc, #112]	@ (80014f0 <menu+0x15c>)
 8001480:	2100      	movs	r1, #0
 8001482:	2078      	movs	r0, #120	@ 0x78
 8001484:	f003 fafb 	bl	8004a7e <ssd1306_DrawBitmap>
	ssd1306_DrawRectangle(125, 64 / NUM_ITEMS * item_selected, 128,
 8001488:	4b16      	ldr	r3, [pc, #88]	@ (80014e4 <menu+0x150>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	011b      	lsls	r3, r3, #4
 8001490:	b2d9      	uxtb	r1, r3
			(64 / NUM_ITEMS * item_selected + (64 / NUM_ITEMS)), 1);
 8001492:	4b14      	ldr	r3, [pc, #80]	@ (80014e4 <menu+0x150>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	3301      	adds	r3, #1
	ssd1306_DrawRectangle(125, 64 / NUM_ITEMS * item_selected, 128,
 8001498:	b2db      	uxtb	r3, r3
 800149a:	011b      	lsls	r3, r3, #4
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2201      	movs	r2, #1
 80014a0:	9200      	str	r2, [sp, #0]
 80014a2:	2280      	movs	r2, #128	@ 0x80
 80014a4:	207d      	movs	r0, #125	@ 0x7d
 80014a6:	f003 fab3 	bl	8004a10 <ssd1306_DrawRectangle>
	ssd1306_DrawRectangle(126, 64 / NUM_ITEMS * item_selected, 127,
 80014aa:	4b0e      	ldr	r3, [pc, #56]	@ (80014e4 <menu+0x150>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	011b      	lsls	r3, r3, #4
 80014b2:	b2d9      	uxtb	r1, r3
			(64 / NUM_ITEMS * item_selected + (64 / NUM_ITEMS)), 1);
 80014b4:	4b0b      	ldr	r3, [pc, #44]	@ (80014e4 <menu+0x150>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	3301      	adds	r3, #1
	ssd1306_DrawRectangle(126, 64 / NUM_ITEMS * item_selected, 127,
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	011b      	lsls	r3, r3, #4
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2201      	movs	r2, #1
 80014c2:	9200      	str	r2, [sp, #0]
 80014c4:	227f      	movs	r2, #127	@ 0x7f
 80014c6:	207e      	movs	r0, #126	@ 0x7e
 80014c8:	f003 faa2 	bl	8004a10 <ssd1306_DrawRectangle>
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000254 	.word	0x20000254
 80014d8:	20000010 	.word	0x20000010
 80014dc:	0800ca60 	.word	0x0800ca60
 80014e0:	20000000 	.word	0x20000000
 80014e4:	20000250 	.word	0x20000250
 80014e8:	20000258 	.word	0x20000258
 80014ec:	08009390 	.word	0x08009390
 80014f0:	08009350 	.word	0x08009350

080014f4 <read_accel>:

void read_accel(void) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];
	// Read 6 BYTES of data starting from ACCEL_XOUT_H (0x3B) register
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x3B, 1, Rec_Data, 6, 1000);
 80014fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014fe:	9302      	str	r3, [sp, #8]
 8001500:	2306      	movs	r3, #6
 8001502:	9301      	str	r3, [sp, #4]
 8001504:	f107 0308 	add.w	r3, r7, #8
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	2301      	movs	r3, #1
 800150c:	223b      	movs	r2, #59	@ 0x3b
 800150e:	21d0      	movs	r1, #208	@ 0xd0
 8001510:	4852      	ldr	r0, [pc, #328]	@ (800165c <read_accel+0x168>)
 8001512:	f001 fb09 	bl	8002b28 <HAL_I2C_Mem_Read>
	Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001516:	7a3b      	ldrb	r3, [r7, #8]
 8001518:	021b      	lsls	r3, r3, #8
 800151a:	b21a      	sxth	r2, r3
 800151c:	7a7b      	ldrb	r3, [r7, #9]
 800151e:	b21b      	sxth	r3, r3
 8001520:	4313      	orrs	r3, r2
 8001522:	b21a      	sxth	r2, r3
 8001524:	4b4e      	ldr	r3, [pc, #312]	@ (8001660 <read_accel+0x16c>)
 8001526:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001528:	7abb      	ldrb	r3, [r7, #10]
 800152a:	021b      	lsls	r3, r3, #8
 800152c:	b21a      	sxth	r2, r3
 800152e:	7afb      	ldrb	r3, [r7, #11]
 8001530:	b21b      	sxth	r3, r3
 8001532:	4313      	orrs	r3, r2
 8001534:	b21a      	sxth	r2, r3
 8001536:	4b4b      	ldr	r3, [pc, #300]	@ (8001664 <read_accel+0x170>)
 8001538:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 800153a:	7b3b      	ldrb	r3, [r7, #12]
 800153c:	021b      	lsls	r3, r3, #8
 800153e:	b21a      	sxth	r2, r3
 8001540:	7b7b      	ldrb	r3, [r7, #13]
 8001542:	b21b      	sxth	r3, r3
 8001544:	4313      	orrs	r3, r2
 8001546:	b21a      	sxth	r2, r3
 8001548:	4b47      	ldr	r3, [pc, #284]	@ (8001668 <read_accel+0x174>)
 800154a:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	 we have to divide according to the Full scale value set in FS_SEL
	 I have configured FS_SEL = 0. So I am dividing by 16384.0
	 for more details check ACCEL_CONFIG Register ****/
	Ax = (float) Accel_X_RAW / 16384.0;
 800154c:	4b44      	ldr	r3, [pc, #272]	@ (8001660 <read_accel+0x16c>)
 800154e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001552:	ee07 3a90 	vmov	s15, r3
 8001556:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800155a:	eddf 6a44 	vldr	s13, [pc, #272]	@ 800166c <read_accel+0x178>
 800155e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001562:	4b43      	ldr	r3, [pc, #268]	@ (8001670 <read_accel+0x17c>)
 8001564:	edc3 7a00 	vstr	s15, [r3]
	Ay = (float) Accel_Y_RAW / 16384.0;
 8001568:	4b3e      	ldr	r3, [pc, #248]	@ (8001664 <read_accel+0x170>)
 800156a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800156e:	ee07 3a90 	vmov	s15, r3
 8001572:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001576:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800166c <read_accel+0x178>
 800157a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800157e:	4b3d      	ldr	r3, [pc, #244]	@ (8001674 <read_accel+0x180>)
 8001580:	edc3 7a00 	vstr	s15, [r3]
	Az = (float) Accel_Z_RAW / 16384.0;
 8001584:	4b38      	ldr	r3, [pc, #224]	@ (8001668 <read_accel+0x174>)
 8001586:	f9b3 3000 	ldrsh.w	r3, [r3]
 800158a:	ee07 3a90 	vmov	s15, r3
 800158e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001592:	eddf 6a36 	vldr	s13, [pc, #216]	@ 800166c <read_accel+0x178>
 8001596:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800159a:	4b37      	ldr	r3, [pc, #220]	@ (8001678 <read_accel+0x184>)
 800159c:	edc3 7a00 	vstr	s15, [r3]

	char buffer_float[7];
	ssd1306_Fill(0); //Seta todos os pixels do buffer para branco
 80015a0:	2000      	movs	r0, #0
 80015a2:	f003 f867 	bl	8004674 <ssd1306_Fill>
	ssd1306_SetCursor(5, 16); //Posiciona o "cursor" no pixel correspondente
 80015a6:	2110      	movs	r1, #16
 80015a8:	2005      	movs	r0, #5
 80015aa:	f003 f9ad 	bl	8004908 <ssd1306_SetCursor>
	ssd1306_WriteString("Accel x: ", Font_6x8, 1); //Escreve o texto no buffer
 80015ae:	4b33      	ldr	r3, [pc, #204]	@ (800167c <read_accel+0x188>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	9200      	str	r2, [sp, #0]
 80015b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015b6:	4832      	ldr	r0, [pc, #200]	@ (8001680 <read_accel+0x18c>)
 80015b8:	f003 f980 	bl	80048bc <ssd1306_WriteString>
	sprintf(buffer_float, "%.1f", Ax);
 80015bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001670 <read_accel+0x17c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe ffc1 	bl	8000548 <__aeabi_f2d>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4638      	mov	r0, r7
 80015cc:	492d      	ldr	r1, [pc, #180]	@ (8001684 <read_accel+0x190>)
 80015ce:	f004 fa11 	bl	80059f4 <siprintf>
	ssd1306_WriteString(buffer_float, Font_6x8, 1); //Escreve o texto no buffer
 80015d2:	4b2a      	ldr	r3, [pc, #168]	@ (800167c <read_accel+0x188>)
 80015d4:	4638      	mov	r0, r7
 80015d6:	2201      	movs	r2, #1
 80015d8:	9200      	str	r2, [sp, #0]
 80015da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015dc:	f003 f96e 	bl	80048bc <ssd1306_WriteString>
	ssd1306_SetCursor(5, 30); //Posiciona o "cursor" no pixel correspondente
 80015e0:	211e      	movs	r1, #30
 80015e2:	2005      	movs	r0, #5
 80015e4:	f003 f990 	bl	8004908 <ssd1306_SetCursor>
	ssd1306_WriteString("Accel y: ", Font_6x8, 1); //Escreve o texto no buffer
 80015e8:	4b24      	ldr	r3, [pc, #144]	@ (800167c <read_accel+0x188>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	9200      	str	r2, [sp, #0]
 80015ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015f0:	4825      	ldr	r0, [pc, #148]	@ (8001688 <read_accel+0x194>)
 80015f2:	f003 f963 	bl	80048bc <ssd1306_WriteString>
	sprintf(buffer_float, "%.1f", Ay);
 80015f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001674 <read_accel+0x180>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ffa4 	bl	8000548 <__aeabi_f2d>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4638      	mov	r0, r7
 8001606:	491f      	ldr	r1, [pc, #124]	@ (8001684 <read_accel+0x190>)
 8001608:	f004 f9f4 	bl	80059f4 <siprintf>
	ssd1306_WriteString(buffer_float, Font_6x8, 1); //Escreve o texto no buffer
 800160c:	4b1b      	ldr	r3, [pc, #108]	@ (800167c <read_accel+0x188>)
 800160e:	4638      	mov	r0, r7
 8001610:	2201      	movs	r2, #1
 8001612:	9200      	str	r2, [sp, #0]
 8001614:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001616:	f003 f951 	bl	80048bc <ssd1306_WriteString>
	ssd1306_SetCursor(5, 44); //Posiciona o "cursor" no pixel correspondente
 800161a:	212c      	movs	r1, #44	@ 0x2c
 800161c:	2005      	movs	r0, #5
 800161e:	f003 f973 	bl	8004908 <ssd1306_SetCursor>
	ssd1306_WriteString("Accel z: ", Font_6x8, 1); //Escreve o texto no buffer
 8001622:	4b16      	ldr	r3, [pc, #88]	@ (800167c <read_accel+0x188>)
 8001624:	2201      	movs	r2, #1
 8001626:	9200      	str	r2, [sp, #0]
 8001628:	cb0e      	ldmia	r3, {r1, r2, r3}
 800162a:	4818      	ldr	r0, [pc, #96]	@ (800168c <read_accel+0x198>)
 800162c:	f003 f946 	bl	80048bc <ssd1306_WriteString>
	sprintf(buffer_float, "%.1f", Az);
 8001630:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <read_accel+0x184>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe ff87 	bl	8000548 <__aeabi_f2d>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4638      	mov	r0, r7
 8001640:	4910      	ldr	r1, [pc, #64]	@ (8001684 <read_accel+0x190>)
 8001642:	f004 f9d7 	bl	80059f4 <siprintf>
	ssd1306_WriteString(buffer_float, Font_6x8, 1); //Escreve o texto no buffer
 8001646:	4b0d      	ldr	r3, [pc, #52]	@ (800167c <read_accel+0x188>)
 8001648:	4638      	mov	r0, r7
 800164a:	2201      	movs	r2, #1
 800164c:	9200      	str	r2, [sp, #0]
 800164e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001650:	f003 f934 	bl	80048bc <ssd1306_WriteString>
}
 8001654:	bf00      	nop
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	200002a0 	.word	0x200002a0
 8001660:	20000264 	.word	0x20000264
 8001664:	20000266 	.word	0x20000266
 8001668:	20000268 	.word	0x20000268
 800166c:	46800000 	.word	0x46800000
 8001670:	20000270 	.word	0x20000270
 8001674:	20000274 	.word	0x20000274
 8001678:	20000278 	.word	0x20000278
 800167c:	0800ca54 	.word	0x0800ca54
 8001680:	08009280 	.word	0x08009280
 8001684:	0800928c 	.word	0x0800928c
 8001688:	08009294 	.word	0x08009294
 800168c:	080092a0 	.word	0x080092a0

08001690 <read_gyro>:

void read_gyro(void){
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];
	// Read 6 BYTES of data starting from ACCEL_XOUT_H (0x3B) register
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x3B, 1, Rec_Data, 12, 1000);
 8001696:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800169a:	9302      	str	r3, [sp, #8]
 800169c:	230c      	movs	r3, #12
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	f107 0308 	add.w	r3, r7, #8
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	2301      	movs	r3, #1
 80016a8:	223b      	movs	r2, #59	@ 0x3b
 80016aa:	21d0      	movs	r1, #208	@ 0xd0
 80016ac:	4860      	ldr	r0, [pc, #384]	@ (8001830 <read_gyro+0x1a0>)
 80016ae:	f001 fa3b 	bl	8002b28 <HAL_I2C_Mem_Read>
	Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 80016b2:	7a3b      	ldrb	r3, [r7, #8]
 80016b4:	021b      	lsls	r3, r3, #8
 80016b6:	b21a      	sxth	r2, r3
 80016b8:	7a7b      	ldrb	r3, [r7, #9]
 80016ba:	b21b      	sxth	r3, r3
 80016bc:	4313      	orrs	r3, r2
 80016be:	b21a      	sxth	r2, r3
 80016c0:	4b5c      	ldr	r3, [pc, #368]	@ (8001834 <read_gyro+0x1a4>)
 80016c2:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80016c4:	7abb      	ldrb	r3, [r7, #10]
 80016c6:	021b      	lsls	r3, r3, #8
 80016c8:	b21a      	sxth	r2, r3
 80016ca:	7afb      	ldrb	r3, [r7, #11]
 80016cc:	b21b      	sxth	r3, r3
 80016ce:	4313      	orrs	r3, r2
 80016d0:	b21a      	sxth	r2, r3
 80016d2:	4b59      	ldr	r3, [pc, #356]	@ (8001838 <read_gyro+0x1a8>)
 80016d4:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 80016d6:	7b3b      	ldrb	r3, [r7, #12]
 80016d8:	021b      	lsls	r3, r3, #8
 80016da:	b21a      	sxth	r2, r3
 80016dc:	7b7b      	ldrb	r3, [r7, #13]
 80016de:	b21b      	sxth	r3, r3
 80016e0:	4313      	orrs	r3, r2
 80016e2:	b21a      	sxth	r2, r3
 80016e4:	4b55      	ldr	r3, [pc, #340]	@ (800183c <read_gyro+0x1ac>)
 80016e6:	801a      	strh	r2, [r3, #0]
	Gyro_X_RAW = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 80016e8:	7bbb      	ldrb	r3, [r7, #14]
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	b21a      	sxth	r2, r3
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
 80016f0:	b21b      	sxth	r3, r3
 80016f2:	4313      	orrs	r3, r2
 80016f4:	b21a      	sxth	r2, r3
 80016f6:	4b52      	ldr	r3, [pc, #328]	@ (8001840 <read_gyro+0x1b0>)
 80016f8:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 80016fa:	7c3b      	ldrb	r3, [r7, #16]
 80016fc:	021b      	lsls	r3, r3, #8
 80016fe:	b21a      	sxth	r2, r3
 8001700:	7c7b      	ldrb	r3, [r7, #17]
 8001702:	b21b      	sxth	r3, r3
 8001704:	4313      	orrs	r3, r2
 8001706:	b21a      	sxth	r2, r3
 8001708:	4b4e      	ldr	r3, [pc, #312]	@ (8001844 <read_gyro+0x1b4>)
 800170a:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 800170c:	7cbb      	ldrb	r3, [r7, #18]
 800170e:	021b      	lsls	r3, r3, #8
 8001710:	b21a      	sxth	r2, r3
 8001712:	7cfb      	ldrb	r3, [r7, #19]
 8001714:	b21b      	sxth	r3, r3
 8001716:	4313      	orrs	r3, r2
 8001718:	b21a      	sxth	r2, r3
 800171a:	4b4b      	ldr	r3, [pc, #300]	@ (8001848 <read_gyro+0x1b8>)
 800171c:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	 we have to divide according to the Full scale value set in FS_SEL
	 I have configured FS_SEL = 0. So I am dividing by 16384.0
	 for more details check ACCEL_CONFIG Register ****/
	gx = (float) Gyro_X_RAW / 131.0;
 800171e:	4b48      	ldr	r3, [pc, #288]	@ (8001840 <read_gyro+0x1b0>)
 8001720:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001724:	ee07 3a90 	vmov	s15, r3
 8001728:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800172c:	eddf 6a47 	vldr	s13, [pc, #284]	@ 800184c <read_gyro+0x1bc>
 8001730:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001734:	4b46      	ldr	r3, [pc, #280]	@ (8001850 <read_gyro+0x1c0>)
 8001736:	edc3 7a00 	vstr	s15, [r3]
	gy = (float) Gyro_Y_RAW / 131.0;
 800173a:	4b42      	ldr	r3, [pc, #264]	@ (8001844 <read_gyro+0x1b4>)
 800173c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001740:	ee07 3a90 	vmov	s15, r3
 8001744:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001748:	eddf 6a40 	vldr	s13, [pc, #256]	@ 800184c <read_gyro+0x1bc>
 800174c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001750:	4b40      	ldr	r3, [pc, #256]	@ (8001854 <read_gyro+0x1c4>)
 8001752:	edc3 7a00 	vstr	s15, [r3]
	gz = (float) Gyro_Z_RAW / 131.0;
 8001756:	4b3c      	ldr	r3, [pc, #240]	@ (8001848 <read_gyro+0x1b8>)
 8001758:	f9b3 3000 	ldrsh.w	r3, [r3]
 800175c:	ee07 3a90 	vmov	s15, r3
 8001760:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001764:	eddf 6a39 	vldr	s13, [pc, #228]	@ 800184c <read_gyro+0x1bc>
 8001768:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800176c:	4b3a      	ldr	r3, [pc, #232]	@ (8001858 <read_gyro+0x1c8>)
 800176e:	edc3 7a00 	vstr	s15, [r3]
	char buffer_floats[7];
	ssd1306_Fill(0); //Seta todos os pixels do buffer para branco
 8001772:	2000      	movs	r0, #0
 8001774:	f002 ff7e 	bl	8004674 <ssd1306_Fill>
	ssd1306_SetCursor(5, 16); //Posiciona o "cursor" no pixel correspondente
 8001778:	2110      	movs	r1, #16
 800177a:	2005      	movs	r0, #5
 800177c:	f003 f8c4 	bl	8004908 <ssd1306_SetCursor>
	ssd1306_WriteString("Gyro x: ", Font_6x8, 1); //Escreve o texto no buffer
 8001780:	4b36      	ldr	r3, [pc, #216]	@ (800185c <read_gyro+0x1cc>)
 8001782:	2201      	movs	r2, #1
 8001784:	9200      	str	r2, [sp, #0]
 8001786:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001788:	4835      	ldr	r0, [pc, #212]	@ (8001860 <read_gyro+0x1d0>)
 800178a:	f003 f897 	bl	80048bc <ssd1306_WriteString>
	sprintf(buffer_floats, "%.1f", gx);
 800178e:	4b30      	ldr	r3, [pc, #192]	@ (8001850 <read_gyro+0x1c0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fed8 	bl	8000548 <__aeabi_f2d>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4638      	mov	r0, r7
 800179e:	4931      	ldr	r1, [pc, #196]	@ (8001864 <read_gyro+0x1d4>)
 80017a0:	f004 f928 	bl	80059f4 <siprintf>
	ssd1306_WriteString(buffer_floats, Font_6x8, 1); //Escreve o texto no buffer
 80017a4:	4b2d      	ldr	r3, [pc, #180]	@ (800185c <read_gyro+0x1cc>)
 80017a6:	4638      	mov	r0, r7
 80017a8:	2201      	movs	r2, #1
 80017aa:	9200      	str	r2, [sp, #0]
 80017ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017ae:	f003 f885 	bl	80048bc <ssd1306_WriteString>
	ssd1306_SetCursor(5, 30); //Posiciona o "cursor" no pixel correspondente
 80017b2:	211e      	movs	r1, #30
 80017b4:	2005      	movs	r0, #5
 80017b6:	f003 f8a7 	bl	8004908 <ssd1306_SetCursor>
	ssd1306_WriteString("Gyro y: ", Font_6x8, 1); //Escreve o texto no buffer
 80017ba:	4b28      	ldr	r3, [pc, #160]	@ (800185c <read_gyro+0x1cc>)
 80017bc:	2201      	movs	r2, #1
 80017be:	9200      	str	r2, [sp, #0]
 80017c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017c2:	4829      	ldr	r0, [pc, #164]	@ (8001868 <read_gyro+0x1d8>)
 80017c4:	f003 f87a 	bl	80048bc <ssd1306_WriteString>
	sprintf(buffer_floats, "%.1f", gy);
 80017c8:	4b22      	ldr	r3, [pc, #136]	@ (8001854 <read_gyro+0x1c4>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7fe febb 	bl	8000548 <__aeabi_f2d>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4638      	mov	r0, r7
 80017d8:	4922      	ldr	r1, [pc, #136]	@ (8001864 <read_gyro+0x1d4>)
 80017da:	f004 f90b 	bl	80059f4 <siprintf>
	ssd1306_WriteString(buffer_floats, Font_6x8, 1); //Escreve o texto no buffer
 80017de:	4b1f      	ldr	r3, [pc, #124]	@ (800185c <read_gyro+0x1cc>)
 80017e0:	4638      	mov	r0, r7
 80017e2:	2201      	movs	r2, #1
 80017e4:	9200      	str	r2, [sp, #0]
 80017e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017e8:	f003 f868 	bl	80048bc <ssd1306_WriteString>
	ssd1306_SetCursor(5, 44); //Posiciona o "cursor" no pixel correspondente
 80017ec:	212c      	movs	r1, #44	@ 0x2c
 80017ee:	2005      	movs	r0, #5
 80017f0:	f003 f88a 	bl	8004908 <ssd1306_SetCursor>
	ssd1306_WriteString("Gyro z: ", Font_6x8, 1); //Escreve o texto no buffer
 80017f4:	4b19      	ldr	r3, [pc, #100]	@ (800185c <read_gyro+0x1cc>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	9200      	str	r2, [sp, #0]
 80017fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017fc:	481b      	ldr	r0, [pc, #108]	@ (800186c <read_gyro+0x1dc>)
 80017fe:	f003 f85d 	bl	80048bc <ssd1306_WriteString>
	sprintf(buffer_floats, "%.1f", gz);
 8001802:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <read_gyro+0x1c8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7fe fe9e 	bl	8000548 <__aeabi_f2d>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4638      	mov	r0, r7
 8001812:	4914      	ldr	r1, [pc, #80]	@ (8001864 <read_gyro+0x1d4>)
 8001814:	f004 f8ee 	bl	80059f4 <siprintf>
	ssd1306_WriteString(buffer_floats, Font_6x8, 1); //Escreve o texto no bufferr
 8001818:	4b10      	ldr	r3, [pc, #64]	@ (800185c <read_gyro+0x1cc>)
 800181a:	4638      	mov	r0, r7
 800181c:	2201      	movs	r2, #1
 800181e:	9200      	str	r2, [sp, #0]
 8001820:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001822:	f003 f84b 	bl	80048bc <ssd1306_WriteString>
}
 8001826:	bf00      	nop
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	200002a0 	.word	0x200002a0
 8001834:	20000264 	.word	0x20000264
 8001838:	20000266 	.word	0x20000266
 800183c:	20000268 	.word	0x20000268
 8001840:	2000026a 	.word	0x2000026a
 8001844:	2000026c 	.word	0x2000026c
 8001848:	2000026e 	.word	0x2000026e
 800184c:	43030000 	.word	0x43030000
 8001850:	2000027c 	.word	0x2000027c
 8001854:	20000280 	.word	0x20000280
 8001858:	20000284 	.word	0x20000284
 800185c:	0800ca54 	.word	0x0800ca54
 8001860:	080092ac 	.word	0x080092ac
 8001864:	0800928c 	.word	0x0800928c
 8001868:	080092b8 	.word	0x080092b8
 800186c:	080092c4 	.word	0x080092c4

08001870 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001874:	f000 fbea 	bl	800204c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001878:	f000 f8c6 	bl	8001a08 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800187c:	f000 f97a 	bl	8001b74 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001880:	f000 f920 	bl	8001ac4 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8001884:	f000 f94c 	bl	8001b20 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	ssd1306_Init();
 8001888:	f002 fe8a 	bl	80045a0 <ssd1306_Init>
	MPU6050_Init();
 800188c:	f7ff fbaa 	bl	8000fe4 <MPU6050_Init>
	BMP280_Init();
 8001890:	f7ff fbfe 	bl	8001090 <BMP280_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		if (current_screen == 0) {
 8001894:	4b56      	ldr	r3, [pc, #344]	@ (80019f0 <main+0x180>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d15d      	bne.n	8001958 <main+0xe8>

			if (HAL_GPIO_ReadPin(GPIOE, ENTER_BUTTON)) {
 800189c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018a0:	4854      	ldr	r0, [pc, #336]	@ (80019f4 <main+0x184>)
 80018a2:	f000 feeb 	bl	800267c <HAL_GPIO_ReadPin>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d00c      	beq.n	80018c6 <main+0x56>
				current_screen = !current_screen;
 80018ac:	4b50      	ldr	r3, [pc, #320]	@ (80019f0 <main+0x180>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	bf0c      	ite	eq
 80018b4:	2301      	moveq	r3, #1
 80018b6:	2300      	movne	r3, #0
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	461a      	mov	r2, r3
 80018bc:	4b4c      	ldr	r3, [pc, #304]	@ (80019f0 <main+0x180>)
 80018be:	601a      	str	r2, [r3, #0]
				HAL_Delay(200);
 80018c0:	20c8      	movs	r0, #200	@ 0xc8
 80018c2:	f000 fc35 	bl	8002130 <HAL_Delay>
			}

			if (HAL_GPIO_ReadPin(GPIOE, UP_BUTTON)) {
 80018c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018ca:	484a      	ldr	r0, [pc, #296]	@ (80019f4 <main+0x184>)
 80018cc:	f000 fed6 	bl	800267c <HAL_GPIO_ReadPin>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d01b      	beq.n	800190e <main+0x9e>
				cursor--;
 80018d6:	4b48      	ldr	r3, [pc, #288]	@ (80019f8 <main+0x188>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	3b01      	subs	r3, #1
 80018dc:	4a46      	ldr	r2, [pc, #280]	@ (80019f8 <main+0x188>)
 80018de:	6013      	str	r3, [r2, #0]
				if (cursor == -1)
 80018e0:	4b45      	ldr	r3, [pc, #276]	@ (80019f8 <main+0x188>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e8:	d102      	bne.n	80018f0 <main+0x80>
					cursor = 3;
 80018ea:	4b43      	ldr	r3, [pc, #268]	@ (80019f8 <main+0x188>)
 80018ec:	2203      	movs	r2, #3
 80018ee:	601a      	str	r2, [r3, #0]
				item_selected -= 1;
 80018f0:	4b42      	ldr	r3, [pc, #264]	@ (80019fc <main+0x18c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	3b01      	subs	r3, #1
 80018f6:	4a41      	ldr	r2, [pc, #260]	@ (80019fc <main+0x18c>)
 80018f8:	6013      	str	r3, [r2, #0]
				if (item_selected < 0)
 80018fa:	4b40      	ldr	r3, [pc, #256]	@ (80019fc <main+0x18c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	da02      	bge.n	8001908 <main+0x98>
					item_selected = NUM_ITEMS - 1;
 8001902:	4b3e      	ldr	r3, [pc, #248]	@ (80019fc <main+0x18c>)
 8001904:	2203      	movs	r2, #3
 8001906:	601a      	str	r2, [r3, #0]
				HAL_Delay(100);
 8001908:	2064      	movs	r0, #100	@ 0x64
 800190a:	f000 fc11 	bl	8002130 <HAL_Delay>
			}

			if (HAL_GPIO_ReadPin(GPIOE, DOWN_BUTTON)) {
 800190e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001912:	4838      	ldr	r0, [pc, #224]	@ (80019f4 <main+0x184>)
 8001914:	f000 feb2 	bl	800267c <HAL_GPIO_ReadPin>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d01a      	beq.n	8001954 <main+0xe4>
				cursor++;
 800191e:	4b36      	ldr	r3, [pc, #216]	@ (80019f8 <main+0x188>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	3301      	adds	r3, #1
 8001924:	4a34      	ldr	r2, [pc, #208]	@ (80019f8 <main+0x188>)
 8001926:	6013      	str	r3, [r2, #0]
				if (cursor == 4)
 8001928:	4b33      	ldr	r3, [pc, #204]	@ (80019f8 <main+0x188>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b04      	cmp	r3, #4
 800192e:	d102      	bne.n	8001936 <main+0xc6>
					cursor = 0;
 8001930:	4b31      	ldr	r3, [pc, #196]	@ (80019f8 <main+0x188>)
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
				item_selected += 1; // select next item
 8001936:	4b31      	ldr	r3, [pc, #196]	@ (80019fc <main+0x18c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	3301      	adds	r3, #1
 800193c:	4a2f      	ldr	r2, [pc, #188]	@ (80019fc <main+0x18c>)
 800193e:	6013      	str	r3, [r2, #0]
				if (item_selected >= NUM_ITEMS)
 8001940:	4b2e      	ldr	r3, [pc, #184]	@ (80019fc <main+0x18c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b03      	cmp	r3, #3
 8001946:	dd02      	ble.n	800194e <main+0xde>
					item_selected = 0;
 8001948:	4b2c      	ldr	r3, [pc, #176]	@ (80019fc <main+0x18c>)
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
				HAL_Delay(100);
 800194e:	2064      	movs	r0, #100	@ 0x64
 8001950:	f000 fbee 	bl	8002130 <HAL_Delay>
			}
			menu();
 8001954:	f7ff fd1e 	bl	8001394 <menu>
		}

		if (current_screen) {
 8001958:	4b25      	ldr	r3, [pc, #148]	@ (80019f0 <main+0x180>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d02b      	beq.n	80019b8 <main+0x148>

			if (HAL_GPIO_ReadPin(GPIOE, ENTER_BUTTON)) {
 8001960:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001964:	4823      	ldr	r0, [pc, #140]	@ (80019f4 <main+0x184>)
 8001966:	f000 fe89 	bl	800267c <HAL_GPIO_ReadPin>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d00c      	beq.n	800198a <main+0x11a>
				current_screen = !current_screen;
 8001970:	4b1f      	ldr	r3, [pc, #124]	@ (80019f0 <main+0x180>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	bf0c      	ite	eq
 8001978:	2301      	moveq	r3, #1
 800197a:	2300      	movne	r3, #0
 800197c:	b2db      	uxtb	r3, r3
 800197e:	461a      	mov	r2, r3
 8001980:	4b1b      	ldr	r3, [pc, #108]	@ (80019f0 <main+0x180>)
 8001982:	601a      	str	r2, [r3, #0]
				HAL_Delay(200);
 8001984:	20c8      	movs	r0, #200	@ 0xc8
 8001986:	f000 fbd3 	bl	8002130 <HAL_Delay>
			}

			ssd1306_Fill(0);
 800198a:	2000      	movs	r0, #0
 800198c:	f002 fe72 	bl	8004674 <ssd1306_Fill>

			if (item_selected == 0) {
 8001990:	4b1a      	ldr	r3, [pc, #104]	@ (80019fc <main+0x18c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d102      	bne.n	800199e <main+0x12e>
				read_accel();
 8001998:	f7ff fdac 	bl	80014f4 <read_accel>
 800199c:	e00c      	b.n	80019b8 <main+0x148>
			}

			else if (item_selected == 1) {
 800199e:	4b17      	ldr	r3, [pc, #92]	@ (80019fc <main+0x18c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d102      	bne.n	80019ac <main+0x13c>
				read_gyro();
 80019a6:	f7ff fe73 	bl	8001690 <read_gyro>
 80019aa:	e005      	b.n	80019b8 <main+0x148>

			} else if (item_selected == 2)
 80019ac:	4b13      	ldr	r3, [pc, #76]	@ (80019fc <main+0x18c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d101      	bne.n	80019b8 <main+0x148>
				animation();
 80019b4:	f7ff fc3e 	bl	8001234 <animation>
		}

		item_sel_previous = item_selected - 1;
 80019b8:	4b10      	ldr	r3, [pc, #64]	@ (80019fc <main+0x18c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	3b01      	subs	r3, #1
 80019be:	4a10      	ldr	r2, [pc, #64]	@ (8001a00 <main+0x190>)
 80019c0:	6013      	str	r3, [r2, #0]
		if (item_sel_previous < 0) {
 80019c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a00 <main+0x190>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	da02      	bge.n	80019d0 <main+0x160>
			item_sel_previous = NUM_ITEMS - 1;
 80019ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001a00 <main+0x190>)
 80019cc:	2203      	movs	r2, #3
 80019ce:	601a      	str	r2, [r3, #0]
		} // previous item would be below first = make it the last
		item_sel_next = item_selected + 1;
 80019d0:	4b0a      	ldr	r3, [pc, #40]	@ (80019fc <main+0x18c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	3301      	adds	r3, #1
 80019d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001a04 <main+0x194>)
 80019d8:	6013      	str	r3, [r2, #0]
		if (item_sel_next >= NUM_ITEMS) {
 80019da:	4b0a      	ldr	r3, [pc, #40]	@ (8001a04 <main+0x194>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b03      	cmp	r3, #3
 80019e0:	dd02      	ble.n	80019e8 <main+0x178>
			item_sel_next = 0;
 80019e2:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <main+0x194>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
		} // next item would be after last = make it the first
		ssd1306_UpdateScreen();
 80019e8:	f002 fe5c 	bl	80046a4 <ssd1306_UpdateScreen>
		if (current_screen == 0) {
 80019ec:	e752      	b.n	8001894 <main+0x24>
 80019ee:	bf00      	nop
 80019f0:	2000025c 	.word	0x2000025c
 80019f4:	40021000 	.word	0x40021000
 80019f8:	20000260 	.word	0x20000260
 80019fc:	20000250 	.word	0x20000250
 8001a00:	20000254 	.word	0x20000254
 8001a04:	20000258 	.word	0x20000258

08001a08 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b094      	sub	sp, #80	@ 0x50
 8001a0c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001a0e:	f107 0320 	add.w	r3, r7, #32
 8001a12:	2230      	movs	r2, #48	@ 0x30
 8001a14:	2100      	movs	r1, #0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f004 f869 	bl	8005aee <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001a1c:	f107 030c 	add.w	r3, r7, #12
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	4b22      	ldr	r3, [pc, #136]	@ (8001abc <SystemClock_Config+0xb4>)
 8001a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a34:	4a21      	ldr	r2, [pc, #132]	@ (8001abc <SystemClock_Config+0xb4>)
 8001a36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a3c:	4b1f      	ldr	r3, [pc, #124]	@ (8001abc <SystemClock_Config+0xb4>)
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a48:	2300      	movs	r3, #0
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac0 <SystemClock_Config+0xb8>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a1b      	ldr	r2, [pc, #108]	@ (8001ac0 <SystemClock_Config+0xb8>)
 8001a52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	4b19      	ldr	r3, [pc, #100]	@ (8001ac0 <SystemClock_Config+0xb8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a60:	607b      	str	r3, [r7, #4]
 8001a62:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a64:	2302      	movs	r3, #2
 8001a66:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a6c:	2310      	movs	r3, #16
 8001a6e:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001a74:	f107 0320 	add.w	r3, r7, #32
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f001 fe3b 	bl	80036f4 <HAL_RCC_OscConfig>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <SystemClock_Config+0x80>
		Error_Handler();
 8001a84:	f000 f8f2 	bl	8001c6c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001a88:	230f      	movs	r3, #15
 8001a8a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001a9c:	f107 030c 	add.w	r3, r7, #12
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f002 f89e 	bl	8003be4 <HAL_RCC_ClockConfig>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <SystemClock_Config+0xaa>
		Error_Handler();
 8001aae:	f000 f8dd 	bl	8001c6c <Error_Handler>
	}
}
 8001ab2:	bf00      	nop
 8001ab4:	3750      	adds	r7, #80	@ 0x50
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40007000 	.word	0x40007000

08001ac4 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001ac8:	4b12      	ldr	r3, [pc, #72]	@ (8001b14 <MX_I2C1_Init+0x50>)
 8001aca:	4a13      	ldr	r2, [pc, #76]	@ (8001b18 <MX_I2C1_Init+0x54>)
 8001acc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8001ace:	4b11      	ldr	r3, [pc, #68]	@ (8001b14 <MX_I2C1_Init+0x50>)
 8001ad0:	4a12      	ldr	r2, [pc, #72]	@ (8001b1c <MX_I2C1_Init+0x58>)
 8001ad2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b14 <MX_I2C1_Init+0x50>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001ada:	4b0e      	ldr	r3, [pc, #56]	@ (8001b14 <MX_I2C1_Init+0x50>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b14 <MX_I2C1_Init+0x50>)
 8001ae2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ae6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8001b14 <MX_I2C1_Init+0x50>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001aee:	4b09      	ldr	r3, [pc, #36]	@ (8001b14 <MX_I2C1_Init+0x50>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001af4:	4b07      	ldr	r3, [pc, #28]	@ (8001b14 <MX_I2C1_Init+0x50>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001afa:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <MX_I2C1_Init+0x50>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001b00:	4804      	ldr	r0, [pc, #16]	@ (8001b14 <MX_I2C1_Init+0x50>)
 8001b02:	f000 fdd3 	bl	80026ac <HAL_I2C_Init>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001b0c:	f000 f8ae 	bl	8001c6c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	200002a0 	.word	0x200002a0
 8001b18:	40005400 	.word	0x40005400
 8001b1c:	00061a80 	.word	0x00061a80

08001b20 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001b24:	4b10      	ldr	r3, [pc, #64]	@ (8001b68 <MX_USART1_UART_Init+0x48>)
 8001b26:	4a11      	ldr	r2, [pc, #68]	@ (8001b6c <MX_USART1_UART_Init+0x4c>)
 8001b28:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 1000000;
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b68 <MX_USART1_UART_Init+0x48>)
 8001b2c:	4a10      	ldr	r2, [pc, #64]	@ (8001b70 <MX_USART1_UART_Init+0x50>)
 8001b2e:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b30:	4b0d      	ldr	r3, [pc, #52]	@ (8001b68 <MX_USART1_UART_Init+0x48>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001b36:	4b0c      	ldr	r3, [pc, #48]	@ (8001b68 <MX_USART1_UART_Init+0x48>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b68 <MX_USART1_UART_Init+0x48>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001b42:	4b09      	ldr	r3, [pc, #36]	@ (8001b68 <MX_USART1_UART_Init+0x48>)
 8001b44:	220c      	movs	r2, #12
 8001b46:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b48:	4b07      	ldr	r3, [pc, #28]	@ (8001b68 <MX_USART1_UART_Init+0x48>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b4e:	4b06      	ldr	r3, [pc, #24]	@ (8001b68 <MX_USART1_UART_Init+0x48>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001b54:	4804      	ldr	r0, [pc, #16]	@ (8001b68 <MX_USART1_UART_Init+0x48>)
 8001b56:	f002 fa25 	bl	8003fa4 <HAL_UART_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_USART1_UART_Init+0x44>
		Error_Handler();
 8001b60:	f000 f884 	bl	8001c6c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	200002f4 	.word	0x200002f4
 8001b6c:	40011000 	.word	0x40011000
 8001b70:	000f4240 	.word	0x000f4240

08001b74 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]
 8001b88:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001c00 <MX_GPIO_Init+0x8c>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b92:	4a1b      	ldr	r2, [pc, #108]	@ (8001c00 <MX_GPIO_Init+0x8c>)
 8001b94:	f043 0310 	orr.w	r3, r3, #16
 8001b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b9a:	4b19      	ldr	r3, [pc, #100]	@ (8001c00 <MX_GPIO_Init+0x8c>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9e:	f003 0310 	and.w	r3, r3, #16
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	607b      	str	r3, [r7, #4]
 8001baa:	4b15      	ldr	r3, [pc, #84]	@ (8001c00 <MX_GPIO_Init+0x8c>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	4a14      	ldr	r2, [pc, #80]	@ (8001c00 <MX_GPIO_Init+0x8c>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bb6:	4b12      	ldr	r3, [pc, #72]	@ (8001c00 <MX_GPIO_Init+0x8c>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	607b      	str	r3, [r7, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	603b      	str	r3, [r7, #0]
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c00 <MX_GPIO_Init+0x8c>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bca:	4a0d      	ldr	r2, [pc, #52]	@ (8001c00 <MX_GPIO_Init+0x8c>)
 8001bcc:	f043 0302 	orr.w	r3, r3, #2
 8001bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001c00 <MX_GPIO_Init+0x8c>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	603b      	str	r3, [r7, #0]
 8001bdc:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pins : PE9 PE10 PE11 */
	GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
 8001bde:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8001be2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be4:	2300      	movs	r3, #0
 8001be6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bec:	f107 030c 	add.w	r3, r7, #12
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4804      	ldr	r0, [pc, #16]	@ (8001c04 <MX_GPIO_Init+0x90>)
 8001bf4:	f000 fba6 	bl	8002344 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001bf8:	bf00      	nop
 8001bfa:	3720      	adds	r7, #32
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40021000 	.word	0x40021000

08001c08 <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch) {
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
	USART1->DR = (ch & (uint16_t) 0x01FF);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a09      	ldr	r2, [pc, #36]	@ (8001c38 <__io_putchar+0x30>)
 8001c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c18:	6053      	str	r3, [r2, #4]
	while (!(USART1->SR & USART_SR_TXE))
 8001c1a:	bf00      	nop
 8001c1c:	4b06      	ldr	r3, [pc, #24]	@ (8001c38 <__io_putchar+0x30>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0f9      	beq.n	8001c1c <__io_putchar+0x14>
		; //espera pelo fim da transmissão do caractere para evitar a segunda transmissão antes da primeira ser concluída
	return ch;
 8001c28:	687b      	ldr	r3, [r7, #4]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40011000 	.word	0x40011000

08001c3c <__io_getchar>:
int __io_getchar(void) {
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
	return (uint16_t) (USART1->DR & (uint16_t) 0x01FF);
 8001c40:	4b04      	ldr	r3, [pc, #16]	@ (8001c54 <__io_getchar+0x18>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	40011000 	.word	0x40011000

08001c58 <USART1_IRQHandler>:
//ISR da USART1. Todas as ISR's estão definidas no arquivo startup_stm32.s
void USART1_IRQHandler(void) {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
	__io_putchar(__io_getchar());
 8001c5c:	f7ff ffee 	bl	8001c3c <__io_getchar>
 8001c60:	4603      	mov	r3, r0
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff ffd0 	bl	8001c08 <__io_putchar>
}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c70:	b672      	cpsid	i
}
 8001c72:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001c74:	bf00      	nop
 8001c76:	e7fd      	b.n	8001c74 <Error_Handler+0x8>

08001c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	4b10      	ldr	r3, [pc, #64]	@ (8001cc4 <HAL_MspInit+0x4c>)
 8001c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c86:	4a0f      	ldr	r2, [pc, #60]	@ (8001cc4 <HAL_MspInit+0x4c>)
 8001c88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc4 <HAL_MspInit+0x4c>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c96:	607b      	str	r3, [r7, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	603b      	str	r3, [r7, #0]
 8001c9e:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <HAL_MspInit+0x4c>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca2:	4a08      	ldr	r2, [pc, #32]	@ (8001cc4 <HAL_MspInit+0x4c>)
 8001ca4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ca8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001caa:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <HAL_MspInit+0x4c>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cb2:	603b      	str	r3, [r7, #0]
 8001cb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800

08001cc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	@ 0x28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a19      	ldr	r2, [pc, #100]	@ (8001d4c <HAL_I2C_MspInit+0x84>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d12c      	bne.n	8001d44 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	4b18      	ldr	r3, [pc, #96]	@ (8001d50 <HAL_I2C_MspInit+0x88>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	4a17      	ldr	r2, [pc, #92]	@ (8001d50 <HAL_I2C_MspInit+0x88>)
 8001cf4:	f043 0302 	orr.w	r3, r3, #2
 8001cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cfa:	4b15      	ldr	r3, [pc, #84]	@ (8001d50 <HAL_I2C_MspInit+0x88>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001d06:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d0c:	2312      	movs	r3, #18
 8001d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d14:	2303      	movs	r3, #3
 8001d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d18:	2304      	movs	r3, #4
 8001d1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	4619      	mov	r1, r3
 8001d22:	480c      	ldr	r0, [pc, #48]	@ (8001d54 <HAL_I2C_MspInit+0x8c>)
 8001d24:	f000 fb0e 	bl	8002344 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	4b08      	ldr	r3, [pc, #32]	@ (8001d50 <HAL_I2C_MspInit+0x88>)
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d30:	4a07      	ldr	r2, [pc, #28]	@ (8001d50 <HAL_I2C_MspInit+0x88>)
 8001d32:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d36:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d38:	4b05      	ldr	r3, [pc, #20]	@ (8001d50 <HAL_I2C_MspInit+0x88>)
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001d44:	bf00      	nop
 8001d46:	3728      	adds	r7, #40	@ 0x28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40005400 	.word	0x40005400
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40020400 	.word	0x40020400

08001d58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08a      	sub	sp, #40	@ 0x28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a19      	ldr	r2, [pc, #100]	@ (8001ddc <HAL_UART_MspInit+0x84>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d12c      	bne.n	8001dd4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	4b18      	ldr	r3, [pc, #96]	@ (8001de0 <HAL_UART_MspInit+0x88>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d82:	4a17      	ldr	r2, [pc, #92]	@ (8001de0 <HAL_UART_MspInit+0x88>)
 8001d84:	f043 0310 	orr.w	r3, r3, #16
 8001d88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d8a:	4b15      	ldr	r3, [pc, #84]	@ (8001de0 <HAL_UART_MspInit+0x88>)
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8e:	f003 0310 	and.w	r3, r3, #16
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	4b11      	ldr	r3, [pc, #68]	@ (8001de0 <HAL_UART_MspInit+0x88>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9e:	4a10      	ldr	r2, [pc, #64]	@ (8001de0 <HAL_UART_MspInit+0x88>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da6:	4b0e      	ldr	r3, [pc, #56]	@ (8001de0 <HAL_UART_MspInit+0x88>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001db2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db8:	2302      	movs	r3, #2
 8001dba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dc4:	2307      	movs	r3, #7
 8001dc6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4805      	ldr	r0, [pc, #20]	@ (8001de4 <HAL_UART_MspInit+0x8c>)
 8001dd0:	f000 fab8 	bl	8002344 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001dd4:	bf00      	nop
 8001dd6:	3728      	adds	r7, #40	@ 0x28
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40011000 	.word	0x40011000
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40020000 	.word	0x40020000

08001de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001dec:	bf00      	nop
 8001dee:	e7fd      	b.n	8001dec <NMI_Handler+0x4>

08001df0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001df4:	bf00      	nop
 8001df6:	e7fd      	b.n	8001df4 <HardFault_Handler+0x4>

08001df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dfc:	bf00      	nop
 8001dfe:	e7fd      	b.n	8001dfc <MemManage_Handler+0x4>

08001e00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e04:	bf00      	nop
 8001e06:	e7fd      	b.n	8001e04 <BusFault_Handler+0x4>

08001e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e0c:	bf00      	nop
 8001e0e:	e7fd      	b.n	8001e0c <UsageFault_Handler+0x4>

08001e10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e3e:	f000 f957 	bl	80020f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0
  return 1;
 8001e4a:	2301      	movs	r3, #1
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <_kill>:

int _kill(int pid, int sig)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
 8001e5e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e60:	f003 fe98 	bl	8005b94 <__errno>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2216      	movs	r2, #22
 8001e68:	601a      	str	r2, [r3, #0]
  return -1;
 8001e6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <_exit>:

void _exit (int status)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e7e:	f04f 31ff 	mov.w	r1, #4294967295
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff ffe7 	bl	8001e56 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e88:	bf00      	nop
 8001e8a:	e7fd      	b.n	8001e88 <_exit+0x12>

08001e8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
 8001e9c:	e00a      	b.n	8001eb4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e9e:	f7ff fecd 	bl	8001c3c <__io_getchar>
 8001ea2:	4601      	mov	r1, r0
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	1c5a      	adds	r2, r3, #1
 8001ea8:	60ba      	str	r2, [r7, #8]
 8001eaa:	b2ca      	uxtb	r2, r1
 8001eac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	dbf0      	blt.n	8001e9e <_read+0x12>
  }

  return len;
 8001ebc:	687b      	ldr	r3, [r7, #4]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b086      	sub	sp, #24
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	60f8      	str	r0, [r7, #12]
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	e009      	b.n	8001eec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	1c5a      	adds	r2, r3, #1
 8001edc:	60ba      	str	r2, [r7, #8]
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fe91 	bl	8001c08 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	dbf1      	blt.n	8001ed8 <_write+0x12>
  }
  return len;
 8001ef4:	687b      	ldr	r3, [r7, #4]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <_close>:

int _close(int file)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f26:	605a      	str	r2, [r3, #4]
  return 0;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <_isatty>:

int _isatty(int file)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f3e:	2301      	movs	r3, #1
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
	...

08001f68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f70:	4a14      	ldr	r2, [pc, #80]	@ (8001fc4 <_sbrk+0x5c>)
 8001f72:	4b15      	ldr	r3, [pc, #84]	@ (8001fc8 <_sbrk+0x60>)
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f7c:	4b13      	ldr	r3, [pc, #76]	@ (8001fcc <_sbrk+0x64>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d102      	bne.n	8001f8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f84:	4b11      	ldr	r3, [pc, #68]	@ (8001fcc <_sbrk+0x64>)
 8001f86:	4a12      	ldr	r2, [pc, #72]	@ (8001fd0 <_sbrk+0x68>)
 8001f88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f8a:	4b10      	ldr	r3, [pc, #64]	@ (8001fcc <_sbrk+0x64>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d207      	bcs.n	8001fa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f98:	f003 fdfc 	bl	8005b94 <__errno>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	220c      	movs	r2, #12
 8001fa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa6:	e009      	b.n	8001fbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa8:	4b08      	ldr	r3, [pc, #32]	@ (8001fcc <_sbrk+0x64>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fae:	4b07      	ldr	r3, [pc, #28]	@ (8001fcc <_sbrk+0x64>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	4a05      	ldr	r2, [pc, #20]	@ (8001fcc <_sbrk+0x64>)
 8001fb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fba:	68fb      	ldr	r3, [r7, #12]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20020000 	.word	0x20020000
 8001fc8:	00000400 	.word	0x00000400
 8001fcc:	2000033c 	.word	0x2000033c
 8001fd0:	20000898 	.word	0x20000898

08001fd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fd8:	4b06      	ldr	r3, [pc, #24]	@ (8001ff4 <SystemInit+0x20>)
 8001fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fde:	4a05      	ldr	r2, [pc, #20]	@ (8001ff4 <SystemInit+0x20>)
 8001fe0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fe4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ff8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002030 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ffc:	f7ff ffea 	bl	8001fd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002000:	480c      	ldr	r0, [pc, #48]	@ (8002034 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002002:	490d      	ldr	r1, [pc, #52]	@ (8002038 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002004:	4a0d      	ldr	r2, [pc, #52]	@ (800203c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002008:	e002      	b.n	8002010 <LoopCopyDataInit>

0800200a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800200a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800200c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800200e:	3304      	adds	r3, #4

08002010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002014:	d3f9      	bcc.n	800200a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002016:	4a0a      	ldr	r2, [pc, #40]	@ (8002040 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002018:	4c0a      	ldr	r4, [pc, #40]	@ (8002044 <LoopFillZerobss+0x22>)
  movs r3, #0
 800201a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800201c:	e001      	b.n	8002022 <LoopFillZerobss>

0800201e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800201e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002020:	3204      	adds	r2, #4

08002022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002024:	d3fb      	bcc.n	800201e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002026:	f003 fdbb 	bl	8005ba0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800202a:	f7ff fc21 	bl	8001870 <main>
  bx  lr    
 800202e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002030:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002038:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 800203c:	0800cea8 	.word	0x0800cea8
  ldr r2, =_sbss
 8002040:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 8002044:	20000898 	.word	0x20000898

08002048 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002048:	e7fe      	b.n	8002048 <ADC_IRQHandler>
	...

0800204c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002050:	4b0e      	ldr	r3, [pc, #56]	@ (800208c <HAL_Init+0x40>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a0d      	ldr	r2, [pc, #52]	@ (800208c <HAL_Init+0x40>)
 8002056:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800205a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800205c:	4b0b      	ldr	r3, [pc, #44]	@ (800208c <HAL_Init+0x40>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a0a      	ldr	r2, [pc, #40]	@ (800208c <HAL_Init+0x40>)
 8002062:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002066:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002068:	4b08      	ldr	r3, [pc, #32]	@ (800208c <HAL_Init+0x40>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a07      	ldr	r2, [pc, #28]	@ (800208c <HAL_Init+0x40>)
 800206e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002072:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002074:	2003      	movs	r0, #3
 8002076:	f000 f931 	bl	80022dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800207a:	200f      	movs	r0, #15
 800207c:	f000 f808 	bl	8002090 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002080:	f7ff fdfa 	bl	8001c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40023c00 	.word	0x40023c00

08002090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002098:	4b12      	ldr	r3, [pc, #72]	@ (80020e4 <HAL_InitTick+0x54>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4b12      	ldr	r3, [pc, #72]	@ (80020e8 <HAL_InitTick+0x58>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	4619      	mov	r1, r3
 80020a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 f93b 	bl	800232a <HAL_SYSTICK_Config>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e00e      	b.n	80020dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b0f      	cmp	r3, #15
 80020c2:	d80a      	bhi.n	80020da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020c4:	2200      	movs	r2, #0
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	f04f 30ff 	mov.w	r0, #4294967295
 80020cc:	f000 f911 	bl	80022f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020d0:	4a06      	ldr	r2, [pc, #24]	@ (80020ec <HAL_InitTick+0x5c>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	e000      	b.n	80020dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20000060 	.word	0x20000060
 80020e8:	20000068 	.word	0x20000068
 80020ec:	20000064 	.word	0x20000064

080020f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020f4:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <HAL_IncTick+0x20>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	461a      	mov	r2, r3
 80020fa:	4b06      	ldr	r3, [pc, #24]	@ (8002114 <HAL_IncTick+0x24>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4413      	add	r3, r2
 8002100:	4a04      	ldr	r2, [pc, #16]	@ (8002114 <HAL_IncTick+0x24>)
 8002102:	6013      	str	r3, [r2, #0]
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	20000068 	.word	0x20000068
 8002114:	20000340 	.word	0x20000340

08002118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return uwTick;
 800211c:	4b03      	ldr	r3, [pc, #12]	@ (800212c <HAL_GetTick+0x14>)
 800211e:	681b      	ldr	r3, [r3, #0]
}
 8002120:	4618      	mov	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	20000340 	.word	0x20000340

08002130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002138:	f7ff ffee 	bl	8002118 <HAL_GetTick>
 800213c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002148:	d005      	beq.n	8002156 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800214a:	4b0a      	ldr	r3, [pc, #40]	@ (8002174 <HAL_Delay+0x44>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	461a      	mov	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4413      	add	r3, r2
 8002154:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002156:	bf00      	nop
 8002158:	f7ff ffde 	bl	8002118 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	429a      	cmp	r2, r3
 8002166:	d8f7      	bhi.n	8002158 <HAL_Delay+0x28>
  {
  }
}
 8002168:	bf00      	nop
 800216a:	bf00      	nop
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000068 	.word	0x20000068

08002178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002188:	4b0c      	ldr	r3, [pc, #48]	@ (80021bc <__NVIC_SetPriorityGrouping+0x44>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002194:	4013      	ands	r3, r2
 8002196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021aa:	4a04      	ldr	r2, [pc, #16]	@ (80021bc <__NVIC_SetPriorityGrouping+0x44>)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	60d3      	str	r3, [r2, #12]
}
 80021b0:	bf00      	nop
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021c4:	4b04      	ldr	r3, [pc, #16]	@ (80021d8 <__NVIC_GetPriorityGrouping+0x18>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	0a1b      	lsrs	r3, r3, #8
 80021ca:	f003 0307 	and.w	r3, r3, #7
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	6039      	str	r1, [r7, #0]
 80021e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	db0a      	blt.n	8002206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	490c      	ldr	r1, [pc, #48]	@ (8002228 <__NVIC_SetPriority+0x4c>)
 80021f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fa:	0112      	lsls	r2, r2, #4
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	440b      	add	r3, r1
 8002200:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002204:	e00a      	b.n	800221c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	b2da      	uxtb	r2, r3
 800220a:	4908      	ldr	r1, [pc, #32]	@ (800222c <__NVIC_SetPriority+0x50>)
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	3b04      	subs	r3, #4
 8002214:	0112      	lsls	r2, r2, #4
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	440b      	add	r3, r1
 800221a:	761a      	strb	r2, [r3, #24]
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	e000e100 	.word	0xe000e100
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002230:	b480      	push	{r7}
 8002232:	b089      	sub	sp, #36	@ 0x24
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f1c3 0307 	rsb	r3, r3, #7
 800224a:	2b04      	cmp	r3, #4
 800224c:	bf28      	it	cs
 800224e:	2304      	movcs	r3, #4
 8002250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	3304      	adds	r3, #4
 8002256:	2b06      	cmp	r3, #6
 8002258:	d902      	bls.n	8002260 <NVIC_EncodePriority+0x30>
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3b03      	subs	r3, #3
 800225e:	e000      	b.n	8002262 <NVIC_EncodePriority+0x32>
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002264:	f04f 32ff 	mov.w	r2, #4294967295
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43da      	mvns	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	401a      	ands	r2, r3
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002278:	f04f 31ff 	mov.w	r1, #4294967295
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	fa01 f303 	lsl.w	r3, r1, r3
 8002282:	43d9      	mvns	r1, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002288:	4313      	orrs	r3, r2
         );
}
 800228a:	4618      	mov	r0, r3
 800228c:	3724      	adds	r7, #36	@ 0x24
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
	...

08002298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022a8:	d301      	bcc.n	80022ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022aa:	2301      	movs	r3, #1
 80022ac:	e00f      	b.n	80022ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ae:	4a0a      	ldr	r2, [pc, #40]	@ (80022d8 <SysTick_Config+0x40>)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022b6:	210f      	movs	r1, #15
 80022b8:	f04f 30ff 	mov.w	r0, #4294967295
 80022bc:	f7ff ff8e 	bl	80021dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c0:	4b05      	ldr	r3, [pc, #20]	@ (80022d8 <SysTick_Config+0x40>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022c6:	4b04      	ldr	r3, [pc, #16]	@ (80022d8 <SysTick_Config+0x40>)
 80022c8:	2207      	movs	r2, #7
 80022ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	e000e010 	.word	0xe000e010

080022dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7ff ff47 	bl	8002178 <__NVIC_SetPriorityGrouping>
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b086      	sub	sp, #24
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	4603      	mov	r3, r0
 80022fa:	60b9      	str	r1, [r7, #8]
 80022fc:	607a      	str	r2, [r7, #4]
 80022fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002300:	2300      	movs	r3, #0
 8002302:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002304:	f7ff ff5c 	bl	80021c0 <__NVIC_GetPriorityGrouping>
 8002308:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	68b9      	ldr	r1, [r7, #8]
 800230e:	6978      	ldr	r0, [r7, #20]
 8002310:	f7ff ff8e 	bl	8002230 <NVIC_EncodePriority>
 8002314:	4602      	mov	r2, r0
 8002316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800231a:	4611      	mov	r1, r2
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff ff5d 	bl	80021dc <__NVIC_SetPriority>
}
 8002322:	bf00      	nop
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff ffb0 	bl	8002298 <SysTick_Config>
 8002338:	4603      	mov	r3, r0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002344:	b480      	push	{r7}
 8002346:	b089      	sub	sp, #36	@ 0x24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002352:	2300      	movs	r3, #0
 8002354:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002356:	2300      	movs	r3, #0
 8002358:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800235a:	2300      	movs	r3, #0
 800235c:	61fb      	str	r3, [r7, #28]
 800235e:	e16b      	b.n	8002638 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002360:	2201      	movs	r2, #1
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	4013      	ands	r3, r2
 8002372:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	429a      	cmp	r2, r3
 800237a:	f040 815a 	bne.w	8002632 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	2b01      	cmp	r3, #1
 8002388:	d005      	beq.n	8002396 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002392:	2b02      	cmp	r3, #2
 8002394:	d130      	bne.n	80023f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	2203      	movs	r2, #3
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023cc:	2201      	movs	r2, #1
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	091b      	lsrs	r3, r3, #4
 80023e2:	f003 0201 	and.w	r2, r3, #1
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 0303 	and.w	r3, r3, #3
 8002400:	2b03      	cmp	r3, #3
 8002402:	d017      	beq.n	8002434 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	2203      	movs	r2, #3
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 0303 	and.w	r3, r3, #3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d123      	bne.n	8002488 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	08da      	lsrs	r2, r3, #3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3208      	adds	r2, #8
 8002448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800244c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	220f      	movs	r2, #15
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4013      	ands	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	691a      	ldr	r2, [r3, #16]
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4313      	orrs	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	08da      	lsrs	r2, r3, #3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3208      	adds	r2, #8
 8002482:	69b9      	ldr	r1, [r7, #24]
 8002484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	2203      	movs	r2, #3
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 0203 	and.w	r2, r3, #3
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 80b4 	beq.w	8002632 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	4b60      	ldr	r3, [pc, #384]	@ (8002650 <HAL_GPIO_Init+0x30c>)
 80024d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d2:	4a5f      	ldr	r2, [pc, #380]	@ (8002650 <HAL_GPIO_Init+0x30c>)
 80024d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024da:	4b5d      	ldr	r3, [pc, #372]	@ (8002650 <HAL_GPIO_Init+0x30c>)
 80024dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024e6:	4a5b      	ldr	r2, [pc, #364]	@ (8002654 <HAL_GPIO_Init+0x310>)
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	089b      	lsrs	r3, r3, #2
 80024ec:	3302      	adds	r3, #2
 80024ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	220f      	movs	r2, #15
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4013      	ands	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a52      	ldr	r2, [pc, #328]	@ (8002658 <HAL_GPIO_Init+0x314>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d02b      	beq.n	800256a <HAL_GPIO_Init+0x226>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a51      	ldr	r2, [pc, #324]	@ (800265c <HAL_GPIO_Init+0x318>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d025      	beq.n	8002566 <HAL_GPIO_Init+0x222>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a50      	ldr	r2, [pc, #320]	@ (8002660 <HAL_GPIO_Init+0x31c>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d01f      	beq.n	8002562 <HAL_GPIO_Init+0x21e>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a4f      	ldr	r2, [pc, #316]	@ (8002664 <HAL_GPIO_Init+0x320>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d019      	beq.n	800255e <HAL_GPIO_Init+0x21a>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a4e      	ldr	r2, [pc, #312]	@ (8002668 <HAL_GPIO_Init+0x324>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d013      	beq.n	800255a <HAL_GPIO_Init+0x216>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a4d      	ldr	r2, [pc, #308]	@ (800266c <HAL_GPIO_Init+0x328>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d00d      	beq.n	8002556 <HAL_GPIO_Init+0x212>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a4c      	ldr	r2, [pc, #304]	@ (8002670 <HAL_GPIO_Init+0x32c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d007      	beq.n	8002552 <HAL_GPIO_Init+0x20e>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a4b      	ldr	r2, [pc, #300]	@ (8002674 <HAL_GPIO_Init+0x330>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d101      	bne.n	800254e <HAL_GPIO_Init+0x20a>
 800254a:	2307      	movs	r3, #7
 800254c:	e00e      	b.n	800256c <HAL_GPIO_Init+0x228>
 800254e:	2308      	movs	r3, #8
 8002550:	e00c      	b.n	800256c <HAL_GPIO_Init+0x228>
 8002552:	2306      	movs	r3, #6
 8002554:	e00a      	b.n	800256c <HAL_GPIO_Init+0x228>
 8002556:	2305      	movs	r3, #5
 8002558:	e008      	b.n	800256c <HAL_GPIO_Init+0x228>
 800255a:	2304      	movs	r3, #4
 800255c:	e006      	b.n	800256c <HAL_GPIO_Init+0x228>
 800255e:	2303      	movs	r3, #3
 8002560:	e004      	b.n	800256c <HAL_GPIO_Init+0x228>
 8002562:	2302      	movs	r3, #2
 8002564:	e002      	b.n	800256c <HAL_GPIO_Init+0x228>
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <HAL_GPIO_Init+0x228>
 800256a:	2300      	movs	r3, #0
 800256c:	69fa      	ldr	r2, [r7, #28]
 800256e:	f002 0203 	and.w	r2, r2, #3
 8002572:	0092      	lsls	r2, r2, #2
 8002574:	4093      	lsls	r3, r2
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4313      	orrs	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800257c:	4935      	ldr	r1, [pc, #212]	@ (8002654 <HAL_GPIO_Init+0x310>)
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	089b      	lsrs	r3, r3, #2
 8002582:	3302      	adds	r3, #2
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800258a:	4b3b      	ldr	r3, [pc, #236]	@ (8002678 <HAL_GPIO_Init+0x334>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	43db      	mvns	r3, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4013      	ands	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025ae:	4a32      	ldr	r2, [pc, #200]	@ (8002678 <HAL_GPIO_Init+0x334>)
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025b4:	4b30      	ldr	r3, [pc, #192]	@ (8002678 <HAL_GPIO_Init+0x334>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025d8:	4a27      	ldr	r2, [pc, #156]	@ (8002678 <HAL_GPIO_Init+0x334>)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025de:	4b26      	ldr	r3, [pc, #152]	@ (8002678 <HAL_GPIO_Init+0x334>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	43db      	mvns	r3, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4013      	ands	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002602:	4a1d      	ldr	r2, [pc, #116]	@ (8002678 <HAL_GPIO_Init+0x334>)
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002608:	4b1b      	ldr	r3, [pc, #108]	@ (8002678 <HAL_GPIO_Init+0x334>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800262c:	4a12      	ldr	r2, [pc, #72]	@ (8002678 <HAL_GPIO_Init+0x334>)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	3301      	adds	r3, #1
 8002636:	61fb      	str	r3, [r7, #28]
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	2b0f      	cmp	r3, #15
 800263c:	f67f ae90 	bls.w	8002360 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002640:	bf00      	nop
 8002642:	bf00      	nop
 8002644:	3724      	adds	r7, #36	@ 0x24
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	40023800 	.word	0x40023800
 8002654:	40013800 	.word	0x40013800
 8002658:	40020000 	.word	0x40020000
 800265c:	40020400 	.word	0x40020400
 8002660:	40020800 	.word	0x40020800
 8002664:	40020c00 	.word	0x40020c00
 8002668:	40021000 	.word	0x40021000
 800266c:	40021400 	.word	0x40021400
 8002670:	40021800 	.word	0x40021800
 8002674:	40021c00 	.word	0x40021c00
 8002678:	40013c00 	.word	0x40013c00

0800267c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691a      	ldr	r2, [r3, #16]
 800268c:	887b      	ldrh	r3, [r7, #2]
 800268e:	4013      	ands	r3, r2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d002      	beq.n	800269a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002694:	2301      	movs	r3, #1
 8002696:	73fb      	strb	r3, [r7, #15]
 8002698:	e001      	b.n	800269e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800269a:	2300      	movs	r3, #0
 800269c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800269e:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e12b      	b.n	8002916 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d106      	bne.n	80026d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff faf8 	bl	8001cc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2224      	movs	r2, #36	@ 0x24
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0201 	bic.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800270e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002710:	f001 fc20 	bl	8003f54 <HAL_RCC_GetPCLK1Freq>
 8002714:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	4a81      	ldr	r2, [pc, #516]	@ (8002920 <HAL_I2C_Init+0x274>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d807      	bhi.n	8002730 <HAL_I2C_Init+0x84>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4a80      	ldr	r2, [pc, #512]	@ (8002924 <HAL_I2C_Init+0x278>)
 8002724:	4293      	cmp	r3, r2
 8002726:	bf94      	ite	ls
 8002728:	2301      	movls	r3, #1
 800272a:	2300      	movhi	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	e006      	b.n	800273e <HAL_I2C_Init+0x92>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4a7d      	ldr	r2, [pc, #500]	@ (8002928 <HAL_I2C_Init+0x27c>)
 8002734:	4293      	cmp	r3, r2
 8002736:	bf94      	ite	ls
 8002738:	2301      	movls	r3, #1
 800273a:	2300      	movhi	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e0e7      	b.n	8002916 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4a78      	ldr	r2, [pc, #480]	@ (800292c <HAL_I2C_Init+0x280>)
 800274a:	fba2 2303 	umull	r2, r3, r2, r3
 800274e:	0c9b      	lsrs	r3, r3, #18
 8002750:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68ba      	ldr	r2, [r7, #8]
 8002762:	430a      	orrs	r2, r1
 8002764:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	4a6a      	ldr	r2, [pc, #424]	@ (8002920 <HAL_I2C_Init+0x274>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d802      	bhi.n	8002780 <HAL_I2C_Init+0xd4>
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	3301      	adds	r3, #1
 800277e:	e009      	b.n	8002794 <HAL_I2C_Init+0xe8>
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002786:	fb02 f303 	mul.w	r3, r2, r3
 800278a:	4a69      	ldr	r2, [pc, #420]	@ (8002930 <HAL_I2C_Init+0x284>)
 800278c:	fba2 2303 	umull	r2, r3, r2, r3
 8002790:	099b      	lsrs	r3, r3, #6
 8002792:	3301      	adds	r3, #1
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	430b      	orrs	r3, r1
 800279a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80027a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	495c      	ldr	r1, [pc, #368]	@ (8002920 <HAL_I2C_Init+0x274>)
 80027b0:	428b      	cmp	r3, r1
 80027b2:	d819      	bhi.n	80027e8 <HAL_I2C_Init+0x13c>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	1e59      	subs	r1, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	fbb1 f3f3 	udiv	r3, r1, r3
 80027c2:	1c59      	adds	r1, r3, #1
 80027c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80027c8:	400b      	ands	r3, r1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00a      	beq.n	80027e4 <HAL_I2C_Init+0x138>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	1e59      	subs	r1, r3, #1
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80027dc:	3301      	adds	r3, #1
 80027de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e2:	e051      	b.n	8002888 <HAL_I2C_Init+0x1dc>
 80027e4:	2304      	movs	r3, #4
 80027e6:	e04f      	b.n	8002888 <HAL_I2C_Init+0x1dc>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d111      	bne.n	8002814 <HAL_I2C_Init+0x168>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	1e58      	subs	r0, r3, #1
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6859      	ldr	r1, [r3, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	440b      	add	r3, r1
 80027fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002802:	3301      	adds	r3, #1
 8002804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002808:	2b00      	cmp	r3, #0
 800280a:	bf0c      	ite	eq
 800280c:	2301      	moveq	r3, #1
 800280e:	2300      	movne	r3, #0
 8002810:	b2db      	uxtb	r3, r3
 8002812:	e012      	b.n	800283a <HAL_I2C_Init+0x18e>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	1e58      	subs	r0, r3, #1
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6859      	ldr	r1, [r3, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	0099      	lsls	r1, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	fbb0 f3f3 	udiv	r3, r0, r3
 800282a:	3301      	adds	r3, #1
 800282c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002830:	2b00      	cmp	r3, #0
 8002832:	bf0c      	ite	eq
 8002834:	2301      	moveq	r3, #1
 8002836:	2300      	movne	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_I2C_Init+0x196>
 800283e:	2301      	movs	r3, #1
 8002840:	e022      	b.n	8002888 <HAL_I2C_Init+0x1dc>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10e      	bne.n	8002868 <HAL_I2C_Init+0x1bc>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	1e58      	subs	r0, r3, #1
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6859      	ldr	r1, [r3, #4]
 8002852:	460b      	mov	r3, r1
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	440b      	add	r3, r1
 8002858:	fbb0 f3f3 	udiv	r3, r0, r3
 800285c:	3301      	adds	r3, #1
 800285e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002862:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002866:	e00f      	b.n	8002888 <HAL_I2C_Init+0x1dc>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	1e58      	subs	r0, r3, #1
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6859      	ldr	r1, [r3, #4]
 8002870:	460b      	mov	r3, r1
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	0099      	lsls	r1, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	fbb0 f3f3 	udiv	r3, r0, r3
 800287e:	3301      	adds	r3, #1
 8002880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002884:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	6809      	ldr	r1, [r1, #0]
 800288c:	4313      	orrs	r3, r2
 800288e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69da      	ldr	r2, [r3, #28]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80028b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6911      	ldr	r1, [r2, #16]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	68d2      	ldr	r2, [r2, #12]
 80028c2:	4311      	orrs	r1, r2
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6812      	ldr	r2, [r2, #0]
 80028c8:	430b      	orrs	r3, r1
 80028ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	695a      	ldr	r2, [r3, #20]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	431a      	orrs	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0201 	orr.w	r2, r2, #1
 80028f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2220      	movs	r2, #32
 8002902:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	000186a0 	.word	0x000186a0
 8002924:	001e847f 	.word	0x001e847f
 8002928:	003d08ff 	.word	0x003d08ff
 800292c:	431bde83 	.word	0x431bde83
 8002930:	10624dd3 	.word	0x10624dd3

08002934 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af02      	add	r7, sp, #8
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	4608      	mov	r0, r1
 800293e:	4611      	mov	r1, r2
 8002940:	461a      	mov	r2, r3
 8002942:	4603      	mov	r3, r0
 8002944:	817b      	strh	r3, [r7, #10]
 8002946:	460b      	mov	r3, r1
 8002948:	813b      	strh	r3, [r7, #8]
 800294a:	4613      	mov	r3, r2
 800294c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800294e:	f7ff fbe3 	bl	8002118 <HAL_GetTick>
 8002952:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b20      	cmp	r3, #32
 800295e:	f040 80d9 	bne.w	8002b14 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	2319      	movs	r3, #25
 8002968:	2201      	movs	r2, #1
 800296a:	496d      	ldr	r1, [pc, #436]	@ (8002b20 <HAL_I2C_Mem_Write+0x1ec>)
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 fc8b 	bl	8003288 <I2C_WaitOnFlagUntilTimeout>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002978:	2302      	movs	r3, #2
 800297a:	e0cc      	b.n	8002b16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002982:	2b01      	cmp	r3, #1
 8002984:	d101      	bne.n	800298a <HAL_I2C_Mem_Write+0x56>
 8002986:	2302      	movs	r3, #2
 8002988:	e0c5      	b.n	8002b16 <HAL_I2C_Mem_Write+0x1e2>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b01      	cmp	r3, #1
 800299e:	d007      	beq.n	80029b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2221      	movs	r2, #33	@ 0x21
 80029c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2240      	movs	r2, #64	@ 0x40
 80029cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6a3a      	ldr	r2, [r7, #32]
 80029da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80029e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4a4d      	ldr	r2, [pc, #308]	@ (8002b24 <HAL_I2C_Mem_Write+0x1f0>)
 80029f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029f2:	88f8      	ldrh	r0, [r7, #6]
 80029f4:	893a      	ldrh	r2, [r7, #8]
 80029f6:	8979      	ldrh	r1, [r7, #10]
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	9301      	str	r3, [sp, #4]
 80029fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	4603      	mov	r3, r0
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 fac2 	bl	8002f8c <I2C_RequestMemoryWrite>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d052      	beq.n	8002ab4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e081      	b.n	8002b16 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 fd50 	bl	80034bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00d      	beq.n	8002a3e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d107      	bne.n	8002a3a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e06b      	b.n	8002b16 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a42:	781a      	ldrb	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	3b01      	subs	r3, #1
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d11b      	bne.n	8002ab4 <HAL_I2C_Mem_Write+0x180>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d017      	beq.n	8002ab4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a88:	781a      	ldrb	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a94:	1c5a      	adds	r2, r3, #1
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1aa      	bne.n	8002a12 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 fd43 	bl	800354c <I2C_WaitOnBTFFlagUntilTimeout>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00d      	beq.n	8002ae8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	d107      	bne.n	8002ae4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ae2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e016      	b.n	8002b16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002af6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2220      	movs	r2, #32
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	e000      	b.n	8002b16 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002b14:	2302      	movs	r3, #2
  }
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3718      	adds	r7, #24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	00100002 	.word	0x00100002
 8002b24:	ffff0000 	.word	0xffff0000

08002b28 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08c      	sub	sp, #48	@ 0x30
 8002b2c:	af02      	add	r7, sp, #8
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	4608      	mov	r0, r1
 8002b32:	4611      	mov	r1, r2
 8002b34:	461a      	mov	r2, r3
 8002b36:	4603      	mov	r3, r0
 8002b38:	817b      	strh	r3, [r7, #10]
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	813b      	strh	r3, [r7, #8]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b42:	f7ff fae9 	bl	8002118 <HAL_GetTick>
 8002b46:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b20      	cmp	r3, #32
 8002b52:	f040 8214 	bne.w	8002f7e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	2319      	movs	r3, #25
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	497b      	ldr	r1, [pc, #492]	@ (8002d4c <HAL_I2C_Mem_Read+0x224>)
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 fb91 	bl	8003288 <I2C_WaitOnFlagUntilTimeout>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	e207      	b.n	8002f80 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d101      	bne.n	8002b7e <HAL_I2C_Mem_Read+0x56>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e200      	b.n	8002f80 <HAL_I2C_Mem_Read+0x458>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d007      	beq.n	8002ba4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0201 	orr.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bb2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2222      	movs	r2, #34	@ 0x22
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2240      	movs	r2, #64	@ 0x40
 8002bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002bd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	4a5b      	ldr	r2, [pc, #364]	@ (8002d50 <HAL_I2C_Mem_Read+0x228>)
 8002be4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002be6:	88f8      	ldrh	r0, [r7, #6]
 8002be8:	893a      	ldrh	r2, [r7, #8]
 8002bea:	8979      	ldrh	r1, [r7, #10]
 8002bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bee:	9301      	str	r3, [sp, #4]
 8002bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 fa5e 	bl	80030b8 <I2C_RequestMemoryRead>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e1bc      	b.n	8002f80 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d113      	bne.n	8002c36 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c0e:	2300      	movs	r3, #0
 8002c10:	623b      	str	r3, [r7, #32]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	623b      	str	r3, [r7, #32]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	623b      	str	r3, [r7, #32]
 8002c22:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	e190      	b.n	8002f58 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d11b      	bne.n	8002c76 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61fb      	str	r3, [r7, #28]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	61fb      	str	r3, [r7, #28]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	61fb      	str	r3, [r7, #28]
 8002c62:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	e170      	b.n	8002f58 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d11b      	bne.n	8002cb6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c8c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61bb      	str	r3, [r7, #24]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	61bb      	str	r3, [r7, #24]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	61bb      	str	r3, [r7, #24]
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	e150      	b.n	8002f58 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	617b      	str	r3, [r7, #20]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	617b      	str	r3, [r7, #20]
 8002cca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ccc:	e144      	b.n	8002f58 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd2:	2b03      	cmp	r3, #3
 8002cd4:	f200 80f1 	bhi.w	8002eba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d123      	bne.n	8002d28 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ce0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ce2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 fc79 	bl	80035dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e145      	b.n	8002f80 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691a      	ldr	r2, [r3, #16]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d26:	e117      	b.n	8002f58 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d14e      	bne.n	8002dce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d36:	2200      	movs	r2, #0
 8002d38:	4906      	ldr	r1, [pc, #24]	@ (8002d54 <HAL_I2C_Mem_Read+0x22c>)
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 faa4 	bl	8003288 <I2C_WaitOnFlagUntilTimeout>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d008      	beq.n	8002d58 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e11a      	b.n	8002f80 <HAL_I2C_Mem_Read+0x458>
 8002d4a:	bf00      	nop
 8002d4c:	00100002 	.word	0x00100002
 8002d50:	ffff0000 	.word	0xffff0000
 8002d54:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691a      	ldr	r2, [r3, #16]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7a:	1c5a      	adds	r2, r3, #1
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	3b01      	subs	r3, #1
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	691a      	ldr	r2, [r3, #16]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002dcc:	e0c4      	b.n	8002f58 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	496c      	ldr	r1, [pc, #432]	@ (8002f88 <HAL_I2C_Mem_Read+0x460>)
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 fa55 	bl	8003288 <I2C_WaitOnFlagUntilTimeout>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e0cb      	b.n	8002f80 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002df6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	691a      	ldr	r2, [r3, #16]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e14:	3b01      	subs	r3, #1
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e30:	2200      	movs	r2, #0
 8002e32:	4955      	ldr	r1, [pc, #340]	@ (8002f88 <HAL_I2C_Mem_Read+0x460>)
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 fa27 	bl	8003288 <I2C_WaitOnFlagUntilTimeout>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e09d      	b.n	8002f80 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691a      	ldr	r2, [r3, #16]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e66:	1c5a      	adds	r2, r3, #1
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	691a      	ldr	r2, [r3, #16]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e98:	1c5a      	adds	r2, r3, #1
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002eb8:	e04e      	b.n	8002f58 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ebc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 fb8c 	bl	80035dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e058      	b.n	8002f80 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	691a      	ldr	r2, [r3, #16]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee0:	1c5a      	adds	r2, r3, #1
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eea:	3b01      	subs	r3, #1
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	f003 0304 	and.w	r3, r3, #4
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d124      	bne.n	8002f58 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f12:	2b03      	cmp	r3, #3
 8002f14:	d107      	bne.n	8002f26 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f24:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	691a      	ldr	r2, [r3, #16]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f38:	1c5a      	adds	r2, r3, #1
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	3b01      	subs	r3, #1
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f47f aeb6 	bne.w	8002cce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2220      	movs	r2, #32
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	e000      	b.n	8002f80 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002f7e:	2302      	movs	r3, #2
  }
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3728      	adds	r7, #40	@ 0x28
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	00010004 	.word	0x00010004

08002f8c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b088      	sub	sp, #32
 8002f90:	af02      	add	r7, sp, #8
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	4608      	mov	r0, r1
 8002f96:	4611      	mov	r1, r2
 8002f98:	461a      	mov	r2, r3
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	817b      	strh	r3, [r7, #10]
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	813b      	strh	r3, [r7, #8]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 f960 	bl	8003288 <I2C_WaitOnFlagUntilTimeout>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00d      	beq.n	8002fea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fdc:	d103      	bne.n	8002fe6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fe4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e05f      	b.n	80030aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fea:	897b      	ldrh	r3, [r7, #10]
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	461a      	mov	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ff8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffc:	6a3a      	ldr	r2, [r7, #32]
 8002ffe:	492d      	ldr	r1, [pc, #180]	@ (80030b4 <I2C_RequestMemoryWrite+0x128>)
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 f9bb 	bl	800337c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e04c      	b.n	80030aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	617b      	str	r3, [r7, #20]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	617b      	str	r3, [r7, #20]
 8003024:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003028:	6a39      	ldr	r1, [r7, #32]
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 fa46 	bl	80034bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00d      	beq.n	8003052 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303a:	2b04      	cmp	r3, #4
 800303c:	d107      	bne.n	800304e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800304c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e02b      	b.n	80030aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003052:	88fb      	ldrh	r3, [r7, #6]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d105      	bne.n	8003064 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003058:	893b      	ldrh	r3, [r7, #8]
 800305a:	b2da      	uxtb	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	611a      	str	r2, [r3, #16]
 8003062:	e021      	b.n	80030a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003064:	893b      	ldrh	r3, [r7, #8]
 8003066:	0a1b      	lsrs	r3, r3, #8
 8003068:	b29b      	uxth	r3, r3
 800306a:	b2da      	uxtb	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003074:	6a39      	ldr	r1, [r7, #32]
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 fa20 	bl	80034bc <I2C_WaitOnTXEFlagUntilTimeout>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00d      	beq.n	800309e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003086:	2b04      	cmp	r3, #4
 8003088:	d107      	bne.n	800309a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003098:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e005      	b.n	80030aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800309e:	893b      	ldrh	r3, [r7, #8]
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	00010002 	.word	0x00010002

080030b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b088      	sub	sp, #32
 80030bc:	af02      	add	r7, sp, #8
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	4608      	mov	r0, r1
 80030c2:	4611      	mov	r1, r2
 80030c4:	461a      	mov	r2, r3
 80030c6:	4603      	mov	r3, r0
 80030c8:	817b      	strh	r3, [r7, #10]
 80030ca:	460b      	mov	r3, r1
 80030cc:	813b      	strh	r3, [r7, #8]
 80030ce:	4613      	mov	r3, r2
 80030d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80030e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	6a3b      	ldr	r3, [r7, #32]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 f8c2 	bl	8003288 <I2C_WaitOnFlagUntilTimeout>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00d      	beq.n	8003126 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003114:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003118:	d103      	bne.n	8003122 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003120:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e0aa      	b.n	800327c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003126:	897b      	ldrh	r3, [r7, #10]
 8003128:	b2db      	uxtb	r3, r3
 800312a:	461a      	mov	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003134:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003138:	6a3a      	ldr	r2, [r7, #32]
 800313a:	4952      	ldr	r1, [pc, #328]	@ (8003284 <I2C_RequestMemoryRead+0x1cc>)
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f000 f91d 	bl	800337c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e097      	b.n	800327c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	617b      	str	r3, [r7, #20]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	617b      	str	r3, [r7, #20]
 8003160:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003162:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003164:	6a39      	ldr	r1, [r7, #32]
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 f9a8 	bl	80034bc <I2C_WaitOnTXEFlagUntilTimeout>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00d      	beq.n	800318e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003176:	2b04      	cmp	r3, #4
 8003178:	d107      	bne.n	800318a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003188:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e076      	b.n	800327c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800318e:	88fb      	ldrh	r3, [r7, #6]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d105      	bne.n	80031a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003194:	893b      	ldrh	r3, [r7, #8]
 8003196:	b2da      	uxtb	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	611a      	str	r2, [r3, #16]
 800319e:	e021      	b.n	80031e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80031a0:	893b      	ldrh	r3, [r7, #8]
 80031a2:	0a1b      	lsrs	r3, r3, #8
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031b0:	6a39      	ldr	r1, [r7, #32]
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 f982 	bl	80034bc <I2C_WaitOnTXEFlagUntilTimeout>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00d      	beq.n	80031da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	d107      	bne.n	80031d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e050      	b.n	800327c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031da:	893b      	ldrh	r3, [r7, #8]
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031e6:	6a39      	ldr	r1, [r7, #32]
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 f967 	bl	80034bc <I2C_WaitOnTXEFlagUntilTimeout>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00d      	beq.n	8003210 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f8:	2b04      	cmp	r3, #4
 80031fa:	d107      	bne.n	800320c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800320a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e035      	b.n	800327c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800321e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	6a3b      	ldr	r3, [r7, #32]
 8003226:	2200      	movs	r2, #0
 8003228:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 f82b 	bl	8003288 <I2C_WaitOnFlagUntilTimeout>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00d      	beq.n	8003254 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003242:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003246:	d103      	bne.n	8003250 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800324e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e013      	b.n	800327c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003254:	897b      	ldrh	r3, [r7, #10]
 8003256:	b2db      	uxtb	r3, r3
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	b2da      	uxtb	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003266:	6a3a      	ldr	r2, [r7, #32]
 8003268:	4906      	ldr	r1, [pc, #24]	@ (8003284 <I2C_RequestMemoryRead+0x1cc>)
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 f886 	bl	800337c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3718      	adds	r7, #24
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	00010002 	.word	0x00010002

08003288 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	603b      	str	r3, [r7, #0]
 8003294:	4613      	mov	r3, r2
 8003296:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003298:	e048      	b.n	800332c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a0:	d044      	beq.n	800332c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a2:	f7fe ff39 	bl	8002118 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d302      	bcc.n	80032b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d139      	bne.n	800332c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	0c1b      	lsrs	r3, r3, #16
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d10d      	bne.n	80032de <I2C_WaitOnFlagUntilTimeout+0x56>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	43da      	mvns	r2, r3
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	4013      	ands	r3, r2
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	bf0c      	ite	eq
 80032d4:	2301      	moveq	r3, #1
 80032d6:	2300      	movne	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	461a      	mov	r2, r3
 80032dc:	e00c      	b.n	80032f8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	43da      	mvns	r2, r3
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	4013      	ands	r3, r2
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	bf0c      	ite	eq
 80032f0:	2301      	moveq	r3, #1
 80032f2:	2300      	movne	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	461a      	mov	r2, r3
 80032f8:	79fb      	ldrb	r3, [r7, #7]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d116      	bne.n	800332c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003318:	f043 0220 	orr.w	r2, r3, #32
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e023      	b.n	8003374 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	0c1b      	lsrs	r3, r3, #16
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b01      	cmp	r3, #1
 8003334:	d10d      	bne.n	8003352 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	43da      	mvns	r2, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	4013      	ands	r3, r2
 8003342:	b29b      	uxth	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	bf0c      	ite	eq
 8003348:	2301      	moveq	r3, #1
 800334a:	2300      	movne	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	461a      	mov	r2, r3
 8003350:	e00c      	b.n	800336c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	43da      	mvns	r2, r3
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	4013      	ands	r3, r2
 800335e:	b29b      	uxth	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	bf0c      	ite	eq
 8003364:	2301      	moveq	r3, #1
 8003366:	2300      	movne	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	461a      	mov	r2, r3
 800336c:	79fb      	ldrb	r3, [r7, #7]
 800336e:	429a      	cmp	r2, r3
 8003370:	d093      	beq.n	800329a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
 8003388:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800338a:	e071      	b.n	8003470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003396:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800339a:	d123      	bne.n	80033e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80033b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d0:	f043 0204 	orr.w	r2, r3, #4
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e067      	b.n	80034b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ea:	d041      	beq.n	8003470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ec:	f7fe fe94 	bl	8002118 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d302      	bcc.n	8003402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d136      	bne.n	8003470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	0c1b      	lsrs	r3, r3, #16
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b01      	cmp	r3, #1
 800340a:	d10c      	bne.n	8003426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	43da      	mvns	r2, r3
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	4013      	ands	r3, r2
 8003418:	b29b      	uxth	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	bf14      	ite	ne
 800341e:	2301      	movne	r3, #1
 8003420:	2300      	moveq	r3, #0
 8003422:	b2db      	uxtb	r3, r3
 8003424:	e00b      	b.n	800343e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	43da      	mvns	r2, r3
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	4013      	ands	r3, r2
 8003432:	b29b      	uxth	r3, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	bf14      	ite	ne
 8003438:	2301      	movne	r3, #1
 800343a:	2300      	moveq	r3, #0
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d016      	beq.n	8003470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345c:	f043 0220 	orr.w	r2, r3, #32
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e021      	b.n	80034b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	0c1b      	lsrs	r3, r3, #16
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b01      	cmp	r3, #1
 8003478:	d10c      	bne.n	8003494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	43da      	mvns	r2, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	4013      	ands	r3, r2
 8003486:	b29b      	uxth	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	bf14      	ite	ne
 800348c:	2301      	movne	r3, #1
 800348e:	2300      	moveq	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	e00b      	b.n	80034ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	43da      	mvns	r2, r3
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4013      	ands	r3, r2
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	bf14      	ite	ne
 80034a6:	2301      	movne	r3, #1
 80034a8:	2300      	moveq	r3, #0
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f47f af6d 	bne.w	800338c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034c8:	e034      	b.n	8003534 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 f8e3 	bl	8003696 <I2C_IsAcknowledgeFailed>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e034      	b.n	8003544 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e0:	d028      	beq.n	8003534 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e2:	f7fe fe19 	bl	8002118 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d302      	bcc.n	80034f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d11d      	bne.n	8003534 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003502:	2b80      	cmp	r3, #128	@ 0x80
 8003504:	d016      	beq.n	8003534 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003520:	f043 0220 	orr.w	r2, r3, #32
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e007      	b.n	8003544 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800353e:	2b80      	cmp	r3, #128	@ 0x80
 8003540:	d1c3      	bne.n	80034ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003558:	e034      	b.n	80035c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 f89b 	bl	8003696 <I2C_IsAcknowledgeFailed>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e034      	b.n	80035d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003570:	d028      	beq.n	80035c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003572:	f7fe fdd1 	bl	8002118 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	429a      	cmp	r2, r3
 8003580:	d302      	bcc.n	8003588 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d11d      	bne.n	80035c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	f003 0304 	and.w	r3, r3, #4
 8003592:	2b04      	cmp	r3, #4
 8003594:	d016      	beq.n	80035c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2220      	movs	r2, #32
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b0:	f043 0220 	orr.w	r2, r3, #32
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e007      	b.n	80035d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d1c3      	bne.n	800355a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035e8:	e049      	b.n	800367e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	f003 0310 	and.w	r3, r3, #16
 80035f4:	2b10      	cmp	r3, #16
 80035f6:	d119      	bne.n	800362c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f06f 0210 	mvn.w	r2, #16
 8003600:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e030      	b.n	800368e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800362c:	f7fe fd74 	bl	8002118 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	429a      	cmp	r2, r3
 800363a:	d302      	bcc.n	8003642 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d11d      	bne.n	800367e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800364c:	2b40      	cmp	r3, #64	@ 0x40
 800364e:	d016      	beq.n	800367e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2220      	movs	r2, #32
 800365a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366a:	f043 0220 	orr.w	r2, r3, #32
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e007      	b.n	800368e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003688:	2b40      	cmp	r3, #64	@ 0x40
 800368a:	d1ae      	bne.n	80035ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036ac:	d11b      	bne.n	80036e6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036b6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d2:	f043 0204 	orr.w	r2, r3, #4
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e000      	b.n	80036e8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e267      	b.n	8003bd6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d075      	beq.n	80037fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003712:	4b88      	ldr	r3, [pc, #544]	@ (8003934 <HAL_RCC_OscConfig+0x240>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f003 030c 	and.w	r3, r3, #12
 800371a:	2b04      	cmp	r3, #4
 800371c:	d00c      	beq.n	8003738 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800371e:	4b85      	ldr	r3, [pc, #532]	@ (8003934 <HAL_RCC_OscConfig+0x240>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003726:	2b08      	cmp	r3, #8
 8003728:	d112      	bne.n	8003750 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800372a:	4b82      	ldr	r3, [pc, #520]	@ (8003934 <HAL_RCC_OscConfig+0x240>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003732:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003736:	d10b      	bne.n	8003750 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003738:	4b7e      	ldr	r3, [pc, #504]	@ (8003934 <HAL_RCC_OscConfig+0x240>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d05b      	beq.n	80037fc <HAL_RCC_OscConfig+0x108>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d157      	bne.n	80037fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e242      	b.n	8003bd6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003758:	d106      	bne.n	8003768 <HAL_RCC_OscConfig+0x74>
 800375a:	4b76      	ldr	r3, [pc, #472]	@ (8003934 <HAL_RCC_OscConfig+0x240>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a75      	ldr	r2, [pc, #468]	@ (8003934 <HAL_RCC_OscConfig+0x240>)
 8003760:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	e01d      	b.n	80037a4 <HAL_RCC_OscConfig+0xb0>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003770:	d10c      	bne.n	800378c <HAL_RCC_OscConfig+0x98>
 8003772:	4b70      	ldr	r3, [pc, #448]	@ (8003934 <HAL_RCC_OscConfig+0x240>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a6f      	ldr	r2, [pc, #444]	@ (8003934 <HAL_RCC_OscConfig+0x240>)
 8003778:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800377c:	6013      	str	r3, [r2, #0]
 800377e:	4b6d      	ldr	r3, [pc, #436]	@ (8003934 <HAL_RCC_OscConfig+0x240>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a6c      	ldr	r2, [pc, #432]	@ (8003934 <HAL_RCC_OscConfig+0x240>)
 8003784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003788:	6013      	str	r3, [r2, #0]
 800378a:	e00b      	b.n	80037a4 <HAL_RCC_OscConfig+0xb0>
 800378c:	4b69      	ldr	r3, [pc, #420]	@ (8003934 <HAL_RCC_OscConfig+0x240>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a68      	ldr	r2, [pc, #416]	@ (8003934 <HAL_RCC_OscConfig+0x240>)
 8003792:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003796:	6013      	str	r3, [r2, #0]
 8003798:	4b66      	ldr	r3, [pc, #408]	@ (8003934 <HAL_RCC_OscConfig+0x240>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a65      	ldr	r2, [pc, #404]	@ (8003934 <HAL_RCC_OscConfig+0x240>)
 800379e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d013      	beq.n	80037d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ac:	f7fe fcb4 	bl	8002118 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037b4:	f7fe fcb0 	bl	8002118 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b64      	cmp	r3, #100	@ 0x64
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e207      	b.n	8003bd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c6:	4b5b      	ldr	r3, [pc, #364]	@ (8003934 <HAL_RCC_OscConfig+0x240>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0f0      	beq.n	80037b4 <HAL_RCC_OscConfig+0xc0>
 80037d2:	e014      	b.n	80037fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d4:	f7fe fca0 	bl	8002118 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037dc:	f7fe fc9c 	bl	8002118 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b64      	cmp	r3, #100	@ 0x64
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e1f3      	b.n	8003bd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ee:	4b51      	ldr	r3, [pc, #324]	@ (8003934 <HAL_RCC_OscConfig+0x240>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f0      	bne.n	80037dc <HAL_RCC_OscConfig+0xe8>
 80037fa:	e000      	b.n	80037fe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d063      	beq.n	80038d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800380a:	4b4a      	ldr	r3, [pc, #296]	@ (8003934 <HAL_RCC_OscConfig+0x240>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 030c 	and.w	r3, r3, #12
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00b      	beq.n	800382e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003816:	4b47      	ldr	r3, [pc, #284]	@ (8003934 <HAL_RCC_OscConfig+0x240>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800381e:	2b08      	cmp	r3, #8
 8003820:	d11c      	bne.n	800385c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003822:	4b44      	ldr	r3, [pc, #272]	@ (8003934 <HAL_RCC_OscConfig+0x240>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d116      	bne.n	800385c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800382e:	4b41      	ldr	r3, [pc, #260]	@ (8003934 <HAL_RCC_OscConfig+0x240>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d005      	beq.n	8003846 <HAL_RCC_OscConfig+0x152>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d001      	beq.n	8003846 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e1c7      	b.n	8003bd6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003846:	4b3b      	ldr	r3, [pc, #236]	@ (8003934 <HAL_RCC_OscConfig+0x240>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	4937      	ldr	r1, [pc, #220]	@ (8003934 <HAL_RCC_OscConfig+0x240>)
 8003856:	4313      	orrs	r3, r2
 8003858:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800385a:	e03a      	b.n	80038d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d020      	beq.n	80038a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003864:	4b34      	ldr	r3, [pc, #208]	@ (8003938 <HAL_RCC_OscConfig+0x244>)
 8003866:	2201      	movs	r2, #1
 8003868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386a:	f7fe fc55 	bl	8002118 <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003872:	f7fe fc51 	bl	8002118 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e1a8      	b.n	8003bd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003884:	4b2b      	ldr	r3, [pc, #172]	@ (8003934 <HAL_RCC_OscConfig+0x240>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0f0      	beq.n	8003872 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003890:	4b28      	ldr	r3, [pc, #160]	@ (8003934 <HAL_RCC_OscConfig+0x240>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	4925      	ldr	r1, [pc, #148]	@ (8003934 <HAL_RCC_OscConfig+0x240>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	600b      	str	r3, [r1, #0]
 80038a4:	e015      	b.n	80038d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038a6:	4b24      	ldr	r3, [pc, #144]	@ (8003938 <HAL_RCC_OscConfig+0x244>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ac:	f7fe fc34 	bl	8002118 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038b4:	f7fe fc30 	bl	8002118 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e187      	b.n	8003bd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003934 <HAL_RCC_OscConfig+0x240>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1f0      	bne.n	80038b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d036      	beq.n	800394c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d016      	beq.n	8003914 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038e6:	4b15      	ldr	r3, [pc, #84]	@ (800393c <HAL_RCC_OscConfig+0x248>)
 80038e8:	2201      	movs	r2, #1
 80038ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ec:	f7fe fc14 	bl	8002118 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038f4:	f7fe fc10 	bl	8002118 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e167      	b.n	8003bd6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003906:	4b0b      	ldr	r3, [pc, #44]	@ (8003934 <HAL_RCC_OscConfig+0x240>)
 8003908:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0f0      	beq.n	80038f4 <HAL_RCC_OscConfig+0x200>
 8003912:	e01b      	b.n	800394c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003914:	4b09      	ldr	r3, [pc, #36]	@ (800393c <HAL_RCC_OscConfig+0x248>)
 8003916:	2200      	movs	r2, #0
 8003918:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800391a:	f7fe fbfd 	bl	8002118 <HAL_GetTick>
 800391e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003920:	e00e      	b.n	8003940 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003922:	f7fe fbf9 	bl	8002118 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d907      	bls.n	8003940 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e150      	b.n	8003bd6 <HAL_RCC_OscConfig+0x4e2>
 8003934:	40023800 	.word	0x40023800
 8003938:	42470000 	.word	0x42470000
 800393c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003940:	4b88      	ldr	r3, [pc, #544]	@ (8003b64 <HAL_RCC_OscConfig+0x470>)
 8003942:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1ea      	bne.n	8003922 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 8097 	beq.w	8003a88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800395a:	2300      	movs	r3, #0
 800395c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800395e:	4b81      	ldr	r3, [pc, #516]	@ (8003b64 <HAL_RCC_OscConfig+0x470>)
 8003960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10f      	bne.n	800398a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800396a:	2300      	movs	r3, #0
 800396c:	60bb      	str	r3, [r7, #8]
 800396e:	4b7d      	ldr	r3, [pc, #500]	@ (8003b64 <HAL_RCC_OscConfig+0x470>)
 8003970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003972:	4a7c      	ldr	r2, [pc, #496]	@ (8003b64 <HAL_RCC_OscConfig+0x470>)
 8003974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003978:	6413      	str	r3, [r2, #64]	@ 0x40
 800397a:	4b7a      	ldr	r3, [pc, #488]	@ (8003b64 <HAL_RCC_OscConfig+0x470>)
 800397c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003982:	60bb      	str	r3, [r7, #8]
 8003984:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003986:	2301      	movs	r3, #1
 8003988:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800398a:	4b77      	ldr	r3, [pc, #476]	@ (8003b68 <HAL_RCC_OscConfig+0x474>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003992:	2b00      	cmp	r3, #0
 8003994:	d118      	bne.n	80039c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003996:	4b74      	ldr	r3, [pc, #464]	@ (8003b68 <HAL_RCC_OscConfig+0x474>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a73      	ldr	r2, [pc, #460]	@ (8003b68 <HAL_RCC_OscConfig+0x474>)
 800399c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039a2:	f7fe fbb9 	bl	8002118 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039aa:	f7fe fbb5 	bl	8002118 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e10c      	b.n	8003bd6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039bc:	4b6a      	ldr	r3, [pc, #424]	@ (8003b68 <HAL_RCC_OscConfig+0x474>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0f0      	beq.n	80039aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d106      	bne.n	80039de <HAL_RCC_OscConfig+0x2ea>
 80039d0:	4b64      	ldr	r3, [pc, #400]	@ (8003b64 <HAL_RCC_OscConfig+0x470>)
 80039d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d4:	4a63      	ldr	r2, [pc, #396]	@ (8003b64 <HAL_RCC_OscConfig+0x470>)
 80039d6:	f043 0301 	orr.w	r3, r3, #1
 80039da:	6713      	str	r3, [r2, #112]	@ 0x70
 80039dc:	e01c      	b.n	8003a18 <HAL_RCC_OscConfig+0x324>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	2b05      	cmp	r3, #5
 80039e4:	d10c      	bne.n	8003a00 <HAL_RCC_OscConfig+0x30c>
 80039e6:	4b5f      	ldr	r3, [pc, #380]	@ (8003b64 <HAL_RCC_OscConfig+0x470>)
 80039e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ea:	4a5e      	ldr	r2, [pc, #376]	@ (8003b64 <HAL_RCC_OscConfig+0x470>)
 80039ec:	f043 0304 	orr.w	r3, r3, #4
 80039f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80039f2:	4b5c      	ldr	r3, [pc, #368]	@ (8003b64 <HAL_RCC_OscConfig+0x470>)
 80039f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039f6:	4a5b      	ldr	r2, [pc, #364]	@ (8003b64 <HAL_RCC_OscConfig+0x470>)
 80039f8:	f043 0301 	orr.w	r3, r3, #1
 80039fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80039fe:	e00b      	b.n	8003a18 <HAL_RCC_OscConfig+0x324>
 8003a00:	4b58      	ldr	r3, [pc, #352]	@ (8003b64 <HAL_RCC_OscConfig+0x470>)
 8003a02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a04:	4a57      	ldr	r2, [pc, #348]	@ (8003b64 <HAL_RCC_OscConfig+0x470>)
 8003a06:	f023 0301 	bic.w	r3, r3, #1
 8003a0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a0c:	4b55      	ldr	r3, [pc, #340]	@ (8003b64 <HAL_RCC_OscConfig+0x470>)
 8003a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a10:	4a54      	ldr	r2, [pc, #336]	@ (8003b64 <HAL_RCC_OscConfig+0x470>)
 8003a12:	f023 0304 	bic.w	r3, r3, #4
 8003a16:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d015      	beq.n	8003a4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a20:	f7fe fb7a 	bl	8002118 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a26:	e00a      	b.n	8003a3e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a28:	f7fe fb76 	bl	8002118 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e0cb      	b.n	8003bd6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a3e:	4b49      	ldr	r3, [pc, #292]	@ (8003b64 <HAL_RCC_OscConfig+0x470>)
 8003a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0ee      	beq.n	8003a28 <HAL_RCC_OscConfig+0x334>
 8003a4a:	e014      	b.n	8003a76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a4c:	f7fe fb64 	bl	8002118 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a52:	e00a      	b.n	8003a6a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a54:	f7fe fb60 	bl	8002118 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e0b5      	b.n	8003bd6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a6a:	4b3e      	ldr	r3, [pc, #248]	@ (8003b64 <HAL_RCC_OscConfig+0x470>)
 8003a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1ee      	bne.n	8003a54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a76:	7dfb      	ldrb	r3, [r7, #23]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d105      	bne.n	8003a88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a7c:	4b39      	ldr	r3, [pc, #228]	@ (8003b64 <HAL_RCC_OscConfig+0x470>)
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a80:	4a38      	ldr	r2, [pc, #224]	@ (8003b64 <HAL_RCC_OscConfig+0x470>)
 8003a82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a86:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 80a1 	beq.w	8003bd4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a92:	4b34      	ldr	r3, [pc, #208]	@ (8003b64 <HAL_RCC_OscConfig+0x470>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 030c 	and.w	r3, r3, #12
 8003a9a:	2b08      	cmp	r3, #8
 8003a9c:	d05c      	beq.n	8003b58 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d141      	bne.n	8003b2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aa6:	4b31      	ldr	r3, [pc, #196]	@ (8003b6c <HAL_RCC_OscConfig+0x478>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aac:	f7fe fb34 	bl	8002118 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ab4:	f7fe fb30 	bl	8002118 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e087      	b.n	8003bd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ac6:	4b27      	ldr	r3, [pc, #156]	@ (8003b64 <HAL_RCC_OscConfig+0x470>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1f0      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	69da      	ldr	r2, [r3, #28]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae0:	019b      	lsls	r3, r3, #6
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae8:	085b      	lsrs	r3, r3, #1
 8003aea:	3b01      	subs	r3, #1
 8003aec:	041b      	lsls	r3, r3, #16
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af4:	061b      	lsls	r3, r3, #24
 8003af6:	491b      	ldr	r1, [pc, #108]	@ (8003b64 <HAL_RCC_OscConfig+0x470>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003afc:	4b1b      	ldr	r3, [pc, #108]	@ (8003b6c <HAL_RCC_OscConfig+0x478>)
 8003afe:	2201      	movs	r2, #1
 8003b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b02:	f7fe fb09 	bl	8002118 <HAL_GetTick>
 8003b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b0a:	f7fe fb05 	bl	8002118 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e05c      	b.n	8003bd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b1c:	4b11      	ldr	r3, [pc, #68]	@ (8003b64 <HAL_RCC_OscConfig+0x470>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0f0      	beq.n	8003b0a <HAL_RCC_OscConfig+0x416>
 8003b28:	e054      	b.n	8003bd4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b2a:	4b10      	ldr	r3, [pc, #64]	@ (8003b6c <HAL_RCC_OscConfig+0x478>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b30:	f7fe faf2 	bl	8002118 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b38:	f7fe faee 	bl	8002118 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e045      	b.n	8003bd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b4a:	4b06      	ldr	r3, [pc, #24]	@ (8003b64 <HAL_RCC_OscConfig+0x470>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1f0      	bne.n	8003b38 <HAL_RCC_OscConfig+0x444>
 8003b56:	e03d      	b.n	8003bd4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d107      	bne.n	8003b70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e038      	b.n	8003bd6 <HAL_RCC_OscConfig+0x4e2>
 8003b64:	40023800 	.word	0x40023800
 8003b68:	40007000 	.word	0x40007000
 8003b6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b70:	4b1b      	ldr	r3, [pc, #108]	@ (8003be0 <HAL_RCC_OscConfig+0x4ec>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d028      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d121      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d11a      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ba6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d111      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb6:	085b      	lsrs	r3, r3, #1
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d107      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d001      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e000      	b.n	8003bd6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3718      	adds	r7, #24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40023800 	.word	0x40023800

08003be4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d101      	bne.n	8003bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e0cc      	b.n	8003d92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bf8:	4b68      	ldr	r3, [pc, #416]	@ (8003d9c <HAL_RCC_ClockConfig+0x1b8>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d90c      	bls.n	8003c20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c06:	4b65      	ldr	r3, [pc, #404]	@ (8003d9c <HAL_RCC_ClockConfig+0x1b8>)
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	b2d2      	uxtb	r2, r2
 8003c0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c0e:	4b63      	ldr	r3, [pc, #396]	@ (8003d9c <HAL_RCC_ClockConfig+0x1b8>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d001      	beq.n	8003c20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e0b8      	b.n	8003d92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d020      	beq.n	8003c6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d005      	beq.n	8003c44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c38:	4b59      	ldr	r3, [pc, #356]	@ (8003da0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	4a58      	ldr	r2, [pc, #352]	@ (8003da0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c42:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0308 	and.w	r3, r3, #8
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d005      	beq.n	8003c5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c50:	4b53      	ldr	r3, [pc, #332]	@ (8003da0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	4a52      	ldr	r2, [pc, #328]	@ (8003da0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c56:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c5c:	4b50      	ldr	r3, [pc, #320]	@ (8003da0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	494d      	ldr	r1, [pc, #308]	@ (8003da0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d044      	beq.n	8003d04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d107      	bne.n	8003c92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c82:	4b47      	ldr	r3, [pc, #284]	@ (8003da0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d119      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e07f      	b.n	8003d92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d003      	beq.n	8003ca2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	d107      	bne.n	8003cb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ca2:	4b3f      	ldr	r3, [pc, #252]	@ (8003da0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d109      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e06f      	b.n	8003d92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb2:	4b3b      	ldr	r3, [pc, #236]	@ (8003da0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e067      	b.n	8003d92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cc2:	4b37      	ldr	r3, [pc, #220]	@ (8003da0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f023 0203 	bic.w	r2, r3, #3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	4934      	ldr	r1, [pc, #208]	@ (8003da0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cd4:	f7fe fa20 	bl	8002118 <HAL_GetTick>
 8003cd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cda:	e00a      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cdc:	f7fe fa1c 	bl	8002118 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e04f      	b.n	8003d92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cf2:	4b2b      	ldr	r3, [pc, #172]	@ (8003da0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 020c 	and.w	r2, r3, #12
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d1eb      	bne.n	8003cdc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d04:	4b25      	ldr	r3, [pc, #148]	@ (8003d9c <HAL_RCC_ClockConfig+0x1b8>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0307 	and.w	r3, r3, #7
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d20c      	bcs.n	8003d2c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d12:	4b22      	ldr	r3, [pc, #136]	@ (8003d9c <HAL_RCC_ClockConfig+0x1b8>)
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d1a:	4b20      	ldr	r3, [pc, #128]	@ (8003d9c <HAL_RCC_ClockConfig+0x1b8>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0307 	and.w	r3, r3, #7
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d001      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e032      	b.n	8003d92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0304 	and.w	r3, r3, #4
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d008      	beq.n	8003d4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d38:	4b19      	ldr	r3, [pc, #100]	@ (8003da0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	4916      	ldr	r1, [pc, #88]	@ (8003da0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0308 	and.w	r3, r3, #8
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d009      	beq.n	8003d6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d56:	4b12      	ldr	r3, [pc, #72]	@ (8003da0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	490e      	ldr	r1, [pc, #56]	@ (8003da0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d6a:	f000 f821 	bl	8003db0 <HAL_RCC_GetSysClockFreq>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	4b0b      	ldr	r3, [pc, #44]	@ (8003da0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	091b      	lsrs	r3, r3, #4
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	490a      	ldr	r1, [pc, #40]	@ (8003da4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d7c:	5ccb      	ldrb	r3, [r1, r3]
 8003d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d82:	4a09      	ldr	r2, [pc, #36]	@ (8003da8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003d86:	4b09      	ldr	r3, [pc, #36]	@ (8003dac <HAL_RCC_ClockConfig+0x1c8>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7fe f980 	bl	8002090 <HAL_InitTick>

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	40023c00 	.word	0x40023c00
 8003da0:	40023800 	.word	0x40023800
 8003da4:	0800bce0 	.word	0x0800bce0
 8003da8:	20000060 	.word	0x20000060
 8003dac:	20000064 	.word	0x20000064

08003db0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003db0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003db4:	b090      	sub	sp, #64	@ 0x40
 8003db6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003db8:	2300      	movs	r3, #0
 8003dba:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dc8:	4b59      	ldr	r3, [pc, #356]	@ (8003f30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f003 030c 	and.w	r3, r3, #12
 8003dd0:	2b08      	cmp	r3, #8
 8003dd2:	d00d      	beq.n	8003df0 <HAL_RCC_GetSysClockFreq+0x40>
 8003dd4:	2b08      	cmp	r3, #8
 8003dd6:	f200 80a1 	bhi.w	8003f1c <HAL_RCC_GetSysClockFreq+0x16c>
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d002      	beq.n	8003de4 <HAL_RCC_GetSysClockFreq+0x34>
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	d003      	beq.n	8003dea <HAL_RCC_GetSysClockFreq+0x3a>
 8003de2:	e09b      	b.n	8003f1c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003de4:	4b53      	ldr	r3, [pc, #332]	@ (8003f34 <HAL_RCC_GetSysClockFreq+0x184>)
 8003de6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003de8:	e09b      	b.n	8003f22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dea:	4b53      	ldr	r3, [pc, #332]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0x188>)
 8003dec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003dee:	e098      	b.n	8003f22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003df0:	4b4f      	ldr	r3, [pc, #316]	@ (8003f30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003df8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dfa:	4b4d      	ldr	r3, [pc, #308]	@ (8003f30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d028      	beq.n	8003e58 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e06:	4b4a      	ldr	r3, [pc, #296]	@ (8003f30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	099b      	lsrs	r3, r3, #6
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	623b      	str	r3, [r7, #32]
 8003e10:	627a      	str	r2, [r7, #36]	@ 0x24
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e18:	2100      	movs	r1, #0
 8003e1a:	4b47      	ldr	r3, [pc, #284]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e1c:	fb03 f201 	mul.w	r2, r3, r1
 8003e20:	2300      	movs	r3, #0
 8003e22:	fb00 f303 	mul.w	r3, r0, r3
 8003e26:	4413      	add	r3, r2
 8003e28:	4a43      	ldr	r2, [pc, #268]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e2a:	fba0 1202 	umull	r1, r2, r0, r2
 8003e2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e30:	460a      	mov	r2, r1
 8003e32:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003e34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e36:	4413      	add	r3, r2
 8003e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	61bb      	str	r3, [r7, #24]
 8003e40:	61fa      	str	r2, [r7, #28]
 8003e42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003e4a:	f7fc ff1d 	bl	8000c88 <__aeabi_uldivmod>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	460b      	mov	r3, r1
 8003e52:	4613      	mov	r3, r2
 8003e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e56:	e053      	b.n	8003f00 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e58:	4b35      	ldr	r3, [pc, #212]	@ (8003f30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	099b      	lsrs	r3, r3, #6
 8003e5e:	2200      	movs	r2, #0
 8003e60:	613b      	str	r3, [r7, #16]
 8003e62:	617a      	str	r2, [r7, #20]
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e6a:	f04f 0b00 	mov.w	fp, #0
 8003e6e:	4652      	mov	r2, sl
 8003e70:	465b      	mov	r3, fp
 8003e72:	f04f 0000 	mov.w	r0, #0
 8003e76:	f04f 0100 	mov.w	r1, #0
 8003e7a:	0159      	lsls	r1, r3, #5
 8003e7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e80:	0150      	lsls	r0, r2, #5
 8003e82:	4602      	mov	r2, r0
 8003e84:	460b      	mov	r3, r1
 8003e86:	ebb2 080a 	subs.w	r8, r2, sl
 8003e8a:	eb63 090b 	sbc.w	r9, r3, fp
 8003e8e:	f04f 0200 	mov.w	r2, #0
 8003e92:	f04f 0300 	mov.w	r3, #0
 8003e96:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e9a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e9e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003ea2:	ebb2 0408 	subs.w	r4, r2, r8
 8003ea6:	eb63 0509 	sbc.w	r5, r3, r9
 8003eaa:	f04f 0200 	mov.w	r2, #0
 8003eae:	f04f 0300 	mov.w	r3, #0
 8003eb2:	00eb      	lsls	r3, r5, #3
 8003eb4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003eb8:	00e2      	lsls	r2, r4, #3
 8003eba:	4614      	mov	r4, r2
 8003ebc:	461d      	mov	r5, r3
 8003ebe:	eb14 030a 	adds.w	r3, r4, sl
 8003ec2:	603b      	str	r3, [r7, #0]
 8003ec4:	eb45 030b 	adc.w	r3, r5, fp
 8003ec8:	607b      	str	r3, [r7, #4]
 8003eca:	f04f 0200 	mov.w	r2, #0
 8003ece:	f04f 0300 	mov.w	r3, #0
 8003ed2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ed6:	4629      	mov	r1, r5
 8003ed8:	028b      	lsls	r3, r1, #10
 8003eda:	4621      	mov	r1, r4
 8003edc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ee0:	4621      	mov	r1, r4
 8003ee2:	028a      	lsls	r2, r1, #10
 8003ee4:	4610      	mov	r0, r2
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eea:	2200      	movs	r2, #0
 8003eec:	60bb      	str	r3, [r7, #8]
 8003eee:	60fa      	str	r2, [r7, #12]
 8003ef0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ef4:	f7fc fec8 	bl	8000c88 <__aeabi_uldivmod>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4613      	mov	r3, r2
 8003efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003f00:	4b0b      	ldr	r3, [pc, #44]	@ (8003f30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	0c1b      	lsrs	r3, r3, #16
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003f10:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f18:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f1a:	e002      	b.n	8003f22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f1c:	4b05      	ldr	r3, [pc, #20]	@ (8003f34 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3740      	adds	r7, #64	@ 0x40
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f2e:	bf00      	nop
 8003f30:	40023800 	.word	0x40023800
 8003f34:	00f42400 	.word	0x00f42400
 8003f38:	017d7840 	.word	0x017d7840

08003f3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f40:	4b03      	ldr	r3, [pc, #12]	@ (8003f50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f42:	681b      	ldr	r3, [r3, #0]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	20000060 	.word	0x20000060

08003f54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f58:	f7ff fff0 	bl	8003f3c <HAL_RCC_GetHCLKFreq>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	4b05      	ldr	r3, [pc, #20]	@ (8003f74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	0a9b      	lsrs	r3, r3, #10
 8003f64:	f003 0307 	and.w	r3, r3, #7
 8003f68:	4903      	ldr	r1, [pc, #12]	@ (8003f78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f6a:	5ccb      	ldrb	r3, [r1, r3]
 8003f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40023800 	.word	0x40023800
 8003f78:	0800bcf0 	.word	0x0800bcf0

08003f7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f80:	f7ff ffdc 	bl	8003f3c <HAL_RCC_GetHCLKFreq>
 8003f84:	4602      	mov	r2, r0
 8003f86:	4b05      	ldr	r3, [pc, #20]	@ (8003f9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	0b5b      	lsrs	r3, r3, #13
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	4903      	ldr	r1, [pc, #12]	@ (8003fa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f92:	5ccb      	ldrb	r3, [r1, r3]
 8003f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40023800 	.word	0x40023800
 8003fa0:	0800bcf0 	.word	0x0800bcf0

08003fa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e042      	b.n	800403c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d106      	bne.n	8003fd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7fd fec4 	bl	8001d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2224      	movs	r2, #36	@ 0x24
 8003fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68da      	ldr	r2, [r3, #12]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fe6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f82b 	bl	8004044 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	691a      	ldr	r2, [r3, #16]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ffc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	695a      	ldr	r2, [r3, #20]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800400c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68da      	ldr	r2, [r3, #12]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800401c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2220      	movs	r2, #32
 8004028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004048:	b0c0      	sub	sp, #256	@ 0x100
 800404a:	af00      	add	r7, sp, #0
 800404c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800405c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004060:	68d9      	ldr	r1, [r3, #12]
 8004062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	ea40 0301 	orr.w	r3, r0, r1
 800406c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800406e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	431a      	orrs	r2, r3
 800407c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	431a      	orrs	r2, r3
 8004084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	4313      	orrs	r3, r2
 800408c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800409c:	f021 010c 	bic.w	r1, r1, #12
 80040a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80040aa:	430b      	orrs	r3, r1
 80040ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80040ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040be:	6999      	ldr	r1, [r3, #24]
 80040c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	ea40 0301 	orr.w	r3, r0, r1
 80040ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	4b8f      	ldr	r3, [pc, #572]	@ (8004310 <UART_SetConfig+0x2cc>)
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d005      	beq.n	80040e4 <UART_SetConfig+0xa0>
 80040d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	4b8d      	ldr	r3, [pc, #564]	@ (8004314 <UART_SetConfig+0x2d0>)
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d104      	bne.n	80040ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040e4:	f7ff ff4a 	bl	8003f7c <HAL_RCC_GetPCLK2Freq>
 80040e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80040ec:	e003      	b.n	80040f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040ee:	f7ff ff31 	bl	8003f54 <HAL_RCC_GetPCLK1Freq>
 80040f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004100:	f040 810c 	bne.w	800431c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004108:	2200      	movs	r2, #0
 800410a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800410e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004112:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004116:	4622      	mov	r2, r4
 8004118:	462b      	mov	r3, r5
 800411a:	1891      	adds	r1, r2, r2
 800411c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800411e:	415b      	adcs	r3, r3
 8004120:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004122:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004126:	4621      	mov	r1, r4
 8004128:	eb12 0801 	adds.w	r8, r2, r1
 800412c:	4629      	mov	r1, r5
 800412e:	eb43 0901 	adc.w	r9, r3, r1
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800413e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004142:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004146:	4690      	mov	r8, r2
 8004148:	4699      	mov	r9, r3
 800414a:	4623      	mov	r3, r4
 800414c:	eb18 0303 	adds.w	r3, r8, r3
 8004150:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004154:	462b      	mov	r3, r5
 8004156:	eb49 0303 	adc.w	r3, r9, r3
 800415a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800415e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800416a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800416e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004172:	460b      	mov	r3, r1
 8004174:	18db      	adds	r3, r3, r3
 8004176:	653b      	str	r3, [r7, #80]	@ 0x50
 8004178:	4613      	mov	r3, r2
 800417a:	eb42 0303 	adc.w	r3, r2, r3
 800417e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004180:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004184:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004188:	f7fc fd7e 	bl	8000c88 <__aeabi_uldivmod>
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	4b61      	ldr	r3, [pc, #388]	@ (8004318 <UART_SetConfig+0x2d4>)
 8004192:	fba3 2302 	umull	r2, r3, r3, r2
 8004196:	095b      	lsrs	r3, r3, #5
 8004198:	011c      	lsls	r4, r3, #4
 800419a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800419e:	2200      	movs	r2, #0
 80041a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80041a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80041ac:	4642      	mov	r2, r8
 80041ae:	464b      	mov	r3, r9
 80041b0:	1891      	adds	r1, r2, r2
 80041b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80041b4:	415b      	adcs	r3, r3
 80041b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80041bc:	4641      	mov	r1, r8
 80041be:	eb12 0a01 	adds.w	sl, r2, r1
 80041c2:	4649      	mov	r1, r9
 80041c4:	eb43 0b01 	adc.w	fp, r3, r1
 80041c8:	f04f 0200 	mov.w	r2, #0
 80041cc:	f04f 0300 	mov.w	r3, #0
 80041d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041dc:	4692      	mov	sl, r2
 80041de:	469b      	mov	fp, r3
 80041e0:	4643      	mov	r3, r8
 80041e2:	eb1a 0303 	adds.w	r3, sl, r3
 80041e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041ea:	464b      	mov	r3, r9
 80041ec:	eb4b 0303 	adc.w	r3, fp, r3
 80041f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80041f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004200:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004204:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004208:	460b      	mov	r3, r1
 800420a:	18db      	adds	r3, r3, r3
 800420c:	643b      	str	r3, [r7, #64]	@ 0x40
 800420e:	4613      	mov	r3, r2
 8004210:	eb42 0303 	adc.w	r3, r2, r3
 8004214:	647b      	str	r3, [r7, #68]	@ 0x44
 8004216:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800421a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800421e:	f7fc fd33 	bl	8000c88 <__aeabi_uldivmod>
 8004222:	4602      	mov	r2, r0
 8004224:	460b      	mov	r3, r1
 8004226:	4611      	mov	r1, r2
 8004228:	4b3b      	ldr	r3, [pc, #236]	@ (8004318 <UART_SetConfig+0x2d4>)
 800422a:	fba3 2301 	umull	r2, r3, r3, r1
 800422e:	095b      	lsrs	r3, r3, #5
 8004230:	2264      	movs	r2, #100	@ 0x64
 8004232:	fb02 f303 	mul.w	r3, r2, r3
 8004236:	1acb      	subs	r3, r1, r3
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800423e:	4b36      	ldr	r3, [pc, #216]	@ (8004318 <UART_SetConfig+0x2d4>)
 8004240:	fba3 2302 	umull	r2, r3, r3, r2
 8004244:	095b      	lsrs	r3, r3, #5
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800424c:	441c      	add	r4, r3
 800424e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004252:	2200      	movs	r2, #0
 8004254:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004258:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800425c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004260:	4642      	mov	r2, r8
 8004262:	464b      	mov	r3, r9
 8004264:	1891      	adds	r1, r2, r2
 8004266:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004268:	415b      	adcs	r3, r3
 800426a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800426c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004270:	4641      	mov	r1, r8
 8004272:	1851      	adds	r1, r2, r1
 8004274:	6339      	str	r1, [r7, #48]	@ 0x30
 8004276:	4649      	mov	r1, r9
 8004278:	414b      	adcs	r3, r1
 800427a:	637b      	str	r3, [r7, #52]	@ 0x34
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	f04f 0300 	mov.w	r3, #0
 8004284:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004288:	4659      	mov	r1, fp
 800428a:	00cb      	lsls	r3, r1, #3
 800428c:	4651      	mov	r1, sl
 800428e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004292:	4651      	mov	r1, sl
 8004294:	00ca      	lsls	r2, r1, #3
 8004296:	4610      	mov	r0, r2
 8004298:	4619      	mov	r1, r3
 800429a:	4603      	mov	r3, r0
 800429c:	4642      	mov	r2, r8
 800429e:	189b      	adds	r3, r3, r2
 80042a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042a4:	464b      	mov	r3, r9
 80042a6:	460a      	mov	r2, r1
 80042a8:	eb42 0303 	adc.w	r3, r2, r3
 80042ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80042bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80042c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80042c4:	460b      	mov	r3, r1
 80042c6:	18db      	adds	r3, r3, r3
 80042c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042ca:	4613      	mov	r3, r2
 80042cc:	eb42 0303 	adc.w	r3, r2, r3
 80042d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80042da:	f7fc fcd5 	bl	8000c88 <__aeabi_uldivmod>
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
 80042e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004318 <UART_SetConfig+0x2d4>)
 80042e4:	fba3 1302 	umull	r1, r3, r3, r2
 80042e8:	095b      	lsrs	r3, r3, #5
 80042ea:	2164      	movs	r1, #100	@ 0x64
 80042ec:	fb01 f303 	mul.w	r3, r1, r3
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	3332      	adds	r3, #50	@ 0x32
 80042f6:	4a08      	ldr	r2, [pc, #32]	@ (8004318 <UART_SetConfig+0x2d4>)
 80042f8:	fba2 2303 	umull	r2, r3, r2, r3
 80042fc:	095b      	lsrs	r3, r3, #5
 80042fe:	f003 0207 	and.w	r2, r3, #7
 8004302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4422      	add	r2, r4
 800430a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800430c:	e106      	b.n	800451c <UART_SetConfig+0x4d8>
 800430e:	bf00      	nop
 8004310:	40011000 	.word	0x40011000
 8004314:	40011400 	.word	0x40011400
 8004318:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800431c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004320:	2200      	movs	r2, #0
 8004322:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004326:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800432a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800432e:	4642      	mov	r2, r8
 8004330:	464b      	mov	r3, r9
 8004332:	1891      	adds	r1, r2, r2
 8004334:	6239      	str	r1, [r7, #32]
 8004336:	415b      	adcs	r3, r3
 8004338:	627b      	str	r3, [r7, #36]	@ 0x24
 800433a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800433e:	4641      	mov	r1, r8
 8004340:	1854      	adds	r4, r2, r1
 8004342:	4649      	mov	r1, r9
 8004344:	eb43 0501 	adc.w	r5, r3, r1
 8004348:	f04f 0200 	mov.w	r2, #0
 800434c:	f04f 0300 	mov.w	r3, #0
 8004350:	00eb      	lsls	r3, r5, #3
 8004352:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004356:	00e2      	lsls	r2, r4, #3
 8004358:	4614      	mov	r4, r2
 800435a:	461d      	mov	r5, r3
 800435c:	4643      	mov	r3, r8
 800435e:	18e3      	adds	r3, r4, r3
 8004360:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004364:	464b      	mov	r3, r9
 8004366:	eb45 0303 	adc.w	r3, r5, r3
 800436a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800436e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800437a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	f04f 0300 	mov.w	r3, #0
 8004386:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800438a:	4629      	mov	r1, r5
 800438c:	008b      	lsls	r3, r1, #2
 800438e:	4621      	mov	r1, r4
 8004390:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004394:	4621      	mov	r1, r4
 8004396:	008a      	lsls	r2, r1, #2
 8004398:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800439c:	f7fc fc74 	bl	8000c88 <__aeabi_uldivmod>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	4b60      	ldr	r3, [pc, #384]	@ (8004528 <UART_SetConfig+0x4e4>)
 80043a6:	fba3 2302 	umull	r2, r3, r3, r2
 80043aa:	095b      	lsrs	r3, r3, #5
 80043ac:	011c      	lsls	r4, r3, #4
 80043ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043b2:	2200      	movs	r2, #0
 80043b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80043bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80043c0:	4642      	mov	r2, r8
 80043c2:	464b      	mov	r3, r9
 80043c4:	1891      	adds	r1, r2, r2
 80043c6:	61b9      	str	r1, [r7, #24]
 80043c8:	415b      	adcs	r3, r3
 80043ca:	61fb      	str	r3, [r7, #28]
 80043cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043d0:	4641      	mov	r1, r8
 80043d2:	1851      	adds	r1, r2, r1
 80043d4:	6139      	str	r1, [r7, #16]
 80043d6:	4649      	mov	r1, r9
 80043d8:	414b      	adcs	r3, r1
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	f04f 0200 	mov.w	r2, #0
 80043e0:	f04f 0300 	mov.w	r3, #0
 80043e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043e8:	4659      	mov	r1, fp
 80043ea:	00cb      	lsls	r3, r1, #3
 80043ec:	4651      	mov	r1, sl
 80043ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043f2:	4651      	mov	r1, sl
 80043f4:	00ca      	lsls	r2, r1, #3
 80043f6:	4610      	mov	r0, r2
 80043f8:	4619      	mov	r1, r3
 80043fa:	4603      	mov	r3, r0
 80043fc:	4642      	mov	r2, r8
 80043fe:	189b      	adds	r3, r3, r2
 8004400:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004404:	464b      	mov	r3, r9
 8004406:	460a      	mov	r2, r1
 8004408:	eb42 0303 	adc.w	r3, r2, r3
 800440c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	67bb      	str	r3, [r7, #120]	@ 0x78
 800441a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004428:	4649      	mov	r1, r9
 800442a:	008b      	lsls	r3, r1, #2
 800442c:	4641      	mov	r1, r8
 800442e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004432:	4641      	mov	r1, r8
 8004434:	008a      	lsls	r2, r1, #2
 8004436:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800443a:	f7fc fc25 	bl	8000c88 <__aeabi_uldivmod>
 800443e:	4602      	mov	r2, r0
 8004440:	460b      	mov	r3, r1
 8004442:	4611      	mov	r1, r2
 8004444:	4b38      	ldr	r3, [pc, #224]	@ (8004528 <UART_SetConfig+0x4e4>)
 8004446:	fba3 2301 	umull	r2, r3, r3, r1
 800444a:	095b      	lsrs	r3, r3, #5
 800444c:	2264      	movs	r2, #100	@ 0x64
 800444e:	fb02 f303 	mul.w	r3, r2, r3
 8004452:	1acb      	subs	r3, r1, r3
 8004454:	011b      	lsls	r3, r3, #4
 8004456:	3332      	adds	r3, #50	@ 0x32
 8004458:	4a33      	ldr	r2, [pc, #204]	@ (8004528 <UART_SetConfig+0x4e4>)
 800445a:	fba2 2303 	umull	r2, r3, r2, r3
 800445e:	095b      	lsrs	r3, r3, #5
 8004460:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004464:	441c      	add	r4, r3
 8004466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800446a:	2200      	movs	r2, #0
 800446c:	673b      	str	r3, [r7, #112]	@ 0x70
 800446e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004470:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004474:	4642      	mov	r2, r8
 8004476:	464b      	mov	r3, r9
 8004478:	1891      	adds	r1, r2, r2
 800447a:	60b9      	str	r1, [r7, #8]
 800447c:	415b      	adcs	r3, r3
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004484:	4641      	mov	r1, r8
 8004486:	1851      	adds	r1, r2, r1
 8004488:	6039      	str	r1, [r7, #0]
 800448a:	4649      	mov	r1, r9
 800448c:	414b      	adcs	r3, r1
 800448e:	607b      	str	r3, [r7, #4]
 8004490:	f04f 0200 	mov.w	r2, #0
 8004494:	f04f 0300 	mov.w	r3, #0
 8004498:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800449c:	4659      	mov	r1, fp
 800449e:	00cb      	lsls	r3, r1, #3
 80044a0:	4651      	mov	r1, sl
 80044a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044a6:	4651      	mov	r1, sl
 80044a8:	00ca      	lsls	r2, r1, #3
 80044aa:	4610      	mov	r0, r2
 80044ac:	4619      	mov	r1, r3
 80044ae:	4603      	mov	r3, r0
 80044b0:	4642      	mov	r2, r8
 80044b2:	189b      	adds	r3, r3, r2
 80044b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044b6:	464b      	mov	r3, r9
 80044b8:	460a      	mov	r2, r1
 80044ba:	eb42 0303 	adc.w	r3, r2, r3
 80044be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80044ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80044cc:	f04f 0200 	mov.w	r2, #0
 80044d0:	f04f 0300 	mov.w	r3, #0
 80044d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80044d8:	4649      	mov	r1, r9
 80044da:	008b      	lsls	r3, r1, #2
 80044dc:	4641      	mov	r1, r8
 80044de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044e2:	4641      	mov	r1, r8
 80044e4:	008a      	lsls	r2, r1, #2
 80044e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80044ea:	f7fc fbcd 	bl	8000c88 <__aeabi_uldivmod>
 80044ee:	4602      	mov	r2, r0
 80044f0:	460b      	mov	r3, r1
 80044f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004528 <UART_SetConfig+0x4e4>)
 80044f4:	fba3 1302 	umull	r1, r3, r3, r2
 80044f8:	095b      	lsrs	r3, r3, #5
 80044fa:	2164      	movs	r1, #100	@ 0x64
 80044fc:	fb01 f303 	mul.w	r3, r1, r3
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	011b      	lsls	r3, r3, #4
 8004504:	3332      	adds	r3, #50	@ 0x32
 8004506:	4a08      	ldr	r2, [pc, #32]	@ (8004528 <UART_SetConfig+0x4e4>)
 8004508:	fba2 2303 	umull	r2, r3, r2, r3
 800450c:	095b      	lsrs	r3, r3, #5
 800450e:	f003 020f 	and.w	r2, r3, #15
 8004512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4422      	add	r2, r4
 800451a:	609a      	str	r2, [r3, #8]
}
 800451c:	bf00      	nop
 800451e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004522:	46bd      	mov	sp, r7
 8004524:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004528:	51eb851f 	.word	0x51eb851f

0800452c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8004530:	bf00      	nop
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
	...

0800453c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af04      	add	r7, sp, #16
 8004542:	4603      	mov	r3, r0
 8004544:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004546:	f04f 33ff 	mov.w	r3, #4294967295
 800454a:	9302      	str	r3, [sp, #8]
 800454c:	2301      	movs	r3, #1
 800454e:	9301      	str	r3, [sp, #4]
 8004550:	1dfb      	adds	r3, r7, #7
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	2301      	movs	r3, #1
 8004556:	2200      	movs	r2, #0
 8004558:	2178      	movs	r1, #120	@ 0x78
 800455a:	4803      	ldr	r0, [pc, #12]	@ (8004568 <ssd1306_WriteCommand+0x2c>)
 800455c:	f7fe f9ea 	bl	8002934 <HAL_I2C_Mem_Write>
}
 8004560:	bf00      	nop
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	200002a0 	.word	0x200002a0

0800456c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af04      	add	r7, sp, #16
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	b29b      	uxth	r3, r3
 800457a:	f04f 32ff 	mov.w	r2, #4294967295
 800457e:	9202      	str	r2, [sp, #8]
 8004580:	9301      	str	r3, [sp, #4]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	2301      	movs	r3, #1
 8004588:	2240      	movs	r2, #64	@ 0x40
 800458a:	2178      	movs	r1, #120	@ 0x78
 800458c:	4803      	ldr	r0, [pc, #12]	@ (800459c <ssd1306_WriteData+0x30>)
 800458e:	f7fe f9d1 	bl	8002934 <HAL_I2C_Mem_Write>
}
 8004592:	bf00      	nop
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	200002a0 	.word	0x200002a0

080045a0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80045a4:	f7ff ffc2 	bl	800452c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80045a8:	2064      	movs	r0, #100	@ 0x64
 80045aa:	f7fd fdc1 	bl	8002130 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80045ae:	2000      	movs	r0, #0
 80045b0:	f000 fad4 	bl	8004b5c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80045b4:	2020      	movs	r0, #32
 80045b6:	f7ff ffc1 	bl	800453c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80045ba:	2000      	movs	r0, #0
 80045bc:	f7ff ffbe 	bl	800453c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80045c0:	20b0      	movs	r0, #176	@ 0xb0
 80045c2:	f7ff ffbb 	bl	800453c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80045c6:	20c8      	movs	r0, #200	@ 0xc8
 80045c8:	f7ff ffb8 	bl	800453c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80045cc:	2000      	movs	r0, #0
 80045ce:	f7ff ffb5 	bl	800453c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80045d2:	2010      	movs	r0, #16
 80045d4:	f7ff ffb2 	bl	800453c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80045d8:	2040      	movs	r0, #64	@ 0x40
 80045da:	f7ff ffaf 	bl	800453c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80045de:	20ff      	movs	r0, #255	@ 0xff
 80045e0:	f000 faa8 	bl	8004b34 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80045e4:	20a1      	movs	r0, #161	@ 0xa1
 80045e6:	f7ff ffa9 	bl	800453c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80045ea:	20a6      	movs	r0, #166	@ 0xa6
 80045ec:	f7ff ffa6 	bl	800453c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80045f0:	20a8      	movs	r0, #168	@ 0xa8
 80045f2:	f7ff ffa3 	bl	800453c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80045f6:	203f      	movs	r0, #63	@ 0x3f
 80045f8:	f7ff ffa0 	bl	800453c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80045fc:	20a4      	movs	r0, #164	@ 0xa4
 80045fe:	f7ff ff9d 	bl	800453c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8004602:	20d3      	movs	r0, #211	@ 0xd3
 8004604:	f7ff ff9a 	bl	800453c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8004608:	2000      	movs	r0, #0
 800460a:	f7ff ff97 	bl	800453c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800460e:	20d5      	movs	r0, #213	@ 0xd5
 8004610:	f7ff ff94 	bl	800453c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8004614:	20f0      	movs	r0, #240	@ 0xf0
 8004616:	f7ff ff91 	bl	800453c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800461a:	20d9      	movs	r0, #217	@ 0xd9
 800461c:	f7ff ff8e 	bl	800453c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8004620:	2022      	movs	r0, #34	@ 0x22
 8004622:	f7ff ff8b 	bl	800453c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8004626:	20da      	movs	r0, #218	@ 0xda
 8004628:	f7ff ff88 	bl	800453c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800462c:	2012      	movs	r0, #18
 800462e:	f7ff ff85 	bl	800453c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8004632:	20db      	movs	r0, #219	@ 0xdb
 8004634:	f7ff ff82 	bl	800453c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8004638:	2020      	movs	r0, #32
 800463a:	f7ff ff7f 	bl	800453c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800463e:	208d      	movs	r0, #141	@ 0x8d
 8004640:	f7ff ff7c 	bl	800453c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8004644:	2014      	movs	r0, #20
 8004646:	f7ff ff79 	bl	800453c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800464a:	2001      	movs	r0, #1
 800464c:	f000 fa86 	bl	8004b5c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8004650:	2000      	movs	r0, #0
 8004652:	f000 f80f 	bl	8004674 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8004656:	f000 f825 	bl	80046a4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800465a:	4b05      	ldr	r3, [pc, #20]	@ (8004670 <ssd1306_Init+0xd0>)
 800465c:	2200      	movs	r2, #0
 800465e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8004660:	4b03      	ldr	r3, [pc, #12]	@ (8004670 <ssd1306_Init+0xd0>)
 8004662:	2200      	movs	r2, #0
 8004664:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8004666:	4b02      	ldr	r3, [pc, #8]	@ (8004670 <ssd1306_Init+0xd0>)
 8004668:	2201      	movs	r2, #1
 800466a:	711a      	strb	r2, [r3, #4]
}
 800466c:	bf00      	nop
 800466e:	bd80      	pop	{r7, pc}
 8004670:	20000744 	.word	0x20000744

08004674 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	4603      	mov	r3, r0
 800467c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800467e:	79fb      	ldrb	r3, [r7, #7]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <ssd1306_Fill+0x14>
 8004684:	2300      	movs	r3, #0
 8004686:	e000      	b.n	800468a <ssd1306_Fill+0x16>
 8004688:	23ff      	movs	r3, #255	@ 0xff
 800468a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800468e:	4619      	mov	r1, r3
 8004690:	4803      	ldr	r0, [pc, #12]	@ (80046a0 <ssd1306_Fill+0x2c>)
 8004692:	f001 fa2c 	bl	8005aee <memset>
}
 8004696:	bf00      	nop
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	20000344 	.word	0x20000344

080046a4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80046aa:	2300      	movs	r3, #0
 80046ac:	71fb      	strb	r3, [r7, #7]
 80046ae:	e016      	b.n	80046de <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80046b0:	79fb      	ldrb	r3, [r7, #7]
 80046b2:	3b50      	subs	r3, #80	@ 0x50
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff ff40 	bl	800453c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80046bc:	2000      	movs	r0, #0
 80046be:	f7ff ff3d 	bl	800453c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80046c2:	2010      	movs	r0, #16
 80046c4:	f7ff ff3a 	bl	800453c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80046c8:	79fb      	ldrb	r3, [r7, #7]
 80046ca:	01db      	lsls	r3, r3, #7
 80046cc:	4a08      	ldr	r2, [pc, #32]	@ (80046f0 <ssd1306_UpdateScreen+0x4c>)
 80046ce:	4413      	add	r3, r2
 80046d0:	2180      	movs	r1, #128	@ 0x80
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff ff4a 	bl	800456c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80046d8:	79fb      	ldrb	r3, [r7, #7]
 80046da:	3301      	adds	r3, #1
 80046dc:	71fb      	strb	r3, [r7, #7]
 80046de:	79fb      	ldrb	r3, [r7, #7]
 80046e0:	2b07      	cmp	r3, #7
 80046e2:	d9e5      	bls.n	80046b0 <ssd1306_UpdateScreen+0xc>
    }
}
 80046e4:	bf00      	nop
 80046e6:	bf00      	nop
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	20000344 	.word	0x20000344

080046f4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	4603      	mov	r3, r0
 80046fc:	71fb      	strb	r3, [r7, #7]
 80046fe:	460b      	mov	r3, r1
 8004700:	71bb      	strb	r3, [r7, #6]
 8004702:	4613      	mov	r3, r2
 8004704:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800470a:	2b00      	cmp	r3, #0
 800470c:	db3d      	blt.n	800478a <ssd1306_DrawPixel+0x96>
 800470e:	79bb      	ldrb	r3, [r7, #6]
 8004710:	2b3f      	cmp	r3, #63	@ 0x3f
 8004712:	d83a      	bhi.n	800478a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8004714:	797b      	ldrb	r3, [r7, #5]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d11a      	bne.n	8004750 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800471a:	79fa      	ldrb	r2, [r7, #7]
 800471c:	79bb      	ldrb	r3, [r7, #6]
 800471e:	08db      	lsrs	r3, r3, #3
 8004720:	b2d8      	uxtb	r0, r3
 8004722:	4603      	mov	r3, r0
 8004724:	01db      	lsls	r3, r3, #7
 8004726:	4413      	add	r3, r2
 8004728:	4a1b      	ldr	r2, [pc, #108]	@ (8004798 <ssd1306_DrawPixel+0xa4>)
 800472a:	5cd3      	ldrb	r3, [r2, r3]
 800472c:	b25a      	sxtb	r2, r3
 800472e:	79bb      	ldrb	r3, [r7, #6]
 8004730:	f003 0307 	and.w	r3, r3, #7
 8004734:	2101      	movs	r1, #1
 8004736:	fa01 f303 	lsl.w	r3, r1, r3
 800473a:	b25b      	sxtb	r3, r3
 800473c:	4313      	orrs	r3, r2
 800473e:	b259      	sxtb	r1, r3
 8004740:	79fa      	ldrb	r2, [r7, #7]
 8004742:	4603      	mov	r3, r0
 8004744:	01db      	lsls	r3, r3, #7
 8004746:	4413      	add	r3, r2
 8004748:	b2c9      	uxtb	r1, r1
 800474a:	4a13      	ldr	r2, [pc, #76]	@ (8004798 <ssd1306_DrawPixel+0xa4>)
 800474c:	54d1      	strb	r1, [r2, r3]
 800474e:	e01d      	b.n	800478c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004750:	79fa      	ldrb	r2, [r7, #7]
 8004752:	79bb      	ldrb	r3, [r7, #6]
 8004754:	08db      	lsrs	r3, r3, #3
 8004756:	b2d8      	uxtb	r0, r3
 8004758:	4603      	mov	r3, r0
 800475a:	01db      	lsls	r3, r3, #7
 800475c:	4413      	add	r3, r2
 800475e:	4a0e      	ldr	r2, [pc, #56]	@ (8004798 <ssd1306_DrawPixel+0xa4>)
 8004760:	5cd3      	ldrb	r3, [r2, r3]
 8004762:	b25a      	sxtb	r2, r3
 8004764:	79bb      	ldrb	r3, [r7, #6]
 8004766:	f003 0307 	and.w	r3, r3, #7
 800476a:	2101      	movs	r1, #1
 800476c:	fa01 f303 	lsl.w	r3, r1, r3
 8004770:	b25b      	sxtb	r3, r3
 8004772:	43db      	mvns	r3, r3
 8004774:	b25b      	sxtb	r3, r3
 8004776:	4013      	ands	r3, r2
 8004778:	b259      	sxtb	r1, r3
 800477a:	79fa      	ldrb	r2, [r7, #7]
 800477c:	4603      	mov	r3, r0
 800477e:	01db      	lsls	r3, r3, #7
 8004780:	4413      	add	r3, r2
 8004782:	b2c9      	uxtb	r1, r1
 8004784:	4a04      	ldr	r2, [pc, #16]	@ (8004798 <ssd1306_DrawPixel+0xa4>)
 8004786:	54d1      	strb	r1, [r2, r3]
 8004788:	e000      	b.n	800478c <ssd1306_DrawPixel+0x98>
        return;
 800478a:	bf00      	nop
    }
}
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	20000344 	.word	0x20000344

0800479c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800479c:	b590      	push	{r4, r7, lr}
 800479e:	b089      	sub	sp, #36	@ 0x24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	4604      	mov	r4, r0
 80047a4:	4638      	mov	r0, r7
 80047a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80047aa:	4623      	mov	r3, r4
 80047ac:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80047ae:	7bfb      	ldrb	r3, [r7, #15]
 80047b0:	2b1f      	cmp	r3, #31
 80047b2:	d902      	bls.n	80047ba <ssd1306_WriteChar+0x1e>
 80047b4:	7bfb      	ldrb	r3, [r7, #15]
 80047b6:	2b7e      	cmp	r3, #126	@ 0x7e
 80047b8:	d901      	bls.n	80047be <ssd1306_WriteChar+0x22>
        return 0;
 80047ba:	2300      	movs	r3, #0
 80047bc:	e077      	b.n	80048ae <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80047be:	4b3e      	ldr	r3, [pc, #248]	@ (80048b8 <ssd1306_WriteChar+0x11c>)
 80047c0:	881b      	ldrh	r3, [r3, #0]
 80047c2:	461a      	mov	r2, r3
 80047c4:	783b      	ldrb	r3, [r7, #0]
 80047c6:	4413      	add	r3, r2
 80047c8:	2b80      	cmp	r3, #128	@ 0x80
 80047ca:	dc06      	bgt.n	80047da <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80047cc:	4b3a      	ldr	r3, [pc, #232]	@ (80048b8 <ssd1306_WriteChar+0x11c>)
 80047ce:	885b      	ldrh	r3, [r3, #2]
 80047d0:	461a      	mov	r2, r3
 80047d2:	787b      	ldrb	r3, [r7, #1]
 80047d4:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80047d6:	2b40      	cmp	r3, #64	@ 0x40
 80047d8:	dd01      	ble.n	80047de <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 80047da:	2300      	movs	r3, #0
 80047dc:	e067      	b.n	80048ae <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80047de:	2300      	movs	r3, #0
 80047e0:	61fb      	str	r3, [r7, #28]
 80047e2:	e04e      	b.n	8004882 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	7bfb      	ldrb	r3, [r7, #15]
 80047e8:	3b20      	subs	r3, #32
 80047ea:	7879      	ldrb	r1, [r7, #1]
 80047ec:	fb01 f303 	mul.w	r3, r1, r3
 80047f0:	4619      	mov	r1, r3
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	440b      	add	r3, r1
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	4413      	add	r3, r2
 80047fa:	881b      	ldrh	r3, [r3, #0]
 80047fc:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 80047fe:	2300      	movs	r3, #0
 8004800:	61bb      	str	r3, [r7, #24]
 8004802:	e036      	b.n	8004872 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	fa02 f303 	lsl.w	r3, r2, r3
 800480c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d013      	beq.n	800483c <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8004814:	4b28      	ldr	r3, [pc, #160]	@ (80048b8 <ssd1306_WriteChar+0x11c>)
 8004816:	881b      	ldrh	r3, [r3, #0]
 8004818:	b2da      	uxtb	r2, r3
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	b2db      	uxtb	r3, r3
 800481e:	4413      	add	r3, r2
 8004820:	b2d8      	uxtb	r0, r3
 8004822:	4b25      	ldr	r3, [pc, #148]	@ (80048b8 <ssd1306_WriteChar+0x11c>)
 8004824:	885b      	ldrh	r3, [r3, #2]
 8004826:	b2da      	uxtb	r2, r3
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	b2db      	uxtb	r3, r3
 800482c:	4413      	add	r3, r2
 800482e:	b2db      	uxtb	r3, r3
 8004830:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8004834:	4619      	mov	r1, r3
 8004836:	f7ff ff5d 	bl	80046f4 <ssd1306_DrawPixel>
 800483a:	e017      	b.n	800486c <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800483c:	4b1e      	ldr	r3, [pc, #120]	@ (80048b8 <ssd1306_WriteChar+0x11c>)
 800483e:	881b      	ldrh	r3, [r3, #0]
 8004840:	b2da      	uxtb	r2, r3
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	b2db      	uxtb	r3, r3
 8004846:	4413      	add	r3, r2
 8004848:	b2d8      	uxtb	r0, r3
 800484a:	4b1b      	ldr	r3, [pc, #108]	@ (80048b8 <ssd1306_WriteChar+0x11c>)
 800484c:	885b      	ldrh	r3, [r3, #2]
 800484e:	b2da      	uxtb	r2, r3
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	b2db      	uxtb	r3, r3
 8004854:	4413      	add	r3, r2
 8004856:	b2d9      	uxtb	r1, r3
 8004858:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800485c:	2b00      	cmp	r3, #0
 800485e:	bf0c      	ite	eq
 8004860:	2301      	moveq	r3, #1
 8004862:	2300      	movne	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	461a      	mov	r2, r3
 8004868:	f7ff ff44 	bl	80046f4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	3301      	adds	r3, #1
 8004870:	61bb      	str	r3, [r7, #24]
 8004872:	783b      	ldrb	r3, [r7, #0]
 8004874:	461a      	mov	r2, r3
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	4293      	cmp	r3, r2
 800487a:	d3c3      	bcc.n	8004804 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	3301      	adds	r3, #1
 8004880:	61fb      	str	r3, [r7, #28]
 8004882:	787b      	ldrb	r3, [r7, #1]
 8004884:	461a      	mov	r2, r3
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	4293      	cmp	r3, r2
 800488a:	d3ab      	bcc.n	80047e4 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 800488c:	4b0a      	ldr	r3, [pc, #40]	@ (80048b8 <ssd1306_WriteChar+0x11c>)
 800488e:	881b      	ldrh	r3, [r3, #0]
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	2a00      	cmp	r2, #0
 8004894:	d005      	beq.n	80048a2 <ssd1306_WriteChar+0x106>
 8004896:	68b9      	ldr	r1, [r7, #8]
 8004898:	7bfa      	ldrb	r2, [r7, #15]
 800489a:	3a20      	subs	r2, #32
 800489c:	440a      	add	r2, r1
 800489e:	7812      	ldrb	r2, [r2, #0]
 80048a0:	e000      	b.n	80048a4 <ssd1306_WriteChar+0x108>
 80048a2:	783a      	ldrb	r2, [r7, #0]
 80048a4:	4413      	add	r3, r2
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	4b03      	ldr	r3, [pc, #12]	@ (80048b8 <ssd1306_WriteChar+0x11c>)
 80048aa:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80048ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3724      	adds	r7, #36	@ 0x24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd90      	pop	{r4, r7, pc}
 80048b6:	bf00      	nop
 80048b8:	20000744 	.word	0x20000744

080048bc <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af02      	add	r7, sp, #8
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	4638      	mov	r0, r7
 80048c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80048ca:	e013      	b.n	80048f4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	7818      	ldrb	r0, [r3, #0]
 80048d0:	7e3b      	ldrb	r3, [r7, #24]
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	463b      	mov	r3, r7
 80048d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048d8:	f7ff ff60 	bl	800479c <ssd1306_WriteChar>
 80048dc:	4603      	mov	r3, r0
 80048de:	461a      	mov	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d002      	beq.n	80048ee <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	e008      	b.n	8004900 <ssd1306_WriteString+0x44>
        }
        str++;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	3301      	adds	r3, #1
 80048f2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1e7      	bne.n	80048cc <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	781b      	ldrb	r3, [r3, #0]
}
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	4603      	mov	r3, r0
 8004910:	460a      	mov	r2, r1
 8004912:	71fb      	strb	r3, [r7, #7]
 8004914:	4613      	mov	r3, r2
 8004916:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8004918:	79fb      	ldrb	r3, [r7, #7]
 800491a:	b29a      	uxth	r2, r3
 800491c:	4b05      	ldr	r3, [pc, #20]	@ (8004934 <ssd1306_SetCursor+0x2c>)
 800491e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8004920:	79bb      	ldrb	r3, [r7, #6]
 8004922:	b29a      	uxth	r2, r3
 8004924:	4b03      	ldr	r3, [pc, #12]	@ (8004934 <ssd1306_SetCursor+0x2c>)
 8004926:	805a      	strh	r2, [r3, #2]
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	20000744 	.word	0x20000744

08004938 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8004938:	b590      	push	{r4, r7, lr}
 800493a:	b089      	sub	sp, #36	@ 0x24
 800493c:	af00      	add	r7, sp, #0
 800493e:	4604      	mov	r4, r0
 8004940:	4608      	mov	r0, r1
 8004942:	4611      	mov	r1, r2
 8004944:	461a      	mov	r2, r3
 8004946:	4623      	mov	r3, r4
 8004948:	71fb      	strb	r3, [r7, #7]
 800494a:	4603      	mov	r3, r0
 800494c:	71bb      	strb	r3, [r7, #6]
 800494e:	460b      	mov	r3, r1
 8004950:	717b      	strb	r3, [r7, #5]
 8004952:	4613      	mov	r3, r2
 8004954:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8004956:	797a      	ldrb	r2, [r7, #5]
 8004958:	79fb      	ldrb	r3, [r7, #7]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	bfb8      	it	lt
 8004960:	425b      	neglt	r3, r3
 8004962:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8004964:	793a      	ldrb	r2, [r7, #4]
 8004966:	79bb      	ldrb	r3, [r7, #6]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	bfb8      	it	lt
 800496e:	425b      	neglt	r3, r3
 8004970:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8004972:	79fa      	ldrb	r2, [r7, #7]
 8004974:	797b      	ldrb	r3, [r7, #5]
 8004976:	429a      	cmp	r2, r3
 8004978:	d201      	bcs.n	800497e <ssd1306_Line+0x46>
 800497a:	2301      	movs	r3, #1
 800497c:	e001      	b.n	8004982 <ssd1306_Line+0x4a>
 800497e:	f04f 33ff 	mov.w	r3, #4294967295
 8004982:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8004984:	79ba      	ldrb	r2, [r7, #6]
 8004986:	793b      	ldrb	r3, [r7, #4]
 8004988:	429a      	cmp	r2, r3
 800498a:	d201      	bcs.n	8004990 <ssd1306_Line+0x58>
 800498c:	2301      	movs	r3, #1
 800498e:	e001      	b.n	8004994 <ssd1306_Line+0x5c>
 8004990:	f04f 33ff 	mov.w	r3, #4294967295
 8004994:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 800499e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80049a2:	7939      	ldrb	r1, [r7, #4]
 80049a4:	797b      	ldrb	r3, [r7, #5]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff fea4 	bl	80046f4 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 80049ac:	e024      	b.n	80049f8 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 80049ae:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80049b2:	79b9      	ldrb	r1, [r7, #6]
 80049b4:	79fb      	ldrb	r3, [r7, #7]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7ff fe9c 	bl	80046f4 <ssd1306_DrawPixel>
        error2 = error * 2;
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	425b      	negs	r3, r3
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	dd08      	ble.n	80049de <ssd1306_Line+0xa6>
            error -= deltaY;
 80049cc:	69fa      	ldr	r2, [r7, #28]
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	79fb      	ldrb	r3, [r7, #7]
 80049da:	4413      	add	r3, r2
 80049dc:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	da08      	bge.n	80049f8 <ssd1306_Line+0xc0>
            error += deltaX;
 80049e6:	69fa      	ldr	r2, [r7, #28]
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	4413      	add	r3, r2
 80049ec:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	79bb      	ldrb	r3, [r7, #6]
 80049f4:	4413      	add	r3, r2
 80049f6:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 80049f8:	79fa      	ldrb	r2, [r7, #7]
 80049fa:	797b      	ldrb	r3, [r7, #5]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d1d6      	bne.n	80049ae <ssd1306_Line+0x76>
 8004a00:	79ba      	ldrb	r2, [r7, #6]
 8004a02:	793b      	ldrb	r3, [r7, #4]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d1d2      	bne.n	80049ae <ssd1306_Line+0x76>
        }
    }
    return;
 8004a08:	bf00      	nop
}
 8004a0a:	3724      	adds	r7, #36	@ 0x24
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd90      	pop	{r4, r7, pc}

08004a10 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8004a10:	b590      	push	{r4, r7, lr}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af02      	add	r7, sp, #8
 8004a16:	4604      	mov	r4, r0
 8004a18:	4608      	mov	r0, r1
 8004a1a:	4611      	mov	r1, r2
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	4623      	mov	r3, r4
 8004a20:	71fb      	strb	r3, [r7, #7]
 8004a22:	4603      	mov	r3, r0
 8004a24:	71bb      	strb	r3, [r7, #6]
 8004a26:	460b      	mov	r3, r1
 8004a28:	717b      	strb	r3, [r7, #5]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8004a2e:	79bc      	ldrb	r4, [r7, #6]
 8004a30:	797a      	ldrb	r2, [r7, #5]
 8004a32:	79b9      	ldrb	r1, [r7, #6]
 8004a34:	79f8      	ldrb	r0, [r7, #7]
 8004a36:	7e3b      	ldrb	r3, [r7, #24]
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	4623      	mov	r3, r4
 8004a3c:	f7ff ff7c 	bl	8004938 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8004a40:	793c      	ldrb	r4, [r7, #4]
 8004a42:	797a      	ldrb	r2, [r7, #5]
 8004a44:	79b9      	ldrb	r1, [r7, #6]
 8004a46:	7978      	ldrb	r0, [r7, #5]
 8004a48:	7e3b      	ldrb	r3, [r7, #24]
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	4623      	mov	r3, r4
 8004a4e:	f7ff ff73 	bl	8004938 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8004a52:	793c      	ldrb	r4, [r7, #4]
 8004a54:	79fa      	ldrb	r2, [r7, #7]
 8004a56:	7939      	ldrb	r1, [r7, #4]
 8004a58:	7978      	ldrb	r0, [r7, #5]
 8004a5a:	7e3b      	ldrb	r3, [r7, #24]
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	4623      	mov	r3, r4
 8004a60:	f7ff ff6a 	bl	8004938 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8004a64:	79bc      	ldrb	r4, [r7, #6]
 8004a66:	79fa      	ldrb	r2, [r7, #7]
 8004a68:	7939      	ldrb	r1, [r7, #4]
 8004a6a:	79f8      	ldrb	r0, [r7, #7]
 8004a6c:	7e3b      	ldrb	r3, [r7, #24]
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	4623      	mov	r3, r4
 8004a72:	f7ff ff61 	bl	8004938 <ssd1306_Line>

    return;
 8004a76:	bf00      	nop
}
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd90      	pop	{r4, r7, pc}

08004a7e <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b084      	sub	sp, #16
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	603a      	str	r2, [r7, #0]
 8004a86:	461a      	mov	r2, r3
 8004a88:	4603      	mov	r3, r0
 8004a8a:	71fb      	strb	r3, [r7, #7]
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	71bb      	strb	r3, [r7, #6]
 8004a90:	4613      	mov	r3, r2
 8004a92:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8004a94:	797b      	ldrb	r3, [r7, #5]
 8004a96:	3307      	adds	r3, #7
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	da00      	bge.n	8004a9e <ssd1306_DrawBitmap+0x20>
 8004a9c:	3307      	adds	r3, #7
 8004a9e:	10db      	asrs	r3, r3, #3
 8004aa0:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	db3e      	blt.n	8004b2c <ssd1306_DrawBitmap+0xae>
 8004aae:	79bb      	ldrb	r3, [r7, #6]
 8004ab0:	2b3f      	cmp	r3, #63	@ 0x3f
 8004ab2:	d83b      	bhi.n	8004b2c <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	73bb      	strb	r3, [r7, #14]
 8004ab8:	e033      	b.n	8004b22 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8004aba:	2300      	movs	r3, #0
 8004abc:	737b      	strb	r3, [r7, #13]
 8004abe:	e026      	b.n	8004b0e <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8004ac0:	7b7b      	ldrb	r3, [r7, #13]
 8004ac2:	f003 0307 	and.w	r3, r3, #7
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8004aca:	7bfb      	ldrb	r3, [r7, #15]
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	73fb      	strb	r3, [r7, #15]
 8004ad0:	e00d      	b.n	8004aee <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8004ad2:	7bbb      	ldrb	r3, [r7, #14]
 8004ad4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004ad8:	fb02 f303 	mul.w	r3, r2, r3
 8004adc:	7b7a      	ldrb	r2, [r7, #13]
 8004ade:	08d2      	lsrs	r2, r2, #3
 8004ae0:	b2d2      	uxtb	r2, r2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	4413      	add	r3, r2
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8004aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	da08      	bge.n	8004b08 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8004af6:	79fa      	ldrb	r2, [r7, #7]
 8004af8:	7b7b      	ldrb	r3, [r7, #13]
 8004afa:	4413      	add	r3, r2
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	7f3a      	ldrb	r2, [r7, #28]
 8004b00:	79b9      	ldrb	r1, [r7, #6]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7ff fdf6 	bl	80046f4 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8004b08:	7b7b      	ldrb	r3, [r7, #13]
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	737b      	strb	r3, [r7, #13]
 8004b0e:	7b7a      	ldrb	r2, [r7, #13]
 8004b10:	797b      	ldrb	r3, [r7, #5]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d3d4      	bcc.n	8004ac0 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8004b16:	7bbb      	ldrb	r3, [r7, #14]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	73bb      	strb	r3, [r7, #14]
 8004b1c:	79bb      	ldrb	r3, [r7, #6]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	71bb      	strb	r3, [r7, #6]
 8004b22:	7bba      	ldrb	r2, [r7, #14]
 8004b24:	7e3b      	ldrb	r3, [r7, #24]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d3c7      	bcc.n	8004aba <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8004b2a:	e000      	b.n	8004b2e <ssd1306_DrawBitmap+0xb0>
        return;
 8004b2c:	bf00      	nop
}
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8004b3e:	2381      	movs	r3, #129	@ 0x81
 8004b40:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8004b42:	7bfb      	ldrb	r3, [r7, #15]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff fcf9 	bl	800453c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8004b4a:	79fb      	ldrb	r3, [r7, #7]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7ff fcf5 	bl	800453c <ssd1306_WriteCommand>
}
 8004b52:	bf00      	nop
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
	...

08004b5c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	4603      	mov	r3, r0
 8004b64:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8004b66:	79fb      	ldrb	r3, [r7, #7]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d005      	beq.n	8004b78 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8004b6c:	23af      	movs	r3, #175	@ 0xaf
 8004b6e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8004b70:	4b08      	ldr	r3, [pc, #32]	@ (8004b94 <ssd1306_SetDisplayOn+0x38>)
 8004b72:	2201      	movs	r2, #1
 8004b74:	715a      	strb	r2, [r3, #5]
 8004b76:	e004      	b.n	8004b82 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8004b78:	23ae      	movs	r3, #174	@ 0xae
 8004b7a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8004b7c:	4b05      	ldr	r3, [pc, #20]	@ (8004b94 <ssd1306_SetDisplayOn+0x38>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8004b82:	7bfb      	ldrb	r3, [r7, #15]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7ff fcd9 	bl	800453c <ssd1306_WriteCommand>
}
 8004b8a:	bf00      	nop
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	20000744 	.word	0x20000744

08004b98 <__cvt>:
 8004b98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b9c:	ec57 6b10 	vmov	r6, r7, d0
 8004ba0:	2f00      	cmp	r7, #0
 8004ba2:	460c      	mov	r4, r1
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	463b      	mov	r3, r7
 8004ba8:	bfbb      	ittet	lt
 8004baa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004bae:	461f      	movlt	r7, r3
 8004bb0:	2300      	movge	r3, #0
 8004bb2:	232d      	movlt	r3, #45	@ 0x2d
 8004bb4:	700b      	strb	r3, [r1, #0]
 8004bb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004bb8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004bbc:	4691      	mov	r9, r2
 8004bbe:	f023 0820 	bic.w	r8, r3, #32
 8004bc2:	bfbc      	itt	lt
 8004bc4:	4632      	movlt	r2, r6
 8004bc6:	4616      	movlt	r6, r2
 8004bc8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004bcc:	d005      	beq.n	8004bda <__cvt+0x42>
 8004bce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004bd2:	d100      	bne.n	8004bd6 <__cvt+0x3e>
 8004bd4:	3401      	adds	r4, #1
 8004bd6:	2102      	movs	r1, #2
 8004bd8:	e000      	b.n	8004bdc <__cvt+0x44>
 8004bda:	2103      	movs	r1, #3
 8004bdc:	ab03      	add	r3, sp, #12
 8004bde:	9301      	str	r3, [sp, #4]
 8004be0:	ab02      	add	r3, sp, #8
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	ec47 6b10 	vmov	d0, r6, r7
 8004be8:	4653      	mov	r3, sl
 8004bea:	4622      	mov	r2, r4
 8004bec:	f001 f89c 	bl	8005d28 <_dtoa_r>
 8004bf0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004bf4:	4605      	mov	r5, r0
 8004bf6:	d119      	bne.n	8004c2c <__cvt+0x94>
 8004bf8:	f019 0f01 	tst.w	r9, #1
 8004bfc:	d00e      	beq.n	8004c1c <__cvt+0x84>
 8004bfe:	eb00 0904 	add.w	r9, r0, r4
 8004c02:	2200      	movs	r2, #0
 8004c04:	2300      	movs	r3, #0
 8004c06:	4630      	mov	r0, r6
 8004c08:	4639      	mov	r1, r7
 8004c0a:	f7fb ff5d 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c0e:	b108      	cbz	r0, 8004c14 <__cvt+0x7c>
 8004c10:	f8cd 900c 	str.w	r9, [sp, #12]
 8004c14:	2230      	movs	r2, #48	@ 0x30
 8004c16:	9b03      	ldr	r3, [sp, #12]
 8004c18:	454b      	cmp	r3, r9
 8004c1a:	d31e      	bcc.n	8004c5a <__cvt+0xc2>
 8004c1c:	9b03      	ldr	r3, [sp, #12]
 8004c1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004c20:	1b5b      	subs	r3, r3, r5
 8004c22:	4628      	mov	r0, r5
 8004c24:	6013      	str	r3, [r2, #0]
 8004c26:	b004      	add	sp, #16
 8004c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c2c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004c30:	eb00 0904 	add.w	r9, r0, r4
 8004c34:	d1e5      	bne.n	8004c02 <__cvt+0x6a>
 8004c36:	7803      	ldrb	r3, [r0, #0]
 8004c38:	2b30      	cmp	r3, #48	@ 0x30
 8004c3a:	d10a      	bne.n	8004c52 <__cvt+0xba>
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	2300      	movs	r3, #0
 8004c40:	4630      	mov	r0, r6
 8004c42:	4639      	mov	r1, r7
 8004c44:	f7fb ff40 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c48:	b918      	cbnz	r0, 8004c52 <__cvt+0xba>
 8004c4a:	f1c4 0401 	rsb	r4, r4, #1
 8004c4e:	f8ca 4000 	str.w	r4, [sl]
 8004c52:	f8da 3000 	ldr.w	r3, [sl]
 8004c56:	4499      	add	r9, r3
 8004c58:	e7d3      	b.n	8004c02 <__cvt+0x6a>
 8004c5a:	1c59      	adds	r1, r3, #1
 8004c5c:	9103      	str	r1, [sp, #12]
 8004c5e:	701a      	strb	r2, [r3, #0]
 8004c60:	e7d9      	b.n	8004c16 <__cvt+0x7e>

08004c62 <__exponent>:
 8004c62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c64:	2900      	cmp	r1, #0
 8004c66:	bfba      	itte	lt
 8004c68:	4249      	neglt	r1, r1
 8004c6a:	232d      	movlt	r3, #45	@ 0x2d
 8004c6c:	232b      	movge	r3, #43	@ 0x2b
 8004c6e:	2909      	cmp	r1, #9
 8004c70:	7002      	strb	r2, [r0, #0]
 8004c72:	7043      	strb	r3, [r0, #1]
 8004c74:	dd29      	ble.n	8004cca <__exponent+0x68>
 8004c76:	f10d 0307 	add.w	r3, sp, #7
 8004c7a:	461d      	mov	r5, r3
 8004c7c:	270a      	movs	r7, #10
 8004c7e:	461a      	mov	r2, r3
 8004c80:	fbb1 f6f7 	udiv	r6, r1, r7
 8004c84:	fb07 1416 	mls	r4, r7, r6, r1
 8004c88:	3430      	adds	r4, #48	@ 0x30
 8004c8a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004c8e:	460c      	mov	r4, r1
 8004c90:	2c63      	cmp	r4, #99	@ 0x63
 8004c92:	f103 33ff 	add.w	r3, r3, #4294967295
 8004c96:	4631      	mov	r1, r6
 8004c98:	dcf1      	bgt.n	8004c7e <__exponent+0x1c>
 8004c9a:	3130      	adds	r1, #48	@ 0x30
 8004c9c:	1e94      	subs	r4, r2, #2
 8004c9e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004ca2:	1c41      	adds	r1, r0, #1
 8004ca4:	4623      	mov	r3, r4
 8004ca6:	42ab      	cmp	r3, r5
 8004ca8:	d30a      	bcc.n	8004cc0 <__exponent+0x5e>
 8004caa:	f10d 0309 	add.w	r3, sp, #9
 8004cae:	1a9b      	subs	r3, r3, r2
 8004cb0:	42ac      	cmp	r4, r5
 8004cb2:	bf88      	it	hi
 8004cb4:	2300      	movhi	r3, #0
 8004cb6:	3302      	adds	r3, #2
 8004cb8:	4403      	add	r3, r0
 8004cba:	1a18      	subs	r0, r3, r0
 8004cbc:	b003      	add	sp, #12
 8004cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cc0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004cc4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004cc8:	e7ed      	b.n	8004ca6 <__exponent+0x44>
 8004cca:	2330      	movs	r3, #48	@ 0x30
 8004ccc:	3130      	adds	r1, #48	@ 0x30
 8004cce:	7083      	strb	r3, [r0, #2]
 8004cd0:	70c1      	strb	r1, [r0, #3]
 8004cd2:	1d03      	adds	r3, r0, #4
 8004cd4:	e7f1      	b.n	8004cba <__exponent+0x58>
	...

08004cd8 <_printf_float>:
 8004cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cdc:	b08d      	sub	sp, #52	@ 0x34
 8004cde:	460c      	mov	r4, r1
 8004ce0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004ce4:	4616      	mov	r6, r2
 8004ce6:	461f      	mov	r7, r3
 8004ce8:	4605      	mov	r5, r0
 8004cea:	f000 ff09 	bl	8005b00 <_localeconv_r>
 8004cee:	6803      	ldr	r3, [r0, #0]
 8004cf0:	9304      	str	r3, [sp, #16]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7fb fabc 	bl	8000270 <strlen>
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	930a      	str	r3, [sp, #40]	@ 0x28
 8004cfc:	f8d8 3000 	ldr.w	r3, [r8]
 8004d00:	9005      	str	r0, [sp, #20]
 8004d02:	3307      	adds	r3, #7
 8004d04:	f023 0307 	bic.w	r3, r3, #7
 8004d08:	f103 0208 	add.w	r2, r3, #8
 8004d0c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004d10:	f8d4 b000 	ldr.w	fp, [r4]
 8004d14:	f8c8 2000 	str.w	r2, [r8]
 8004d18:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004d1c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004d20:	9307      	str	r3, [sp, #28]
 8004d22:	f8cd 8018 	str.w	r8, [sp, #24]
 8004d26:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004d2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d2e:	4b9c      	ldr	r3, [pc, #624]	@ (8004fa0 <_printf_float+0x2c8>)
 8004d30:	f04f 32ff 	mov.w	r2, #4294967295
 8004d34:	f7fb fefa 	bl	8000b2c <__aeabi_dcmpun>
 8004d38:	bb70      	cbnz	r0, 8004d98 <_printf_float+0xc0>
 8004d3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d3e:	4b98      	ldr	r3, [pc, #608]	@ (8004fa0 <_printf_float+0x2c8>)
 8004d40:	f04f 32ff 	mov.w	r2, #4294967295
 8004d44:	f7fb fed4 	bl	8000af0 <__aeabi_dcmple>
 8004d48:	bb30      	cbnz	r0, 8004d98 <_printf_float+0xc0>
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	4640      	mov	r0, r8
 8004d50:	4649      	mov	r1, r9
 8004d52:	f7fb fec3 	bl	8000adc <__aeabi_dcmplt>
 8004d56:	b110      	cbz	r0, 8004d5e <_printf_float+0x86>
 8004d58:	232d      	movs	r3, #45	@ 0x2d
 8004d5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d5e:	4a91      	ldr	r2, [pc, #580]	@ (8004fa4 <_printf_float+0x2cc>)
 8004d60:	4b91      	ldr	r3, [pc, #580]	@ (8004fa8 <_printf_float+0x2d0>)
 8004d62:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004d66:	bf94      	ite	ls
 8004d68:	4690      	movls	r8, r2
 8004d6a:	4698      	movhi	r8, r3
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	6123      	str	r3, [r4, #16]
 8004d70:	f02b 0304 	bic.w	r3, fp, #4
 8004d74:	6023      	str	r3, [r4, #0]
 8004d76:	f04f 0900 	mov.w	r9, #0
 8004d7a:	9700      	str	r7, [sp, #0]
 8004d7c:	4633      	mov	r3, r6
 8004d7e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004d80:	4621      	mov	r1, r4
 8004d82:	4628      	mov	r0, r5
 8004d84:	f000 f9d2 	bl	800512c <_printf_common>
 8004d88:	3001      	adds	r0, #1
 8004d8a:	f040 808d 	bne.w	8004ea8 <_printf_float+0x1d0>
 8004d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d92:	b00d      	add	sp, #52	@ 0x34
 8004d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d98:	4642      	mov	r2, r8
 8004d9a:	464b      	mov	r3, r9
 8004d9c:	4640      	mov	r0, r8
 8004d9e:	4649      	mov	r1, r9
 8004da0:	f7fb fec4 	bl	8000b2c <__aeabi_dcmpun>
 8004da4:	b140      	cbz	r0, 8004db8 <_printf_float+0xe0>
 8004da6:	464b      	mov	r3, r9
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	bfbc      	itt	lt
 8004dac:	232d      	movlt	r3, #45	@ 0x2d
 8004dae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004db2:	4a7e      	ldr	r2, [pc, #504]	@ (8004fac <_printf_float+0x2d4>)
 8004db4:	4b7e      	ldr	r3, [pc, #504]	@ (8004fb0 <_printf_float+0x2d8>)
 8004db6:	e7d4      	b.n	8004d62 <_printf_float+0x8a>
 8004db8:	6863      	ldr	r3, [r4, #4]
 8004dba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004dbe:	9206      	str	r2, [sp, #24]
 8004dc0:	1c5a      	adds	r2, r3, #1
 8004dc2:	d13b      	bne.n	8004e3c <_printf_float+0x164>
 8004dc4:	2306      	movs	r3, #6
 8004dc6:	6063      	str	r3, [r4, #4]
 8004dc8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004dcc:	2300      	movs	r3, #0
 8004dce:	6022      	str	r2, [r4, #0]
 8004dd0:	9303      	str	r3, [sp, #12]
 8004dd2:	ab0a      	add	r3, sp, #40	@ 0x28
 8004dd4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004dd8:	ab09      	add	r3, sp, #36	@ 0x24
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	6861      	ldr	r1, [r4, #4]
 8004dde:	ec49 8b10 	vmov	d0, r8, r9
 8004de2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004de6:	4628      	mov	r0, r5
 8004de8:	f7ff fed6 	bl	8004b98 <__cvt>
 8004dec:	9b06      	ldr	r3, [sp, #24]
 8004dee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004df0:	2b47      	cmp	r3, #71	@ 0x47
 8004df2:	4680      	mov	r8, r0
 8004df4:	d129      	bne.n	8004e4a <_printf_float+0x172>
 8004df6:	1cc8      	adds	r0, r1, #3
 8004df8:	db02      	blt.n	8004e00 <_printf_float+0x128>
 8004dfa:	6863      	ldr	r3, [r4, #4]
 8004dfc:	4299      	cmp	r1, r3
 8004dfe:	dd41      	ble.n	8004e84 <_printf_float+0x1ac>
 8004e00:	f1aa 0a02 	sub.w	sl, sl, #2
 8004e04:	fa5f fa8a 	uxtb.w	sl, sl
 8004e08:	3901      	subs	r1, #1
 8004e0a:	4652      	mov	r2, sl
 8004e0c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004e10:	9109      	str	r1, [sp, #36]	@ 0x24
 8004e12:	f7ff ff26 	bl	8004c62 <__exponent>
 8004e16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004e18:	1813      	adds	r3, r2, r0
 8004e1a:	2a01      	cmp	r2, #1
 8004e1c:	4681      	mov	r9, r0
 8004e1e:	6123      	str	r3, [r4, #16]
 8004e20:	dc02      	bgt.n	8004e28 <_printf_float+0x150>
 8004e22:	6822      	ldr	r2, [r4, #0]
 8004e24:	07d2      	lsls	r2, r2, #31
 8004e26:	d501      	bpl.n	8004e2c <_printf_float+0x154>
 8004e28:	3301      	adds	r3, #1
 8004e2a:	6123      	str	r3, [r4, #16]
 8004e2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d0a2      	beq.n	8004d7a <_printf_float+0xa2>
 8004e34:	232d      	movs	r3, #45	@ 0x2d
 8004e36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e3a:	e79e      	b.n	8004d7a <_printf_float+0xa2>
 8004e3c:	9a06      	ldr	r2, [sp, #24]
 8004e3e:	2a47      	cmp	r2, #71	@ 0x47
 8004e40:	d1c2      	bne.n	8004dc8 <_printf_float+0xf0>
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1c0      	bne.n	8004dc8 <_printf_float+0xf0>
 8004e46:	2301      	movs	r3, #1
 8004e48:	e7bd      	b.n	8004dc6 <_printf_float+0xee>
 8004e4a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004e4e:	d9db      	bls.n	8004e08 <_printf_float+0x130>
 8004e50:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004e54:	d118      	bne.n	8004e88 <_printf_float+0x1b0>
 8004e56:	2900      	cmp	r1, #0
 8004e58:	6863      	ldr	r3, [r4, #4]
 8004e5a:	dd0b      	ble.n	8004e74 <_printf_float+0x19c>
 8004e5c:	6121      	str	r1, [r4, #16]
 8004e5e:	b913      	cbnz	r3, 8004e66 <_printf_float+0x18e>
 8004e60:	6822      	ldr	r2, [r4, #0]
 8004e62:	07d0      	lsls	r0, r2, #31
 8004e64:	d502      	bpl.n	8004e6c <_printf_float+0x194>
 8004e66:	3301      	adds	r3, #1
 8004e68:	440b      	add	r3, r1
 8004e6a:	6123      	str	r3, [r4, #16]
 8004e6c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004e6e:	f04f 0900 	mov.w	r9, #0
 8004e72:	e7db      	b.n	8004e2c <_printf_float+0x154>
 8004e74:	b913      	cbnz	r3, 8004e7c <_printf_float+0x1a4>
 8004e76:	6822      	ldr	r2, [r4, #0]
 8004e78:	07d2      	lsls	r2, r2, #31
 8004e7a:	d501      	bpl.n	8004e80 <_printf_float+0x1a8>
 8004e7c:	3302      	adds	r3, #2
 8004e7e:	e7f4      	b.n	8004e6a <_printf_float+0x192>
 8004e80:	2301      	movs	r3, #1
 8004e82:	e7f2      	b.n	8004e6a <_printf_float+0x192>
 8004e84:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004e88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e8a:	4299      	cmp	r1, r3
 8004e8c:	db05      	blt.n	8004e9a <_printf_float+0x1c2>
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	6121      	str	r1, [r4, #16]
 8004e92:	07d8      	lsls	r0, r3, #31
 8004e94:	d5ea      	bpl.n	8004e6c <_printf_float+0x194>
 8004e96:	1c4b      	adds	r3, r1, #1
 8004e98:	e7e7      	b.n	8004e6a <_printf_float+0x192>
 8004e9a:	2900      	cmp	r1, #0
 8004e9c:	bfd4      	ite	le
 8004e9e:	f1c1 0202 	rsble	r2, r1, #2
 8004ea2:	2201      	movgt	r2, #1
 8004ea4:	4413      	add	r3, r2
 8004ea6:	e7e0      	b.n	8004e6a <_printf_float+0x192>
 8004ea8:	6823      	ldr	r3, [r4, #0]
 8004eaa:	055a      	lsls	r2, r3, #21
 8004eac:	d407      	bmi.n	8004ebe <_printf_float+0x1e6>
 8004eae:	6923      	ldr	r3, [r4, #16]
 8004eb0:	4642      	mov	r2, r8
 8004eb2:	4631      	mov	r1, r6
 8004eb4:	4628      	mov	r0, r5
 8004eb6:	47b8      	blx	r7
 8004eb8:	3001      	adds	r0, #1
 8004eba:	d12b      	bne.n	8004f14 <_printf_float+0x23c>
 8004ebc:	e767      	b.n	8004d8e <_printf_float+0xb6>
 8004ebe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004ec2:	f240 80dd 	bls.w	8005080 <_printf_float+0x3a8>
 8004ec6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004eca:	2200      	movs	r2, #0
 8004ecc:	2300      	movs	r3, #0
 8004ece:	f7fb fdfb 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ed2:	2800      	cmp	r0, #0
 8004ed4:	d033      	beq.n	8004f3e <_printf_float+0x266>
 8004ed6:	4a37      	ldr	r2, [pc, #220]	@ (8004fb4 <_printf_float+0x2dc>)
 8004ed8:	2301      	movs	r3, #1
 8004eda:	4631      	mov	r1, r6
 8004edc:	4628      	mov	r0, r5
 8004ede:	47b8      	blx	r7
 8004ee0:	3001      	adds	r0, #1
 8004ee2:	f43f af54 	beq.w	8004d8e <_printf_float+0xb6>
 8004ee6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004eea:	4543      	cmp	r3, r8
 8004eec:	db02      	blt.n	8004ef4 <_printf_float+0x21c>
 8004eee:	6823      	ldr	r3, [r4, #0]
 8004ef0:	07d8      	lsls	r0, r3, #31
 8004ef2:	d50f      	bpl.n	8004f14 <_printf_float+0x23c>
 8004ef4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ef8:	4631      	mov	r1, r6
 8004efa:	4628      	mov	r0, r5
 8004efc:	47b8      	blx	r7
 8004efe:	3001      	adds	r0, #1
 8004f00:	f43f af45 	beq.w	8004d8e <_printf_float+0xb6>
 8004f04:	f04f 0900 	mov.w	r9, #0
 8004f08:	f108 38ff 	add.w	r8, r8, #4294967295
 8004f0c:	f104 0a1a 	add.w	sl, r4, #26
 8004f10:	45c8      	cmp	r8, r9
 8004f12:	dc09      	bgt.n	8004f28 <_printf_float+0x250>
 8004f14:	6823      	ldr	r3, [r4, #0]
 8004f16:	079b      	lsls	r3, r3, #30
 8004f18:	f100 8103 	bmi.w	8005122 <_printf_float+0x44a>
 8004f1c:	68e0      	ldr	r0, [r4, #12]
 8004f1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f20:	4298      	cmp	r0, r3
 8004f22:	bfb8      	it	lt
 8004f24:	4618      	movlt	r0, r3
 8004f26:	e734      	b.n	8004d92 <_printf_float+0xba>
 8004f28:	2301      	movs	r3, #1
 8004f2a:	4652      	mov	r2, sl
 8004f2c:	4631      	mov	r1, r6
 8004f2e:	4628      	mov	r0, r5
 8004f30:	47b8      	blx	r7
 8004f32:	3001      	adds	r0, #1
 8004f34:	f43f af2b 	beq.w	8004d8e <_printf_float+0xb6>
 8004f38:	f109 0901 	add.w	r9, r9, #1
 8004f3c:	e7e8      	b.n	8004f10 <_printf_float+0x238>
 8004f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	dc39      	bgt.n	8004fb8 <_printf_float+0x2e0>
 8004f44:	4a1b      	ldr	r2, [pc, #108]	@ (8004fb4 <_printf_float+0x2dc>)
 8004f46:	2301      	movs	r3, #1
 8004f48:	4631      	mov	r1, r6
 8004f4a:	4628      	mov	r0, r5
 8004f4c:	47b8      	blx	r7
 8004f4e:	3001      	adds	r0, #1
 8004f50:	f43f af1d 	beq.w	8004d8e <_printf_float+0xb6>
 8004f54:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004f58:	ea59 0303 	orrs.w	r3, r9, r3
 8004f5c:	d102      	bne.n	8004f64 <_printf_float+0x28c>
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	07d9      	lsls	r1, r3, #31
 8004f62:	d5d7      	bpl.n	8004f14 <_printf_float+0x23c>
 8004f64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f68:	4631      	mov	r1, r6
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	47b8      	blx	r7
 8004f6e:	3001      	adds	r0, #1
 8004f70:	f43f af0d 	beq.w	8004d8e <_printf_float+0xb6>
 8004f74:	f04f 0a00 	mov.w	sl, #0
 8004f78:	f104 0b1a 	add.w	fp, r4, #26
 8004f7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f7e:	425b      	negs	r3, r3
 8004f80:	4553      	cmp	r3, sl
 8004f82:	dc01      	bgt.n	8004f88 <_printf_float+0x2b0>
 8004f84:	464b      	mov	r3, r9
 8004f86:	e793      	b.n	8004eb0 <_printf_float+0x1d8>
 8004f88:	2301      	movs	r3, #1
 8004f8a:	465a      	mov	r2, fp
 8004f8c:	4631      	mov	r1, r6
 8004f8e:	4628      	mov	r0, r5
 8004f90:	47b8      	blx	r7
 8004f92:	3001      	adds	r0, #1
 8004f94:	f43f aefb 	beq.w	8004d8e <_printf_float+0xb6>
 8004f98:	f10a 0a01 	add.w	sl, sl, #1
 8004f9c:	e7ee      	b.n	8004f7c <_printf_float+0x2a4>
 8004f9e:	bf00      	nop
 8004fa0:	7fefffff 	.word	0x7fefffff
 8004fa4:	0800ca6c 	.word	0x0800ca6c
 8004fa8:	0800ca70 	.word	0x0800ca70
 8004fac:	0800ca74 	.word	0x0800ca74
 8004fb0:	0800ca78 	.word	0x0800ca78
 8004fb4:	0800ca7c 	.word	0x0800ca7c
 8004fb8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004fba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004fbe:	4553      	cmp	r3, sl
 8004fc0:	bfa8      	it	ge
 8004fc2:	4653      	movge	r3, sl
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	4699      	mov	r9, r3
 8004fc8:	dc36      	bgt.n	8005038 <_printf_float+0x360>
 8004fca:	f04f 0b00 	mov.w	fp, #0
 8004fce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004fd2:	f104 021a 	add.w	r2, r4, #26
 8004fd6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004fd8:	9306      	str	r3, [sp, #24]
 8004fda:	eba3 0309 	sub.w	r3, r3, r9
 8004fde:	455b      	cmp	r3, fp
 8004fe0:	dc31      	bgt.n	8005046 <_printf_float+0x36e>
 8004fe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fe4:	459a      	cmp	sl, r3
 8004fe6:	dc3a      	bgt.n	800505e <_printf_float+0x386>
 8004fe8:	6823      	ldr	r3, [r4, #0]
 8004fea:	07da      	lsls	r2, r3, #31
 8004fec:	d437      	bmi.n	800505e <_printf_float+0x386>
 8004fee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ff0:	ebaa 0903 	sub.w	r9, sl, r3
 8004ff4:	9b06      	ldr	r3, [sp, #24]
 8004ff6:	ebaa 0303 	sub.w	r3, sl, r3
 8004ffa:	4599      	cmp	r9, r3
 8004ffc:	bfa8      	it	ge
 8004ffe:	4699      	movge	r9, r3
 8005000:	f1b9 0f00 	cmp.w	r9, #0
 8005004:	dc33      	bgt.n	800506e <_printf_float+0x396>
 8005006:	f04f 0800 	mov.w	r8, #0
 800500a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800500e:	f104 0b1a 	add.w	fp, r4, #26
 8005012:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005014:	ebaa 0303 	sub.w	r3, sl, r3
 8005018:	eba3 0309 	sub.w	r3, r3, r9
 800501c:	4543      	cmp	r3, r8
 800501e:	f77f af79 	ble.w	8004f14 <_printf_float+0x23c>
 8005022:	2301      	movs	r3, #1
 8005024:	465a      	mov	r2, fp
 8005026:	4631      	mov	r1, r6
 8005028:	4628      	mov	r0, r5
 800502a:	47b8      	blx	r7
 800502c:	3001      	adds	r0, #1
 800502e:	f43f aeae 	beq.w	8004d8e <_printf_float+0xb6>
 8005032:	f108 0801 	add.w	r8, r8, #1
 8005036:	e7ec      	b.n	8005012 <_printf_float+0x33a>
 8005038:	4642      	mov	r2, r8
 800503a:	4631      	mov	r1, r6
 800503c:	4628      	mov	r0, r5
 800503e:	47b8      	blx	r7
 8005040:	3001      	adds	r0, #1
 8005042:	d1c2      	bne.n	8004fca <_printf_float+0x2f2>
 8005044:	e6a3      	b.n	8004d8e <_printf_float+0xb6>
 8005046:	2301      	movs	r3, #1
 8005048:	4631      	mov	r1, r6
 800504a:	4628      	mov	r0, r5
 800504c:	9206      	str	r2, [sp, #24]
 800504e:	47b8      	blx	r7
 8005050:	3001      	adds	r0, #1
 8005052:	f43f ae9c 	beq.w	8004d8e <_printf_float+0xb6>
 8005056:	9a06      	ldr	r2, [sp, #24]
 8005058:	f10b 0b01 	add.w	fp, fp, #1
 800505c:	e7bb      	b.n	8004fd6 <_printf_float+0x2fe>
 800505e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005062:	4631      	mov	r1, r6
 8005064:	4628      	mov	r0, r5
 8005066:	47b8      	blx	r7
 8005068:	3001      	adds	r0, #1
 800506a:	d1c0      	bne.n	8004fee <_printf_float+0x316>
 800506c:	e68f      	b.n	8004d8e <_printf_float+0xb6>
 800506e:	9a06      	ldr	r2, [sp, #24]
 8005070:	464b      	mov	r3, r9
 8005072:	4442      	add	r2, r8
 8005074:	4631      	mov	r1, r6
 8005076:	4628      	mov	r0, r5
 8005078:	47b8      	blx	r7
 800507a:	3001      	adds	r0, #1
 800507c:	d1c3      	bne.n	8005006 <_printf_float+0x32e>
 800507e:	e686      	b.n	8004d8e <_printf_float+0xb6>
 8005080:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005084:	f1ba 0f01 	cmp.w	sl, #1
 8005088:	dc01      	bgt.n	800508e <_printf_float+0x3b6>
 800508a:	07db      	lsls	r3, r3, #31
 800508c:	d536      	bpl.n	80050fc <_printf_float+0x424>
 800508e:	2301      	movs	r3, #1
 8005090:	4642      	mov	r2, r8
 8005092:	4631      	mov	r1, r6
 8005094:	4628      	mov	r0, r5
 8005096:	47b8      	blx	r7
 8005098:	3001      	adds	r0, #1
 800509a:	f43f ae78 	beq.w	8004d8e <_printf_float+0xb6>
 800509e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050a2:	4631      	mov	r1, r6
 80050a4:	4628      	mov	r0, r5
 80050a6:	47b8      	blx	r7
 80050a8:	3001      	adds	r0, #1
 80050aa:	f43f ae70 	beq.w	8004d8e <_printf_float+0xb6>
 80050ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80050b2:	2200      	movs	r2, #0
 80050b4:	2300      	movs	r3, #0
 80050b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050ba:	f7fb fd05 	bl	8000ac8 <__aeabi_dcmpeq>
 80050be:	b9c0      	cbnz	r0, 80050f2 <_printf_float+0x41a>
 80050c0:	4653      	mov	r3, sl
 80050c2:	f108 0201 	add.w	r2, r8, #1
 80050c6:	4631      	mov	r1, r6
 80050c8:	4628      	mov	r0, r5
 80050ca:	47b8      	blx	r7
 80050cc:	3001      	adds	r0, #1
 80050ce:	d10c      	bne.n	80050ea <_printf_float+0x412>
 80050d0:	e65d      	b.n	8004d8e <_printf_float+0xb6>
 80050d2:	2301      	movs	r3, #1
 80050d4:	465a      	mov	r2, fp
 80050d6:	4631      	mov	r1, r6
 80050d8:	4628      	mov	r0, r5
 80050da:	47b8      	blx	r7
 80050dc:	3001      	adds	r0, #1
 80050de:	f43f ae56 	beq.w	8004d8e <_printf_float+0xb6>
 80050e2:	f108 0801 	add.w	r8, r8, #1
 80050e6:	45d0      	cmp	r8, sl
 80050e8:	dbf3      	blt.n	80050d2 <_printf_float+0x3fa>
 80050ea:	464b      	mov	r3, r9
 80050ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80050f0:	e6df      	b.n	8004eb2 <_printf_float+0x1da>
 80050f2:	f04f 0800 	mov.w	r8, #0
 80050f6:	f104 0b1a 	add.w	fp, r4, #26
 80050fa:	e7f4      	b.n	80050e6 <_printf_float+0x40e>
 80050fc:	2301      	movs	r3, #1
 80050fe:	4642      	mov	r2, r8
 8005100:	e7e1      	b.n	80050c6 <_printf_float+0x3ee>
 8005102:	2301      	movs	r3, #1
 8005104:	464a      	mov	r2, r9
 8005106:	4631      	mov	r1, r6
 8005108:	4628      	mov	r0, r5
 800510a:	47b8      	blx	r7
 800510c:	3001      	adds	r0, #1
 800510e:	f43f ae3e 	beq.w	8004d8e <_printf_float+0xb6>
 8005112:	f108 0801 	add.w	r8, r8, #1
 8005116:	68e3      	ldr	r3, [r4, #12]
 8005118:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800511a:	1a5b      	subs	r3, r3, r1
 800511c:	4543      	cmp	r3, r8
 800511e:	dcf0      	bgt.n	8005102 <_printf_float+0x42a>
 8005120:	e6fc      	b.n	8004f1c <_printf_float+0x244>
 8005122:	f04f 0800 	mov.w	r8, #0
 8005126:	f104 0919 	add.w	r9, r4, #25
 800512a:	e7f4      	b.n	8005116 <_printf_float+0x43e>

0800512c <_printf_common>:
 800512c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005130:	4616      	mov	r6, r2
 8005132:	4698      	mov	r8, r3
 8005134:	688a      	ldr	r2, [r1, #8]
 8005136:	690b      	ldr	r3, [r1, #16]
 8005138:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800513c:	4293      	cmp	r3, r2
 800513e:	bfb8      	it	lt
 8005140:	4613      	movlt	r3, r2
 8005142:	6033      	str	r3, [r6, #0]
 8005144:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005148:	4607      	mov	r7, r0
 800514a:	460c      	mov	r4, r1
 800514c:	b10a      	cbz	r2, 8005152 <_printf_common+0x26>
 800514e:	3301      	adds	r3, #1
 8005150:	6033      	str	r3, [r6, #0]
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	0699      	lsls	r1, r3, #26
 8005156:	bf42      	ittt	mi
 8005158:	6833      	ldrmi	r3, [r6, #0]
 800515a:	3302      	addmi	r3, #2
 800515c:	6033      	strmi	r3, [r6, #0]
 800515e:	6825      	ldr	r5, [r4, #0]
 8005160:	f015 0506 	ands.w	r5, r5, #6
 8005164:	d106      	bne.n	8005174 <_printf_common+0x48>
 8005166:	f104 0a19 	add.w	sl, r4, #25
 800516a:	68e3      	ldr	r3, [r4, #12]
 800516c:	6832      	ldr	r2, [r6, #0]
 800516e:	1a9b      	subs	r3, r3, r2
 8005170:	42ab      	cmp	r3, r5
 8005172:	dc26      	bgt.n	80051c2 <_printf_common+0x96>
 8005174:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005178:	6822      	ldr	r2, [r4, #0]
 800517a:	3b00      	subs	r3, #0
 800517c:	bf18      	it	ne
 800517e:	2301      	movne	r3, #1
 8005180:	0692      	lsls	r2, r2, #26
 8005182:	d42b      	bmi.n	80051dc <_printf_common+0xb0>
 8005184:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005188:	4641      	mov	r1, r8
 800518a:	4638      	mov	r0, r7
 800518c:	47c8      	blx	r9
 800518e:	3001      	adds	r0, #1
 8005190:	d01e      	beq.n	80051d0 <_printf_common+0xa4>
 8005192:	6823      	ldr	r3, [r4, #0]
 8005194:	6922      	ldr	r2, [r4, #16]
 8005196:	f003 0306 	and.w	r3, r3, #6
 800519a:	2b04      	cmp	r3, #4
 800519c:	bf02      	ittt	eq
 800519e:	68e5      	ldreq	r5, [r4, #12]
 80051a0:	6833      	ldreq	r3, [r6, #0]
 80051a2:	1aed      	subeq	r5, r5, r3
 80051a4:	68a3      	ldr	r3, [r4, #8]
 80051a6:	bf0c      	ite	eq
 80051a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051ac:	2500      	movne	r5, #0
 80051ae:	4293      	cmp	r3, r2
 80051b0:	bfc4      	itt	gt
 80051b2:	1a9b      	subgt	r3, r3, r2
 80051b4:	18ed      	addgt	r5, r5, r3
 80051b6:	2600      	movs	r6, #0
 80051b8:	341a      	adds	r4, #26
 80051ba:	42b5      	cmp	r5, r6
 80051bc:	d11a      	bne.n	80051f4 <_printf_common+0xc8>
 80051be:	2000      	movs	r0, #0
 80051c0:	e008      	b.n	80051d4 <_printf_common+0xa8>
 80051c2:	2301      	movs	r3, #1
 80051c4:	4652      	mov	r2, sl
 80051c6:	4641      	mov	r1, r8
 80051c8:	4638      	mov	r0, r7
 80051ca:	47c8      	blx	r9
 80051cc:	3001      	adds	r0, #1
 80051ce:	d103      	bne.n	80051d8 <_printf_common+0xac>
 80051d0:	f04f 30ff 	mov.w	r0, #4294967295
 80051d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051d8:	3501      	adds	r5, #1
 80051da:	e7c6      	b.n	800516a <_printf_common+0x3e>
 80051dc:	18e1      	adds	r1, r4, r3
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	2030      	movs	r0, #48	@ 0x30
 80051e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80051e6:	4422      	add	r2, r4
 80051e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80051ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80051f0:	3302      	adds	r3, #2
 80051f2:	e7c7      	b.n	8005184 <_printf_common+0x58>
 80051f4:	2301      	movs	r3, #1
 80051f6:	4622      	mov	r2, r4
 80051f8:	4641      	mov	r1, r8
 80051fa:	4638      	mov	r0, r7
 80051fc:	47c8      	blx	r9
 80051fe:	3001      	adds	r0, #1
 8005200:	d0e6      	beq.n	80051d0 <_printf_common+0xa4>
 8005202:	3601      	adds	r6, #1
 8005204:	e7d9      	b.n	80051ba <_printf_common+0x8e>
	...

08005208 <_printf_i>:
 8005208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800520c:	7e0f      	ldrb	r7, [r1, #24]
 800520e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005210:	2f78      	cmp	r7, #120	@ 0x78
 8005212:	4691      	mov	r9, r2
 8005214:	4680      	mov	r8, r0
 8005216:	460c      	mov	r4, r1
 8005218:	469a      	mov	sl, r3
 800521a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800521e:	d807      	bhi.n	8005230 <_printf_i+0x28>
 8005220:	2f62      	cmp	r7, #98	@ 0x62
 8005222:	d80a      	bhi.n	800523a <_printf_i+0x32>
 8005224:	2f00      	cmp	r7, #0
 8005226:	f000 80d2 	beq.w	80053ce <_printf_i+0x1c6>
 800522a:	2f58      	cmp	r7, #88	@ 0x58
 800522c:	f000 80b9 	beq.w	80053a2 <_printf_i+0x19a>
 8005230:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005234:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005238:	e03a      	b.n	80052b0 <_printf_i+0xa8>
 800523a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800523e:	2b15      	cmp	r3, #21
 8005240:	d8f6      	bhi.n	8005230 <_printf_i+0x28>
 8005242:	a101      	add	r1, pc, #4	@ (adr r1, 8005248 <_printf_i+0x40>)
 8005244:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005248:	080052a1 	.word	0x080052a1
 800524c:	080052b5 	.word	0x080052b5
 8005250:	08005231 	.word	0x08005231
 8005254:	08005231 	.word	0x08005231
 8005258:	08005231 	.word	0x08005231
 800525c:	08005231 	.word	0x08005231
 8005260:	080052b5 	.word	0x080052b5
 8005264:	08005231 	.word	0x08005231
 8005268:	08005231 	.word	0x08005231
 800526c:	08005231 	.word	0x08005231
 8005270:	08005231 	.word	0x08005231
 8005274:	080053b5 	.word	0x080053b5
 8005278:	080052df 	.word	0x080052df
 800527c:	0800536f 	.word	0x0800536f
 8005280:	08005231 	.word	0x08005231
 8005284:	08005231 	.word	0x08005231
 8005288:	080053d7 	.word	0x080053d7
 800528c:	08005231 	.word	0x08005231
 8005290:	080052df 	.word	0x080052df
 8005294:	08005231 	.word	0x08005231
 8005298:	08005231 	.word	0x08005231
 800529c:	08005377 	.word	0x08005377
 80052a0:	6833      	ldr	r3, [r6, #0]
 80052a2:	1d1a      	adds	r2, r3, #4
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	6032      	str	r2, [r6, #0]
 80052a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80052b0:	2301      	movs	r3, #1
 80052b2:	e09d      	b.n	80053f0 <_printf_i+0x1e8>
 80052b4:	6833      	ldr	r3, [r6, #0]
 80052b6:	6820      	ldr	r0, [r4, #0]
 80052b8:	1d19      	adds	r1, r3, #4
 80052ba:	6031      	str	r1, [r6, #0]
 80052bc:	0606      	lsls	r6, r0, #24
 80052be:	d501      	bpl.n	80052c4 <_printf_i+0xbc>
 80052c0:	681d      	ldr	r5, [r3, #0]
 80052c2:	e003      	b.n	80052cc <_printf_i+0xc4>
 80052c4:	0645      	lsls	r5, r0, #25
 80052c6:	d5fb      	bpl.n	80052c0 <_printf_i+0xb8>
 80052c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80052cc:	2d00      	cmp	r5, #0
 80052ce:	da03      	bge.n	80052d8 <_printf_i+0xd0>
 80052d0:	232d      	movs	r3, #45	@ 0x2d
 80052d2:	426d      	negs	r5, r5
 80052d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052d8:	4859      	ldr	r0, [pc, #356]	@ (8005440 <_printf_i+0x238>)
 80052da:	230a      	movs	r3, #10
 80052dc:	e011      	b.n	8005302 <_printf_i+0xfa>
 80052de:	6821      	ldr	r1, [r4, #0]
 80052e0:	6833      	ldr	r3, [r6, #0]
 80052e2:	0608      	lsls	r0, r1, #24
 80052e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80052e8:	d402      	bmi.n	80052f0 <_printf_i+0xe8>
 80052ea:	0649      	lsls	r1, r1, #25
 80052ec:	bf48      	it	mi
 80052ee:	b2ad      	uxthmi	r5, r5
 80052f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80052f2:	4853      	ldr	r0, [pc, #332]	@ (8005440 <_printf_i+0x238>)
 80052f4:	6033      	str	r3, [r6, #0]
 80052f6:	bf14      	ite	ne
 80052f8:	230a      	movne	r3, #10
 80052fa:	2308      	moveq	r3, #8
 80052fc:	2100      	movs	r1, #0
 80052fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005302:	6866      	ldr	r6, [r4, #4]
 8005304:	60a6      	str	r6, [r4, #8]
 8005306:	2e00      	cmp	r6, #0
 8005308:	bfa2      	ittt	ge
 800530a:	6821      	ldrge	r1, [r4, #0]
 800530c:	f021 0104 	bicge.w	r1, r1, #4
 8005310:	6021      	strge	r1, [r4, #0]
 8005312:	b90d      	cbnz	r5, 8005318 <_printf_i+0x110>
 8005314:	2e00      	cmp	r6, #0
 8005316:	d04b      	beq.n	80053b0 <_printf_i+0x1a8>
 8005318:	4616      	mov	r6, r2
 800531a:	fbb5 f1f3 	udiv	r1, r5, r3
 800531e:	fb03 5711 	mls	r7, r3, r1, r5
 8005322:	5dc7      	ldrb	r7, [r0, r7]
 8005324:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005328:	462f      	mov	r7, r5
 800532a:	42bb      	cmp	r3, r7
 800532c:	460d      	mov	r5, r1
 800532e:	d9f4      	bls.n	800531a <_printf_i+0x112>
 8005330:	2b08      	cmp	r3, #8
 8005332:	d10b      	bne.n	800534c <_printf_i+0x144>
 8005334:	6823      	ldr	r3, [r4, #0]
 8005336:	07df      	lsls	r7, r3, #31
 8005338:	d508      	bpl.n	800534c <_printf_i+0x144>
 800533a:	6923      	ldr	r3, [r4, #16]
 800533c:	6861      	ldr	r1, [r4, #4]
 800533e:	4299      	cmp	r1, r3
 8005340:	bfde      	ittt	le
 8005342:	2330      	movle	r3, #48	@ 0x30
 8005344:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005348:	f106 36ff 	addle.w	r6, r6, #4294967295
 800534c:	1b92      	subs	r2, r2, r6
 800534e:	6122      	str	r2, [r4, #16]
 8005350:	f8cd a000 	str.w	sl, [sp]
 8005354:	464b      	mov	r3, r9
 8005356:	aa03      	add	r2, sp, #12
 8005358:	4621      	mov	r1, r4
 800535a:	4640      	mov	r0, r8
 800535c:	f7ff fee6 	bl	800512c <_printf_common>
 8005360:	3001      	adds	r0, #1
 8005362:	d14a      	bne.n	80053fa <_printf_i+0x1f2>
 8005364:	f04f 30ff 	mov.w	r0, #4294967295
 8005368:	b004      	add	sp, #16
 800536a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	f043 0320 	orr.w	r3, r3, #32
 8005374:	6023      	str	r3, [r4, #0]
 8005376:	4833      	ldr	r0, [pc, #204]	@ (8005444 <_printf_i+0x23c>)
 8005378:	2778      	movs	r7, #120	@ 0x78
 800537a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800537e:	6823      	ldr	r3, [r4, #0]
 8005380:	6831      	ldr	r1, [r6, #0]
 8005382:	061f      	lsls	r7, r3, #24
 8005384:	f851 5b04 	ldr.w	r5, [r1], #4
 8005388:	d402      	bmi.n	8005390 <_printf_i+0x188>
 800538a:	065f      	lsls	r7, r3, #25
 800538c:	bf48      	it	mi
 800538e:	b2ad      	uxthmi	r5, r5
 8005390:	6031      	str	r1, [r6, #0]
 8005392:	07d9      	lsls	r1, r3, #31
 8005394:	bf44      	itt	mi
 8005396:	f043 0320 	orrmi.w	r3, r3, #32
 800539a:	6023      	strmi	r3, [r4, #0]
 800539c:	b11d      	cbz	r5, 80053a6 <_printf_i+0x19e>
 800539e:	2310      	movs	r3, #16
 80053a0:	e7ac      	b.n	80052fc <_printf_i+0xf4>
 80053a2:	4827      	ldr	r0, [pc, #156]	@ (8005440 <_printf_i+0x238>)
 80053a4:	e7e9      	b.n	800537a <_printf_i+0x172>
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	f023 0320 	bic.w	r3, r3, #32
 80053ac:	6023      	str	r3, [r4, #0]
 80053ae:	e7f6      	b.n	800539e <_printf_i+0x196>
 80053b0:	4616      	mov	r6, r2
 80053b2:	e7bd      	b.n	8005330 <_printf_i+0x128>
 80053b4:	6833      	ldr	r3, [r6, #0]
 80053b6:	6825      	ldr	r5, [r4, #0]
 80053b8:	6961      	ldr	r1, [r4, #20]
 80053ba:	1d18      	adds	r0, r3, #4
 80053bc:	6030      	str	r0, [r6, #0]
 80053be:	062e      	lsls	r6, r5, #24
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	d501      	bpl.n	80053c8 <_printf_i+0x1c0>
 80053c4:	6019      	str	r1, [r3, #0]
 80053c6:	e002      	b.n	80053ce <_printf_i+0x1c6>
 80053c8:	0668      	lsls	r0, r5, #25
 80053ca:	d5fb      	bpl.n	80053c4 <_printf_i+0x1bc>
 80053cc:	8019      	strh	r1, [r3, #0]
 80053ce:	2300      	movs	r3, #0
 80053d0:	6123      	str	r3, [r4, #16]
 80053d2:	4616      	mov	r6, r2
 80053d4:	e7bc      	b.n	8005350 <_printf_i+0x148>
 80053d6:	6833      	ldr	r3, [r6, #0]
 80053d8:	1d1a      	adds	r2, r3, #4
 80053da:	6032      	str	r2, [r6, #0]
 80053dc:	681e      	ldr	r6, [r3, #0]
 80053de:	6862      	ldr	r2, [r4, #4]
 80053e0:	2100      	movs	r1, #0
 80053e2:	4630      	mov	r0, r6
 80053e4:	f7fa fef4 	bl	80001d0 <memchr>
 80053e8:	b108      	cbz	r0, 80053ee <_printf_i+0x1e6>
 80053ea:	1b80      	subs	r0, r0, r6
 80053ec:	6060      	str	r0, [r4, #4]
 80053ee:	6863      	ldr	r3, [r4, #4]
 80053f0:	6123      	str	r3, [r4, #16]
 80053f2:	2300      	movs	r3, #0
 80053f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053f8:	e7aa      	b.n	8005350 <_printf_i+0x148>
 80053fa:	6923      	ldr	r3, [r4, #16]
 80053fc:	4632      	mov	r2, r6
 80053fe:	4649      	mov	r1, r9
 8005400:	4640      	mov	r0, r8
 8005402:	47d0      	blx	sl
 8005404:	3001      	adds	r0, #1
 8005406:	d0ad      	beq.n	8005364 <_printf_i+0x15c>
 8005408:	6823      	ldr	r3, [r4, #0]
 800540a:	079b      	lsls	r3, r3, #30
 800540c:	d413      	bmi.n	8005436 <_printf_i+0x22e>
 800540e:	68e0      	ldr	r0, [r4, #12]
 8005410:	9b03      	ldr	r3, [sp, #12]
 8005412:	4298      	cmp	r0, r3
 8005414:	bfb8      	it	lt
 8005416:	4618      	movlt	r0, r3
 8005418:	e7a6      	b.n	8005368 <_printf_i+0x160>
 800541a:	2301      	movs	r3, #1
 800541c:	4632      	mov	r2, r6
 800541e:	4649      	mov	r1, r9
 8005420:	4640      	mov	r0, r8
 8005422:	47d0      	blx	sl
 8005424:	3001      	adds	r0, #1
 8005426:	d09d      	beq.n	8005364 <_printf_i+0x15c>
 8005428:	3501      	adds	r5, #1
 800542a:	68e3      	ldr	r3, [r4, #12]
 800542c:	9903      	ldr	r1, [sp, #12]
 800542e:	1a5b      	subs	r3, r3, r1
 8005430:	42ab      	cmp	r3, r5
 8005432:	dcf2      	bgt.n	800541a <_printf_i+0x212>
 8005434:	e7eb      	b.n	800540e <_printf_i+0x206>
 8005436:	2500      	movs	r5, #0
 8005438:	f104 0619 	add.w	r6, r4, #25
 800543c:	e7f5      	b.n	800542a <_printf_i+0x222>
 800543e:	bf00      	nop
 8005440:	0800ca7e 	.word	0x0800ca7e
 8005444:	0800ca8f 	.word	0x0800ca8f

08005448 <_scanf_float>:
 8005448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800544c:	b087      	sub	sp, #28
 800544e:	4617      	mov	r7, r2
 8005450:	9303      	str	r3, [sp, #12]
 8005452:	688b      	ldr	r3, [r1, #8]
 8005454:	1e5a      	subs	r2, r3, #1
 8005456:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800545a:	bf81      	itttt	hi
 800545c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005460:	eb03 0b05 	addhi.w	fp, r3, r5
 8005464:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005468:	608b      	strhi	r3, [r1, #8]
 800546a:	680b      	ldr	r3, [r1, #0]
 800546c:	460a      	mov	r2, r1
 800546e:	f04f 0500 	mov.w	r5, #0
 8005472:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005476:	f842 3b1c 	str.w	r3, [r2], #28
 800547a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800547e:	4680      	mov	r8, r0
 8005480:	460c      	mov	r4, r1
 8005482:	bf98      	it	ls
 8005484:	f04f 0b00 	movls.w	fp, #0
 8005488:	9201      	str	r2, [sp, #4]
 800548a:	4616      	mov	r6, r2
 800548c:	46aa      	mov	sl, r5
 800548e:	46a9      	mov	r9, r5
 8005490:	9502      	str	r5, [sp, #8]
 8005492:	68a2      	ldr	r2, [r4, #8]
 8005494:	b152      	cbz	r2, 80054ac <_scanf_float+0x64>
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	2b4e      	cmp	r3, #78	@ 0x4e
 800549c:	d864      	bhi.n	8005568 <_scanf_float+0x120>
 800549e:	2b40      	cmp	r3, #64	@ 0x40
 80054a0:	d83c      	bhi.n	800551c <_scanf_float+0xd4>
 80054a2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80054a6:	b2c8      	uxtb	r0, r1
 80054a8:	280e      	cmp	r0, #14
 80054aa:	d93a      	bls.n	8005522 <_scanf_float+0xda>
 80054ac:	f1b9 0f00 	cmp.w	r9, #0
 80054b0:	d003      	beq.n	80054ba <_scanf_float+0x72>
 80054b2:	6823      	ldr	r3, [r4, #0]
 80054b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054b8:	6023      	str	r3, [r4, #0]
 80054ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054be:	f1ba 0f01 	cmp.w	sl, #1
 80054c2:	f200 8117 	bhi.w	80056f4 <_scanf_float+0x2ac>
 80054c6:	9b01      	ldr	r3, [sp, #4]
 80054c8:	429e      	cmp	r6, r3
 80054ca:	f200 8108 	bhi.w	80056de <_scanf_float+0x296>
 80054ce:	2001      	movs	r0, #1
 80054d0:	b007      	add	sp, #28
 80054d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054d6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80054da:	2a0d      	cmp	r2, #13
 80054dc:	d8e6      	bhi.n	80054ac <_scanf_float+0x64>
 80054de:	a101      	add	r1, pc, #4	@ (adr r1, 80054e4 <_scanf_float+0x9c>)
 80054e0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80054e4:	0800562b 	.word	0x0800562b
 80054e8:	080054ad 	.word	0x080054ad
 80054ec:	080054ad 	.word	0x080054ad
 80054f0:	080054ad 	.word	0x080054ad
 80054f4:	0800568b 	.word	0x0800568b
 80054f8:	08005663 	.word	0x08005663
 80054fc:	080054ad 	.word	0x080054ad
 8005500:	080054ad 	.word	0x080054ad
 8005504:	08005639 	.word	0x08005639
 8005508:	080054ad 	.word	0x080054ad
 800550c:	080054ad 	.word	0x080054ad
 8005510:	080054ad 	.word	0x080054ad
 8005514:	080054ad 	.word	0x080054ad
 8005518:	080055f1 	.word	0x080055f1
 800551c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005520:	e7db      	b.n	80054da <_scanf_float+0x92>
 8005522:	290e      	cmp	r1, #14
 8005524:	d8c2      	bhi.n	80054ac <_scanf_float+0x64>
 8005526:	a001      	add	r0, pc, #4	@ (adr r0, 800552c <_scanf_float+0xe4>)
 8005528:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800552c:	080055e1 	.word	0x080055e1
 8005530:	080054ad 	.word	0x080054ad
 8005534:	080055e1 	.word	0x080055e1
 8005538:	08005677 	.word	0x08005677
 800553c:	080054ad 	.word	0x080054ad
 8005540:	08005589 	.word	0x08005589
 8005544:	080055c7 	.word	0x080055c7
 8005548:	080055c7 	.word	0x080055c7
 800554c:	080055c7 	.word	0x080055c7
 8005550:	080055c7 	.word	0x080055c7
 8005554:	080055c7 	.word	0x080055c7
 8005558:	080055c7 	.word	0x080055c7
 800555c:	080055c7 	.word	0x080055c7
 8005560:	080055c7 	.word	0x080055c7
 8005564:	080055c7 	.word	0x080055c7
 8005568:	2b6e      	cmp	r3, #110	@ 0x6e
 800556a:	d809      	bhi.n	8005580 <_scanf_float+0x138>
 800556c:	2b60      	cmp	r3, #96	@ 0x60
 800556e:	d8b2      	bhi.n	80054d6 <_scanf_float+0x8e>
 8005570:	2b54      	cmp	r3, #84	@ 0x54
 8005572:	d07b      	beq.n	800566c <_scanf_float+0x224>
 8005574:	2b59      	cmp	r3, #89	@ 0x59
 8005576:	d199      	bne.n	80054ac <_scanf_float+0x64>
 8005578:	2d07      	cmp	r5, #7
 800557a:	d197      	bne.n	80054ac <_scanf_float+0x64>
 800557c:	2508      	movs	r5, #8
 800557e:	e02c      	b.n	80055da <_scanf_float+0x192>
 8005580:	2b74      	cmp	r3, #116	@ 0x74
 8005582:	d073      	beq.n	800566c <_scanf_float+0x224>
 8005584:	2b79      	cmp	r3, #121	@ 0x79
 8005586:	e7f6      	b.n	8005576 <_scanf_float+0x12e>
 8005588:	6821      	ldr	r1, [r4, #0]
 800558a:	05c8      	lsls	r0, r1, #23
 800558c:	d51b      	bpl.n	80055c6 <_scanf_float+0x17e>
 800558e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005592:	6021      	str	r1, [r4, #0]
 8005594:	f109 0901 	add.w	r9, r9, #1
 8005598:	f1bb 0f00 	cmp.w	fp, #0
 800559c:	d003      	beq.n	80055a6 <_scanf_float+0x15e>
 800559e:	3201      	adds	r2, #1
 80055a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80055a4:	60a2      	str	r2, [r4, #8]
 80055a6:	68a3      	ldr	r3, [r4, #8]
 80055a8:	3b01      	subs	r3, #1
 80055aa:	60a3      	str	r3, [r4, #8]
 80055ac:	6923      	ldr	r3, [r4, #16]
 80055ae:	3301      	adds	r3, #1
 80055b0:	6123      	str	r3, [r4, #16]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	3b01      	subs	r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	607b      	str	r3, [r7, #4]
 80055ba:	f340 8087 	ble.w	80056cc <_scanf_float+0x284>
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	3301      	adds	r3, #1
 80055c2:	603b      	str	r3, [r7, #0]
 80055c4:	e765      	b.n	8005492 <_scanf_float+0x4a>
 80055c6:	eb1a 0105 	adds.w	r1, sl, r5
 80055ca:	f47f af6f 	bne.w	80054ac <_scanf_float+0x64>
 80055ce:	6822      	ldr	r2, [r4, #0]
 80055d0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80055d4:	6022      	str	r2, [r4, #0]
 80055d6:	460d      	mov	r5, r1
 80055d8:	468a      	mov	sl, r1
 80055da:	f806 3b01 	strb.w	r3, [r6], #1
 80055de:	e7e2      	b.n	80055a6 <_scanf_float+0x15e>
 80055e0:	6822      	ldr	r2, [r4, #0]
 80055e2:	0610      	lsls	r0, r2, #24
 80055e4:	f57f af62 	bpl.w	80054ac <_scanf_float+0x64>
 80055e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80055ec:	6022      	str	r2, [r4, #0]
 80055ee:	e7f4      	b.n	80055da <_scanf_float+0x192>
 80055f0:	f1ba 0f00 	cmp.w	sl, #0
 80055f4:	d10e      	bne.n	8005614 <_scanf_float+0x1cc>
 80055f6:	f1b9 0f00 	cmp.w	r9, #0
 80055fa:	d10e      	bne.n	800561a <_scanf_float+0x1d2>
 80055fc:	6822      	ldr	r2, [r4, #0]
 80055fe:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005602:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005606:	d108      	bne.n	800561a <_scanf_float+0x1d2>
 8005608:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800560c:	6022      	str	r2, [r4, #0]
 800560e:	f04f 0a01 	mov.w	sl, #1
 8005612:	e7e2      	b.n	80055da <_scanf_float+0x192>
 8005614:	f1ba 0f02 	cmp.w	sl, #2
 8005618:	d055      	beq.n	80056c6 <_scanf_float+0x27e>
 800561a:	2d01      	cmp	r5, #1
 800561c:	d002      	beq.n	8005624 <_scanf_float+0x1dc>
 800561e:	2d04      	cmp	r5, #4
 8005620:	f47f af44 	bne.w	80054ac <_scanf_float+0x64>
 8005624:	3501      	adds	r5, #1
 8005626:	b2ed      	uxtb	r5, r5
 8005628:	e7d7      	b.n	80055da <_scanf_float+0x192>
 800562a:	f1ba 0f01 	cmp.w	sl, #1
 800562e:	f47f af3d 	bne.w	80054ac <_scanf_float+0x64>
 8005632:	f04f 0a02 	mov.w	sl, #2
 8005636:	e7d0      	b.n	80055da <_scanf_float+0x192>
 8005638:	b97d      	cbnz	r5, 800565a <_scanf_float+0x212>
 800563a:	f1b9 0f00 	cmp.w	r9, #0
 800563e:	f47f af38 	bne.w	80054b2 <_scanf_float+0x6a>
 8005642:	6822      	ldr	r2, [r4, #0]
 8005644:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005648:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800564c:	f040 8108 	bne.w	8005860 <_scanf_float+0x418>
 8005650:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005654:	6022      	str	r2, [r4, #0]
 8005656:	2501      	movs	r5, #1
 8005658:	e7bf      	b.n	80055da <_scanf_float+0x192>
 800565a:	2d03      	cmp	r5, #3
 800565c:	d0e2      	beq.n	8005624 <_scanf_float+0x1dc>
 800565e:	2d05      	cmp	r5, #5
 8005660:	e7de      	b.n	8005620 <_scanf_float+0x1d8>
 8005662:	2d02      	cmp	r5, #2
 8005664:	f47f af22 	bne.w	80054ac <_scanf_float+0x64>
 8005668:	2503      	movs	r5, #3
 800566a:	e7b6      	b.n	80055da <_scanf_float+0x192>
 800566c:	2d06      	cmp	r5, #6
 800566e:	f47f af1d 	bne.w	80054ac <_scanf_float+0x64>
 8005672:	2507      	movs	r5, #7
 8005674:	e7b1      	b.n	80055da <_scanf_float+0x192>
 8005676:	6822      	ldr	r2, [r4, #0]
 8005678:	0591      	lsls	r1, r2, #22
 800567a:	f57f af17 	bpl.w	80054ac <_scanf_float+0x64>
 800567e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005682:	6022      	str	r2, [r4, #0]
 8005684:	f8cd 9008 	str.w	r9, [sp, #8]
 8005688:	e7a7      	b.n	80055da <_scanf_float+0x192>
 800568a:	6822      	ldr	r2, [r4, #0]
 800568c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005690:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005694:	d006      	beq.n	80056a4 <_scanf_float+0x25c>
 8005696:	0550      	lsls	r0, r2, #21
 8005698:	f57f af08 	bpl.w	80054ac <_scanf_float+0x64>
 800569c:	f1b9 0f00 	cmp.w	r9, #0
 80056a0:	f000 80de 	beq.w	8005860 <_scanf_float+0x418>
 80056a4:	0591      	lsls	r1, r2, #22
 80056a6:	bf58      	it	pl
 80056a8:	9902      	ldrpl	r1, [sp, #8]
 80056aa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80056ae:	bf58      	it	pl
 80056b0:	eba9 0101 	subpl.w	r1, r9, r1
 80056b4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80056b8:	bf58      	it	pl
 80056ba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80056be:	6022      	str	r2, [r4, #0]
 80056c0:	f04f 0900 	mov.w	r9, #0
 80056c4:	e789      	b.n	80055da <_scanf_float+0x192>
 80056c6:	f04f 0a03 	mov.w	sl, #3
 80056ca:	e786      	b.n	80055da <_scanf_float+0x192>
 80056cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80056d0:	4639      	mov	r1, r7
 80056d2:	4640      	mov	r0, r8
 80056d4:	4798      	blx	r3
 80056d6:	2800      	cmp	r0, #0
 80056d8:	f43f aedb 	beq.w	8005492 <_scanf_float+0x4a>
 80056dc:	e6e6      	b.n	80054ac <_scanf_float+0x64>
 80056de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80056e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80056e6:	463a      	mov	r2, r7
 80056e8:	4640      	mov	r0, r8
 80056ea:	4798      	blx	r3
 80056ec:	6923      	ldr	r3, [r4, #16]
 80056ee:	3b01      	subs	r3, #1
 80056f0:	6123      	str	r3, [r4, #16]
 80056f2:	e6e8      	b.n	80054c6 <_scanf_float+0x7e>
 80056f4:	1e6b      	subs	r3, r5, #1
 80056f6:	2b06      	cmp	r3, #6
 80056f8:	d824      	bhi.n	8005744 <_scanf_float+0x2fc>
 80056fa:	2d02      	cmp	r5, #2
 80056fc:	d836      	bhi.n	800576c <_scanf_float+0x324>
 80056fe:	9b01      	ldr	r3, [sp, #4]
 8005700:	429e      	cmp	r6, r3
 8005702:	f67f aee4 	bls.w	80054ce <_scanf_float+0x86>
 8005706:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800570a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800570e:	463a      	mov	r2, r7
 8005710:	4640      	mov	r0, r8
 8005712:	4798      	blx	r3
 8005714:	6923      	ldr	r3, [r4, #16]
 8005716:	3b01      	subs	r3, #1
 8005718:	6123      	str	r3, [r4, #16]
 800571a:	e7f0      	b.n	80056fe <_scanf_float+0x2b6>
 800571c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005720:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005724:	463a      	mov	r2, r7
 8005726:	4640      	mov	r0, r8
 8005728:	4798      	blx	r3
 800572a:	6923      	ldr	r3, [r4, #16]
 800572c:	3b01      	subs	r3, #1
 800572e:	6123      	str	r3, [r4, #16]
 8005730:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005734:	fa5f fa8a 	uxtb.w	sl, sl
 8005738:	f1ba 0f02 	cmp.w	sl, #2
 800573c:	d1ee      	bne.n	800571c <_scanf_float+0x2d4>
 800573e:	3d03      	subs	r5, #3
 8005740:	b2ed      	uxtb	r5, r5
 8005742:	1b76      	subs	r6, r6, r5
 8005744:	6823      	ldr	r3, [r4, #0]
 8005746:	05da      	lsls	r2, r3, #23
 8005748:	d530      	bpl.n	80057ac <_scanf_float+0x364>
 800574a:	055b      	lsls	r3, r3, #21
 800574c:	d511      	bpl.n	8005772 <_scanf_float+0x32a>
 800574e:	9b01      	ldr	r3, [sp, #4]
 8005750:	429e      	cmp	r6, r3
 8005752:	f67f aebc 	bls.w	80054ce <_scanf_float+0x86>
 8005756:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800575a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800575e:	463a      	mov	r2, r7
 8005760:	4640      	mov	r0, r8
 8005762:	4798      	blx	r3
 8005764:	6923      	ldr	r3, [r4, #16]
 8005766:	3b01      	subs	r3, #1
 8005768:	6123      	str	r3, [r4, #16]
 800576a:	e7f0      	b.n	800574e <_scanf_float+0x306>
 800576c:	46aa      	mov	sl, r5
 800576e:	46b3      	mov	fp, r6
 8005770:	e7de      	b.n	8005730 <_scanf_float+0x2e8>
 8005772:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005776:	6923      	ldr	r3, [r4, #16]
 8005778:	2965      	cmp	r1, #101	@ 0x65
 800577a:	f103 33ff 	add.w	r3, r3, #4294967295
 800577e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005782:	6123      	str	r3, [r4, #16]
 8005784:	d00c      	beq.n	80057a0 <_scanf_float+0x358>
 8005786:	2945      	cmp	r1, #69	@ 0x45
 8005788:	d00a      	beq.n	80057a0 <_scanf_float+0x358>
 800578a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800578e:	463a      	mov	r2, r7
 8005790:	4640      	mov	r0, r8
 8005792:	4798      	blx	r3
 8005794:	6923      	ldr	r3, [r4, #16]
 8005796:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800579a:	3b01      	subs	r3, #1
 800579c:	1eb5      	subs	r5, r6, #2
 800579e:	6123      	str	r3, [r4, #16]
 80057a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80057a4:	463a      	mov	r2, r7
 80057a6:	4640      	mov	r0, r8
 80057a8:	4798      	blx	r3
 80057aa:	462e      	mov	r6, r5
 80057ac:	6822      	ldr	r2, [r4, #0]
 80057ae:	f012 0210 	ands.w	r2, r2, #16
 80057b2:	d001      	beq.n	80057b8 <_scanf_float+0x370>
 80057b4:	2000      	movs	r0, #0
 80057b6:	e68b      	b.n	80054d0 <_scanf_float+0x88>
 80057b8:	7032      	strb	r2, [r6, #0]
 80057ba:	6823      	ldr	r3, [r4, #0]
 80057bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80057c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057c4:	d11c      	bne.n	8005800 <_scanf_float+0x3b8>
 80057c6:	9b02      	ldr	r3, [sp, #8]
 80057c8:	454b      	cmp	r3, r9
 80057ca:	eba3 0209 	sub.w	r2, r3, r9
 80057ce:	d123      	bne.n	8005818 <_scanf_float+0x3d0>
 80057d0:	9901      	ldr	r1, [sp, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	4640      	mov	r0, r8
 80057d6:	f002 fc1f 	bl	8008018 <_strtod_r>
 80057da:	9b03      	ldr	r3, [sp, #12]
 80057dc:	6821      	ldr	r1, [r4, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f011 0f02 	tst.w	r1, #2
 80057e4:	ec57 6b10 	vmov	r6, r7, d0
 80057e8:	f103 0204 	add.w	r2, r3, #4
 80057ec:	d01f      	beq.n	800582e <_scanf_float+0x3e6>
 80057ee:	9903      	ldr	r1, [sp, #12]
 80057f0:	600a      	str	r2, [r1, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	e9c3 6700 	strd	r6, r7, [r3]
 80057f8:	68e3      	ldr	r3, [r4, #12]
 80057fa:	3301      	adds	r3, #1
 80057fc:	60e3      	str	r3, [r4, #12]
 80057fe:	e7d9      	b.n	80057b4 <_scanf_float+0x36c>
 8005800:	9b04      	ldr	r3, [sp, #16]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d0e4      	beq.n	80057d0 <_scanf_float+0x388>
 8005806:	9905      	ldr	r1, [sp, #20]
 8005808:	230a      	movs	r3, #10
 800580a:	3101      	adds	r1, #1
 800580c:	4640      	mov	r0, r8
 800580e:	f002 fc83 	bl	8008118 <_strtol_r>
 8005812:	9b04      	ldr	r3, [sp, #16]
 8005814:	9e05      	ldr	r6, [sp, #20]
 8005816:	1ac2      	subs	r2, r0, r3
 8005818:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800581c:	429e      	cmp	r6, r3
 800581e:	bf28      	it	cs
 8005820:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005824:	4910      	ldr	r1, [pc, #64]	@ (8005868 <_scanf_float+0x420>)
 8005826:	4630      	mov	r0, r6
 8005828:	f000 f8e4 	bl	80059f4 <siprintf>
 800582c:	e7d0      	b.n	80057d0 <_scanf_float+0x388>
 800582e:	f011 0f04 	tst.w	r1, #4
 8005832:	9903      	ldr	r1, [sp, #12]
 8005834:	600a      	str	r2, [r1, #0]
 8005836:	d1dc      	bne.n	80057f2 <_scanf_float+0x3aa>
 8005838:	681d      	ldr	r5, [r3, #0]
 800583a:	4632      	mov	r2, r6
 800583c:	463b      	mov	r3, r7
 800583e:	4630      	mov	r0, r6
 8005840:	4639      	mov	r1, r7
 8005842:	f7fb f973 	bl	8000b2c <__aeabi_dcmpun>
 8005846:	b128      	cbz	r0, 8005854 <_scanf_float+0x40c>
 8005848:	4808      	ldr	r0, [pc, #32]	@ (800586c <_scanf_float+0x424>)
 800584a:	f000 f9df 	bl	8005c0c <nanf>
 800584e:	ed85 0a00 	vstr	s0, [r5]
 8005852:	e7d1      	b.n	80057f8 <_scanf_float+0x3b0>
 8005854:	4630      	mov	r0, r6
 8005856:	4639      	mov	r1, r7
 8005858:	f7fb f9c6 	bl	8000be8 <__aeabi_d2f>
 800585c:	6028      	str	r0, [r5, #0]
 800585e:	e7cb      	b.n	80057f8 <_scanf_float+0x3b0>
 8005860:	f04f 0900 	mov.w	r9, #0
 8005864:	e629      	b.n	80054ba <_scanf_float+0x72>
 8005866:	bf00      	nop
 8005868:	0800caa0 	.word	0x0800caa0
 800586c:	0800ce35 	.word	0x0800ce35

08005870 <std>:
 8005870:	2300      	movs	r3, #0
 8005872:	b510      	push	{r4, lr}
 8005874:	4604      	mov	r4, r0
 8005876:	e9c0 3300 	strd	r3, r3, [r0]
 800587a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800587e:	6083      	str	r3, [r0, #8]
 8005880:	8181      	strh	r1, [r0, #12]
 8005882:	6643      	str	r3, [r0, #100]	@ 0x64
 8005884:	81c2      	strh	r2, [r0, #14]
 8005886:	6183      	str	r3, [r0, #24]
 8005888:	4619      	mov	r1, r3
 800588a:	2208      	movs	r2, #8
 800588c:	305c      	adds	r0, #92	@ 0x5c
 800588e:	f000 f92e 	bl	8005aee <memset>
 8005892:	4b0d      	ldr	r3, [pc, #52]	@ (80058c8 <std+0x58>)
 8005894:	6263      	str	r3, [r4, #36]	@ 0x24
 8005896:	4b0d      	ldr	r3, [pc, #52]	@ (80058cc <std+0x5c>)
 8005898:	62a3      	str	r3, [r4, #40]	@ 0x28
 800589a:	4b0d      	ldr	r3, [pc, #52]	@ (80058d0 <std+0x60>)
 800589c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800589e:	4b0d      	ldr	r3, [pc, #52]	@ (80058d4 <std+0x64>)
 80058a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80058a2:	4b0d      	ldr	r3, [pc, #52]	@ (80058d8 <std+0x68>)
 80058a4:	6224      	str	r4, [r4, #32]
 80058a6:	429c      	cmp	r4, r3
 80058a8:	d006      	beq.n	80058b8 <std+0x48>
 80058aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80058ae:	4294      	cmp	r4, r2
 80058b0:	d002      	beq.n	80058b8 <std+0x48>
 80058b2:	33d0      	adds	r3, #208	@ 0xd0
 80058b4:	429c      	cmp	r4, r3
 80058b6:	d105      	bne.n	80058c4 <std+0x54>
 80058b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80058bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058c0:	f000 b992 	b.w	8005be8 <__retarget_lock_init_recursive>
 80058c4:	bd10      	pop	{r4, pc}
 80058c6:	bf00      	nop
 80058c8:	08005a35 	.word	0x08005a35
 80058cc:	08005a57 	.word	0x08005a57
 80058d0:	08005a8f 	.word	0x08005a8f
 80058d4:	08005ab3 	.word	0x08005ab3
 80058d8:	2000074c 	.word	0x2000074c

080058dc <stdio_exit_handler>:
 80058dc:	4a02      	ldr	r2, [pc, #8]	@ (80058e8 <stdio_exit_handler+0xc>)
 80058de:	4903      	ldr	r1, [pc, #12]	@ (80058ec <stdio_exit_handler+0x10>)
 80058e0:	4803      	ldr	r0, [pc, #12]	@ (80058f0 <stdio_exit_handler+0x14>)
 80058e2:	f000 b869 	b.w	80059b8 <_fwalk_sglue>
 80058e6:	bf00      	nop
 80058e8:	2000006c 	.word	0x2000006c
 80058ec:	080084d5 	.word	0x080084d5
 80058f0:	2000007c 	.word	0x2000007c

080058f4 <cleanup_stdio>:
 80058f4:	6841      	ldr	r1, [r0, #4]
 80058f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005928 <cleanup_stdio+0x34>)
 80058f8:	4299      	cmp	r1, r3
 80058fa:	b510      	push	{r4, lr}
 80058fc:	4604      	mov	r4, r0
 80058fe:	d001      	beq.n	8005904 <cleanup_stdio+0x10>
 8005900:	f002 fde8 	bl	80084d4 <_fflush_r>
 8005904:	68a1      	ldr	r1, [r4, #8]
 8005906:	4b09      	ldr	r3, [pc, #36]	@ (800592c <cleanup_stdio+0x38>)
 8005908:	4299      	cmp	r1, r3
 800590a:	d002      	beq.n	8005912 <cleanup_stdio+0x1e>
 800590c:	4620      	mov	r0, r4
 800590e:	f002 fde1 	bl	80084d4 <_fflush_r>
 8005912:	68e1      	ldr	r1, [r4, #12]
 8005914:	4b06      	ldr	r3, [pc, #24]	@ (8005930 <cleanup_stdio+0x3c>)
 8005916:	4299      	cmp	r1, r3
 8005918:	d004      	beq.n	8005924 <cleanup_stdio+0x30>
 800591a:	4620      	mov	r0, r4
 800591c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005920:	f002 bdd8 	b.w	80084d4 <_fflush_r>
 8005924:	bd10      	pop	{r4, pc}
 8005926:	bf00      	nop
 8005928:	2000074c 	.word	0x2000074c
 800592c:	200007b4 	.word	0x200007b4
 8005930:	2000081c 	.word	0x2000081c

08005934 <global_stdio_init.part.0>:
 8005934:	b510      	push	{r4, lr}
 8005936:	4b0b      	ldr	r3, [pc, #44]	@ (8005964 <global_stdio_init.part.0+0x30>)
 8005938:	4c0b      	ldr	r4, [pc, #44]	@ (8005968 <global_stdio_init.part.0+0x34>)
 800593a:	4a0c      	ldr	r2, [pc, #48]	@ (800596c <global_stdio_init.part.0+0x38>)
 800593c:	601a      	str	r2, [r3, #0]
 800593e:	4620      	mov	r0, r4
 8005940:	2200      	movs	r2, #0
 8005942:	2104      	movs	r1, #4
 8005944:	f7ff ff94 	bl	8005870 <std>
 8005948:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800594c:	2201      	movs	r2, #1
 800594e:	2109      	movs	r1, #9
 8005950:	f7ff ff8e 	bl	8005870 <std>
 8005954:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005958:	2202      	movs	r2, #2
 800595a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800595e:	2112      	movs	r1, #18
 8005960:	f7ff bf86 	b.w	8005870 <std>
 8005964:	20000884 	.word	0x20000884
 8005968:	2000074c 	.word	0x2000074c
 800596c:	080058dd 	.word	0x080058dd

08005970 <__sfp_lock_acquire>:
 8005970:	4801      	ldr	r0, [pc, #4]	@ (8005978 <__sfp_lock_acquire+0x8>)
 8005972:	f000 b93a 	b.w	8005bea <__retarget_lock_acquire_recursive>
 8005976:	bf00      	nop
 8005978:	2000088d 	.word	0x2000088d

0800597c <__sfp_lock_release>:
 800597c:	4801      	ldr	r0, [pc, #4]	@ (8005984 <__sfp_lock_release+0x8>)
 800597e:	f000 b935 	b.w	8005bec <__retarget_lock_release_recursive>
 8005982:	bf00      	nop
 8005984:	2000088d 	.word	0x2000088d

08005988 <__sinit>:
 8005988:	b510      	push	{r4, lr}
 800598a:	4604      	mov	r4, r0
 800598c:	f7ff fff0 	bl	8005970 <__sfp_lock_acquire>
 8005990:	6a23      	ldr	r3, [r4, #32]
 8005992:	b11b      	cbz	r3, 800599c <__sinit+0x14>
 8005994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005998:	f7ff bff0 	b.w	800597c <__sfp_lock_release>
 800599c:	4b04      	ldr	r3, [pc, #16]	@ (80059b0 <__sinit+0x28>)
 800599e:	6223      	str	r3, [r4, #32]
 80059a0:	4b04      	ldr	r3, [pc, #16]	@ (80059b4 <__sinit+0x2c>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1f5      	bne.n	8005994 <__sinit+0xc>
 80059a8:	f7ff ffc4 	bl	8005934 <global_stdio_init.part.0>
 80059ac:	e7f2      	b.n	8005994 <__sinit+0xc>
 80059ae:	bf00      	nop
 80059b0:	080058f5 	.word	0x080058f5
 80059b4:	20000884 	.word	0x20000884

080059b8 <_fwalk_sglue>:
 80059b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059bc:	4607      	mov	r7, r0
 80059be:	4688      	mov	r8, r1
 80059c0:	4614      	mov	r4, r2
 80059c2:	2600      	movs	r6, #0
 80059c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059c8:	f1b9 0901 	subs.w	r9, r9, #1
 80059cc:	d505      	bpl.n	80059da <_fwalk_sglue+0x22>
 80059ce:	6824      	ldr	r4, [r4, #0]
 80059d0:	2c00      	cmp	r4, #0
 80059d2:	d1f7      	bne.n	80059c4 <_fwalk_sglue+0xc>
 80059d4:	4630      	mov	r0, r6
 80059d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059da:	89ab      	ldrh	r3, [r5, #12]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d907      	bls.n	80059f0 <_fwalk_sglue+0x38>
 80059e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059e4:	3301      	adds	r3, #1
 80059e6:	d003      	beq.n	80059f0 <_fwalk_sglue+0x38>
 80059e8:	4629      	mov	r1, r5
 80059ea:	4638      	mov	r0, r7
 80059ec:	47c0      	blx	r8
 80059ee:	4306      	orrs	r6, r0
 80059f0:	3568      	adds	r5, #104	@ 0x68
 80059f2:	e7e9      	b.n	80059c8 <_fwalk_sglue+0x10>

080059f4 <siprintf>:
 80059f4:	b40e      	push	{r1, r2, r3}
 80059f6:	b500      	push	{lr}
 80059f8:	b09c      	sub	sp, #112	@ 0x70
 80059fa:	ab1d      	add	r3, sp, #116	@ 0x74
 80059fc:	9002      	str	r0, [sp, #8]
 80059fe:	9006      	str	r0, [sp, #24]
 8005a00:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005a04:	4809      	ldr	r0, [pc, #36]	@ (8005a2c <siprintf+0x38>)
 8005a06:	9107      	str	r1, [sp, #28]
 8005a08:	9104      	str	r1, [sp, #16]
 8005a0a:	4909      	ldr	r1, [pc, #36]	@ (8005a30 <siprintf+0x3c>)
 8005a0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a10:	9105      	str	r1, [sp, #20]
 8005a12:	6800      	ldr	r0, [r0, #0]
 8005a14:	9301      	str	r3, [sp, #4]
 8005a16:	a902      	add	r1, sp, #8
 8005a18:	f002 fbdc 	bl	80081d4 <_svfiprintf_r>
 8005a1c:	9b02      	ldr	r3, [sp, #8]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	701a      	strb	r2, [r3, #0]
 8005a22:	b01c      	add	sp, #112	@ 0x70
 8005a24:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a28:	b003      	add	sp, #12
 8005a2a:	4770      	bx	lr
 8005a2c:	20000078 	.word	0x20000078
 8005a30:	ffff0208 	.word	0xffff0208

08005a34 <__sread>:
 8005a34:	b510      	push	{r4, lr}
 8005a36:	460c      	mov	r4, r1
 8005a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a3c:	f000 f886 	bl	8005b4c <_read_r>
 8005a40:	2800      	cmp	r0, #0
 8005a42:	bfab      	itete	ge
 8005a44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005a46:	89a3      	ldrhlt	r3, [r4, #12]
 8005a48:	181b      	addge	r3, r3, r0
 8005a4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005a4e:	bfac      	ite	ge
 8005a50:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005a52:	81a3      	strhlt	r3, [r4, #12]
 8005a54:	bd10      	pop	{r4, pc}

08005a56 <__swrite>:
 8005a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a5a:	461f      	mov	r7, r3
 8005a5c:	898b      	ldrh	r3, [r1, #12]
 8005a5e:	05db      	lsls	r3, r3, #23
 8005a60:	4605      	mov	r5, r0
 8005a62:	460c      	mov	r4, r1
 8005a64:	4616      	mov	r6, r2
 8005a66:	d505      	bpl.n	8005a74 <__swrite+0x1e>
 8005a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f000 f85a 	bl	8005b28 <_lseek_r>
 8005a74:	89a3      	ldrh	r3, [r4, #12]
 8005a76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a7e:	81a3      	strh	r3, [r4, #12]
 8005a80:	4632      	mov	r2, r6
 8005a82:	463b      	mov	r3, r7
 8005a84:	4628      	mov	r0, r5
 8005a86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a8a:	f000 b871 	b.w	8005b70 <_write_r>

08005a8e <__sseek>:
 8005a8e:	b510      	push	{r4, lr}
 8005a90:	460c      	mov	r4, r1
 8005a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a96:	f000 f847 	bl	8005b28 <_lseek_r>
 8005a9a:	1c43      	adds	r3, r0, #1
 8005a9c:	89a3      	ldrh	r3, [r4, #12]
 8005a9e:	bf15      	itete	ne
 8005aa0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005aa2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005aa6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005aaa:	81a3      	strheq	r3, [r4, #12]
 8005aac:	bf18      	it	ne
 8005aae:	81a3      	strhne	r3, [r4, #12]
 8005ab0:	bd10      	pop	{r4, pc}

08005ab2 <__sclose>:
 8005ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ab6:	f000 b827 	b.w	8005b08 <_close_r>

08005aba <memmove>:
 8005aba:	4288      	cmp	r0, r1
 8005abc:	b510      	push	{r4, lr}
 8005abe:	eb01 0402 	add.w	r4, r1, r2
 8005ac2:	d902      	bls.n	8005aca <memmove+0x10>
 8005ac4:	4284      	cmp	r4, r0
 8005ac6:	4623      	mov	r3, r4
 8005ac8:	d807      	bhi.n	8005ada <memmove+0x20>
 8005aca:	1e43      	subs	r3, r0, #1
 8005acc:	42a1      	cmp	r1, r4
 8005ace:	d008      	beq.n	8005ae2 <memmove+0x28>
 8005ad0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ad4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ad8:	e7f8      	b.n	8005acc <memmove+0x12>
 8005ada:	4402      	add	r2, r0
 8005adc:	4601      	mov	r1, r0
 8005ade:	428a      	cmp	r2, r1
 8005ae0:	d100      	bne.n	8005ae4 <memmove+0x2a>
 8005ae2:	bd10      	pop	{r4, pc}
 8005ae4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ae8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005aec:	e7f7      	b.n	8005ade <memmove+0x24>

08005aee <memset>:
 8005aee:	4402      	add	r2, r0
 8005af0:	4603      	mov	r3, r0
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d100      	bne.n	8005af8 <memset+0xa>
 8005af6:	4770      	bx	lr
 8005af8:	f803 1b01 	strb.w	r1, [r3], #1
 8005afc:	e7f9      	b.n	8005af2 <memset+0x4>
	...

08005b00 <_localeconv_r>:
 8005b00:	4800      	ldr	r0, [pc, #0]	@ (8005b04 <_localeconv_r+0x4>)
 8005b02:	4770      	bx	lr
 8005b04:	200001b8 	.word	0x200001b8

08005b08 <_close_r>:
 8005b08:	b538      	push	{r3, r4, r5, lr}
 8005b0a:	4d06      	ldr	r5, [pc, #24]	@ (8005b24 <_close_r+0x1c>)
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	4604      	mov	r4, r0
 8005b10:	4608      	mov	r0, r1
 8005b12:	602b      	str	r3, [r5, #0]
 8005b14:	f7fc f9f3 	bl	8001efe <_close>
 8005b18:	1c43      	adds	r3, r0, #1
 8005b1a:	d102      	bne.n	8005b22 <_close_r+0x1a>
 8005b1c:	682b      	ldr	r3, [r5, #0]
 8005b1e:	b103      	cbz	r3, 8005b22 <_close_r+0x1a>
 8005b20:	6023      	str	r3, [r4, #0]
 8005b22:	bd38      	pop	{r3, r4, r5, pc}
 8005b24:	20000888 	.word	0x20000888

08005b28 <_lseek_r>:
 8005b28:	b538      	push	{r3, r4, r5, lr}
 8005b2a:	4d07      	ldr	r5, [pc, #28]	@ (8005b48 <_lseek_r+0x20>)
 8005b2c:	4604      	mov	r4, r0
 8005b2e:	4608      	mov	r0, r1
 8005b30:	4611      	mov	r1, r2
 8005b32:	2200      	movs	r2, #0
 8005b34:	602a      	str	r2, [r5, #0]
 8005b36:	461a      	mov	r2, r3
 8005b38:	f7fc fa08 	bl	8001f4c <_lseek>
 8005b3c:	1c43      	adds	r3, r0, #1
 8005b3e:	d102      	bne.n	8005b46 <_lseek_r+0x1e>
 8005b40:	682b      	ldr	r3, [r5, #0]
 8005b42:	b103      	cbz	r3, 8005b46 <_lseek_r+0x1e>
 8005b44:	6023      	str	r3, [r4, #0]
 8005b46:	bd38      	pop	{r3, r4, r5, pc}
 8005b48:	20000888 	.word	0x20000888

08005b4c <_read_r>:
 8005b4c:	b538      	push	{r3, r4, r5, lr}
 8005b4e:	4d07      	ldr	r5, [pc, #28]	@ (8005b6c <_read_r+0x20>)
 8005b50:	4604      	mov	r4, r0
 8005b52:	4608      	mov	r0, r1
 8005b54:	4611      	mov	r1, r2
 8005b56:	2200      	movs	r2, #0
 8005b58:	602a      	str	r2, [r5, #0]
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	f7fc f996 	bl	8001e8c <_read>
 8005b60:	1c43      	adds	r3, r0, #1
 8005b62:	d102      	bne.n	8005b6a <_read_r+0x1e>
 8005b64:	682b      	ldr	r3, [r5, #0]
 8005b66:	b103      	cbz	r3, 8005b6a <_read_r+0x1e>
 8005b68:	6023      	str	r3, [r4, #0]
 8005b6a:	bd38      	pop	{r3, r4, r5, pc}
 8005b6c:	20000888 	.word	0x20000888

08005b70 <_write_r>:
 8005b70:	b538      	push	{r3, r4, r5, lr}
 8005b72:	4d07      	ldr	r5, [pc, #28]	@ (8005b90 <_write_r+0x20>)
 8005b74:	4604      	mov	r4, r0
 8005b76:	4608      	mov	r0, r1
 8005b78:	4611      	mov	r1, r2
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	602a      	str	r2, [r5, #0]
 8005b7e:	461a      	mov	r2, r3
 8005b80:	f7fc f9a1 	bl	8001ec6 <_write>
 8005b84:	1c43      	adds	r3, r0, #1
 8005b86:	d102      	bne.n	8005b8e <_write_r+0x1e>
 8005b88:	682b      	ldr	r3, [r5, #0]
 8005b8a:	b103      	cbz	r3, 8005b8e <_write_r+0x1e>
 8005b8c:	6023      	str	r3, [r4, #0]
 8005b8e:	bd38      	pop	{r3, r4, r5, pc}
 8005b90:	20000888 	.word	0x20000888

08005b94 <__errno>:
 8005b94:	4b01      	ldr	r3, [pc, #4]	@ (8005b9c <__errno+0x8>)
 8005b96:	6818      	ldr	r0, [r3, #0]
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	20000078 	.word	0x20000078

08005ba0 <__libc_init_array>:
 8005ba0:	b570      	push	{r4, r5, r6, lr}
 8005ba2:	4d0d      	ldr	r5, [pc, #52]	@ (8005bd8 <__libc_init_array+0x38>)
 8005ba4:	4c0d      	ldr	r4, [pc, #52]	@ (8005bdc <__libc_init_array+0x3c>)
 8005ba6:	1b64      	subs	r4, r4, r5
 8005ba8:	10a4      	asrs	r4, r4, #2
 8005baa:	2600      	movs	r6, #0
 8005bac:	42a6      	cmp	r6, r4
 8005bae:	d109      	bne.n	8005bc4 <__libc_init_array+0x24>
 8005bb0:	4d0b      	ldr	r5, [pc, #44]	@ (8005be0 <__libc_init_array+0x40>)
 8005bb2:	4c0c      	ldr	r4, [pc, #48]	@ (8005be4 <__libc_init_array+0x44>)
 8005bb4:	f003 fb56 	bl	8009264 <_init>
 8005bb8:	1b64      	subs	r4, r4, r5
 8005bba:	10a4      	asrs	r4, r4, #2
 8005bbc:	2600      	movs	r6, #0
 8005bbe:	42a6      	cmp	r6, r4
 8005bc0:	d105      	bne.n	8005bce <__libc_init_array+0x2e>
 8005bc2:	bd70      	pop	{r4, r5, r6, pc}
 8005bc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bc8:	4798      	blx	r3
 8005bca:	3601      	adds	r6, #1
 8005bcc:	e7ee      	b.n	8005bac <__libc_init_array+0xc>
 8005bce:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bd2:	4798      	blx	r3
 8005bd4:	3601      	adds	r6, #1
 8005bd6:	e7f2      	b.n	8005bbe <__libc_init_array+0x1e>
 8005bd8:	0800cea0 	.word	0x0800cea0
 8005bdc:	0800cea0 	.word	0x0800cea0
 8005be0:	0800cea0 	.word	0x0800cea0
 8005be4:	0800cea4 	.word	0x0800cea4

08005be8 <__retarget_lock_init_recursive>:
 8005be8:	4770      	bx	lr

08005bea <__retarget_lock_acquire_recursive>:
 8005bea:	4770      	bx	lr

08005bec <__retarget_lock_release_recursive>:
 8005bec:	4770      	bx	lr

08005bee <memcpy>:
 8005bee:	440a      	add	r2, r1
 8005bf0:	4291      	cmp	r1, r2
 8005bf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bf6:	d100      	bne.n	8005bfa <memcpy+0xc>
 8005bf8:	4770      	bx	lr
 8005bfa:	b510      	push	{r4, lr}
 8005bfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c04:	4291      	cmp	r1, r2
 8005c06:	d1f9      	bne.n	8005bfc <memcpy+0xe>
 8005c08:	bd10      	pop	{r4, pc}
	...

08005c0c <nanf>:
 8005c0c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005c14 <nanf+0x8>
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	7fc00000 	.word	0x7fc00000

08005c18 <quorem>:
 8005c18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c1c:	6903      	ldr	r3, [r0, #16]
 8005c1e:	690c      	ldr	r4, [r1, #16]
 8005c20:	42a3      	cmp	r3, r4
 8005c22:	4607      	mov	r7, r0
 8005c24:	db7e      	blt.n	8005d24 <quorem+0x10c>
 8005c26:	3c01      	subs	r4, #1
 8005c28:	f101 0814 	add.w	r8, r1, #20
 8005c2c:	00a3      	lsls	r3, r4, #2
 8005c2e:	f100 0514 	add.w	r5, r0, #20
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c38:	9301      	str	r3, [sp, #4]
 8005c3a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c42:	3301      	adds	r3, #1
 8005c44:	429a      	cmp	r2, r3
 8005c46:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c4a:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c4e:	d32e      	bcc.n	8005cae <quorem+0x96>
 8005c50:	f04f 0a00 	mov.w	sl, #0
 8005c54:	46c4      	mov	ip, r8
 8005c56:	46ae      	mov	lr, r5
 8005c58:	46d3      	mov	fp, sl
 8005c5a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005c5e:	b298      	uxth	r0, r3
 8005c60:	fb06 a000 	mla	r0, r6, r0, sl
 8005c64:	0c02      	lsrs	r2, r0, #16
 8005c66:	0c1b      	lsrs	r3, r3, #16
 8005c68:	fb06 2303 	mla	r3, r6, r3, r2
 8005c6c:	f8de 2000 	ldr.w	r2, [lr]
 8005c70:	b280      	uxth	r0, r0
 8005c72:	b292      	uxth	r2, r2
 8005c74:	1a12      	subs	r2, r2, r0
 8005c76:	445a      	add	r2, fp
 8005c78:	f8de 0000 	ldr.w	r0, [lr]
 8005c7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005c86:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005c8a:	b292      	uxth	r2, r2
 8005c8c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005c90:	45e1      	cmp	r9, ip
 8005c92:	f84e 2b04 	str.w	r2, [lr], #4
 8005c96:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005c9a:	d2de      	bcs.n	8005c5a <quorem+0x42>
 8005c9c:	9b00      	ldr	r3, [sp, #0]
 8005c9e:	58eb      	ldr	r3, [r5, r3]
 8005ca0:	b92b      	cbnz	r3, 8005cae <quorem+0x96>
 8005ca2:	9b01      	ldr	r3, [sp, #4]
 8005ca4:	3b04      	subs	r3, #4
 8005ca6:	429d      	cmp	r5, r3
 8005ca8:	461a      	mov	r2, r3
 8005caa:	d32f      	bcc.n	8005d0c <quorem+0xf4>
 8005cac:	613c      	str	r4, [r7, #16]
 8005cae:	4638      	mov	r0, r7
 8005cb0:	f001 f9c2 	bl	8007038 <__mcmp>
 8005cb4:	2800      	cmp	r0, #0
 8005cb6:	db25      	blt.n	8005d04 <quorem+0xec>
 8005cb8:	4629      	mov	r1, r5
 8005cba:	2000      	movs	r0, #0
 8005cbc:	f858 2b04 	ldr.w	r2, [r8], #4
 8005cc0:	f8d1 c000 	ldr.w	ip, [r1]
 8005cc4:	fa1f fe82 	uxth.w	lr, r2
 8005cc8:	fa1f f38c 	uxth.w	r3, ip
 8005ccc:	eba3 030e 	sub.w	r3, r3, lr
 8005cd0:	4403      	add	r3, r0
 8005cd2:	0c12      	lsrs	r2, r2, #16
 8005cd4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005cd8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ce2:	45c1      	cmp	r9, r8
 8005ce4:	f841 3b04 	str.w	r3, [r1], #4
 8005ce8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005cec:	d2e6      	bcs.n	8005cbc <quorem+0xa4>
 8005cee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cf6:	b922      	cbnz	r2, 8005d02 <quorem+0xea>
 8005cf8:	3b04      	subs	r3, #4
 8005cfa:	429d      	cmp	r5, r3
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	d30b      	bcc.n	8005d18 <quorem+0x100>
 8005d00:	613c      	str	r4, [r7, #16]
 8005d02:	3601      	adds	r6, #1
 8005d04:	4630      	mov	r0, r6
 8005d06:	b003      	add	sp, #12
 8005d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d0c:	6812      	ldr	r2, [r2, #0]
 8005d0e:	3b04      	subs	r3, #4
 8005d10:	2a00      	cmp	r2, #0
 8005d12:	d1cb      	bne.n	8005cac <quorem+0x94>
 8005d14:	3c01      	subs	r4, #1
 8005d16:	e7c6      	b.n	8005ca6 <quorem+0x8e>
 8005d18:	6812      	ldr	r2, [r2, #0]
 8005d1a:	3b04      	subs	r3, #4
 8005d1c:	2a00      	cmp	r2, #0
 8005d1e:	d1ef      	bne.n	8005d00 <quorem+0xe8>
 8005d20:	3c01      	subs	r4, #1
 8005d22:	e7ea      	b.n	8005cfa <quorem+0xe2>
 8005d24:	2000      	movs	r0, #0
 8005d26:	e7ee      	b.n	8005d06 <quorem+0xee>

08005d28 <_dtoa_r>:
 8005d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d2c:	69c7      	ldr	r7, [r0, #28]
 8005d2e:	b099      	sub	sp, #100	@ 0x64
 8005d30:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005d34:	ec55 4b10 	vmov	r4, r5, d0
 8005d38:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005d3a:	9109      	str	r1, [sp, #36]	@ 0x24
 8005d3c:	4683      	mov	fp, r0
 8005d3e:	920e      	str	r2, [sp, #56]	@ 0x38
 8005d40:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005d42:	b97f      	cbnz	r7, 8005d64 <_dtoa_r+0x3c>
 8005d44:	2010      	movs	r0, #16
 8005d46:	f000 fdfd 	bl	8006944 <malloc>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	f8cb 001c 	str.w	r0, [fp, #28]
 8005d50:	b920      	cbnz	r0, 8005d5c <_dtoa_r+0x34>
 8005d52:	4ba7      	ldr	r3, [pc, #668]	@ (8005ff0 <_dtoa_r+0x2c8>)
 8005d54:	21ef      	movs	r1, #239	@ 0xef
 8005d56:	48a7      	ldr	r0, [pc, #668]	@ (8005ff4 <_dtoa_r+0x2cc>)
 8005d58:	f002 fc0e 	bl	8008578 <__assert_func>
 8005d5c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005d60:	6007      	str	r7, [r0, #0]
 8005d62:	60c7      	str	r7, [r0, #12]
 8005d64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005d68:	6819      	ldr	r1, [r3, #0]
 8005d6a:	b159      	cbz	r1, 8005d84 <_dtoa_r+0x5c>
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	604a      	str	r2, [r1, #4]
 8005d70:	2301      	movs	r3, #1
 8005d72:	4093      	lsls	r3, r2
 8005d74:	608b      	str	r3, [r1, #8]
 8005d76:	4658      	mov	r0, fp
 8005d78:	f000 feda 	bl	8006b30 <_Bfree>
 8005d7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005d80:	2200      	movs	r2, #0
 8005d82:	601a      	str	r2, [r3, #0]
 8005d84:	1e2b      	subs	r3, r5, #0
 8005d86:	bfb9      	ittee	lt
 8005d88:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005d8c:	9303      	strlt	r3, [sp, #12]
 8005d8e:	2300      	movge	r3, #0
 8005d90:	6033      	strge	r3, [r6, #0]
 8005d92:	9f03      	ldr	r7, [sp, #12]
 8005d94:	4b98      	ldr	r3, [pc, #608]	@ (8005ff8 <_dtoa_r+0x2d0>)
 8005d96:	bfbc      	itt	lt
 8005d98:	2201      	movlt	r2, #1
 8005d9a:	6032      	strlt	r2, [r6, #0]
 8005d9c:	43bb      	bics	r3, r7
 8005d9e:	d112      	bne.n	8005dc6 <_dtoa_r+0x9e>
 8005da0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005da2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005da6:	6013      	str	r3, [r2, #0]
 8005da8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005dac:	4323      	orrs	r3, r4
 8005dae:	f000 854d 	beq.w	800684c <_dtoa_r+0xb24>
 8005db2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005db4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800600c <_dtoa_r+0x2e4>
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f000 854f 	beq.w	800685c <_dtoa_r+0xb34>
 8005dbe:	f10a 0303 	add.w	r3, sl, #3
 8005dc2:	f000 bd49 	b.w	8006858 <_dtoa_r+0xb30>
 8005dc6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	ec51 0b17 	vmov	r0, r1, d7
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005dd6:	f7fa fe77 	bl	8000ac8 <__aeabi_dcmpeq>
 8005dda:	4680      	mov	r8, r0
 8005ddc:	b158      	cbz	r0, 8005df6 <_dtoa_r+0xce>
 8005dde:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005de0:	2301      	movs	r3, #1
 8005de2:	6013      	str	r3, [r2, #0]
 8005de4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005de6:	b113      	cbz	r3, 8005dee <_dtoa_r+0xc6>
 8005de8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005dea:	4b84      	ldr	r3, [pc, #528]	@ (8005ffc <_dtoa_r+0x2d4>)
 8005dec:	6013      	str	r3, [r2, #0]
 8005dee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006010 <_dtoa_r+0x2e8>
 8005df2:	f000 bd33 	b.w	800685c <_dtoa_r+0xb34>
 8005df6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005dfa:	aa16      	add	r2, sp, #88	@ 0x58
 8005dfc:	a917      	add	r1, sp, #92	@ 0x5c
 8005dfe:	4658      	mov	r0, fp
 8005e00:	f001 fa3a 	bl	8007278 <__d2b>
 8005e04:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005e08:	4681      	mov	r9, r0
 8005e0a:	2e00      	cmp	r6, #0
 8005e0c:	d077      	beq.n	8005efe <_dtoa_r+0x1d6>
 8005e0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e10:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005e14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005e20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005e24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005e28:	4619      	mov	r1, r3
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	4b74      	ldr	r3, [pc, #464]	@ (8006000 <_dtoa_r+0x2d8>)
 8005e2e:	f7fa fa2b 	bl	8000288 <__aeabi_dsub>
 8005e32:	a369      	add	r3, pc, #420	@ (adr r3, 8005fd8 <_dtoa_r+0x2b0>)
 8005e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e38:	f7fa fbde 	bl	80005f8 <__aeabi_dmul>
 8005e3c:	a368      	add	r3, pc, #416	@ (adr r3, 8005fe0 <_dtoa_r+0x2b8>)
 8005e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e42:	f7fa fa23 	bl	800028c <__adddf3>
 8005e46:	4604      	mov	r4, r0
 8005e48:	4630      	mov	r0, r6
 8005e4a:	460d      	mov	r5, r1
 8005e4c:	f7fa fb6a 	bl	8000524 <__aeabi_i2d>
 8005e50:	a365      	add	r3, pc, #404	@ (adr r3, 8005fe8 <_dtoa_r+0x2c0>)
 8005e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e56:	f7fa fbcf 	bl	80005f8 <__aeabi_dmul>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	4620      	mov	r0, r4
 8005e60:	4629      	mov	r1, r5
 8005e62:	f7fa fa13 	bl	800028c <__adddf3>
 8005e66:	4604      	mov	r4, r0
 8005e68:	460d      	mov	r5, r1
 8005e6a:	f7fa fe75 	bl	8000b58 <__aeabi_d2iz>
 8005e6e:	2200      	movs	r2, #0
 8005e70:	4607      	mov	r7, r0
 8005e72:	2300      	movs	r3, #0
 8005e74:	4620      	mov	r0, r4
 8005e76:	4629      	mov	r1, r5
 8005e78:	f7fa fe30 	bl	8000adc <__aeabi_dcmplt>
 8005e7c:	b140      	cbz	r0, 8005e90 <_dtoa_r+0x168>
 8005e7e:	4638      	mov	r0, r7
 8005e80:	f7fa fb50 	bl	8000524 <__aeabi_i2d>
 8005e84:	4622      	mov	r2, r4
 8005e86:	462b      	mov	r3, r5
 8005e88:	f7fa fe1e 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e8c:	b900      	cbnz	r0, 8005e90 <_dtoa_r+0x168>
 8005e8e:	3f01      	subs	r7, #1
 8005e90:	2f16      	cmp	r7, #22
 8005e92:	d851      	bhi.n	8005f38 <_dtoa_r+0x210>
 8005e94:	4b5b      	ldr	r3, [pc, #364]	@ (8006004 <_dtoa_r+0x2dc>)
 8005e96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ea2:	f7fa fe1b 	bl	8000adc <__aeabi_dcmplt>
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	d048      	beq.n	8005f3c <_dtoa_r+0x214>
 8005eaa:	3f01      	subs	r7, #1
 8005eac:	2300      	movs	r3, #0
 8005eae:	9312      	str	r3, [sp, #72]	@ 0x48
 8005eb0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005eb2:	1b9b      	subs	r3, r3, r6
 8005eb4:	1e5a      	subs	r2, r3, #1
 8005eb6:	bf44      	itt	mi
 8005eb8:	f1c3 0801 	rsbmi	r8, r3, #1
 8005ebc:	2300      	movmi	r3, #0
 8005ebe:	9208      	str	r2, [sp, #32]
 8005ec0:	bf54      	ite	pl
 8005ec2:	f04f 0800 	movpl.w	r8, #0
 8005ec6:	9308      	strmi	r3, [sp, #32]
 8005ec8:	2f00      	cmp	r7, #0
 8005eca:	db39      	blt.n	8005f40 <_dtoa_r+0x218>
 8005ecc:	9b08      	ldr	r3, [sp, #32]
 8005ece:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005ed0:	443b      	add	r3, r7
 8005ed2:	9308      	str	r3, [sp, #32]
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ed8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005eda:	2b09      	cmp	r3, #9
 8005edc:	d864      	bhi.n	8005fa8 <_dtoa_r+0x280>
 8005ede:	2b05      	cmp	r3, #5
 8005ee0:	bfc4      	itt	gt
 8005ee2:	3b04      	subgt	r3, #4
 8005ee4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005ee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ee8:	f1a3 0302 	sub.w	r3, r3, #2
 8005eec:	bfcc      	ite	gt
 8005eee:	2400      	movgt	r4, #0
 8005ef0:	2401      	movle	r4, #1
 8005ef2:	2b03      	cmp	r3, #3
 8005ef4:	d863      	bhi.n	8005fbe <_dtoa_r+0x296>
 8005ef6:	e8df f003 	tbb	[pc, r3]
 8005efa:	372a      	.short	0x372a
 8005efc:	5535      	.short	0x5535
 8005efe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005f02:	441e      	add	r6, r3
 8005f04:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005f08:	2b20      	cmp	r3, #32
 8005f0a:	bfc1      	itttt	gt
 8005f0c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005f10:	409f      	lslgt	r7, r3
 8005f12:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005f16:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005f1a:	bfd6      	itet	le
 8005f1c:	f1c3 0320 	rsble	r3, r3, #32
 8005f20:	ea47 0003 	orrgt.w	r0, r7, r3
 8005f24:	fa04 f003 	lslle.w	r0, r4, r3
 8005f28:	f7fa faec 	bl	8000504 <__aeabi_ui2d>
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005f32:	3e01      	subs	r6, #1
 8005f34:	9214      	str	r2, [sp, #80]	@ 0x50
 8005f36:	e777      	b.n	8005e28 <_dtoa_r+0x100>
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e7b8      	b.n	8005eae <_dtoa_r+0x186>
 8005f3c:	9012      	str	r0, [sp, #72]	@ 0x48
 8005f3e:	e7b7      	b.n	8005eb0 <_dtoa_r+0x188>
 8005f40:	427b      	negs	r3, r7
 8005f42:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f44:	2300      	movs	r3, #0
 8005f46:	eba8 0807 	sub.w	r8, r8, r7
 8005f4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005f4c:	e7c4      	b.n	8005ed8 <_dtoa_r+0x1b0>
 8005f4e:	2300      	movs	r3, #0
 8005f50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	dc35      	bgt.n	8005fc4 <_dtoa_r+0x29c>
 8005f58:	2301      	movs	r3, #1
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	9307      	str	r3, [sp, #28]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	920e      	str	r2, [sp, #56]	@ 0x38
 8005f62:	e00b      	b.n	8005f7c <_dtoa_r+0x254>
 8005f64:	2301      	movs	r3, #1
 8005f66:	e7f3      	b.n	8005f50 <_dtoa_r+0x228>
 8005f68:	2300      	movs	r3, #0
 8005f6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f6e:	18fb      	adds	r3, r7, r3
 8005f70:	9300      	str	r3, [sp, #0]
 8005f72:	3301      	adds	r3, #1
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	9307      	str	r3, [sp, #28]
 8005f78:	bfb8      	it	lt
 8005f7a:	2301      	movlt	r3, #1
 8005f7c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005f80:	2100      	movs	r1, #0
 8005f82:	2204      	movs	r2, #4
 8005f84:	f102 0514 	add.w	r5, r2, #20
 8005f88:	429d      	cmp	r5, r3
 8005f8a:	d91f      	bls.n	8005fcc <_dtoa_r+0x2a4>
 8005f8c:	6041      	str	r1, [r0, #4]
 8005f8e:	4658      	mov	r0, fp
 8005f90:	f000 fd8e 	bl	8006ab0 <_Balloc>
 8005f94:	4682      	mov	sl, r0
 8005f96:	2800      	cmp	r0, #0
 8005f98:	d13c      	bne.n	8006014 <_dtoa_r+0x2ec>
 8005f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8006008 <_dtoa_r+0x2e0>)
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	f240 11af 	movw	r1, #431	@ 0x1af
 8005fa2:	e6d8      	b.n	8005d56 <_dtoa_r+0x2e>
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e7e0      	b.n	8005f6a <_dtoa_r+0x242>
 8005fa8:	2401      	movs	r4, #1
 8005faa:	2300      	movs	r3, #0
 8005fac:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fae:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	9307      	str	r3, [sp, #28]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	2312      	movs	r3, #18
 8005fbc:	e7d0      	b.n	8005f60 <_dtoa_r+0x238>
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fc2:	e7f5      	b.n	8005fb0 <_dtoa_r+0x288>
 8005fc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005fc6:	9300      	str	r3, [sp, #0]
 8005fc8:	9307      	str	r3, [sp, #28]
 8005fca:	e7d7      	b.n	8005f7c <_dtoa_r+0x254>
 8005fcc:	3101      	adds	r1, #1
 8005fce:	0052      	lsls	r2, r2, #1
 8005fd0:	e7d8      	b.n	8005f84 <_dtoa_r+0x25c>
 8005fd2:	bf00      	nop
 8005fd4:	f3af 8000 	nop.w
 8005fd8:	636f4361 	.word	0x636f4361
 8005fdc:	3fd287a7 	.word	0x3fd287a7
 8005fe0:	8b60c8b3 	.word	0x8b60c8b3
 8005fe4:	3fc68a28 	.word	0x3fc68a28
 8005fe8:	509f79fb 	.word	0x509f79fb
 8005fec:	3fd34413 	.word	0x3fd34413
 8005ff0:	0800cab2 	.word	0x0800cab2
 8005ff4:	0800cac9 	.word	0x0800cac9
 8005ff8:	7ff00000 	.word	0x7ff00000
 8005ffc:	0800ca7d 	.word	0x0800ca7d
 8006000:	3ff80000 	.word	0x3ff80000
 8006004:	0800cbc0 	.word	0x0800cbc0
 8006008:	0800cb21 	.word	0x0800cb21
 800600c:	0800caae 	.word	0x0800caae
 8006010:	0800ca7c 	.word	0x0800ca7c
 8006014:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006018:	6018      	str	r0, [r3, #0]
 800601a:	9b07      	ldr	r3, [sp, #28]
 800601c:	2b0e      	cmp	r3, #14
 800601e:	f200 80a4 	bhi.w	800616a <_dtoa_r+0x442>
 8006022:	2c00      	cmp	r4, #0
 8006024:	f000 80a1 	beq.w	800616a <_dtoa_r+0x442>
 8006028:	2f00      	cmp	r7, #0
 800602a:	dd33      	ble.n	8006094 <_dtoa_r+0x36c>
 800602c:	4bad      	ldr	r3, [pc, #692]	@ (80062e4 <_dtoa_r+0x5bc>)
 800602e:	f007 020f 	and.w	r2, r7, #15
 8006032:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006036:	ed93 7b00 	vldr	d7, [r3]
 800603a:	05f8      	lsls	r0, r7, #23
 800603c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006040:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006044:	d516      	bpl.n	8006074 <_dtoa_r+0x34c>
 8006046:	4ba8      	ldr	r3, [pc, #672]	@ (80062e8 <_dtoa_r+0x5c0>)
 8006048:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800604c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006050:	f7fa fbfc 	bl	800084c <__aeabi_ddiv>
 8006054:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006058:	f004 040f 	and.w	r4, r4, #15
 800605c:	2603      	movs	r6, #3
 800605e:	4da2      	ldr	r5, [pc, #648]	@ (80062e8 <_dtoa_r+0x5c0>)
 8006060:	b954      	cbnz	r4, 8006078 <_dtoa_r+0x350>
 8006062:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006066:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800606a:	f7fa fbef 	bl	800084c <__aeabi_ddiv>
 800606e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006072:	e028      	b.n	80060c6 <_dtoa_r+0x39e>
 8006074:	2602      	movs	r6, #2
 8006076:	e7f2      	b.n	800605e <_dtoa_r+0x336>
 8006078:	07e1      	lsls	r1, r4, #31
 800607a:	d508      	bpl.n	800608e <_dtoa_r+0x366>
 800607c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006080:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006084:	f7fa fab8 	bl	80005f8 <__aeabi_dmul>
 8006088:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800608c:	3601      	adds	r6, #1
 800608e:	1064      	asrs	r4, r4, #1
 8006090:	3508      	adds	r5, #8
 8006092:	e7e5      	b.n	8006060 <_dtoa_r+0x338>
 8006094:	f000 80d2 	beq.w	800623c <_dtoa_r+0x514>
 8006098:	427c      	negs	r4, r7
 800609a:	4b92      	ldr	r3, [pc, #584]	@ (80062e4 <_dtoa_r+0x5bc>)
 800609c:	4d92      	ldr	r5, [pc, #584]	@ (80062e8 <_dtoa_r+0x5c0>)
 800609e:	f004 020f 	and.w	r2, r4, #15
 80060a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80060ae:	f7fa faa3 	bl	80005f8 <__aeabi_dmul>
 80060b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060b6:	1124      	asrs	r4, r4, #4
 80060b8:	2300      	movs	r3, #0
 80060ba:	2602      	movs	r6, #2
 80060bc:	2c00      	cmp	r4, #0
 80060be:	f040 80b2 	bne.w	8006226 <_dtoa_r+0x4fe>
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1d3      	bne.n	800606e <_dtoa_r+0x346>
 80060c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80060c8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f000 80b7 	beq.w	8006240 <_dtoa_r+0x518>
 80060d2:	4b86      	ldr	r3, [pc, #536]	@ (80062ec <_dtoa_r+0x5c4>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	4620      	mov	r0, r4
 80060d8:	4629      	mov	r1, r5
 80060da:	f7fa fcff 	bl	8000adc <__aeabi_dcmplt>
 80060de:	2800      	cmp	r0, #0
 80060e0:	f000 80ae 	beq.w	8006240 <_dtoa_r+0x518>
 80060e4:	9b07      	ldr	r3, [sp, #28]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	f000 80aa 	beq.w	8006240 <_dtoa_r+0x518>
 80060ec:	9b00      	ldr	r3, [sp, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	dd37      	ble.n	8006162 <_dtoa_r+0x43a>
 80060f2:	1e7b      	subs	r3, r7, #1
 80060f4:	9304      	str	r3, [sp, #16]
 80060f6:	4620      	mov	r0, r4
 80060f8:	4b7d      	ldr	r3, [pc, #500]	@ (80062f0 <_dtoa_r+0x5c8>)
 80060fa:	2200      	movs	r2, #0
 80060fc:	4629      	mov	r1, r5
 80060fe:	f7fa fa7b 	bl	80005f8 <__aeabi_dmul>
 8006102:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006106:	9c00      	ldr	r4, [sp, #0]
 8006108:	3601      	adds	r6, #1
 800610a:	4630      	mov	r0, r6
 800610c:	f7fa fa0a 	bl	8000524 <__aeabi_i2d>
 8006110:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006114:	f7fa fa70 	bl	80005f8 <__aeabi_dmul>
 8006118:	4b76      	ldr	r3, [pc, #472]	@ (80062f4 <_dtoa_r+0x5cc>)
 800611a:	2200      	movs	r2, #0
 800611c:	f7fa f8b6 	bl	800028c <__adddf3>
 8006120:	4605      	mov	r5, r0
 8006122:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006126:	2c00      	cmp	r4, #0
 8006128:	f040 808d 	bne.w	8006246 <_dtoa_r+0x51e>
 800612c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006130:	4b71      	ldr	r3, [pc, #452]	@ (80062f8 <_dtoa_r+0x5d0>)
 8006132:	2200      	movs	r2, #0
 8006134:	f7fa f8a8 	bl	8000288 <__aeabi_dsub>
 8006138:	4602      	mov	r2, r0
 800613a:	460b      	mov	r3, r1
 800613c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006140:	462a      	mov	r2, r5
 8006142:	4633      	mov	r3, r6
 8006144:	f7fa fce8 	bl	8000b18 <__aeabi_dcmpgt>
 8006148:	2800      	cmp	r0, #0
 800614a:	f040 828b 	bne.w	8006664 <_dtoa_r+0x93c>
 800614e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006152:	462a      	mov	r2, r5
 8006154:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006158:	f7fa fcc0 	bl	8000adc <__aeabi_dcmplt>
 800615c:	2800      	cmp	r0, #0
 800615e:	f040 8128 	bne.w	80063b2 <_dtoa_r+0x68a>
 8006162:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006166:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800616a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800616c:	2b00      	cmp	r3, #0
 800616e:	f2c0 815a 	blt.w	8006426 <_dtoa_r+0x6fe>
 8006172:	2f0e      	cmp	r7, #14
 8006174:	f300 8157 	bgt.w	8006426 <_dtoa_r+0x6fe>
 8006178:	4b5a      	ldr	r3, [pc, #360]	@ (80062e4 <_dtoa_r+0x5bc>)
 800617a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800617e:	ed93 7b00 	vldr	d7, [r3]
 8006182:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006184:	2b00      	cmp	r3, #0
 8006186:	ed8d 7b00 	vstr	d7, [sp]
 800618a:	da03      	bge.n	8006194 <_dtoa_r+0x46c>
 800618c:	9b07      	ldr	r3, [sp, #28]
 800618e:	2b00      	cmp	r3, #0
 8006190:	f340 8101 	ble.w	8006396 <_dtoa_r+0x66e>
 8006194:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006198:	4656      	mov	r6, sl
 800619a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800619e:	4620      	mov	r0, r4
 80061a0:	4629      	mov	r1, r5
 80061a2:	f7fa fb53 	bl	800084c <__aeabi_ddiv>
 80061a6:	f7fa fcd7 	bl	8000b58 <__aeabi_d2iz>
 80061aa:	4680      	mov	r8, r0
 80061ac:	f7fa f9ba 	bl	8000524 <__aeabi_i2d>
 80061b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80061b4:	f7fa fa20 	bl	80005f8 <__aeabi_dmul>
 80061b8:	4602      	mov	r2, r0
 80061ba:	460b      	mov	r3, r1
 80061bc:	4620      	mov	r0, r4
 80061be:	4629      	mov	r1, r5
 80061c0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80061c4:	f7fa f860 	bl	8000288 <__aeabi_dsub>
 80061c8:	f806 4b01 	strb.w	r4, [r6], #1
 80061cc:	9d07      	ldr	r5, [sp, #28]
 80061ce:	eba6 040a 	sub.w	r4, r6, sl
 80061d2:	42a5      	cmp	r5, r4
 80061d4:	4602      	mov	r2, r0
 80061d6:	460b      	mov	r3, r1
 80061d8:	f040 8117 	bne.w	800640a <_dtoa_r+0x6e2>
 80061dc:	f7fa f856 	bl	800028c <__adddf3>
 80061e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80061e4:	4604      	mov	r4, r0
 80061e6:	460d      	mov	r5, r1
 80061e8:	f7fa fc96 	bl	8000b18 <__aeabi_dcmpgt>
 80061ec:	2800      	cmp	r0, #0
 80061ee:	f040 80f9 	bne.w	80063e4 <_dtoa_r+0x6bc>
 80061f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80061f6:	4620      	mov	r0, r4
 80061f8:	4629      	mov	r1, r5
 80061fa:	f7fa fc65 	bl	8000ac8 <__aeabi_dcmpeq>
 80061fe:	b118      	cbz	r0, 8006208 <_dtoa_r+0x4e0>
 8006200:	f018 0f01 	tst.w	r8, #1
 8006204:	f040 80ee 	bne.w	80063e4 <_dtoa_r+0x6bc>
 8006208:	4649      	mov	r1, r9
 800620a:	4658      	mov	r0, fp
 800620c:	f000 fc90 	bl	8006b30 <_Bfree>
 8006210:	2300      	movs	r3, #0
 8006212:	7033      	strb	r3, [r6, #0]
 8006214:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006216:	3701      	adds	r7, #1
 8006218:	601f      	str	r7, [r3, #0]
 800621a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 831d 	beq.w	800685c <_dtoa_r+0xb34>
 8006222:	601e      	str	r6, [r3, #0]
 8006224:	e31a      	b.n	800685c <_dtoa_r+0xb34>
 8006226:	07e2      	lsls	r2, r4, #31
 8006228:	d505      	bpl.n	8006236 <_dtoa_r+0x50e>
 800622a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800622e:	f7fa f9e3 	bl	80005f8 <__aeabi_dmul>
 8006232:	3601      	adds	r6, #1
 8006234:	2301      	movs	r3, #1
 8006236:	1064      	asrs	r4, r4, #1
 8006238:	3508      	adds	r5, #8
 800623a:	e73f      	b.n	80060bc <_dtoa_r+0x394>
 800623c:	2602      	movs	r6, #2
 800623e:	e742      	b.n	80060c6 <_dtoa_r+0x39e>
 8006240:	9c07      	ldr	r4, [sp, #28]
 8006242:	9704      	str	r7, [sp, #16]
 8006244:	e761      	b.n	800610a <_dtoa_r+0x3e2>
 8006246:	4b27      	ldr	r3, [pc, #156]	@ (80062e4 <_dtoa_r+0x5bc>)
 8006248:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800624a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800624e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006252:	4454      	add	r4, sl
 8006254:	2900      	cmp	r1, #0
 8006256:	d053      	beq.n	8006300 <_dtoa_r+0x5d8>
 8006258:	4928      	ldr	r1, [pc, #160]	@ (80062fc <_dtoa_r+0x5d4>)
 800625a:	2000      	movs	r0, #0
 800625c:	f7fa faf6 	bl	800084c <__aeabi_ddiv>
 8006260:	4633      	mov	r3, r6
 8006262:	462a      	mov	r2, r5
 8006264:	f7fa f810 	bl	8000288 <__aeabi_dsub>
 8006268:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800626c:	4656      	mov	r6, sl
 800626e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006272:	f7fa fc71 	bl	8000b58 <__aeabi_d2iz>
 8006276:	4605      	mov	r5, r0
 8006278:	f7fa f954 	bl	8000524 <__aeabi_i2d>
 800627c:	4602      	mov	r2, r0
 800627e:	460b      	mov	r3, r1
 8006280:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006284:	f7fa f800 	bl	8000288 <__aeabi_dsub>
 8006288:	3530      	adds	r5, #48	@ 0x30
 800628a:	4602      	mov	r2, r0
 800628c:	460b      	mov	r3, r1
 800628e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006292:	f806 5b01 	strb.w	r5, [r6], #1
 8006296:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800629a:	f7fa fc1f 	bl	8000adc <__aeabi_dcmplt>
 800629e:	2800      	cmp	r0, #0
 80062a0:	d171      	bne.n	8006386 <_dtoa_r+0x65e>
 80062a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062a6:	4911      	ldr	r1, [pc, #68]	@ (80062ec <_dtoa_r+0x5c4>)
 80062a8:	2000      	movs	r0, #0
 80062aa:	f7f9 ffed 	bl	8000288 <__aeabi_dsub>
 80062ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80062b2:	f7fa fc13 	bl	8000adc <__aeabi_dcmplt>
 80062b6:	2800      	cmp	r0, #0
 80062b8:	f040 8095 	bne.w	80063e6 <_dtoa_r+0x6be>
 80062bc:	42a6      	cmp	r6, r4
 80062be:	f43f af50 	beq.w	8006162 <_dtoa_r+0x43a>
 80062c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80062c6:	4b0a      	ldr	r3, [pc, #40]	@ (80062f0 <_dtoa_r+0x5c8>)
 80062c8:	2200      	movs	r2, #0
 80062ca:	f7fa f995 	bl	80005f8 <__aeabi_dmul>
 80062ce:	4b08      	ldr	r3, [pc, #32]	@ (80062f0 <_dtoa_r+0x5c8>)
 80062d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80062d4:	2200      	movs	r2, #0
 80062d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062da:	f7fa f98d 	bl	80005f8 <__aeabi_dmul>
 80062de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062e2:	e7c4      	b.n	800626e <_dtoa_r+0x546>
 80062e4:	0800cbc0 	.word	0x0800cbc0
 80062e8:	0800cb98 	.word	0x0800cb98
 80062ec:	3ff00000 	.word	0x3ff00000
 80062f0:	40240000 	.word	0x40240000
 80062f4:	401c0000 	.word	0x401c0000
 80062f8:	40140000 	.word	0x40140000
 80062fc:	3fe00000 	.word	0x3fe00000
 8006300:	4631      	mov	r1, r6
 8006302:	4628      	mov	r0, r5
 8006304:	f7fa f978 	bl	80005f8 <__aeabi_dmul>
 8006308:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800630c:	9415      	str	r4, [sp, #84]	@ 0x54
 800630e:	4656      	mov	r6, sl
 8006310:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006314:	f7fa fc20 	bl	8000b58 <__aeabi_d2iz>
 8006318:	4605      	mov	r5, r0
 800631a:	f7fa f903 	bl	8000524 <__aeabi_i2d>
 800631e:	4602      	mov	r2, r0
 8006320:	460b      	mov	r3, r1
 8006322:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006326:	f7f9 ffaf 	bl	8000288 <__aeabi_dsub>
 800632a:	3530      	adds	r5, #48	@ 0x30
 800632c:	f806 5b01 	strb.w	r5, [r6], #1
 8006330:	4602      	mov	r2, r0
 8006332:	460b      	mov	r3, r1
 8006334:	42a6      	cmp	r6, r4
 8006336:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800633a:	f04f 0200 	mov.w	r2, #0
 800633e:	d124      	bne.n	800638a <_dtoa_r+0x662>
 8006340:	4bac      	ldr	r3, [pc, #688]	@ (80065f4 <_dtoa_r+0x8cc>)
 8006342:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006346:	f7f9 ffa1 	bl	800028c <__adddf3>
 800634a:	4602      	mov	r2, r0
 800634c:	460b      	mov	r3, r1
 800634e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006352:	f7fa fbe1 	bl	8000b18 <__aeabi_dcmpgt>
 8006356:	2800      	cmp	r0, #0
 8006358:	d145      	bne.n	80063e6 <_dtoa_r+0x6be>
 800635a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800635e:	49a5      	ldr	r1, [pc, #660]	@ (80065f4 <_dtoa_r+0x8cc>)
 8006360:	2000      	movs	r0, #0
 8006362:	f7f9 ff91 	bl	8000288 <__aeabi_dsub>
 8006366:	4602      	mov	r2, r0
 8006368:	460b      	mov	r3, r1
 800636a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800636e:	f7fa fbb5 	bl	8000adc <__aeabi_dcmplt>
 8006372:	2800      	cmp	r0, #0
 8006374:	f43f aef5 	beq.w	8006162 <_dtoa_r+0x43a>
 8006378:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800637a:	1e73      	subs	r3, r6, #1
 800637c:	9315      	str	r3, [sp, #84]	@ 0x54
 800637e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006382:	2b30      	cmp	r3, #48	@ 0x30
 8006384:	d0f8      	beq.n	8006378 <_dtoa_r+0x650>
 8006386:	9f04      	ldr	r7, [sp, #16]
 8006388:	e73e      	b.n	8006208 <_dtoa_r+0x4e0>
 800638a:	4b9b      	ldr	r3, [pc, #620]	@ (80065f8 <_dtoa_r+0x8d0>)
 800638c:	f7fa f934 	bl	80005f8 <__aeabi_dmul>
 8006390:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006394:	e7bc      	b.n	8006310 <_dtoa_r+0x5e8>
 8006396:	d10c      	bne.n	80063b2 <_dtoa_r+0x68a>
 8006398:	4b98      	ldr	r3, [pc, #608]	@ (80065fc <_dtoa_r+0x8d4>)
 800639a:	2200      	movs	r2, #0
 800639c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063a0:	f7fa f92a 	bl	80005f8 <__aeabi_dmul>
 80063a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063a8:	f7fa fbac 	bl	8000b04 <__aeabi_dcmpge>
 80063ac:	2800      	cmp	r0, #0
 80063ae:	f000 8157 	beq.w	8006660 <_dtoa_r+0x938>
 80063b2:	2400      	movs	r4, #0
 80063b4:	4625      	mov	r5, r4
 80063b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063b8:	43db      	mvns	r3, r3
 80063ba:	9304      	str	r3, [sp, #16]
 80063bc:	4656      	mov	r6, sl
 80063be:	2700      	movs	r7, #0
 80063c0:	4621      	mov	r1, r4
 80063c2:	4658      	mov	r0, fp
 80063c4:	f000 fbb4 	bl	8006b30 <_Bfree>
 80063c8:	2d00      	cmp	r5, #0
 80063ca:	d0dc      	beq.n	8006386 <_dtoa_r+0x65e>
 80063cc:	b12f      	cbz	r7, 80063da <_dtoa_r+0x6b2>
 80063ce:	42af      	cmp	r7, r5
 80063d0:	d003      	beq.n	80063da <_dtoa_r+0x6b2>
 80063d2:	4639      	mov	r1, r7
 80063d4:	4658      	mov	r0, fp
 80063d6:	f000 fbab 	bl	8006b30 <_Bfree>
 80063da:	4629      	mov	r1, r5
 80063dc:	4658      	mov	r0, fp
 80063de:	f000 fba7 	bl	8006b30 <_Bfree>
 80063e2:	e7d0      	b.n	8006386 <_dtoa_r+0x65e>
 80063e4:	9704      	str	r7, [sp, #16]
 80063e6:	4633      	mov	r3, r6
 80063e8:	461e      	mov	r6, r3
 80063ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063ee:	2a39      	cmp	r2, #57	@ 0x39
 80063f0:	d107      	bne.n	8006402 <_dtoa_r+0x6da>
 80063f2:	459a      	cmp	sl, r3
 80063f4:	d1f8      	bne.n	80063e8 <_dtoa_r+0x6c0>
 80063f6:	9a04      	ldr	r2, [sp, #16]
 80063f8:	3201      	adds	r2, #1
 80063fa:	9204      	str	r2, [sp, #16]
 80063fc:	2230      	movs	r2, #48	@ 0x30
 80063fe:	f88a 2000 	strb.w	r2, [sl]
 8006402:	781a      	ldrb	r2, [r3, #0]
 8006404:	3201      	adds	r2, #1
 8006406:	701a      	strb	r2, [r3, #0]
 8006408:	e7bd      	b.n	8006386 <_dtoa_r+0x65e>
 800640a:	4b7b      	ldr	r3, [pc, #492]	@ (80065f8 <_dtoa_r+0x8d0>)
 800640c:	2200      	movs	r2, #0
 800640e:	f7fa f8f3 	bl	80005f8 <__aeabi_dmul>
 8006412:	2200      	movs	r2, #0
 8006414:	2300      	movs	r3, #0
 8006416:	4604      	mov	r4, r0
 8006418:	460d      	mov	r5, r1
 800641a:	f7fa fb55 	bl	8000ac8 <__aeabi_dcmpeq>
 800641e:	2800      	cmp	r0, #0
 8006420:	f43f aebb 	beq.w	800619a <_dtoa_r+0x472>
 8006424:	e6f0      	b.n	8006208 <_dtoa_r+0x4e0>
 8006426:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006428:	2a00      	cmp	r2, #0
 800642a:	f000 80db 	beq.w	80065e4 <_dtoa_r+0x8bc>
 800642e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006430:	2a01      	cmp	r2, #1
 8006432:	f300 80bf 	bgt.w	80065b4 <_dtoa_r+0x88c>
 8006436:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006438:	2a00      	cmp	r2, #0
 800643a:	f000 80b7 	beq.w	80065ac <_dtoa_r+0x884>
 800643e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006442:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006444:	4646      	mov	r6, r8
 8006446:	9a08      	ldr	r2, [sp, #32]
 8006448:	2101      	movs	r1, #1
 800644a:	441a      	add	r2, r3
 800644c:	4658      	mov	r0, fp
 800644e:	4498      	add	r8, r3
 8006450:	9208      	str	r2, [sp, #32]
 8006452:	f000 fc6b 	bl	8006d2c <__i2b>
 8006456:	4605      	mov	r5, r0
 8006458:	b15e      	cbz	r6, 8006472 <_dtoa_r+0x74a>
 800645a:	9b08      	ldr	r3, [sp, #32]
 800645c:	2b00      	cmp	r3, #0
 800645e:	dd08      	ble.n	8006472 <_dtoa_r+0x74a>
 8006460:	42b3      	cmp	r3, r6
 8006462:	9a08      	ldr	r2, [sp, #32]
 8006464:	bfa8      	it	ge
 8006466:	4633      	movge	r3, r6
 8006468:	eba8 0803 	sub.w	r8, r8, r3
 800646c:	1af6      	subs	r6, r6, r3
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	9308      	str	r3, [sp, #32]
 8006472:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006474:	b1f3      	cbz	r3, 80064b4 <_dtoa_r+0x78c>
 8006476:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006478:	2b00      	cmp	r3, #0
 800647a:	f000 80b7 	beq.w	80065ec <_dtoa_r+0x8c4>
 800647e:	b18c      	cbz	r4, 80064a4 <_dtoa_r+0x77c>
 8006480:	4629      	mov	r1, r5
 8006482:	4622      	mov	r2, r4
 8006484:	4658      	mov	r0, fp
 8006486:	f000 fd11 	bl	8006eac <__pow5mult>
 800648a:	464a      	mov	r2, r9
 800648c:	4601      	mov	r1, r0
 800648e:	4605      	mov	r5, r0
 8006490:	4658      	mov	r0, fp
 8006492:	f000 fc61 	bl	8006d58 <__multiply>
 8006496:	4649      	mov	r1, r9
 8006498:	9004      	str	r0, [sp, #16]
 800649a:	4658      	mov	r0, fp
 800649c:	f000 fb48 	bl	8006b30 <_Bfree>
 80064a0:	9b04      	ldr	r3, [sp, #16]
 80064a2:	4699      	mov	r9, r3
 80064a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064a6:	1b1a      	subs	r2, r3, r4
 80064a8:	d004      	beq.n	80064b4 <_dtoa_r+0x78c>
 80064aa:	4649      	mov	r1, r9
 80064ac:	4658      	mov	r0, fp
 80064ae:	f000 fcfd 	bl	8006eac <__pow5mult>
 80064b2:	4681      	mov	r9, r0
 80064b4:	2101      	movs	r1, #1
 80064b6:	4658      	mov	r0, fp
 80064b8:	f000 fc38 	bl	8006d2c <__i2b>
 80064bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064be:	4604      	mov	r4, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f000 81cf 	beq.w	8006864 <_dtoa_r+0xb3c>
 80064c6:	461a      	mov	r2, r3
 80064c8:	4601      	mov	r1, r0
 80064ca:	4658      	mov	r0, fp
 80064cc:	f000 fcee 	bl	8006eac <__pow5mult>
 80064d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	4604      	mov	r4, r0
 80064d6:	f300 8095 	bgt.w	8006604 <_dtoa_r+0x8dc>
 80064da:	9b02      	ldr	r3, [sp, #8]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f040 8087 	bne.w	80065f0 <_dtoa_r+0x8c8>
 80064e2:	9b03      	ldr	r3, [sp, #12]
 80064e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f040 8089 	bne.w	8006600 <_dtoa_r+0x8d8>
 80064ee:	9b03      	ldr	r3, [sp, #12]
 80064f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80064f4:	0d1b      	lsrs	r3, r3, #20
 80064f6:	051b      	lsls	r3, r3, #20
 80064f8:	b12b      	cbz	r3, 8006506 <_dtoa_r+0x7de>
 80064fa:	9b08      	ldr	r3, [sp, #32]
 80064fc:	3301      	adds	r3, #1
 80064fe:	9308      	str	r3, [sp, #32]
 8006500:	f108 0801 	add.w	r8, r8, #1
 8006504:	2301      	movs	r3, #1
 8006506:	930a      	str	r3, [sp, #40]	@ 0x28
 8006508:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800650a:	2b00      	cmp	r3, #0
 800650c:	f000 81b0 	beq.w	8006870 <_dtoa_r+0xb48>
 8006510:	6923      	ldr	r3, [r4, #16]
 8006512:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006516:	6918      	ldr	r0, [r3, #16]
 8006518:	f000 fbbc 	bl	8006c94 <__hi0bits>
 800651c:	f1c0 0020 	rsb	r0, r0, #32
 8006520:	9b08      	ldr	r3, [sp, #32]
 8006522:	4418      	add	r0, r3
 8006524:	f010 001f 	ands.w	r0, r0, #31
 8006528:	d077      	beq.n	800661a <_dtoa_r+0x8f2>
 800652a:	f1c0 0320 	rsb	r3, r0, #32
 800652e:	2b04      	cmp	r3, #4
 8006530:	dd6b      	ble.n	800660a <_dtoa_r+0x8e2>
 8006532:	9b08      	ldr	r3, [sp, #32]
 8006534:	f1c0 001c 	rsb	r0, r0, #28
 8006538:	4403      	add	r3, r0
 800653a:	4480      	add	r8, r0
 800653c:	4406      	add	r6, r0
 800653e:	9308      	str	r3, [sp, #32]
 8006540:	f1b8 0f00 	cmp.w	r8, #0
 8006544:	dd05      	ble.n	8006552 <_dtoa_r+0x82a>
 8006546:	4649      	mov	r1, r9
 8006548:	4642      	mov	r2, r8
 800654a:	4658      	mov	r0, fp
 800654c:	f000 fd08 	bl	8006f60 <__lshift>
 8006550:	4681      	mov	r9, r0
 8006552:	9b08      	ldr	r3, [sp, #32]
 8006554:	2b00      	cmp	r3, #0
 8006556:	dd05      	ble.n	8006564 <_dtoa_r+0x83c>
 8006558:	4621      	mov	r1, r4
 800655a:	461a      	mov	r2, r3
 800655c:	4658      	mov	r0, fp
 800655e:	f000 fcff 	bl	8006f60 <__lshift>
 8006562:	4604      	mov	r4, r0
 8006564:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006566:	2b00      	cmp	r3, #0
 8006568:	d059      	beq.n	800661e <_dtoa_r+0x8f6>
 800656a:	4621      	mov	r1, r4
 800656c:	4648      	mov	r0, r9
 800656e:	f000 fd63 	bl	8007038 <__mcmp>
 8006572:	2800      	cmp	r0, #0
 8006574:	da53      	bge.n	800661e <_dtoa_r+0x8f6>
 8006576:	1e7b      	subs	r3, r7, #1
 8006578:	9304      	str	r3, [sp, #16]
 800657a:	4649      	mov	r1, r9
 800657c:	2300      	movs	r3, #0
 800657e:	220a      	movs	r2, #10
 8006580:	4658      	mov	r0, fp
 8006582:	f000 faf7 	bl	8006b74 <__multadd>
 8006586:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006588:	4681      	mov	r9, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	f000 8172 	beq.w	8006874 <_dtoa_r+0xb4c>
 8006590:	2300      	movs	r3, #0
 8006592:	4629      	mov	r1, r5
 8006594:	220a      	movs	r2, #10
 8006596:	4658      	mov	r0, fp
 8006598:	f000 faec 	bl	8006b74 <__multadd>
 800659c:	9b00      	ldr	r3, [sp, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	4605      	mov	r5, r0
 80065a2:	dc67      	bgt.n	8006674 <_dtoa_r+0x94c>
 80065a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	dc41      	bgt.n	800662e <_dtoa_r+0x906>
 80065aa:	e063      	b.n	8006674 <_dtoa_r+0x94c>
 80065ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80065ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80065b2:	e746      	b.n	8006442 <_dtoa_r+0x71a>
 80065b4:	9b07      	ldr	r3, [sp, #28]
 80065b6:	1e5c      	subs	r4, r3, #1
 80065b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065ba:	42a3      	cmp	r3, r4
 80065bc:	bfbf      	itttt	lt
 80065be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80065c0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80065c2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80065c4:	1ae3      	sublt	r3, r4, r3
 80065c6:	bfb4      	ite	lt
 80065c8:	18d2      	addlt	r2, r2, r3
 80065ca:	1b1c      	subge	r4, r3, r4
 80065cc:	9b07      	ldr	r3, [sp, #28]
 80065ce:	bfbc      	itt	lt
 80065d0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80065d2:	2400      	movlt	r4, #0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	bfb5      	itete	lt
 80065d8:	eba8 0603 	sublt.w	r6, r8, r3
 80065dc:	9b07      	ldrge	r3, [sp, #28]
 80065de:	2300      	movlt	r3, #0
 80065e0:	4646      	movge	r6, r8
 80065e2:	e730      	b.n	8006446 <_dtoa_r+0x71e>
 80065e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80065e6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80065e8:	4646      	mov	r6, r8
 80065ea:	e735      	b.n	8006458 <_dtoa_r+0x730>
 80065ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80065ee:	e75c      	b.n	80064aa <_dtoa_r+0x782>
 80065f0:	2300      	movs	r3, #0
 80065f2:	e788      	b.n	8006506 <_dtoa_r+0x7de>
 80065f4:	3fe00000 	.word	0x3fe00000
 80065f8:	40240000 	.word	0x40240000
 80065fc:	40140000 	.word	0x40140000
 8006600:	9b02      	ldr	r3, [sp, #8]
 8006602:	e780      	b.n	8006506 <_dtoa_r+0x7de>
 8006604:	2300      	movs	r3, #0
 8006606:	930a      	str	r3, [sp, #40]	@ 0x28
 8006608:	e782      	b.n	8006510 <_dtoa_r+0x7e8>
 800660a:	d099      	beq.n	8006540 <_dtoa_r+0x818>
 800660c:	9a08      	ldr	r2, [sp, #32]
 800660e:	331c      	adds	r3, #28
 8006610:	441a      	add	r2, r3
 8006612:	4498      	add	r8, r3
 8006614:	441e      	add	r6, r3
 8006616:	9208      	str	r2, [sp, #32]
 8006618:	e792      	b.n	8006540 <_dtoa_r+0x818>
 800661a:	4603      	mov	r3, r0
 800661c:	e7f6      	b.n	800660c <_dtoa_r+0x8e4>
 800661e:	9b07      	ldr	r3, [sp, #28]
 8006620:	9704      	str	r7, [sp, #16]
 8006622:	2b00      	cmp	r3, #0
 8006624:	dc20      	bgt.n	8006668 <_dtoa_r+0x940>
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800662a:	2b02      	cmp	r3, #2
 800662c:	dd1e      	ble.n	800666c <_dtoa_r+0x944>
 800662e:	9b00      	ldr	r3, [sp, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	f47f aec0 	bne.w	80063b6 <_dtoa_r+0x68e>
 8006636:	4621      	mov	r1, r4
 8006638:	2205      	movs	r2, #5
 800663a:	4658      	mov	r0, fp
 800663c:	f000 fa9a 	bl	8006b74 <__multadd>
 8006640:	4601      	mov	r1, r0
 8006642:	4604      	mov	r4, r0
 8006644:	4648      	mov	r0, r9
 8006646:	f000 fcf7 	bl	8007038 <__mcmp>
 800664a:	2800      	cmp	r0, #0
 800664c:	f77f aeb3 	ble.w	80063b6 <_dtoa_r+0x68e>
 8006650:	4656      	mov	r6, sl
 8006652:	2331      	movs	r3, #49	@ 0x31
 8006654:	f806 3b01 	strb.w	r3, [r6], #1
 8006658:	9b04      	ldr	r3, [sp, #16]
 800665a:	3301      	adds	r3, #1
 800665c:	9304      	str	r3, [sp, #16]
 800665e:	e6ae      	b.n	80063be <_dtoa_r+0x696>
 8006660:	9c07      	ldr	r4, [sp, #28]
 8006662:	9704      	str	r7, [sp, #16]
 8006664:	4625      	mov	r5, r4
 8006666:	e7f3      	b.n	8006650 <_dtoa_r+0x928>
 8006668:	9b07      	ldr	r3, [sp, #28]
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800666e:	2b00      	cmp	r3, #0
 8006670:	f000 8104 	beq.w	800687c <_dtoa_r+0xb54>
 8006674:	2e00      	cmp	r6, #0
 8006676:	dd05      	ble.n	8006684 <_dtoa_r+0x95c>
 8006678:	4629      	mov	r1, r5
 800667a:	4632      	mov	r2, r6
 800667c:	4658      	mov	r0, fp
 800667e:	f000 fc6f 	bl	8006f60 <__lshift>
 8006682:	4605      	mov	r5, r0
 8006684:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006686:	2b00      	cmp	r3, #0
 8006688:	d05a      	beq.n	8006740 <_dtoa_r+0xa18>
 800668a:	6869      	ldr	r1, [r5, #4]
 800668c:	4658      	mov	r0, fp
 800668e:	f000 fa0f 	bl	8006ab0 <_Balloc>
 8006692:	4606      	mov	r6, r0
 8006694:	b928      	cbnz	r0, 80066a2 <_dtoa_r+0x97a>
 8006696:	4b84      	ldr	r3, [pc, #528]	@ (80068a8 <_dtoa_r+0xb80>)
 8006698:	4602      	mov	r2, r0
 800669a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800669e:	f7ff bb5a 	b.w	8005d56 <_dtoa_r+0x2e>
 80066a2:	692a      	ldr	r2, [r5, #16]
 80066a4:	3202      	adds	r2, #2
 80066a6:	0092      	lsls	r2, r2, #2
 80066a8:	f105 010c 	add.w	r1, r5, #12
 80066ac:	300c      	adds	r0, #12
 80066ae:	f7ff fa9e 	bl	8005bee <memcpy>
 80066b2:	2201      	movs	r2, #1
 80066b4:	4631      	mov	r1, r6
 80066b6:	4658      	mov	r0, fp
 80066b8:	f000 fc52 	bl	8006f60 <__lshift>
 80066bc:	f10a 0301 	add.w	r3, sl, #1
 80066c0:	9307      	str	r3, [sp, #28]
 80066c2:	9b00      	ldr	r3, [sp, #0]
 80066c4:	4453      	add	r3, sl
 80066c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066c8:	9b02      	ldr	r3, [sp, #8]
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	462f      	mov	r7, r5
 80066d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80066d2:	4605      	mov	r5, r0
 80066d4:	9b07      	ldr	r3, [sp, #28]
 80066d6:	4621      	mov	r1, r4
 80066d8:	3b01      	subs	r3, #1
 80066da:	4648      	mov	r0, r9
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	f7ff fa9b 	bl	8005c18 <quorem>
 80066e2:	4639      	mov	r1, r7
 80066e4:	9002      	str	r0, [sp, #8]
 80066e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80066ea:	4648      	mov	r0, r9
 80066ec:	f000 fca4 	bl	8007038 <__mcmp>
 80066f0:	462a      	mov	r2, r5
 80066f2:	9008      	str	r0, [sp, #32]
 80066f4:	4621      	mov	r1, r4
 80066f6:	4658      	mov	r0, fp
 80066f8:	f000 fcba 	bl	8007070 <__mdiff>
 80066fc:	68c2      	ldr	r2, [r0, #12]
 80066fe:	4606      	mov	r6, r0
 8006700:	bb02      	cbnz	r2, 8006744 <_dtoa_r+0xa1c>
 8006702:	4601      	mov	r1, r0
 8006704:	4648      	mov	r0, r9
 8006706:	f000 fc97 	bl	8007038 <__mcmp>
 800670a:	4602      	mov	r2, r0
 800670c:	4631      	mov	r1, r6
 800670e:	4658      	mov	r0, fp
 8006710:	920e      	str	r2, [sp, #56]	@ 0x38
 8006712:	f000 fa0d 	bl	8006b30 <_Bfree>
 8006716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006718:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800671a:	9e07      	ldr	r6, [sp, #28]
 800671c:	ea43 0102 	orr.w	r1, r3, r2
 8006720:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006722:	4319      	orrs	r1, r3
 8006724:	d110      	bne.n	8006748 <_dtoa_r+0xa20>
 8006726:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800672a:	d029      	beq.n	8006780 <_dtoa_r+0xa58>
 800672c:	9b08      	ldr	r3, [sp, #32]
 800672e:	2b00      	cmp	r3, #0
 8006730:	dd02      	ble.n	8006738 <_dtoa_r+0xa10>
 8006732:	9b02      	ldr	r3, [sp, #8]
 8006734:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006738:	9b00      	ldr	r3, [sp, #0]
 800673a:	f883 8000 	strb.w	r8, [r3]
 800673e:	e63f      	b.n	80063c0 <_dtoa_r+0x698>
 8006740:	4628      	mov	r0, r5
 8006742:	e7bb      	b.n	80066bc <_dtoa_r+0x994>
 8006744:	2201      	movs	r2, #1
 8006746:	e7e1      	b.n	800670c <_dtoa_r+0x9e4>
 8006748:	9b08      	ldr	r3, [sp, #32]
 800674a:	2b00      	cmp	r3, #0
 800674c:	db04      	blt.n	8006758 <_dtoa_r+0xa30>
 800674e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006750:	430b      	orrs	r3, r1
 8006752:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006754:	430b      	orrs	r3, r1
 8006756:	d120      	bne.n	800679a <_dtoa_r+0xa72>
 8006758:	2a00      	cmp	r2, #0
 800675a:	dded      	ble.n	8006738 <_dtoa_r+0xa10>
 800675c:	4649      	mov	r1, r9
 800675e:	2201      	movs	r2, #1
 8006760:	4658      	mov	r0, fp
 8006762:	f000 fbfd 	bl	8006f60 <__lshift>
 8006766:	4621      	mov	r1, r4
 8006768:	4681      	mov	r9, r0
 800676a:	f000 fc65 	bl	8007038 <__mcmp>
 800676e:	2800      	cmp	r0, #0
 8006770:	dc03      	bgt.n	800677a <_dtoa_r+0xa52>
 8006772:	d1e1      	bne.n	8006738 <_dtoa_r+0xa10>
 8006774:	f018 0f01 	tst.w	r8, #1
 8006778:	d0de      	beq.n	8006738 <_dtoa_r+0xa10>
 800677a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800677e:	d1d8      	bne.n	8006732 <_dtoa_r+0xa0a>
 8006780:	9a00      	ldr	r2, [sp, #0]
 8006782:	2339      	movs	r3, #57	@ 0x39
 8006784:	7013      	strb	r3, [r2, #0]
 8006786:	4633      	mov	r3, r6
 8006788:	461e      	mov	r6, r3
 800678a:	3b01      	subs	r3, #1
 800678c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006790:	2a39      	cmp	r2, #57	@ 0x39
 8006792:	d052      	beq.n	800683a <_dtoa_r+0xb12>
 8006794:	3201      	adds	r2, #1
 8006796:	701a      	strb	r2, [r3, #0]
 8006798:	e612      	b.n	80063c0 <_dtoa_r+0x698>
 800679a:	2a00      	cmp	r2, #0
 800679c:	dd07      	ble.n	80067ae <_dtoa_r+0xa86>
 800679e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80067a2:	d0ed      	beq.n	8006780 <_dtoa_r+0xa58>
 80067a4:	9a00      	ldr	r2, [sp, #0]
 80067a6:	f108 0301 	add.w	r3, r8, #1
 80067aa:	7013      	strb	r3, [r2, #0]
 80067ac:	e608      	b.n	80063c0 <_dtoa_r+0x698>
 80067ae:	9b07      	ldr	r3, [sp, #28]
 80067b0:	9a07      	ldr	r2, [sp, #28]
 80067b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80067b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d028      	beq.n	800680e <_dtoa_r+0xae6>
 80067bc:	4649      	mov	r1, r9
 80067be:	2300      	movs	r3, #0
 80067c0:	220a      	movs	r2, #10
 80067c2:	4658      	mov	r0, fp
 80067c4:	f000 f9d6 	bl	8006b74 <__multadd>
 80067c8:	42af      	cmp	r7, r5
 80067ca:	4681      	mov	r9, r0
 80067cc:	f04f 0300 	mov.w	r3, #0
 80067d0:	f04f 020a 	mov.w	r2, #10
 80067d4:	4639      	mov	r1, r7
 80067d6:	4658      	mov	r0, fp
 80067d8:	d107      	bne.n	80067ea <_dtoa_r+0xac2>
 80067da:	f000 f9cb 	bl	8006b74 <__multadd>
 80067de:	4607      	mov	r7, r0
 80067e0:	4605      	mov	r5, r0
 80067e2:	9b07      	ldr	r3, [sp, #28]
 80067e4:	3301      	adds	r3, #1
 80067e6:	9307      	str	r3, [sp, #28]
 80067e8:	e774      	b.n	80066d4 <_dtoa_r+0x9ac>
 80067ea:	f000 f9c3 	bl	8006b74 <__multadd>
 80067ee:	4629      	mov	r1, r5
 80067f0:	4607      	mov	r7, r0
 80067f2:	2300      	movs	r3, #0
 80067f4:	220a      	movs	r2, #10
 80067f6:	4658      	mov	r0, fp
 80067f8:	f000 f9bc 	bl	8006b74 <__multadd>
 80067fc:	4605      	mov	r5, r0
 80067fe:	e7f0      	b.n	80067e2 <_dtoa_r+0xaba>
 8006800:	9b00      	ldr	r3, [sp, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	bfcc      	ite	gt
 8006806:	461e      	movgt	r6, r3
 8006808:	2601      	movle	r6, #1
 800680a:	4456      	add	r6, sl
 800680c:	2700      	movs	r7, #0
 800680e:	4649      	mov	r1, r9
 8006810:	2201      	movs	r2, #1
 8006812:	4658      	mov	r0, fp
 8006814:	f000 fba4 	bl	8006f60 <__lshift>
 8006818:	4621      	mov	r1, r4
 800681a:	4681      	mov	r9, r0
 800681c:	f000 fc0c 	bl	8007038 <__mcmp>
 8006820:	2800      	cmp	r0, #0
 8006822:	dcb0      	bgt.n	8006786 <_dtoa_r+0xa5e>
 8006824:	d102      	bne.n	800682c <_dtoa_r+0xb04>
 8006826:	f018 0f01 	tst.w	r8, #1
 800682a:	d1ac      	bne.n	8006786 <_dtoa_r+0xa5e>
 800682c:	4633      	mov	r3, r6
 800682e:	461e      	mov	r6, r3
 8006830:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006834:	2a30      	cmp	r2, #48	@ 0x30
 8006836:	d0fa      	beq.n	800682e <_dtoa_r+0xb06>
 8006838:	e5c2      	b.n	80063c0 <_dtoa_r+0x698>
 800683a:	459a      	cmp	sl, r3
 800683c:	d1a4      	bne.n	8006788 <_dtoa_r+0xa60>
 800683e:	9b04      	ldr	r3, [sp, #16]
 8006840:	3301      	adds	r3, #1
 8006842:	9304      	str	r3, [sp, #16]
 8006844:	2331      	movs	r3, #49	@ 0x31
 8006846:	f88a 3000 	strb.w	r3, [sl]
 800684a:	e5b9      	b.n	80063c0 <_dtoa_r+0x698>
 800684c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800684e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80068ac <_dtoa_r+0xb84>
 8006852:	b11b      	cbz	r3, 800685c <_dtoa_r+0xb34>
 8006854:	f10a 0308 	add.w	r3, sl, #8
 8006858:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800685a:	6013      	str	r3, [r2, #0]
 800685c:	4650      	mov	r0, sl
 800685e:	b019      	add	sp, #100	@ 0x64
 8006860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006864:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006866:	2b01      	cmp	r3, #1
 8006868:	f77f ae37 	ble.w	80064da <_dtoa_r+0x7b2>
 800686c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800686e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006870:	2001      	movs	r0, #1
 8006872:	e655      	b.n	8006520 <_dtoa_r+0x7f8>
 8006874:	9b00      	ldr	r3, [sp, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	f77f aed6 	ble.w	8006628 <_dtoa_r+0x900>
 800687c:	4656      	mov	r6, sl
 800687e:	4621      	mov	r1, r4
 8006880:	4648      	mov	r0, r9
 8006882:	f7ff f9c9 	bl	8005c18 <quorem>
 8006886:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800688a:	f806 8b01 	strb.w	r8, [r6], #1
 800688e:	9b00      	ldr	r3, [sp, #0]
 8006890:	eba6 020a 	sub.w	r2, r6, sl
 8006894:	4293      	cmp	r3, r2
 8006896:	ddb3      	ble.n	8006800 <_dtoa_r+0xad8>
 8006898:	4649      	mov	r1, r9
 800689a:	2300      	movs	r3, #0
 800689c:	220a      	movs	r2, #10
 800689e:	4658      	mov	r0, fp
 80068a0:	f000 f968 	bl	8006b74 <__multadd>
 80068a4:	4681      	mov	r9, r0
 80068a6:	e7ea      	b.n	800687e <_dtoa_r+0xb56>
 80068a8:	0800cb21 	.word	0x0800cb21
 80068ac:	0800caa5 	.word	0x0800caa5

080068b0 <_free_r>:
 80068b0:	b538      	push	{r3, r4, r5, lr}
 80068b2:	4605      	mov	r5, r0
 80068b4:	2900      	cmp	r1, #0
 80068b6:	d041      	beq.n	800693c <_free_r+0x8c>
 80068b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068bc:	1f0c      	subs	r4, r1, #4
 80068be:	2b00      	cmp	r3, #0
 80068c0:	bfb8      	it	lt
 80068c2:	18e4      	addlt	r4, r4, r3
 80068c4:	f000 f8e8 	bl	8006a98 <__malloc_lock>
 80068c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006940 <_free_r+0x90>)
 80068ca:	6813      	ldr	r3, [r2, #0]
 80068cc:	b933      	cbnz	r3, 80068dc <_free_r+0x2c>
 80068ce:	6063      	str	r3, [r4, #4]
 80068d0:	6014      	str	r4, [r2, #0]
 80068d2:	4628      	mov	r0, r5
 80068d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068d8:	f000 b8e4 	b.w	8006aa4 <__malloc_unlock>
 80068dc:	42a3      	cmp	r3, r4
 80068de:	d908      	bls.n	80068f2 <_free_r+0x42>
 80068e0:	6820      	ldr	r0, [r4, #0]
 80068e2:	1821      	adds	r1, r4, r0
 80068e4:	428b      	cmp	r3, r1
 80068e6:	bf01      	itttt	eq
 80068e8:	6819      	ldreq	r1, [r3, #0]
 80068ea:	685b      	ldreq	r3, [r3, #4]
 80068ec:	1809      	addeq	r1, r1, r0
 80068ee:	6021      	streq	r1, [r4, #0]
 80068f0:	e7ed      	b.n	80068ce <_free_r+0x1e>
 80068f2:	461a      	mov	r2, r3
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	b10b      	cbz	r3, 80068fc <_free_r+0x4c>
 80068f8:	42a3      	cmp	r3, r4
 80068fa:	d9fa      	bls.n	80068f2 <_free_r+0x42>
 80068fc:	6811      	ldr	r1, [r2, #0]
 80068fe:	1850      	adds	r0, r2, r1
 8006900:	42a0      	cmp	r0, r4
 8006902:	d10b      	bne.n	800691c <_free_r+0x6c>
 8006904:	6820      	ldr	r0, [r4, #0]
 8006906:	4401      	add	r1, r0
 8006908:	1850      	adds	r0, r2, r1
 800690a:	4283      	cmp	r3, r0
 800690c:	6011      	str	r1, [r2, #0]
 800690e:	d1e0      	bne.n	80068d2 <_free_r+0x22>
 8006910:	6818      	ldr	r0, [r3, #0]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	6053      	str	r3, [r2, #4]
 8006916:	4408      	add	r0, r1
 8006918:	6010      	str	r0, [r2, #0]
 800691a:	e7da      	b.n	80068d2 <_free_r+0x22>
 800691c:	d902      	bls.n	8006924 <_free_r+0x74>
 800691e:	230c      	movs	r3, #12
 8006920:	602b      	str	r3, [r5, #0]
 8006922:	e7d6      	b.n	80068d2 <_free_r+0x22>
 8006924:	6820      	ldr	r0, [r4, #0]
 8006926:	1821      	adds	r1, r4, r0
 8006928:	428b      	cmp	r3, r1
 800692a:	bf04      	itt	eq
 800692c:	6819      	ldreq	r1, [r3, #0]
 800692e:	685b      	ldreq	r3, [r3, #4]
 8006930:	6063      	str	r3, [r4, #4]
 8006932:	bf04      	itt	eq
 8006934:	1809      	addeq	r1, r1, r0
 8006936:	6021      	streq	r1, [r4, #0]
 8006938:	6054      	str	r4, [r2, #4]
 800693a:	e7ca      	b.n	80068d2 <_free_r+0x22>
 800693c:	bd38      	pop	{r3, r4, r5, pc}
 800693e:	bf00      	nop
 8006940:	20000894 	.word	0x20000894

08006944 <malloc>:
 8006944:	4b02      	ldr	r3, [pc, #8]	@ (8006950 <malloc+0xc>)
 8006946:	4601      	mov	r1, r0
 8006948:	6818      	ldr	r0, [r3, #0]
 800694a:	f000 b825 	b.w	8006998 <_malloc_r>
 800694e:	bf00      	nop
 8006950:	20000078 	.word	0x20000078

08006954 <sbrk_aligned>:
 8006954:	b570      	push	{r4, r5, r6, lr}
 8006956:	4e0f      	ldr	r6, [pc, #60]	@ (8006994 <sbrk_aligned+0x40>)
 8006958:	460c      	mov	r4, r1
 800695a:	6831      	ldr	r1, [r6, #0]
 800695c:	4605      	mov	r5, r0
 800695e:	b911      	cbnz	r1, 8006966 <sbrk_aligned+0x12>
 8006960:	f001 fdf2 	bl	8008548 <_sbrk_r>
 8006964:	6030      	str	r0, [r6, #0]
 8006966:	4621      	mov	r1, r4
 8006968:	4628      	mov	r0, r5
 800696a:	f001 fded 	bl	8008548 <_sbrk_r>
 800696e:	1c43      	adds	r3, r0, #1
 8006970:	d103      	bne.n	800697a <sbrk_aligned+0x26>
 8006972:	f04f 34ff 	mov.w	r4, #4294967295
 8006976:	4620      	mov	r0, r4
 8006978:	bd70      	pop	{r4, r5, r6, pc}
 800697a:	1cc4      	adds	r4, r0, #3
 800697c:	f024 0403 	bic.w	r4, r4, #3
 8006980:	42a0      	cmp	r0, r4
 8006982:	d0f8      	beq.n	8006976 <sbrk_aligned+0x22>
 8006984:	1a21      	subs	r1, r4, r0
 8006986:	4628      	mov	r0, r5
 8006988:	f001 fdde 	bl	8008548 <_sbrk_r>
 800698c:	3001      	adds	r0, #1
 800698e:	d1f2      	bne.n	8006976 <sbrk_aligned+0x22>
 8006990:	e7ef      	b.n	8006972 <sbrk_aligned+0x1e>
 8006992:	bf00      	nop
 8006994:	20000890 	.word	0x20000890

08006998 <_malloc_r>:
 8006998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800699c:	1ccd      	adds	r5, r1, #3
 800699e:	f025 0503 	bic.w	r5, r5, #3
 80069a2:	3508      	adds	r5, #8
 80069a4:	2d0c      	cmp	r5, #12
 80069a6:	bf38      	it	cc
 80069a8:	250c      	movcc	r5, #12
 80069aa:	2d00      	cmp	r5, #0
 80069ac:	4606      	mov	r6, r0
 80069ae:	db01      	blt.n	80069b4 <_malloc_r+0x1c>
 80069b0:	42a9      	cmp	r1, r5
 80069b2:	d904      	bls.n	80069be <_malloc_r+0x26>
 80069b4:	230c      	movs	r3, #12
 80069b6:	6033      	str	r3, [r6, #0]
 80069b8:	2000      	movs	r0, #0
 80069ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006a94 <_malloc_r+0xfc>
 80069c2:	f000 f869 	bl	8006a98 <__malloc_lock>
 80069c6:	f8d8 3000 	ldr.w	r3, [r8]
 80069ca:	461c      	mov	r4, r3
 80069cc:	bb44      	cbnz	r4, 8006a20 <_malloc_r+0x88>
 80069ce:	4629      	mov	r1, r5
 80069d0:	4630      	mov	r0, r6
 80069d2:	f7ff ffbf 	bl	8006954 <sbrk_aligned>
 80069d6:	1c43      	adds	r3, r0, #1
 80069d8:	4604      	mov	r4, r0
 80069da:	d158      	bne.n	8006a8e <_malloc_r+0xf6>
 80069dc:	f8d8 4000 	ldr.w	r4, [r8]
 80069e0:	4627      	mov	r7, r4
 80069e2:	2f00      	cmp	r7, #0
 80069e4:	d143      	bne.n	8006a6e <_malloc_r+0xd6>
 80069e6:	2c00      	cmp	r4, #0
 80069e8:	d04b      	beq.n	8006a82 <_malloc_r+0xea>
 80069ea:	6823      	ldr	r3, [r4, #0]
 80069ec:	4639      	mov	r1, r7
 80069ee:	4630      	mov	r0, r6
 80069f0:	eb04 0903 	add.w	r9, r4, r3
 80069f4:	f001 fda8 	bl	8008548 <_sbrk_r>
 80069f8:	4581      	cmp	r9, r0
 80069fa:	d142      	bne.n	8006a82 <_malloc_r+0xea>
 80069fc:	6821      	ldr	r1, [r4, #0]
 80069fe:	1a6d      	subs	r5, r5, r1
 8006a00:	4629      	mov	r1, r5
 8006a02:	4630      	mov	r0, r6
 8006a04:	f7ff ffa6 	bl	8006954 <sbrk_aligned>
 8006a08:	3001      	adds	r0, #1
 8006a0a:	d03a      	beq.n	8006a82 <_malloc_r+0xea>
 8006a0c:	6823      	ldr	r3, [r4, #0]
 8006a0e:	442b      	add	r3, r5
 8006a10:	6023      	str	r3, [r4, #0]
 8006a12:	f8d8 3000 	ldr.w	r3, [r8]
 8006a16:	685a      	ldr	r2, [r3, #4]
 8006a18:	bb62      	cbnz	r2, 8006a74 <_malloc_r+0xdc>
 8006a1a:	f8c8 7000 	str.w	r7, [r8]
 8006a1e:	e00f      	b.n	8006a40 <_malloc_r+0xa8>
 8006a20:	6822      	ldr	r2, [r4, #0]
 8006a22:	1b52      	subs	r2, r2, r5
 8006a24:	d420      	bmi.n	8006a68 <_malloc_r+0xd0>
 8006a26:	2a0b      	cmp	r2, #11
 8006a28:	d917      	bls.n	8006a5a <_malloc_r+0xc2>
 8006a2a:	1961      	adds	r1, r4, r5
 8006a2c:	42a3      	cmp	r3, r4
 8006a2e:	6025      	str	r5, [r4, #0]
 8006a30:	bf18      	it	ne
 8006a32:	6059      	strne	r1, [r3, #4]
 8006a34:	6863      	ldr	r3, [r4, #4]
 8006a36:	bf08      	it	eq
 8006a38:	f8c8 1000 	streq.w	r1, [r8]
 8006a3c:	5162      	str	r2, [r4, r5]
 8006a3e:	604b      	str	r3, [r1, #4]
 8006a40:	4630      	mov	r0, r6
 8006a42:	f000 f82f 	bl	8006aa4 <__malloc_unlock>
 8006a46:	f104 000b 	add.w	r0, r4, #11
 8006a4a:	1d23      	adds	r3, r4, #4
 8006a4c:	f020 0007 	bic.w	r0, r0, #7
 8006a50:	1ac2      	subs	r2, r0, r3
 8006a52:	bf1c      	itt	ne
 8006a54:	1a1b      	subne	r3, r3, r0
 8006a56:	50a3      	strne	r3, [r4, r2]
 8006a58:	e7af      	b.n	80069ba <_malloc_r+0x22>
 8006a5a:	6862      	ldr	r2, [r4, #4]
 8006a5c:	42a3      	cmp	r3, r4
 8006a5e:	bf0c      	ite	eq
 8006a60:	f8c8 2000 	streq.w	r2, [r8]
 8006a64:	605a      	strne	r2, [r3, #4]
 8006a66:	e7eb      	b.n	8006a40 <_malloc_r+0xa8>
 8006a68:	4623      	mov	r3, r4
 8006a6a:	6864      	ldr	r4, [r4, #4]
 8006a6c:	e7ae      	b.n	80069cc <_malloc_r+0x34>
 8006a6e:	463c      	mov	r4, r7
 8006a70:	687f      	ldr	r7, [r7, #4]
 8006a72:	e7b6      	b.n	80069e2 <_malloc_r+0x4a>
 8006a74:	461a      	mov	r2, r3
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	42a3      	cmp	r3, r4
 8006a7a:	d1fb      	bne.n	8006a74 <_malloc_r+0xdc>
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	6053      	str	r3, [r2, #4]
 8006a80:	e7de      	b.n	8006a40 <_malloc_r+0xa8>
 8006a82:	230c      	movs	r3, #12
 8006a84:	6033      	str	r3, [r6, #0]
 8006a86:	4630      	mov	r0, r6
 8006a88:	f000 f80c 	bl	8006aa4 <__malloc_unlock>
 8006a8c:	e794      	b.n	80069b8 <_malloc_r+0x20>
 8006a8e:	6005      	str	r5, [r0, #0]
 8006a90:	e7d6      	b.n	8006a40 <_malloc_r+0xa8>
 8006a92:	bf00      	nop
 8006a94:	20000894 	.word	0x20000894

08006a98 <__malloc_lock>:
 8006a98:	4801      	ldr	r0, [pc, #4]	@ (8006aa0 <__malloc_lock+0x8>)
 8006a9a:	f7ff b8a6 	b.w	8005bea <__retarget_lock_acquire_recursive>
 8006a9e:	bf00      	nop
 8006aa0:	2000088c 	.word	0x2000088c

08006aa4 <__malloc_unlock>:
 8006aa4:	4801      	ldr	r0, [pc, #4]	@ (8006aac <__malloc_unlock+0x8>)
 8006aa6:	f7ff b8a1 	b.w	8005bec <__retarget_lock_release_recursive>
 8006aaa:	bf00      	nop
 8006aac:	2000088c 	.word	0x2000088c

08006ab0 <_Balloc>:
 8006ab0:	b570      	push	{r4, r5, r6, lr}
 8006ab2:	69c6      	ldr	r6, [r0, #28]
 8006ab4:	4604      	mov	r4, r0
 8006ab6:	460d      	mov	r5, r1
 8006ab8:	b976      	cbnz	r6, 8006ad8 <_Balloc+0x28>
 8006aba:	2010      	movs	r0, #16
 8006abc:	f7ff ff42 	bl	8006944 <malloc>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	61e0      	str	r0, [r4, #28]
 8006ac4:	b920      	cbnz	r0, 8006ad0 <_Balloc+0x20>
 8006ac6:	4b18      	ldr	r3, [pc, #96]	@ (8006b28 <_Balloc+0x78>)
 8006ac8:	4818      	ldr	r0, [pc, #96]	@ (8006b2c <_Balloc+0x7c>)
 8006aca:	216b      	movs	r1, #107	@ 0x6b
 8006acc:	f001 fd54 	bl	8008578 <__assert_func>
 8006ad0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ad4:	6006      	str	r6, [r0, #0]
 8006ad6:	60c6      	str	r6, [r0, #12]
 8006ad8:	69e6      	ldr	r6, [r4, #28]
 8006ada:	68f3      	ldr	r3, [r6, #12]
 8006adc:	b183      	cbz	r3, 8006b00 <_Balloc+0x50>
 8006ade:	69e3      	ldr	r3, [r4, #28]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006ae6:	b9b8      	cbnz	r0, 8006b18 <_Balloc+0x68>
 8006ae8:	2101      	movs	r1, #1
 8006aea:	fa01 f605 	lsl.w	r6, r1, r5
 8006aee:	1d72      	adds	r2, r6, #5
 8006af0:	0092      	lsls	r2, r2, #2
 8006af2:	4620      	mov	r0, r4
 8006af4:	f001 fd5e 	bl	80085b4 <_calloc_r>
 8006af8:	b160      	cbz	r0, 8006b14 <_Balloc+0x64>
 8006afa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006afe:	e00e      	b.n	8006b1e <_Balloc+0x6e>
 8006b00:	2221      	movs	r2, #33	@ 0x21
 8006b02:	2104      	movs	r1, #4
 8006b04:	4620      	mov	r0, r4
 8006b06:	f001 fd55 	bl	80085b4 <_calloc_r>
 8006b0a:	69e3      	ldr	r3, [r4, #28]
 8006b0c:	60f0      	str	r0, [r6, #12]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1e4      	bne.n	8006ade <_Balloc+0x2e>
 8006b14:	2000      	movs	r0, #0
 8006b16:	bd70      	pop	{r4, r5, r6, pc}
 8006b18:	6802      	ldr	r2, [r0, #0]
 8006b1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006b1e:	2300      	movs	r3, #0
 8006b20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b24:	e7f7      	b.n	8006b16 <_Balloc+0x66>
 8006b26:	bf00      	nop
 8006b28:	0800cab2 	.word	0x0800cab2
 8006b2c:	0800cb32 	.word	0x0800cb32

08006b30 <_Bfree>:
 8006b30:	b570      	push	{r4, r5, r6, lr}
 8006b32:	69c6      	ldr	r6, [r0, #28]
 8006b34:	4605      	mov	r5, r0
 8006b36:	460c      	mov	r4, r1
 8006b38:	b976      	cbnz	r6, 8006b58 <_Bfree+0x28>
 8006b3a:	2010      	movs	r0, #16
 8006b3c:	f7ff ff02 	bl	8006944 <malloc>
 8006b40:	4602      	mov	r2, r0
 8006b42:	61e8      	str	r0, [r5, #28]
 8006b44:	b920      	cbnz	r0, 8006b50 <_Bfree+0x20>
 8006b46:	4b09      	ldr	r3, [pc, #36]	@ (8006b6c <_Bfree+0x3c>)
 8006b48:	4809      	ldr	r0, [pc, #36]	@ (8006b70 <_Bfree+0x40>)
 8006b4a:	218f      	movs	r1, #143	@ 0x8f
 8006b4c:	f001 fd14 	bl	8008578 <__assert_func>
 8006b50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b54:	6006      	str	r6, [r0, #0]
 8006b56:	60c6      	str	r6, [r0, #12]
 8006b58:	b13c      	cbz	r4, 8006b6a <_Bfree+0x3a>
 8006b5a:	69eb      	ldr	r3, [r5, #28]
 8006b5c:	6862      	ldr	r2, [r4, #4]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b64:	6021      	str	r1, [r4, #0]
 8006b66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b6a:	bd70      	pop	{r4, r5, r6, pc}
 8006b6c:	0800cab2 	.word	0x0800cab2
 8006b70:	0800cb32 	.word	0x0800cb32

08006b74 <__multadd>:
 8006b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b78:	690d      	ldr	r5, [r1, #16]
 8006b7a:	4607      	mov	r7, r0
 8006b7c:	460c      	mov	r4, r1
 8006b7e:	461e      	mov	r6, r3
 8006b80:	f101 0c14 	add.w	ip, r1, #20
 8006b84:	2000      	movs	r0, #0
 8006b86:	f8dc 3000 	ldr.w	r3, [ip]
 8006b8a:	b299      	uxth	r1, r3
 8006b8c:	fb02 6101 	mla	r1, r2, r1, r6
 8006b90:	0c1e      	lsrs	r6, r3, #16
 8006b92:	0c0b      	lsrs	r3, r1, #16
 8006b94:	fb02 3306 	mla	r3, r2, r6, r3
 8006b98:	b289      	uxth	r1, r1
 8006b9a:	3001      	adds	r0, #1
 8006b9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ba0:	4285      	cmp	r5, r0
 8006ba2:	f84c 1b04 	str.w	r1, [ip], #4
 8006ba6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006baa:	dcec      	bgt.n	8006b86 <__multadd+0x12>
 8006bac:	b30e      	cbz	r6, 8006bf2 <__multadd+0x7e>
 8006bae:	68a3      	ldr	r3, [r4, #8]
 8006bb0:	42ab      	cmp	r3, r5
 8006bb2:	dc19      	bgt.n	8006be8 <__multadd+0x74>
 8006bb4:	6861      	ldr	r1, [r4, #4]
 8006bb6:	4638      	mov	r0, r7
 8006bb8:	3101      	adds	r1, #1
 8006bba:	f7ff ff79 	bl	8006ab0 <_Balloc>
 8006bbe:	4680      	mov	r8, r0
 8006bc0:	b928      	cbnz	r0, 8006bce <__multadd+0x5a>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8006bf8 <__multadd+0x84>)
 8006bc6:	480d      	ldr	r0, [pc, #52]	@ (8006bfc <__multadd+0x88>)
 8006bc8:	21ba      	movs	r1, #186	@ 0xba
 8006bca:	f001 fcd5 	bl	8008578 <__assert_func>
 8006bce:	6922      	ldr	r2, [r4, #16]
 8006bd0:	3202      	adds	r2, #2
 8006bd2:	f104 010c 	add.w	r1, r4, #12
 8006bd6:	0092      	lsls	r2, r2, #2
 8006bd8:	300c      	adds	r0, #12
 8006bda:	f7ff f808 	bl	8005bee <memcpy>
 8006bde:	4621      	mov	r1, r4
 8006be0:	4638      	mov	r0, r7
 8006be2:	f7ff ffa5 	bl	8006b30 <_Bfree>
 8006be6:	4644      	mov	r4, r8
 8006be8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006bec:	3501      	adds	r5, #1
 8006bee:	615e      	str	r6, [r3, #20]
 8006bf0:	6125      	str	r5, [r4, #16]
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bf8:	0800cb21 	.word	0x0800cb21
 8006bfc:	0800cb32 	.word	0x0800cb32

08006c00 <__s2b>:
 8006c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c04:	460c      	mov	r4, r1
 8006c06:	4615      	mov	r5, r2
 8006c08:	461f      	mov	r7, r3
 8006c0a:	2209      	movs	r2, #9
 8006c0c:	3308      	adds	r3, #8
 8006c0e:	4606      	mov	r6, r0
 8006c10:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c14:	2100      	movs	r1, #0
 8006c16:	2201      	movs	r2, #1
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	db09      	blt.n	8006c30 <__s2b+0x30>
 8006c1c:	4630      	mov	r0, r6
 8006c1e:	f7ff ff47 	bl	8006ab0 <_Balloc>
 8006c22:	b940      	cbnz	r0, 8006c36 <__s2b+0x36>
 8006c24:	4602      	mov	r2, r0
 8006c26:	4b19      	ldr	r3, [pc, #100]	@ (8006c8c <__s2b+0x8c>)
 8006c28:	4819      	ldr	r0, [pc, #100]	@ (8006c90 <__s2b+0x90>)
 8006c2a:	21d3      	movs	r1, #211	@ 0xd3
 8006c2c:	f001 fca4 	bl	8008578 <__assert_func>
 8006c30:	0052      	lsls	r2, r2, #1
 8006c32:	3101      	adds	r1, #1
 8006c34:	e7f0      	b.n	8006c18 <__s2b+0x18>
 8006c36:	9b08      	ldr	r3, [sp, #32]
 8006c38:	6143      	str	r3, [r0, #20]
 8006c3a:	2d09      	cmp	r5, #9
 8006c3c:	f04f 0301 	mov.w	r3, #1
 8006c40:	6103      	str	r3, [r0, #16]
 8006c42:	dd16      	ble.n	8006c72 <__s2b+0x72>
 8006c44:	f104 0909 	add.w	r9, r4, #9
 8006c48:	46c8      	mov	r8, r9
 8006c4a:	442c      	add	r4, r5
 8006c4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006c50:	4601      	mov	r1, r0
 8006c52:	3b30      	subs	r3, #48	@ 0x30
 8006c54:	220a      	movs	r2, #10
 8006c56:	4630      	mov	r0, r6
 8006c58:	f7ff ff8c 	bl	8006b74 <__multadd>
 8006c5c:	45a0      	cmp	r8, r4
 8006c5e:	d1f5      	bne.n	8006c4c <__s2b+0x4c>
 8006c60:	f1a5 0408 	sub.w	r4, r5, #8
 8006c64:	444c      	add	r4, r9
 8006c66:	1b2d      	subs	r5, r5, r4
 8006c68:	1963      	adds	r3, r4, r5
 8006c6a:	42bb      	cmp	r3, r7
 8006c6c:	db04      	blt.n	8006c78 <__s2b+0x78>
 8006c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c72:	340a      	adds	r4, #10
 8006c74:	2509      	movs	r5, #9
 8006c76:	e7f6      	b.n	8006c66 <__s2b+0x66>
 8006c78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006c7c:	4601      	mov	r1, r0
 8006c7e:	3b30      	subs	r3, #48	@ 0x30
 8006c80:	220a      	movs	r2, #10
 8006c82:	4630      	mov	r0, r6
 8006c84:	f7ff ff76 	bl	8006b74 <__multadd>
 8006c88:	e7ee      	b.n	8006c68 <__s2b+0x68>
 8006c8a:	bf00      	nop
 8006c8c:	0800cb21 	.word	0x0800cb21
 8006c90:	0800cb32 	.word	0x0800cb32

08006c94 <__hi0bits>:
 8006c94:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006c98:	4603      	mov	r3, r0
 8006c9a:	bf36      	itet	cc
 8006c9c:	0403      	lslcc	r3, r0, #16
 8006c9e:	2000      	movcs	r0, #0
 8006ca0:	2010      	movcc	r0, #16
 8006ca2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ca6:	bf3c      	itt	cc
 8006ca8:	021b      	lslcc	r3, r3, #8
 8006caa:	3008      	addcc	r0, #8
 8006cac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cb0:	bf3c      	itt	cc
 8006cb2:	011b      	lslcc	r3, r3, #4
 8006cb4:	3004      	addcc	r0, #4
 8006cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cba:	bf3c      	itt	cc
 8006cbc:	009b      	lslcc	r3, r3, #2
 8006cbe:	3002      	addcc	r0, #2
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	db05      	blt.n	8006cd0 <__hi0bits+0x3c>
 8006cc4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006cc8:	f100 0001 	add.w	r0, r0, #1
 8006ccc:	bf08      	it	eq
 8006cce:	2020      	moveq	r0, #32
 8006cd0:	4770      	bx	lr

08006cd2 <__lo0bits>:
 8006cd2:	6803      	ldr	r3, [r0, #0]
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	f013 0007 	ands.w	r0, r3, #7
 8006cda:	d00b      	beq.n	8006cf4 <__lo0bits+0x22>
 8006cdc:	07d9      	lsls	r1, r3, #31
 8006cde:	d421      	bmi.n	8006d24 <__lo0bits+0x52>
 8006ce0:	0798      	lsls	r0, r3, #30
 8006ce2:	bf49      	itett	mi
 8006ce4:	085b      	lsrmi	r3, r3, #1
 8006ce6:	089b      	lsrpl	r3, r3, #2
 8006ce8:	2001      	movmi	r0, #1
 8006cea:	6013      	strmi	r3, [r2, #0]
 8006cec:	bf5c      	itt	pl
 8006cee:	6013      	strpl	r3, [r2, #0]
 8006cf0:	2002      	movpl	r0, #2
 8006cf2:	4770      	bx	lr
 8006cf4:	b299      	uxth	r1, r3
 8006cf6:	b909      	cbnz	r1, 8006cfc <__lo0bits+0x2a>
 8006cf8:	0c1b      	lsrs	r3, r3, #16
 8006cfa:	2010      	movs	r0, #16
 8006cfc:	b2d9      	uxtb	r1, r3
 8006cfe:	b909      	cbnz	r1, 8006d04 <__lo0bits+0x32>
 8006d00:	3008      	adds	r0, #8
 8006d02:	0a1b      	lsrs	r3, r3, #8
 8006d04:	0719      	lsls	r1, r3, #28
 8006d06:	bf04      	itt	eq
 8006d08:	091b      	lsreq	r3, r3, #4
 8006d0a:	3004      	addeq	r0, #4
 8006d0c:	0799      	lsls	r1, r3, #30
 8006d0e:	bf04      	itt	eq
 8006d10:	089b      	lsreq	r3, r3, #2
 8006d12:	3002      	addeq	r0, #2
 8006d14:	07d9      	lsls	r1, r3, #31
 8006d16:	d403      	bmi.n	8006d20 <__lo0bits+0x4e>
 8006d18:	085b      	lsrs	r3, r3, #1
 8006d1a:	f100 0001 	add.w	r0, r0, #1
 8006d1e:	d003      	beq.n	8006d28 <__lo0bits+0x56>
 8006d20:	6013      	str	r3, [r2, #0]
 8006d22:	4770      	bx	lr
 8006d24:	2000      	movs	r0, #0
 8006d26:	4770      	bx	lr
 8006d28:	2020      	movs	r0, #32
 8006d2a:	4770      	bx	lr

08006d2c <__i2b>:
 8006d2c:	b510      	push	{r4, lr}
 8006d2e:	460c      	mov	r4, r1
 8006d30:	2101      	movs	r1, #1
 8006d32:	f7ff febd 	bl	8006ab0 <_Balloc>
 8006d36:	4602      	mov	r2, r0
 8006d38:	b928      	cbnz	r0, 8006d46 <__i2b+0x1a>
 8006d3a:	4b05      	ldr	r3, [pc, #20]	@ (8006d50 <__i2b+0x24>)
 8006d3c:	4805      	ldr	r0, [pc, #20]	@ (8006d54 <__i2b+0x28>)
 8006d3e:	f240 1145 	movw	r1, #325	@ 0x145
 8006d42:	f001 fc19 	bl	8008578 <__assert_func>
 8006d46:	2301      	movs	r3, #1
 8006d48:	6144      	str	r4, [r0, #20]
 8006d4a:	6103      	str	r3, [r0, #16]
 8006d4c:	bd10      	pop	{r4, pc}
 8006d4e:	bf00      	nop
 8006d50:	0800cb21 	.word	0x0800cb21
 8006d54:	0800cb32 	.word	0x0800cb32

08006d58 <__multiply>:
 8006d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d5c:	4614      	mov	r4, r2
 8006d5e:	690a      	ldr	r2, [r1, #16]
 8006d60:	6923      	ldr	r3, [r4, #16]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	bfa8      	it	ge
 8006d66:	4623      	movge	r3, r4
 8006d68:	460f      	mov	r7, r1
 8006d6a:	bfa4      	itt	ge
 8006d6c:	460c      	movge	r4, r1
 8006d6e:	461f      	movge	r7, r3
 8006d70:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006d74:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006d78:	68a3      	ldr	r3, [r4, #8]
 8006d7a:	6861      	ldr	r1, [r4, #4]
 8006d7c:	eb0a 0609 	add.w	r6, sl, r9
 8006d80:	42b3      	cmp	r3, r6
 8006d82:	b085      	sub	sp, #20
 8006d84:	bfb8      	it	lt
 8006d86:	3101      	addlt	r1, #1
 8006d88:	f7ff fe92 	bl	8006ab0 <_Balloc>
 8006d8c:	b930      	cbnz	r0, 8006d9c <__multiply+0x44>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	4b44      	ldr	r3, [pc, #272]	@ (8006ea4 <__multiply+0x14c>)
 8006d92:	4845      	ldr	r0, [pc, #276]	@ (8006ea8 <__multiply+0x150>)
 8006d94:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006d98:	f001 fbee 	bl	8008578 <__assert_func>
 8006d9c:	f100 0514 	add.w	r5, r0, #20
 8006da0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006da4:	462b      	mov	r3, r5
 8006da6:	2200      	movs	r2, #0
 8006da8:	4543      	cmp	r3, r8
 8006daa:	d321      	bcc.n	8006df0 <__multiply+0x98>
 8006dac:	f107 0114 	add.w	r1, r7, #20
 8006db0:	f104 0214 	add.w	r2, r4, #20
 8006db4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006db8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006dbc:	9302      	str	r3, [sp, #8]
 8006dbe:	1b13      	subs	r3, r2, r4
 8006dc0:	3b15      	subs	r3, #21
 8006dc2:	f023 0303 	bic.w	r3, r3, #3
 8006dc6:	3304      	adds	r3, #4
 8006dc8:	f104 0715 	add.w	r7, r4, #21
 8006dcc:	42ba      	cmp	r2, r7
 8006dce:	bf38      	it	cc
 8006dd0:	2304      	movcc	r3, #4
 8006dd2:	9301      	str	r3, [sp, #4]
 8006dd4:	9b02      	ldr	r3, [sp, #8]
 8006dd6:	9103      	str	r1, [sp, #12]
 8006dd8:	428b      	cmp	r3, r1
 8006dda:	d80c      	bhi.n	8006df6 <__multiply+0x9e>
 8006ddc:	2e00      	cmp	r6, #0
 8006dde:	dd03      	ble.n	8006de8 <__multiply+0x90>
 8006de0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d05b      	beq.n	8006ea0 <__multiply+0x148>
 8006de8:	6106      	str	r6, [r0, #16]
 8006dea:	b005      	add	sp, #20
 8006dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006df0:	f843 2b04 	str.w	r2, [r3], #4
 8006df4:	e7d8      	b.n	8006da8 <__multiply+0x50>
 8006df6:	f8b1 a000 	ldrh.w	sl, [r1]
 8006dfa:	f1ba 0f00 	cmp.w	sl, #0
 8006dfe:	d024      	beq.n	8006e4a <__multiply+0xf2>
 8006e00:	f104 0e14 	add.w	lr, r4, #20
 8006e04:	46a9      	mov	r9, r5
 8006e06:	f04f 0c00 	mov.w	ip, #0
 8006e0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006e0e:	f8d9 3000 	ldr.w	r3, [r9]
 8006e12:	fa1f fb87 	uxth.w	fp, r7
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	fb0a 330b 	mla	r3, sl, fp, r3
 8006e1c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006e20:	f8d9 7000 	ldr.w	r7, [r9]
 8006e24:	4463      	add	r3, ip
 8006e26:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006e2a:	fb0a c70b 	mla	r7, sl, fp, ip
 8006e2e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006e38:	4572      	cmp	r2, lr
 8006e3a:	f849 3b04 	str.w	r3, [r9], #4
 8006e3e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006e42:	d8e2      	bhi.n	8006e0a <__multiply+0xb2>
 8006e44:	9b01      	ldr	r3, [sp, #4]
 8006e46:	f845 c003 	str.w	ip, [r5, r3]
 8006e4a:	9b03      	ldr	r3, [sp, #12]
 8006e4c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006e50:	3104      	adds	r1, #4
 8006e52:	f1b9 0f00 	cmp.w	r9, #0
 8006e56:	d021      	beq.n	8006e9c <__multiply+0x144>
 8006e58:	682b      	ldr	r3, [r5, #0]
 8006e5a:	f104 0c14 	add.w	ip, r4, #20
 8006e5e:	46ae      	mov	lr, r5
 8006e60:	f04f 0a00 	mov.w	sl, #0
 8006e64:	f8bc b000 	ldrh.w	fp, [ip]
 8006e68:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006e6c:	fb09 770b 	mla	r7, r9, fp, r7
 8006e70:	4457      	add	r7, sl
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006e78:	f84e 3b04 	str.w	r3, [lr], #4
 8006e7c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006e80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e84:	f8be 3000 	ldrh.w	r3, [lr]
 8006e88:	fb09 330a 	mla	r3, r9, sl, r3
 8006e8c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006e90:	4562      	cmp	r2, ip
 8006e92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e96:	d8e5      	bhi.n	8006e64 <__multiply+0x10c>
 8006e98:	9f01      	ldr	r7, [sp, #4]
 8006e9a:	51eb      	str	r3, [r5, r7]
 8006e9c:	3504      	adds	r5, #4
 8006e9e:	e799      	b.n	8006dd4 <__multiply+0x7c>
 8006ea0:	3e01      	subs	r6, #1
 8006ea2:	e79b      	b.n	8006ddc <__multiply+0x84>
 8006ea4:	0800cb21 	.word	0x0800cb21
 8006ea8:	0800cb32 	.word	0x0800cb32

08006eac <__pow5mult>:
 8006eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eb0:	4615      	mov	r5, r2
 8006eb2:	f012 0203 	ands.w	r2, r2, #3
 8006eb6:	4607      	mov	r7, r0
 8006eb8:	460e      	mov	r6, r1
 8006eba:	d007      	beq.n	8006ecc <__pow5mult+0x20>
 8006ebc:	4c25      	ldr	r4, [pc, #148]	@ (8006f54 <__pow5mult+0xa8>)
 8006ebe:	3a01      	subs	r2, #1
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006ec6:	f7ff fe55 	bl	8006b74 <__multadd>
 8006eca:	4606      	mov	r6, r0
 8006ecc:	10ad      	asrs	r5, r5, #2
 8006ece:	d03d      	beq.n	8006f4c <__pow5mult+0xa0>
 8006ed0:	69fc      	ldr	r4, [r7, #28]
 8006ed2:	b97c      	cbnz	r4, 8006ef4 <__pow5mult+0x48>
 8006ed4:	2010      	movs	r0, #16
 8006ed6:	f7ff fd35 	bl	8006944 <malloc>
 8006eda:	4602      	mov	r2, r0
 8006edc:	61f8      	str	r0, [r7, #28]
 8006ede:	b928      	cbnz	r0, 8006eec <__pow5mult+0x40>
 8006ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8006f58 <__pow5mult+0xac>)
 8006ee2:	481e      	ldr	r0, [pc, #120]	@ (8006f5c <__pow5mult+0xb0>)
 8006ee4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006ee8:	f001 fb46 	bl	8008578 <__assert_func>
 8006eec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ef0:	6004      	str	r4, [r0, #0]
 8006ef2:	60c4      	str	r4, [r0, #12]
 8006ef4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006ef8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006efc:	b94c      	cbnz	r4, 8006f12 <__pow5mult+0x66>
 8006efe:	f240 2171 	movw	r1, #625	@ 0x271
 8006f02:	4638      	mov	r0, r7
 8006f04:	f7ff ff12 	bl	8006d2c <__i2b>
 8006f08:	2300      	movs	r3, #0
 8006f0a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f0e:	4604      	mov	r4, r0
 8006f10:	6003      	str	r3, [r0, #0]
 8006f12:	f04f 0900 	mov.w	r9, #0
 8006f16:	07eb      	lsls	r3, r5, #31
 8006f18:	d50a      	bpl.n	8006f30 <__pow5mult+0x84>
 8006f1a:	4631      	mov	r1, r6
 8006f1c:	4622      	mov	r2, r4
 8006f1e:	4638      	mov	r0, r7
 8006f20:	f7ff ff1a 	bl	8006d58 <__multiply>
 8006f24:	4631      	mov	r1, r6
 8006f26:	4680      	mov	r8, r0
 8006f28:	4638      	mov	r0, r7
 8006f2a:	f7ff fe01 	bl	8006b30 <_Bfree>
 8006f2e:	4646      	mov	r6, r8
 8006f30:	106d      	asrs	r5, r5, #1
 8006f32:	d00b      	beq.n	8006f4c <__pow5mult+0xa0>
 8006f34:	6820      	ldr	r0, [r4, #0]
 8006f36:	b938      	cbnz	r0, 8006f48 <__pow5mult+0x9c>
 8006f38:	4622      	mov	r2, r4
 8006f3a:	4621      	mov	r1, r4
 8006f3c:	4638      	mov	r0, r7
 8006f3e:	f7ff ff0b 	bl	8006d58 <__multiply>
 8006f42:	6020      	str	r0, [r4, #0]
 8006f44:	f8c0 9000 	str.w	r9, [r0]
 8006f48:	4604      	mov	r4, r0
 8006f4a:	e7e4      	b.n	8006f16 <__pow5mult+0x6a>
 8006f4c:	4630      	mov	r0, r6
 8006f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f52:	bf00      	nop
 8006f54:	0800cb8c 	.word	0x0800cb8c
 8006f58:	0800cab2 	.word	0x0800cab2
 8006f5c:	0800cb32 	.word	0x0800cb32

08006f60 <__lshift>:
 8006f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f64:	460c      	mov	r4, r1
 8006f66:	6849      	ldr	r1, [r1, #4]
 8006f68:	6923      	ldr	r3, [r4, #16]
 8006f6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006f6e:	68a3      	ldr	r3, [r4, #8]
 8006f70:	4607      	mov	r7, r0
 8006f72:	4691      	mov	r9, r2
 8006f74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f78:	f108 0601 	add.w	r6, r8, #1
 8006f7c:	42b3      	cmp	r3, r6
 8006f7e:	db0b      	blt.n	8006f98 <__lshift+0x38>
 8006f80:	4638      	mov	r0, r7
 8006f82:	f7ff fd95 	bl	8006ab0 <_Balloc>
 8006f86:	4605      	mov	r5, r0
 8006f88:	b948      	cbnz	r0, 8006f9e <__lshift+0x3e>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	4b28      	ldr	r3, [pc, #160]	@ (8007030 <__lshift+0xd0>)
 8006f8e:	4829      	ldr	r0, [pc, #164]	@ (8007034 <__lshift+0xd4>)
 8006f90:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006f94:	f001 faf0 	bl	8008578 <__assert_func>
 8006f98:	3101      	adds	r1, #1
 8006f9a:	005b      	lsls	r3, r3, #1
 8006f9c:	e7ee      	b.n	8006f7c <__lshift+0x1c>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	f100 0114 	add.w	r1, r0, #20
 8006fa4:	f100 0210 	add.w	r2, r0, #16
 8006fa8:	4618      	mov	r0, r3
 8006faa:	4553      	cmp	r3, sl
 8006fac:	db33      	blt.n	8007016 <__lshift+0xb6>
 8006fae:	6920      	ldr	r0, [r4, #16]
 8006fb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006fb4:	f104 0314 	add.w	r3, r4, #20
 8006fb8:	f019 091f 	ands.w	r9, r9, #31
 8006fbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006fc0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006fc4:	d02b      	beq.n	800701e <__lshift+0xbe>
 8006fc6:	f1c9 0e20 	rsb	lr, r9, #32
 8006fca:	468a      	mov	sl, r1
 8006fcc:	2200      	movs	r2, #0
 8006fce:	6818      	ldr	r0, [r3, #0]
 8006fd0:	fa00 f009 	lsl.w	r0, r0, r9
 8006fd4:	4310      	orrs	r0, r2
 8006fd6:	f84a 0b04 	str.w	r0, [sl], #4
 8006fda:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fde:	459c      	cmp	ip, r3
 8006fe0:	fa22 f20e 	lsr.w	r2, r2, lr
 8006fe4:	d8f3      	bhi.n	8006fce <__lshift+0x6e>
 8006fe6:	ebac 0304 	sub.w	r3, ip, r4
 8006fea:	3b15      	subs	r3, #21
 8006fec:	f023 0303 	bic.w	r3, r3, #3
 8006ff0:	3304      	adds	r3, #4
 8006ff2:	f104 0015 	add.w	r0, r4, #21
 8006ff6:	4584      	cmp	ip, r0
 8006ff8:	bf38      	it	cc
 8006ffa:	2304      	movcc	r3, #4
 8006ffc:	50ca      	str	r2, [r1, r3]
 8006ffe:	b10a      	cbz	r2, 8007004 <__lshift+0xa4>
 8007000:	f108 0602 	add.w	r6, r8, #2
 8007004:	3e01      	subs	r6, #1
 8007006:	4638      	mov	r0, r7
 8007008:	612e      	str	r6, [r5, #16]
 800700a:	4621      	mov	r1, r4
 800700c:	f7ff fd90 	bl	8006b30 <_Bfree>
 8007010:	4628      	mov	r0, r5
 8007012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007016:	f842 0f04 	str.w	r0, [r2, #4]!
 800701a:	3301      	adds	r3, #1
 800701c:	e7c5      	b.n	8006faa <__lshift+0x4a>
 800701e:	3904      	subs	r1, #4
 8007020:	f853 2b04 	ldr.w	r2, [r3], #4
 8007024:	f841 2f04 	str.w	r2, [r1, #4]!
 8007028:	459c      	cmp	ip, r3
 800702a:	d8f9      	bhi.n	8007020 <__lshift+0xc0>
 800702c:	e7ea      	b.n	8007004 <__lshift+0xa4>
 800702e:	bf00      	nop
 8007030:	0800cb21 	.word	0x0800cb21
 8007034:	0800cb32 	.word	0x0800cb32

08007038 <__mcmp>:
 8007038:	690a      	ldr	r2, [r1, #16]
 800703a:	4603      	mov	r3, r0
 800703c:	6900      	ldr	r0, [r0, #16]
 800703e:	1a80      	subs	r0, r0, r2
 8007040:	b530      	push	{r4, r5, lr}
 8007042:	d10e      	bne.n	8007062 <__mcmp+0x2a>
 8007044:	3314      	adds	r3, #20
 8007046:	3114      	adds	r1, #20
 8007048:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800704c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007050:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007054:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007058:	4295      	cmp	r5, r2
 800705a:	d003      	beq.n	8007064 <__mcmp+0x2c>
 800705c:	d205      	bcs.n	800706a <__mcmp+0x32>
 800705e:	f04f 30ff 	mov.w	r0, #4294967295
 8007062:	bd30      	pop	{r4, r5, pc}
 8007064:	42a3      	cmp	r3, r4
 8007066:	d3f3      	bcc.n	8007050 <__mcmp+0x18>
 8007068:	e7fb      	b.n	8007062 <__mcmp+0x2a>
 800706a:	2001      	movs	r0, #1
 800706c:	e7f9      	b.n	8007062 <__mcmp+0x2a>
	...

08007070 <__mdiff>:
 8007070:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007074:	4689      	mov	r9, r1
 8007076:	4606      	mov	r6, r0
 8007078:	4611      	mov	r1, r2
 800707a:	4648      	mov	r0, r9
 800707c:	4614      	mov	r4, r2
 800707e:	f7ff ffdb 	bl	8007038 <__mcmp>
 8007082:	1e05      	subs	r5, r0, #0
 8007084:	d112      	bne.n	80070ac <__mdiff+0x3c>
 8007086:	4629      	mov	r1, r5
 8007088:	4630      	mov	r0, r6
 800708a:	f7ff fd11 	bl	8006ab0 <_Balloc>
 800708e:	4602      	mov	r2, r0
 8007090:	b928      	cbnz	r0, 800709e <__mdiff+0x2e>
 8007092:	4b3f      	ldr	r3, [pc, #252]	@ (8007190 <__mdiff+0x120>)
 8007094:	f240 2137 	movw	r1, #567	@ 0x237
 8007098:	483e      	ldr	r0, [pc, #248]	@ (8007194 <__mdiff+0x124>)
 800709a:	f001 fa6d 	bl	8008578 <__assert_func>
 800709e:	2301      	movs	r3, #1
 80070a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80070a4:	4610      	mov	r0, r2
 80070a6:	b003      	add	sp, #12
 80070a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ac:	bfbc      	itt	lt
 80070ae:	464b      	movlt	r3, r9
 80070b0:	46a1      	movlt	r9, r4
 80070b2:	4630      	mov	r0, r6
 80070b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80070b8:	bfba      	itte	lt
 80070ba:	461c      	movlt	r4, r3
 80070bc:	2501      	movlt	r5, #1
 80070be:	2500      	movge	r5, #0
 80070c0:	f7ff fcf6 	bl	8006ab0 <_Balloc>
 80070c4:	4602      	mov	r2, r0
 80070c6:	b918      	cbnz	r0, 80070d0 <__mdiff+0x60>
 80070c8:	4b31      	ldr	r3, [pc, #196]	@ (8007190 <__mdiff+0x120>)
 80070ca:	f240 2145 	movw	r1, #581	@ 0x245
 80070ce:	e7e3      	b.n	8007098 <__mdiff+0x28>
 80070d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80070d4:	6926      	ldr	r6, [r4, #16]
 80070d6:	60c5      	str	r5, [r0, #12]
 80070d8:	f109 0310 	add.w	r3, r9, #16
 80070dc:	f109 0514 	add.w	r5, r9, #20
 80070e0:	f104 0e14 	add.w	lr, r4, #20
 80070e4:	f100 0b14 	add.w	fp, r0, #20
 80070e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80070ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80070f0:	9301      	str	r3, [sp, #4]
 80070f2:	46d9      	mov	r9, fp
 80070f4:	f04f 0c00 	mov.w	ip, #0
 80070f8:	9b01      	ldr	r3, [sp, #4]
 80070fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80070fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007102:	9301      	str	r3, [sp, #4]
 8007104:	fa1f f38a 	uxth.w	r3, sl
 8007108:	4619      	mov	r1, r3
 800710a:	b283      	uxth	r3, r0
 800710c:	1acb      	subs	r3, r1, r3
 800710e:	0c00      	lsrs	r0, r0, #16
 8007110:	4463      	add	r3, ip
 8007112:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007116:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800711a:	b29b      	uxth	r3, r3
 800711c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007120:	4576      	cmp	r6, lr
 8007122:	f849 3b04 	str.w	r3, [r9], #4
 8007126:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800712a:	d8e5      	bhi.n	80070f8 <__mdiff+0x88>
 800712c:	1b33      	subs	r3, r6, r4
 800712e:	3b15      	subs	r3, #21
 8007130:	f023 0303 	bic.w	r3, r3, #3
 8007134:	3415      	adds	r4, #21
 8007136:	3304      	adds	r3, #4
 8007138:	42a6      	cmp	r6, r4
 800713a:	bf38      	it	cc
 800713c:	2304      	movcc	r3, #4
 800713e:	441d      	add	r5, r3
 8007140:	445b      	add	r3, fp
 8007142:	461e      	mov	r6, r3
 8007144:	462c      	mov	r4, r5
 8007146:	4544      	cmp	r4, r8
 8007148:	d30e      	bcc.n	8007168 <__mdiff+0xf8>
 800714a:	f108 0103 	add.w	r1, r8, #3
 800714e:	1b49      	subs	r1, r1, r5
 8007150:	f021 0103 	bic.w	r1, r1, #3
 8007154:	3d03      	subs	r5, #3
 8007156:	45a8      	cmp	r8, r5
 8007158:	bf38      	it	cc
 800715a:	2100      	movcc	r1, #0
 800715c:	440b      	add	r3, r1
 800715e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007162:	b191      	cbz	r1, 800718a <__mdiff+0x11a>
 8007164:	6117      	str	r7, [r2, #16]
 8007166:	e79d      	b.n	80070a4 <__mdiff+0x34>
 8007168:	f854 1b04 	ldr.w	r1, [r4], #4
 800716c:	46e6      	mov	lr, ip
 800716e:	0c08      	lsrs	r0, r1, #16
 8007170:	fa1c fc81 	uxtah	ip, ip, r1
 8007174:	4471      	add	r1, lr
 8007176:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800717a:	b289      	uxth	r1, r1
 800717c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007180:	f846 1b04 	str.w	r1, [r6], #4
 8007184:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007188:	e7dd      	b.n	8007146 <__mdiff+0xd6>
 800718a:	3f01      	subs	r7, #1
 800718c:	e7e7      	b.n	800715e <__mdiff+0xee>
 800718e:	bf00      	nop
 8007190:	0800cb21 	.word	0x0800cb21
 8007194:	0800cb32 	.word	0x0800cb32

08007198 <__ulp>:
 8007198:	b082      	sub	sp, #8
 800719a:	ed8d 0b00 	vstr	d0, [sp]
 800719e:	9a01      	ldr	r2, [sp, #4]
 80071a0:	4b0f      	ldr	r3, [pc, #60]	@ (80071e0 <__ulp+0x48>)
 80071a2:	4013      	ands	r3, r2
 80071a4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	dc08      	bgt.n	80071be <__ulp+0x26>
 80071ac:	425b      	negs	r3, r3
 80071ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80071b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80071b6:	da04      	bge.n	80071c2 <__ulp+0x2a>
 80071b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80071bc:	4113      	asrs	r3, r2
 80071be:	2200      	movs	r2, #0
 80071c0:	e008      	b.n	80071d4 <__ulp+0x3c>
 80071c2:	f1a2 0314 	sub.w	r3, r2, #20
 80071c6:	2b1e      	cmp	r3, #30
 80071c8:	bfda      	itte	le
 80071ca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80071ce:	40da      	lsrle	r2, r3
 80071d0:	2201      	movgt	r2, #1
 80071d2:	2300      	movs	r3, #0
 80071d4:	4619      	mov	r1, r3
 80071d6:	4610      	mov	r0, r2
 80071d8:	ec41 0b10 	vmov	d0, r0, r1
 80071dc:	b002      	add	sp, #8
 80071de:	4770      	bx	lr
 80071e0:	7ff00000 	.word	0x7ff00000

080071e4 <__b2d>:
 80071e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071e8:	6906      	ldr	r6, [r0, #16]
 80071ea:	f100 0814 	add.w	r8, r0, #20
 80071ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80071f2:	1f37      	subs	r7, r6, #4
 80071f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80071f8:	4610      	mov	r0, r2
 80071fa:	f7ff fd4b 	bl	8006c94 <__hi0bits>
 80071fe:	f1c0 0320 	rsb	r3, r0, #32
 8007202:	280a      	cmp	r0, #10
 8007204:	600b      	str	r3, [r1, #0]
 8007206:	491b      	ldr	r1, [pc, #108]	@ (8007274 <__b2d+0x90>)
 8007208:	dc15      	bgt.n	8007236 <__b2d+0x52>
 800720a:	f1c0 0c0b 	rsb	ip, r0, #11
 800720e:	fa22 f30c 	lsr.w	r3, r2, ip
 8007212:	45b8      	cmp	r8, r7
 8007214:	ea43 0501 	orr.w	r5, r3, r1
 8007218:	bf34      	ite	cc
 800721a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800721e:	2300      	movcs	r3, #0
 8007220:	3015      	adds	r0, #21
 8007222:	fa02 f000 	lsl.w	r0, r2, r0
 8007226:	fa23 f30c 	lsr.w	r3, r3, ip
 800722a:	4303      	orrs	r3, r0
 800722c:	461c      	mov	r4, r3
 800722e:	ec45 4b10 	vmov	d0, r4, r5
 8007232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007236:	45b8      	cmp	r8, r7
 8007238:	bf3a      	itte	cc
 800723a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800723e:	f1a6 0708 	subcc.w	r7, r6, #8
 8007242:	2300      	movcs	r3, #0
 8007244:	380b      	subs	r0, #11
 8007246:	d012      	beq.n	800726e <__b2d+0x8a>
 8007248:	f1c0 0120 	rsb	r1, r0, #32
 800724c:	fa23 f401 	lsr.w	r4, r3, r1
 8007250:	4082      	lsls	r2, r0
 8007252:	4322      	orrs	r2, r4
 8007254:	4547      	cmp	r7, r8
 8007256:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800725a:	bf8c      	ite	hi
 800725c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007260:	2200      	movls	r2, #0
 8007262:	4083      	lsls	r3, r0
 8007264:	40ca      	lsrs	r2, r1
 8007266:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800726a:	4313      	orrs	r3, r2
 800726c:	e7de      	b.n	800722c <__b2d+0x48>
 800726e:	ea42 0501 	orr.w	r5, r2, r1
 8007272:	e7db      	b.n	800722c <__b2d+0x48>
 8007274:	3ff00000 	.word	0x3ff00000

08007278 <__d2b>:
 8007278:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800727c:	460f      	mov	r7, r1
 800727e:	2101      	movs	r1, #1
 8007280:	ec59 8b10 	vmov	r8, r9, d0
 8007284:	4616      	mov	r6, r2
 8007286:	f7ff fc13 	bl	8006ab0 <_Balloc>
 800728a:	4604      	mov	r4, r0
 800728c:	b930      	cbnz	r0, 800729c <__d2b+0x24>
 800728e:	4602      	mov	r2, r0
 8007290:	4b23      	ldr	r3, [pc, #140]	@ (8007320 <__d2b+0xa8>)
 8007292:	4824      	ldr	r0, [pc, #144]	@ (8007324 <__d2b+0xac>)
 8007294:	f240 310f 	movw	r1, #783	@ 0x30f
 8007298:	f001 f96e 	bl	8008578 <__assert_func>
 800729c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80072a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80072a4:	b10d      	cbz	r5, 80072aa <__d2b+0x32>
 80072a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072aa:	9301      	str	r3, [sp, #4]
 80072ac:	f1b8 0300 	subs.w	r3, r8, #0
 80072b0:	d023      	beq.n	80072fa <__d2b+0x82>
 80072b2:	4668      	mov	r0, sp
 80072b4:	9300      	str	r3, [sp, #0]
 80072b6:	f7ff fd0c 	bl	8006cd2 <__lo0bits>
 80072ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 80072be:	b1d0      	cbz	r0, 80072f6 <__d2b+0x7e>
 80072c0:	f1c0 0320 	rsb	r3, r0, #32
 80072c4:	fa02 f303 	lsl.w	r3, r2, r3
 80072c8:	430b      	orrs	r3, r1
 80072ca:	40c2      	lsrs	r2, r0
 80072cc:	6163      	str	r3, [r4, #20]
 80072ce:	9201      	str	r2, [sp, #4]
 80072d0:	9b01      	ldr	r3, [sp, #4]
 80072d2:	61a3      	str	r3, [r4, #24]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	bf0c      	ite	eq
 80072d8:	2201      	moveq	r2, #1
 80072da:	2202      	movne	r2, #2
 80072dc:	6122      	str	r2, [r4, #16]
 80072de:	b1a5      	cbz	r5, 800730a <__d2b+0x92>
 80072e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80072e4:	4405      	add	r5, r0
 80072e6:	603d      	str	r5, [r7, #0]
 80072e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80072ec:	6030      	str	r0, [r6, #0]
 80072ee:	4620      	mov	r0, r4
 80072f0:	b003      	add	sp, #12
 80072f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072f6:	6161      	str	r1, [r4, #20]
 80072f8:	e7ea      	b.n	80072d0 <__d2b+0x58>
 80072fa:	a801      	add	r0, sp, #4
 80072fc:	f7ff fce9 	bl	8006cd2 <__lo0bits>
 8007300:	9b01      	ldr	r3, [sp, #4]
 8007302:	6163      	str	r3, [r4, #20]
 8007304:	3020      	adds	r0, #32
 8007306:	2201      	movs	r2, #1
 8007308:	e7e8      	b.n	80072dc <__d2b+0x64>
 800730a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800730e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007312:	6038      	str	r0, [r7, #0]
 8007314:	6918      	ldr	r0, [r3, #16]
 8007316:	f7ff fcbd 	bl	8006c94 <__hi0bits>
 800731a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800731e:	e7e5      	b.n	80072ec <__d2b+0x74>
 8007320:	0800cb21 	.word	0x0800cb21
 8007324:	0800cb32 	.word	0x0800cb32

08007328 <__ratio>:
 8007328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800732c:	b085      	sub	sp, #20
 800732e:	e9cd 1000 	strd	r1, r0, [sp]
 8007332:	a902      	add	r1, sp, #8
 8007334:	f7ff ff56 	bl	80071e4 <__b2d>
 8007338:	9800      	ldr	r0, [sp, #0]
 800733a:	a903      	add	r1, sp, #12
 800733c:	ec55 4b10 	vmov	r4, r5, d0
 8007340:	f7ff ff50 	bl	80071e4 <__b2d>
 8007344:	9b01      	ldr	r3, [sp, #4]
 8007346:	6919      	ldr	r1, [r3, #16]
 8007348:	9b00      	ldr	r3, [sp, #0]
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	1ac9      	subs	r1, r1, r3
 800734e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007352:	1a9b      	subs	r3, r3, r2
 8007354:	ec5b ab10 	vmov	sl, fp, d0
 8007358:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800735c:	2b00      	cmp	r3, #0
 800735e:	bfce      	itee	gt
 8007360:	462a      	movgt	r2, r5
 8007362:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007366:	465a      	movle	r2, fp
 8007368:	462f      	mov	r7, r5
 800736a:	46d9      	mov	r9, fp
 800736c:	bfcc      	ite	gt
 800736e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007372:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007376:	464b      	mov	r3, r9
 8007378:	4652      	mov	r2, sl
 800737a:	4620      	mov	r0, r4
 800737c:	4639      	mov	r1, r7
 800737e:	f7f9 fa65 	bl	800084c <__aeabi_ddiv>
 8007382:	ec41 0b10 	vmov	d0, r0, r1
 8007386:	b005      	add	sp, #20
 8007388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800738c <__copybits>:
 800738c:	3901      	subs	r1, #1
 800738e:	b570      	push	{r4, r5, r6, lr}
 8007390:	1149      	asrs	r1, r1, #5
 8007392:	6914      	ldr	r4, [r2, #16]
 8007394:	3101      	adds	r1, #1
 8007396:	f102 0314 	add.w	r3, r2, #20
 800739a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800739e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80073a2:	1f05      	subs	r5, r0, #4
 80073a4:	42a3      	cmp	r3, r4
 80073a6:	d30c      	bcc.n	80073c2 <__copybits+0x36>
 80073a8:	1aa3      	subs	r3, r4, r2
 80073aa:	3b11      	subs	r3, #17
 80073ac:	f023 0303 	bic.w	r3, r3, #3
 80073b0:	3211      	adds	r2, #17
 80073b2:	42a2      	cmp	r2, r4
 80073b4:	bf88      	it	hi
 80073b6:	2300      	movhi	r3, #0
 80073b8:	4418      	add	r0, r3
 80073ba:	2300      	movs	r3, #0
 80073bc:	4288      	cmp	r0, r1
 80073be:	d305      	bcc.n	80073cc <__copybits+0x40>
 80073c0:	bd70      	pop	{r4, r5, r6, pc}
 80073c2:	f853 6b04 	ldr.w	r6, [r3], #4
 80073c6:	f845 6f04 	str.w	r6, [r5, #4]!
 80073ca:	e7eb      	b.n	80073a4 <__copybits+0x18>
 80073cc:	f840 3b04 	str.w	r3, [r0], #4
 80073d0:	e7f4      	b.n	80073bc <__copybits+0x30>

080073d2 <__any_on>:
 80073d2:	f100 0214 	add.w	r2, r0, #20
 80073d6:	6900      	ldr	r0, [r0, #16]
 80073d8:	114b      	asrs	r3, r1, #5
 80073da:	4298      	cmp	r0, r3
 80073dc:	b510      	push	{r4, lr}
 80073de:	db11      	blt.n	8007404 <__any_on+0x32>
 80073e0:	dd0a      	ble.n	80073f8 <__any_on+0x26>
 80073e2:	f011 011f 	ands.w	r1, r1, #31
 80073e6:	d007      	beq.n	80073f8 <__any_on+0x26>
 80073e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80073ec:	fa24 f001 	lsr.w	r0, r4, r1
 80073f0:	fa00 f101 	lsl.w	r1, r0, r1
 80073f4:	428c      	cmp	r4, r1
 80073f6:	d10b      	bne.n	8007410 <__any_on+0x3e>
 80073f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d803      	bhi.n	8007408 <__any_on+0x36>
 8007400:	2000      	movs	r0, #0
 8007402:	bd10      	pop	{r4, pc}
 8007404:	4603      	mov	r3, r0
 8007406:	e7f7      	b.n	80073f8 <__any_on+0x26>
 8007408:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800740c:	2900      	cmp	r1, #0
 800740e:	d0f5      	beq.n	80073fc <__any_on+0x2a>
 8007410:	2001      	movs	r0, #1
 8007412:	e7f6      	b.n	8007402 <__any_on+0x30>

08007414 <sulp>:
 8007414:	b570      	push	{r4, r5, r6, lr}
 8007416:	4604      	mov	r4, r0
 8007418:	460d      	mov	r5, r1
 800741a:	ec45 4b10 	vmov	d0, r4, r5
 800741e:	4616      	mov	r6, r2
 8007420:	f7ff feba 	bl	8007198 <__ulp>
 8007424:	ec51 0b10 	vmov	r0, r1, d0
 8007428:	b17e      	cbz	r6, 800744a <sulp+0x36>
 800742a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800742e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007432:	2b00      	cmp	r3, #0
 8007434:	dd09      	ble.n	800744a <sulp+0x36>
 8007436:	051b      	lsls	r3, r3, #20
 8007438:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800743c:	2400      	movs	r4, #0
 800743e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007442:	4622      	mov	r2, r4
 8007444:	462b      	mov	r3, r5
 8007446:	f7f9 f8d7 	bl	80005f8 <__aeabi_dmul>
 800744a:	ec41 0b10 	vmov	d0, r0, r1
 800744e:	bd70      	pop	{r4, r5, r6, pc}

08007450 <_strtod_l>:
 8007450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007454:	b09f      	sub	sp, #124	@ 0x7c
 8007456:	460c      	mov	r4, r1
 8007458:	9217      	str	r2, [sp, #92]	@ 0x5c
 800745a:	2200      	movs	r2, #0
 800745c:	921a      	str	r2, [sp, #104]	@ 0x68
 800745e:	9005      	str	r0, [sp, #20]
 8007460:	f04f 0a00 	mov.w	sl, #0
 8007464:	f04f 0b00 	mov.w	fp, #0
 8007468:	460a      	mov	r2, r1
 800746a:	9219      	str	r2, [sp, #100]	@ 0x64
 800746c:	7811      	ldrb	r1, [r2, #0]
 800746e:	292b      	cmp	r1, #43	@ 0x2b
 8007470:	d04a      	beq.n	8007508 <_strtod_l+0xb8>
 8007472:	d838      	bhi.n	80074e6 <_strtod_l+0x96>
 8007474:	290d      	cmp	r1, #13
 8007476:	d832      	bhi.n	80074de <_strtod_l+0x8e>
 8007478:	2908      	cmp	r1, #8
 800747a:	d832      	bhi.n	80074e2 <_strtod_l+0x92>
 800747c:	2900      	cmp	r1, #0
 800747e:	d03b      	beq.n	80074f8 <_strtod_l+0xa8>
 8007480:	2200      	movs	r2, #0
 8007482:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007484:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007486:	782a      	ldrb	r2, [r5, #0]
 8007488:	2a30      	cmp	r2, #48	@ 0x30
 800748a:	f040 80b3 	bne.w	80075f4 <_strtod_l+0x1a4>
 800748e:	786a      	ldrb	r2, [r5, #1]
 8007490:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007494:	2a58      	cmp	r2, #88	@ 0x58
 8007496:	d16e      	bne.n	8007576 <_strtod_l+0x126>
 8007498:	9302      	str	r3, [sp, #8]
 800749a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800749c:	9301      	str	r3, [sp, #4]
 800749e:	ab1a      	add	r3, sp, #104	@ 0x68
 80074a0:	9300      	str	r3, [sp, #0]
 80074a2:	4a8e      	ldr	r2, [pc, #568]	@ (80076dc <_strtod_l+0x28c>)
 80074a4:	9805      	ldr	r0, [sp, #20]
 80074a6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80074a8:	a919      	add	r1, sp, #100	@ 0x64
 80074aa:	f001 f8ff 	bl	80086ac <__gethex>
 80074ae:	f010 060f 	ands.w	r6, r0, #15
 80074b2:	4604      	mov	r4, r0
 80074b4:	d005      	beq.n	80074c2 <_strtod_l+0x72>
 80074b6:	2e06      	cmp	r6, #6
 80074b8:	d128      	bne.n	800750c <_strtod_l+0xbc>
 80074ba:	3501      	adds	r5, #1
 80074bc:	2300      	movs	r3, #0
 80074be:	9519      	str	r5, [sp, #100]	@ 0x64
 80074c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f040 858e 	bne.w	8007fe6 <_strtod_l+0xb96>
 80074ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074cc:	b1cb      	cbz	r3, 8007502 <_strtod_l+0xb2>
 80074ce:	4652      	mov	r2, sl
 80074d0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80074d4:	ec43 2b10 	vmov	d0, r2, r3
 80074d8:	b01f      	add	sp, #124	@ 0x7c
 80074da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074de:	2920      	cmp	r1, #32
 80074e0:	d1ce      	bne.n	8007480 <_strtod_l+0x30>
 80074e2:	3201      	adds	r2, #1
 80074e4:	e7c1      	b.n	800746a <_strtod_l+0x1a>
 80074e6:	292d      	cmp	r1, #45	@ 0x2d
 80074e8:	d1ca      	bne.n	8007480 <_strtod_l+0x30>
 80074ea:	2101      	movs	r1, #1
 80074ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 80074ee:	1c51      	adds	r1, r2, #1
 80074f0:	9119      	str	r1, [sp, #100]	@ 0x64
 80074f2:	7852      	ldrb	r2, [r2, #1]
 80074f4:	2a00      	cmp	r2, #0
 80074f6:	d1c5      	bne.n	8007484 <_strtod_l+0x34>
 80074f8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80074fa:	9419      	str	r4, [sp, #100]	@ 0x64
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f040 8570 	bne.w	8007fe2 <_strtod_l+0xb92>
 8007502:	4652      	mov	r2, sl
 8007504:	465b      	mov	r3, fp
 8007506:	e7e5      	b.n	80074d4 <_strtod_l+0x84>
 8007508:	2100      	movs	r1, #0
 800750a:	e7ef      	b.n	80074ec <_strtod_l+0x9c>
 800750c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800750e:	b13a      	cbz	r2, 8007520 <_strtod_l+0xd0>
 8007510:	2135      	movs	r1, #53	@ 0x35
 8007512:	a81c      	add	r0, sp, #112	@ 0x70
 8007514:	f7ff ff3a 	bl	800738c <__copybits>
 8007518:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800751a:	9805      	ldr	r0, [sp, #20]
 800751c:	f7ff fb08 	bl	8006b30 <_Bfree>
 8007520:	3e01      	subs	r6, #1
 8007522:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007524:	2e04      	cmp	r6, #4
 8007526:	d806      	bhi.n	8007536 <_strtod_l+0xe6>
 8007528:	e8df f006 	tbb	[pc, r6]
 800752c:	201d0314 	.word	0x201d0314
 8007530:	14          	.byte	0x14
 8007531:	00          	.byte	0x00
 8007532:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007536:	05e1      	lsls	r1, r4, #23
 8007538:	bf48      	it	mi
 800753a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800753e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007542:	0d1b      	lsrs	r3, r3, #20
 8007544:	051b      	lsls	r3, r3, #20
 8007546:	2b00      	cmp	r3, #0
 8007548:	d1bb      	bne.n	80074c2 <_strtod_l+0x72>
 800754a:	f7fe fb23 	bl	8005b94 <__errno>
 800754e:	2322      	movs	r3, #34	@ 0x22
 8007550:	6003      	str	r3, [r0, #0]
 8007552:	e7b6      	b.n	80074c2 <_strtod_l+0x72>
 8007554:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007558:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800755c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007560:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007564:	e7e7      	b.n	8007536 <_strtod_l+0xe6>
 8007566:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80076e4 <_strtod_l+0x294>
 800756a:	e7e4      	b.n	8007536 <_strtod_l+0xe6>
 800756c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007570:	f04f 3aff 	mov.w	sl, #4294967295
 8007574:	e7df      	b.n	8007536 <_strtod_l+0xe6>
 8007576:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007578:	1c5a      	adds	r2, r3, #1
 800757a:	9219      	str	r2, [sp, #100]	@ 0x64
 800757c:	785b      	ldrb	r3, [r3, #1]
 800757e:	2b30      	cmp	r3, #48	@ 0x30
 8007580:	d0f9      	beq.n	8007576 <_strtod_l+0x126>
 8007582:	2b00      	cmp	r3, #0
 8007584:	d09d      	beq.n	80074c2 <_strtod_l+0x72>
 8007586:	2301      	movs	r3, #1
 8007588:	9309      	str	r3, [sp, #36]	@ 0x24
 800758a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800758c:	930c      	str	r3, [sp, #48]	@ 0x30
 800758e:	2300      	movs	r3, #0
 8007590:	9308      	str	r3, [sp, #32]
 8007592:	930a      	str	r3, [sp, #40]	@ 0x28
 8007594:	461f      	mov	r7, r3
 8007596:	220a      	movs	r2, #10
 8007598:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800759a:	7805      	ldrb	r5, [r0, #0]
 800759c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80075a0:	b2d9      	uxtb	r1, r3
 80075a2:	2909      	cmp	r1, #9
 80075a4:	d928      	bls.n	80075f8 <_strtod_l+0x1a8>
 80075a6:	494e      	ldr	r1, [pc, #312]	@ (80076e0 <_strtod_l+0x290>)
 80075a8:	2201      	movs	r2, #1
 80075aa:	f000 ffbb 	bl	8008524 <strncmp>
 80075ae:	2800      	cmp	r0, #0
 80075b0:	d032      	beq.n	8007618 <_strtod_l+0x1c8>
 80075b2:	2000      	movs	r0, #0
 80075b4:	462a      	mov	r2, r5
 80075b6:	4681      	mov	r9, r0
 80075b8:	463d      	mov	r5, r7
 80075ba:	4603      	mov	r3, r0
 80075bc:	2a65      	cmp	r2, #101	@ 0x65
 80075be:	d001      	beq.n	80075c4 <_strtod_l+0x174>
 80075c0:	2a45      	cmp	r2, #69	@ 0x45
 80075c2:	d114      	bne.n	80075ee <_strtod_l+0x19e>
 80075c4:	b91d      	cbnz	r5, 80075ce <_strtod_l+0x17e>
 80075c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075c8:	4302      	orrs	r2, r0
 80075ca:	d095      	beq.n	80074f8 <_strtod_l+0xa8>
 80075cc:	2500      	movs	r5, #0
 80075ce:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80075d0:	1c62      	adds	r2, r4, #1
 80075d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80075d4:	7862      	ldrb	r2, [r4, #1]
 80075d6:	2a2b      	cmp	r2, #43	@ 0x2b
 80075d8:	d077      	beq.n	80076ca <_strtod_l+0x27a>
 80075da:	2a2d      	cmp	r2, #45	@ 0x2d
 80075dc:	d07b      	beq.n	80076d6 <_strtod_l+0x286>
 80075de:	f04f 0c00 	mov.w	ip, #0
 80075e2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80075e6:	2909      	cmp	r1, #9
 80075e8:	f240 8082 	bls.w	80076f0 <_strtod_l+0x2a0>
 80075ec:	9419      	str	r4, [sp, #100]	@ 0x64
 80075ee:	f04f 0800 	mov.w	r8, #0
 80075f2:	e0a2      	b.n	800773a <_strtod_l+0x2ea>
 80075f4:	2300      	movs	r3, #0
 80075f6:	e7c7      	b.n	8007588 <_strtod_l+0x138>
 80075f8:	2f08      	cmp	r7, #8
 80075fa:	bfd5      	itete	le
 80075fc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80075fe:	9908      	ldrgt	r1, [sp, #32]
 8007600:	fb02 3301 	mlale	r3, r2, r1, r3
 8007604:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007608:	f100 0001 	add.w	r0, r0, #1
 800760c:	bfd4      	ite	le
 800760e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007610:	9308      	strgt	r3, [sp, #32]
 8007612:	3701      	adds	r7, #1
 8007614:	9019      	str	r0, [sp, #100]	@ 0x64
 8007616:	e7bf      	b.n	8007598 <_strtod_l+0x148>
 8007618:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800761a:	1c5a      	adds	r2, r3, #1
 800761c:	9219      	str	r2, [sp, #100]	@ 0x64
 800761e:	785a      	ldrb	r2, [r3, #1]
 8007620:	b37f      	cbz	r7, 8007682 <_strtod_l+0x232>
 8007622:	4681      	mov	r9, r0
 8007624:	463d      	mov	r5, r7
 8007626:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800762a:	2b09      	cmp	r3, #9
 800762c:	d912      	bls.n	8007654 <_strtod_l+0x204>
 800762e:	2301      	movs	r3, #1
 8007630:	e7c4      	b.n	80075bc <_strtod_l+0x16c>
 8007632:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007634:	1c5a      	adds	r2, r3, #1
 8007636:	9219      	str	r2, [sp, #100]	@ 0x64
 8007638:	785a      	ldrb	r2, [r3, #1]
 800763a:	3001      	adds	r0, #1
 800763c:	2a30      	cmp	r2, #48	@ 0x30
 800763e:	d0f8      	beq.n	8007632 <_strtod_l+0x1e2>
 8007640:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007644:	2b08      	cmp	r3, #8
 8007646:	f200 84d3 	bhi.w	8007ff0 <_strtod_l+0xba0>
 800764a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800764c:	930c      	str	r3, [sp, #48]	@ 0x30
 800764e:	4681      	mov	r9, r0
 8007650:	2000      	movs	r0, #0
 8007652:	4605      	mov	r5, r0
 8007654:	3a30      	subs	r2, #48	@ 0x30
 8007656:	f100 0301 	add.w	r3, r0, #1
 800765a:	d02a      	beq.n	80076b2 <_strtod_l+0x262>
 800765c:	4499      	add	r9, r3
 800765e:	eb00 0c05 	add.w	ip, r0, r5
 8007662:	462b      	mov	r3, r5
 8007664:	210a      	movs	r1, #10
 8007666:	4563      	cmp	r3, ip
 8007668:	d10d      	bne.n	8007686 <_strtod_l+0x236>
 800766a:	1c69      	adds	r1, r5, #1
 800766c:	4401      	add	r1, r0
 800766e:	4428      	add	r0, r5
 8007670:	2808      	cmp	r0, #8
 8007672:	dc16      	bgt.n	80076a2 <_strtod_l+0x252>
 8007674:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007676:	230a      	movs	r3, #10
 8007678:	fb03 2300 	mla	r3, r3, r0, r2
 800767c:	930a      	str	r3, [sp, #40]	@ 0x28
 800767e:	2300      	movs	r3, #0
 8007680:	e018      	b.n	80076b4 <_strtod_l+0x264>
 8007682:	4638      	mov	r0, r7
 8007684:	e7da      	b.n	800763c <_strtod_l+0x1ec>
 8007686:	2b08      	cmp	r3, #8
 8007688:	f103 0301 	add.w	r3, r3, #1
 800768c:	dc03      	bgt.n	8007696 <_strtod_l+0x246>
 800768e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007690:	434e      	muls	r6, r1
 8007692:	960a      	str	r6, [sp, #40]	@ 0x28
 8007694:	e7e7      	b.n	8007666 <_strtod_l+0x216>
 8007696:	2b10      	cmp	r3, #16
 8007698:	bfde      	ittt	le
 800769a:	9e08      	ldrle	r6, [sp, #32]
 800769c:	434e      	mulle	r6, r1
 800769e:	9608      	strle	r6, [sp, #32]
 80076a0:	e7e1      	b.n	8007666 <_strtod_l+0x216>
 80076a2:	280f      	cmp	r0, #15
 80076a4:	dceb      	bgt.n	800767e <_strtod_l+0x22e>
 80076a6:	9808      	ldr	r0, [sp, #32]
 80076a8:	230a      	movs	r3, #10
 80076aa:	fb03 2300 	mla	r3, r3, r0, r2
 80076ae:	9308      	str	r3, [sp, #32]
 80076b0:	e7e5      	b.n	800767e <_strtod_l+0x22e>
 80076b2:	4629      	mov	r1, r5
 80076b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80076b6:	1c50      	adds	r0, r2, #1
 80076b8:	9019      	str	r0, [sp, #100]	@ 0x64
 80076ba:	7852      	ldrb	r2, [r2, #1]
 80076bc:	4618      	mov	r0, r3
 80076be:	460d      	mov	r5, r1
 80076c0:	e7b1      	b.n	8007626 <_strtod_l+0x1d6>
 80076c2:	f04f 0900 	mov.w	r9, #0
 80076c6:	2301      	movs	r3, #1
 80076c8:	e77d      	b.n	80075c6 <_strtod_l+0x176>
 80076ca:	f04f 0c00 	mov.w	ip, #0
 80076ce:	1ca2      	adds	r2, r4, #2
 80076d0:	9219      	str	r2, [sp, #100]	@ 0x64
 80076d2:	78a2      	ldrb	r2, [r4, #2]
 80076d4:	e785      	b.n	80075e2 <_strtod_l+0x192>
 80076d6:	f04f 0c01 	mov.w	ip, #1
 80076da:	e7f8      	b.n	80076ce <_strtod_l+0x27e>
 80076dc:	0800cca0 	.word	0x0800cca0
 80076e0:	0800cc88 	.word	0x0800cc88
 80076e4:	7ff00000 	.word	0x7ff00000
 80076e8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80076ea:	1c51      	adds	r1, r2, #1
 80076ec:	9119      	str	r1, [sp, #100]	@ 0x64
 80076ee:	7852      	ldrb	r2, [r2, #1]
 80076f0:	2a30      	cmp	r2, #48	@ 0x30
 80076f2:	d0f9      	beq.n	80076e8 <_strtod_l+0x298>
 80076f4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80076f8:	2908      	cmp	r1, #8
 80076fa:	f63f af78 	bhi.w	80075ee <_strtod_l+0x19e>
 80076fe:	3a30      	subs	r2, #48	@ 0x30
 8007700:	920e      	str	r2, [sp, #56]	@ 0x38
 8007702:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007704:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007706:	f04f 080a 	mov.w	r8, #10
 800770a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800770c:	1c56      	adds	r6, r2, #1
 800770e:	9619      	str	r6, [sp, #100]	@ 0x64
 8007710:	7852      	ldrb	r2, [r2, #1]
 8007712:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007716:	f1be 0f09 	cmp.w	lr, #9
 800771a:	d939      	bls.n	8007790 <_strtod_l+0x340>
 800771c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800771e:	1a76      	subs	r6, r6, r1
 8007720:	2e08      	cmp	r6, #8
 8007722:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007726:	dc03      	bgt.n	8007730 <_strtod_l+0x2e0>
 8007728:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800772a:	4588      	cmp	r8, r1
 800772c:	bfa8      	it	ge
 800772e:	4688      	movge	r8, r1
 8007730:	f1bc 0f00 	cmp.w	ip, #0
 8007734:	d001      	beq.n	800773a <_strtod_l+0x2ea>
 8007736:	f1c8 0800 	rsb	r8, r8, #0
 800773a:	2d00      	cmp	r5, #0
 800773c:	d14e      	bne.n	80077dc <_strtod_l+0x38c>
 800773e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007740:	4308      	orrs	r0, r1
 8007742:	f47f aebe 	bne.w	80074c2 <_strtod_l+0x72>
 8007746:	2b00      	cmp	r3, #0
 8007748:	f47f aed6 	bne.w	80074f8 <_strtod_l+0xa8>
 800774c:	2a69      	cmp	r2, #105	@ 0x69
 800774e:	d028      	beq.n	80077a2 <_strtod_l+0x352>
 8007750:	dc25      	bgt.n	800779e <_strtod_l+0x34e>
 8007752:	2a49      	cmp	r2, #73	@ 0x49
 8007754:	d025      	beq.n	80077a2 <_strtod_l+0x352>
 8007756:	2a4e      	cmp	r2, #78	@ 0x4e
 8007758:	f47f aece 	bne.w	80074f8 <_strtod_l+0xa8>
 800775c:	499b      	ldr	r1, [pc, #620]	@ (80079cc <_strtod_l+0x57c>)
 800775e:	a819      	add	r0, sp, #100	@ 0x64
 8007760:	f001 f9c6 	bl	8008af0 <__match>
 8007764:	2800      	cmp	r0, #0
 8007766:	f43f aec7 	beq.w	80074f8 <_strtod_l+0xa8>
 800776a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	2b28      	cmp	r3, #40	@ 0x28
 8007770:	d12e      	bne.n	80077d0 <_strtod_l+0x380>
 8007772:	4997      	ldr	r1, [pc, #604]	@ (80079d0 <_strtod_l+0x580>)
 8007774:	aa1c      	add	r2, sp, #112	@ 0x70
 8007776:	a819      	add	r0, sp, #100	@ 0x64
 8007778:	f001 f9ce 	bl	8008b18 <__hexnan>
 800777c:	2805      	cmp	r0, #5
 800777e:	d127      	bne.n	80077d0 <_strtod_l+0x380>
 8007780:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007782:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007786:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800778a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800778e:	e698      	b.n	80074c2 <_strtod_l+0x72>
 8007790:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007792:	fb08 2101 	mla	r1, r8, r1, r2
 8007796:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800779a:	920e      	str	r2, [sp, #56]	@ 0x38
 800779c:	e7b5      	b.n	800770a <_strtod_l+0x2ba>
 800779e:	2a6e      	cmp	r2, #110	@ 0x6e
 80077a0:	e7da      	b.n	8007758 <_strtod_l+0x308>
 80077a2:	498c      	ldr	r1, [pc, #560]	@ (80079d4 <_strtod_l+0x584>)
 80077a4:	a819      	add	r0, sp, #100	@ 0x64
 80077a6:	f001 f9a3 	bl	8008af0 <__match>
 80077aa:	2800      	cmp	r0, #0
 80077ac:	f43f aea4 	beq.w	80074f8 <_strtod_l+0xa8>
 80077b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80077b2:	4989      	ldr	r1, [pc, #548]	@ (80079d8 <_strtod_l+0x588>)
 80077b4:	3b01      	subs	r3, #1
 80077b6:	a819      	add	r0, sp, #100	@ 0x64
 80077b8:	9319      	str	r3, [sp, #100]	@ 0x64
 80077ba:	f001 f999 	bl	8008af0 <__match>
 80077be:	b910      	cbnz	r0, 80077c6 <_strtod_l+0x376>
 80077c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80077c2:	3301      	adds	r3, #1
 80077c4:	9319      	str	r3, [sp, #100]	@ 0x64
 80077c6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80079e8 <_strtod_l+0x598>
 80077ca:	f04f 0a00 	mov.w	sl, #0
 80077ce:	e678      	b.n	80074c2 <_strtod_l+0x72>
 80077d0:	4882      	ldr	r0, [pc, #520]	@ (80079dc <_strtod_l+0x58c>)
 80077d2:	f000 fec9 	bl	8008568 <nan>
 80077d6:	ec5b ab10 	vmov	sl, fp, d0
 80077da:	e672      	b.n	80074c2 <_strtod_l+0x72>
 80077dc:	eba8 0309 	sub.w	r3, r8, r9
 80077e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80077e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80077e4:	2f00      	cmp	r7, #0
 80077e6:	bf08      	it	eq
 80077e8:	462f      	moveq	r7, r5
 80077ea:	2d10      	cmp	r5, #16
 80077ec:	462c      	mov	r4, r5
 80077ee:	bfa8      	it	ge
 80077f0:	2410      	movge	r4, #16
 80077f2:	f7f8 fe87 	bl	8000504 <__aeabi_ui2d>
 80077f6:	2d09      	cmp	r5, #9
 80077f8:	4682      	mov	sl, r0
 80077fa:	468b      	mov	fp, r1
 80077fc:	dc13      	bgt.n	8007826 <_strtod_l+0x3d6>
 80077fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007800:	2b00      	cmp	r3, #0
 8007802:	f43f ae5e 	beq.w	80074c2 <_strtod_l+0x72>
 8007806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007808:	dd78      	ble.n	80078fc <_strtod_l+0x4ac>
 800780a:	2b16      	cmp	r3, #22
 800780c:	dc5f      	bgt.n	80078ce <_strtod_l+0x47e>
 800780e:	4974      	ldr	r1, [pc, #464]	@ (80079e0 <_strtod_l+0x590>)
 8007810:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007814:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007818:	4652      	mov	r2, sl
 800781a:	465b      	mov	r3, fp
 800781c:	f7f8 feec 	bl	80005f8 <__aeabi_dmul>
 8007820:	4682      	mov	sl, r0
 8007822:	468b      	mov	fp, r1
 8007824:	e64d      	b.n	80074c2 <_strtod_l+0x72>
 8007826:	4b6e      	ldr	r3, [pc, #440]	@ (80079e0 <_strtod_l+0x590>)
 8007828:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800782c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007830:	f7f8 fee2 	bl	80005f8 <__aeabi_dmul>
 8007834:	4682      	mov	sl, r0
 8007836:	9808      	ldr	r0, [sp, #32]
 8007838:	468b      	mov	fp, r1
 800783a:	f7f8 fe63 	bl	8000504 <__aeabi_ui2d>
 800783e:	4602      	mov	r2, r0
 8007840:	460b      	mov	r3, r1
 8007842:	4650      	mov	r0, sl
 8007844:	4659      	mov	r1, fp
 8007846:	f7f8 fd21 	bl	800028c <__adddf3>
 800784a:	2d0f      	cmp	r5, #15
 800784c:	4682      	mov	sl, r0
 800784e:	468b      	mov	fp, r1
 8007850:	ddd5      	ble.n	80077fe <_strtod_l+0x3ae>
 8007852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007854:	1b2c      	subs	r4, r5, r4
 8007856:	441c      	add	r4, r3
 8007858:	2c00      	cmp	r4, #0
 800785a:	f340 8096 	ble.w	800798a <_strtod_l+0x53a>
 800785e:	f014 030f 	ands.w	r3, r4, #15
 8007862:	d00a      	beq.n	800787a <_strtod_l+0x42a>
 8007864:	495e      	ldr	r1, [pc, #376]	@ (80079e0 <_strtod_l+0x590>)
 8007866:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800786a:	4652      	mov	r2, sl
 800786c:	465b      	mov	r3, fp
 800786e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007872:	f7f8 fec1 	bl	80005f8 <__aeabi_dmul>
 8007876:	4682      	mov	sl, r0
 8007878:	468b      	mov	fp, r1
 800787a:	f034 040f 	bics.w	r4, r4, #15
 800787e:	d073      	beq.n	8007968 <_strtod_l+0x518>
 8007880:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007884:	dd48      	ble.n	8007918 <_strtod_l+0x4c8>
 8007886:	2400      	movs	r4, #0
 8007888:	46a0      	mov	r8, r4
 800788a:	940a      	str	r4, [sp, #40]	@ 0x28
 800788c:	46a1      	mov	r9, r4
 800788e:	9a05      	ldr	r2, [sp, #20]
 8007890:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80079e8 <_strtod_l+0x598>
 8007894:	2322      	movs	r3, #34	@ 0x22
 8007896:	6013      	str	r3, [r2, #0]
 8007898:	f04f 0a00 	mov.w	sl, #0
 800789c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800789e:	2b00      	cmp	r3, #0
 80078a0:	f43f ae0f 	beq.w	80074c2 <_strtod_l+0x72>
 80078a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80078a6:	9805      	ldr	r0, [sp, #20]
 80078a8:	f7ff f942 	bl	8006b30 <_Bfree>
 80078ac:	9805      	ldr	r0, [sp, #20]
 80078ae:	4649      	mov	r1, r9
 80078b0:	f7ff f93e 	bl	8006b30 <_Bfree>
 80078b4:	9805      	ldr	r0, [sp, #20]
 80078b6:	4641      	mov	r1, r8
 80078b8:	f7ff f93a 	bl	8006b30 <_Bfree>
 80078bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80078be:	9805      	ldr	r0, [sp, #20]
 80078c0:	f7ff f936 	bl	8006b30 <_Bfree>
 80078c4:	9805      	ldr	r0, [sp, #20]
 80078c6:	4621      	mov	r1, r4
 80078c8:	f7ff f932 	bl	8006b30 <_Bfree>
 80078cc:	e5f9      	b.n	80074c2 <_strtod_l+0x72>
 80078ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078d0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80078d4:	4293      	cmp	r3, r2
 80078d6:	dbbc      	blt.n	8007852 <_strtod_l+0x402>
 80078d8:	4c41      	ldr	r4, [pc, #260]	@ (80079e0 <_strtod_l+0x590>)
 80078da:	f1c5 050f 	rsb	r5, r5, #15
 80078de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80078e2:	4652      	mov	r2, sl
 80078e4:	465b      	mov	r3, fp
 80078e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078ea:	f7f8 fe85 	bl	80005f8 <__aeabi_dmul>
 80078ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078f0:	1b5d      	subs	r5, r3, r5
 80078f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80078f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80078fa:	e78f      	b.n	800781c <_strtod_l+0x3cc>
 80078fc:	3316      	adds	r3, #22
 80078fe:	dba8      	blt.n	8007852 <_strtod_l+0x402>
 8007900:	4b37      	ldr	r3, [pc, #220]	@ (80079e0 <_strtod_l+0x590>)
 8007902:	eba9 0808 	sub.w	r8, r9, r8
 8007906:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800790a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800790e:	4650      	mov	r0, sl
 8007910:	4659      	mov	r1, fp
 8007912:	f7f8 ff9b 	bl	800084c <__aeabi_ddiv>
 8007916:	e783      	b.n	8007820 <_strtod_l+0x3d0>
 8007918:	4b32      	ldr	r3, [pc, #200]	@ (80079e4 <_strtod_l+0x594>)
 800791a:	9308      	str	r3, [sp, #32]
 800791c:	2300      	movs	r3, #0
 800791e:	1124      	asrs	r4, r4, #4
 8007920:	4650      	mov	r0, sl
 8007922:	4659      	mov	r1, fp
 8007924:	461e      	mov	r6, r3
 8007926:	2c01      	cmp	r4, #1
 8007928:	dc21      	bgt.n	800796e <_strtod_l+0x51e>
 800792a:	b10b      	cbz	r3, 8007930 <_strtod_l+0x4e0>
 800792c:	4682      	mov	sl, r0
 800792e:	468b      	mov	fp, r1
 8007930:	492c      	ldr	r1, [pc, #176]	@ (80079e4 <_strtod_l+0x594>)
 8007932:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007936:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800793a:	4652      	mov	r2, sl
 800793c:	465b      	mov	r3, fp
 800793e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007942:	f7f8 fe59 	bl	80005f8 <__aeabi_dmul>
 8007946:	4b28      	ldr	r3, [pc, #160]	@ (80079e8 <_strtod_l+0x598>)
 8007948:	460a      	mov	r2, r1
 800794a:	400b      	ands	r3, r1
 800794c:	4927      	ldr	r1, [pc, #156]	@ (80079ec <_strtod_l+0x59c>)
 800794e:	428b      	cmp	r3, r1
 8007950:	4682      	mov	sl, r0
 8007952:	d898      	bhi.n	8007886 <_strtod_l+0x436>
 8007954:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007958:	428b      	cmp	r3, r1
 800795a:	bf86      	itte	hi
 800795c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80079f0 <_strtod_l+0x5a0>
 8007960:	f04f 3aff 	movhi.w	sl, #4294967295
 8007964:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007968:	2300      	movs	r3, #0
 800796a:	9308      	str	r3, [sp, #32]
 800796c:	e07a      	b.n	8007a64 <_strtod_l+0x614>
 800796e:	07e2      	lsls	r2, r4, #31
 8007970:	d505      	bpl.n	800797e <_strtod_l+0x52e>
 8007972:	9b08      	ldr	r3, [sp, #32]
 8007974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007978:	f7f8 fe3e 	bl	80005f8 <__aeabi_dmul>
 800797c:	2301      	movs	r3, #1
 800797e:	9a08      	ldr	r2, [sp, #32]
 8007980:	3208      	adds	r2, #8
 8007982:	3601      	adds	r6, #1
 8007984:	1064      	asrs	r4, r4, #1
 8007986:	9208      	str	r2, [sp, #32]
 8007988:	e7cd      	b.n	8007926 <_strtod_l+0x4d6>
 800798a:	d0ed      	beq.n	8007968 <_strtod_l+0x518>
 800798c:	4264      	negs	r4, r4
 800798e:	f014 020f 	ands.w	r2, r4, #15
 8007992:	d00a      	beq.n	80079aa <_strtod_l+0x55a>
 8007994:	4b12      	ldr	r3, [pc, #72]	@ (80079e0 <_strtod_l+0x590>)
 8007996:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800799a:	4650      	mov	r0, sl
 800799c:	4659      	mov	r1, fp
 800799e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a2:	f7f8 ff53 	bl	800084c <__aeabi_ddiv>
 80079a6:	4682      	mov	sl, r0
 80079a8:	468b      	mov	fp, r1
 80079aa:	1124      	asrs	r4, r4, #4
 80079ac:	d0dc      	beq.n	8007968 <_strtod_l+0x518>
 80079ae:	2c1f      	cmp	r4, #31
 80079b0:	dd20      	ble.n	80079f4 <_strtod_l+0x5a4>
 80079b2:	2400      	movs	r4, #0
 80079b4:	46a0      	mov	r8, r4
 80079b6:	940a      	str	r4, [sp, #40]	@ 0x28
 80079b8:	46a1      	mov	r9, r4
 80079ba:	9a05      	ldr	r2, [sp, #20]
 80079bc:	2322      	movs	r3, #34	@ 0x22
 80079be:	f04f 0a00 	mov.w	sl, #0
 80079c2:	f04f 0b00 	mov.w	fp, #0
 80079c6:	6013      	str	r3, [r2, #0]
 80079c8:	e768      	b.n	800789c <_strtod_l+0x44c>
 80079ca:	bf00      	nop
 80079cc:	0800ca79 	.word	0x0800ca79
 80079d0:	0800cc8c 	.word	0x0800cc8c
 80079d4:	0800ca71 	.word	0x0800ca71
 80079d8:	0800caa8 	.word	0x0800caa8
 80079dc:	0800ce35 	.word	0x0800ce35
 80079e0:	0800cbc0 	.word	0x0800cbc0
 80079e4:	0800cb98 	.word	0x0800cb98
 80079e8:	7ff00000 	.word	0x7ff00000
 80079ec:	7ca00000 	.word	0x7ca00000
 80079f0:	7fefffff 	.word	0x7fefffff
 80079f4:	f014 0310 	ands.w	r3, r4, #16
 80079f8:	bf18      	it	ne
 80079fa:	236a      	movne	r3, #106	@ 0x6a
 80079fc:	4ea9      	ldr	r6, [pc, #676]	@ (8007ca4 <_strtod_l+0x854>)
 80079fe:	9308      	str	r3, [sp, #32]
 8007a00:	4650      	mov	r0, sl
 8007a02:	4659      	mov	r1, fp
 8007a04:	2300      	movs	r3, #0
 8007a06:	07e2      	lsls	r2, r4, #31
 8007a08:	d504      	bpl.n	8007a14 <_strtod_l+0x5c4>
 8007a0a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a0e:	f7f8 fdf3 	bl	80005f8 <__aeabi_dmul>
 8007a12:	2301      	movs	r3, #1
 8007a14:	1064      	asrs	r4, r4, #1
 8007a16:	f106 0608 	add.w	r6, r6, #8
 8007a1a:	d1f4      	bne.n	8007a06 <_strtod_l+0x5b6>
 8007a1c:	b10b      	cbz	r3, 8007a22 <_strtod_l+0x5d2>
 8007a1e:	4682      	mov	sl, r0
 8007a20:	468b      	mov	fp, r1
 8007a22:	9b08      	ldr	r3, [sp, #32]
 8007a24:	b1b3      	cbz	r3, 8007a54 <_strtod_l+0x604>
 8007a26:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007a2a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	4659      	mov	r1, fp
 8007a32:	dd0f      	ble.n	8007a54 <_strtod_l+0x604>
 8007a34:	2b1f      	cmp	r3, #31
 8007a36:	dd55      	ble.n	8007ae4 <_strtod_l+0x694>
 8007a38:	2b34      	cmp	r3, #52	@ 0x34
 8007a3a:	bfde      	ittt	le
 8007a3c:	f04f 33ff 	movle.w	r3, #4294967295
 8007a40:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007a44:	4093      	lslle	r3, r2
 8007a46:	f04f 0a00 	mov.w	sl, #0
 8007a4a:	bfcc      	ite	gt
 8007a4c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007a50:	ea03 0b01 	andle.w	fp, r3, r1
 8007a54:	2200      	movs	r2, #0
 8007a56:	2300      	movs	r3, #0
 8007a58:	4650      	mov	r0, sl
 8007a5a:	4659      	mov	r1, fp
 8007a5c:	f7f9 f834 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a60:	2800      	cmp	r0, #0
 8007a62:	d1a6      	bne.n	80079b2 <_strtod_l+0x562>
 8007a64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007a6a:	9805      	ldr	r0, [sp, #20]
 8007a6c:	462b      	mov	r3, r5
 8007a6e:	463a      	mov	r2, r7
 8007a70:	f7ff f8c6 	bl	8006c00 <__s2b>
 8007a74:	900a      	str	r0, [sp, #40]	@ 0x28
 8007a76:	2800      	cmp	r0, #0
 8007a78:	f43f af05 	beq.w	8007886 <_strtod_l+0x436>
 8007a7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a7e:	2a00      	cmp	r2, #0
 8007a80:	eba9 0308 	sub.w	r3, r9, r8
 8007a84:	bfa8      	it	ge
 8007a86:	2300      	movge	r3, #0
 8007a88:	9312      	str	r3, [sp, #72]	@ 0x48
 8007a8a:	2400      	movs	r4, #0
 8007a8c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007a90:	9316      	str	r3, [sp, #88]	@ 0x58
 8007a92:	46a0      	mov	r8, r4
 8007a94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a96:	9805      	ldr	r0, [sp, #20]
 8007a98:	6859      	ldr	r1, [r3, #4]
 8007a9a:	f7ff f809 	bl	8006ab0 <_Balloc>
 8007a9e:	4681      	mov	r9, r0
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	f43f aef4 	beq.w	800788e <_strtod_l+0x43e>
 8007aa6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007aa8:	691a      	ldr	r2, [r3, #16]
 8007aaa:	3202      	adds	r2, #2
 8007aac:	f103 010c 	add.w	r1, r3, #12
 8007ab0:	0092      	lsls	r2, r2, #2
 8007ab2:	300c      	adds	r0, #12
 8007ab4:	f7fe f89b 	bl	8005bee <memcpy>
 8007ab8:	ec4b ab10 	vmov	d0, sl, fp
 8007abc:	9805      	ldr	r0, [sp, #20]
 8007abe:	aa1c      	add	r2, sp, #112	@ 0x70
 8007ac0:	a91b      	add	r1, sp, #108	@ 0x6c
 8007ac2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007ac6:	f7ff fbd7 	bl	8007278 <__d2b>
 8007aca:	901a      	str	r0, [sp, #104]	@ 0x68
 8007acc:	2800      	cmp	r0, #0
 8007ace:	f43f aede 	beq.w	800788e <_strtod_l+0x43e>
 8007ad2:	9805      	ldr	r0, [sp, #20]
 8007ad4:	2101      	movs	r1, #1
 8007ad6:	f7ff f929 	bl	8006d2c <__i2b>
 8007ada:	4680      	mov	r8, r0
 8007adc:	b948      	cbnz	r0, 8007af2 <_strtod_l+0x6a2>
 8007ade:	f04f 0800 	mov.w	r8, #0
 8007ae2:	e6d4      	b.n	800788e <_strtod_l+0x43e>
 8007ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8007aec:	ea03 0a0a 	and.w	sl, r3, sl
 8007af0:	e7b0      	b.n	8007a54 <_strtod_l+0x604>
 8007af2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007af4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007af6:	2d00      	cmp	r5, #0
 8007af8:	bfab      	itete	ge
 8007afa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007afc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007afe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007b00:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007b02:	bfac      	ite	ge
 8007b04:	18ef      	addge	r7, r5, r3
 8007b06:	1b5e      	sublt	r6, r3, r5
 8007b08:	9b08      	ldr	r3, [sp, #32]
 8007b0a:	1aed      	subs	r5, r5, r3
 8007b0c:	4415      	add	r5, r2
 8007b0e:	4b66      	ldr	r3, [pc, #408]	@ (8007ca8 <_strtod_l+0x858>)
 8007b10:	3d01      	subs	r5, #1
 8007b12:	429d      	cmp	r5, r3
 8007b14:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007b18:	da50      	bge.n	8007bbc <_strtod_l+0x76c>
 8007b1a:	1b5b      	subs	r3, r3, r5
 8007b1c:	2b1f      	cmp	r3, #31
 8007b1e:	eba2 0203 	sub.w	r2, r2, r3
 8007b22:	f04f 0101 	mov.w	r1, #1
 8007b26:	dc3d      	bgt.n	8007ba4 <_strtod_l+0x754>
 8007b28:	fa01 f303 	lsl.w	r3, r1, r3
 8007b2c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007b2e:	2300      	movs	r3, #0
 8007b30:	9310      	str	r3, [sp, #64]	@ 0x40
 8007b32:	18bd      	adds	r5, r7, r2
 8007b34:	9b08      	ldr	r3, [sp, #32]
 8007b36:	42af      	cmp	r7, r5
 8007b38:	4416      	add	r6, r2
 8007b3a:	441e      	add	r6, r3
 8007b3c:	463b      	mov	r3, r7
 8007b3e:	bfa8      	it	ge
 8007b40:	462b      	movge	r3, r5
 8007b42:	42b3      	cmp	r3, r6
 8007b44:	bfa8      	it	ge
 8007b46:	4633      	movge	r3, r6
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	bfc2      	ittt	gt
 8007b4c:	1aed      	subgt	r5, r5, r3
 8007b4e:	1af6      	subgt	r6, r6, r3
 8007b50:	1aff      	subgt	r7, r7, r3
 8007b52:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	dd16      	ble.n	8007b86 <_strtod_l+0x736>
 8007b58:	4641      	mov	r1, r8
 8007b5a:	9805      	ldr	r0, [sp, #20]
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	f7ff f9a5 	bl	8006eac <__pow5mult>
 8007b62:	4680      	mov	r8, r0
 8007b64:	2800      	cmp	r0, #0
 8007b66:	d0ba      	beq.n	8007ade <_strtod_l+0x68e>
 8007b68:	4601      	mov	r1, r0
 8007b6a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007b6c:	9805      	ldr	r0, [sp, #20]
 8007b6e:	f7ff f8f3 	bl	8006d58 <__multiply>
 8007b72:	900e      	str	r0, [sp, #56]	@ 0x38
 8007b74:	2800      	cmp	r0, #0
 8007b76:	f43f ae8a 	beq.w	800788e <_strtod_l+0x43e>
 8007b7a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007b7c:	9805      	ldr	r0, [sp, #20]
 8007b7e:	f7fe ffd7 	bl	8006b30 <_Bfree>
 8007b82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b84:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b86:	2d00      	cmp	r5, #0
 8007b88:	dc1d      	bgt.n	8007bc6 <_strtod_l+0x776>
 8007b8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	dd23      	ble.n	8007bd8 <_strtod_l+0x788>
 8007b90:	4649      	mov	r1, r9
 8007b92:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007b94:	9805      	ldr	r0, [sp, #20]
 8007b96:	f7ff f989 	bl	8006eac <__pow5mult>
 8007b9a:	4681      	mov	r9, r0
 8007b9c:	b9e0      	cbnz	r0, 8007bd8 <_strtod_l+0x788>
 8007b9e:	f04f 0900 	mov.w	r9, #0
 8007ba2:	e674      	b.n	800788e <_strtod_l+0x43e>
 8007ba4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007ba8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007bac:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007bb0:	35e2      	adds	r5, #226	@ 0xe2
 8007bb2:	fa01 f305 	lsl.w	r3, r1, r5
 8007bb6:	9310      	str	r3, [sp, #64]	@ 0x40
 8007bb8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007bba:	e7ba      	b.n	8007b32 <_strtod_l+0x6e2>
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	9310      	str	r3, [sp, #64]	@ 0x40
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007bc4:	e7b5      	b.n	8007b32 <_strtod_l+0x6e2>
 8007bc6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007bc8:	9805      	ldr	r0, [sp, #20]
 8007bca:	462a      	mov	r2, r5
 8007bcc:	f7ff f9c8 	bl	8006f60 <__lshift>
 8007bd0:	901a      	str	r0, [sp, #104]	@ 0x68
 8007bd2:	2800      	cmp	r0, #0
 8007bd4:	d1d9      	bne.n	8007b8a <_strtod_l+0x73a>
 8007bd6:	e65a      	b.n	800788e <_strtod_l+0x43e>
 8007bd8:	2e00      	cmp	r6, #0
 8007bda:	dd07      	ble.n	8007bec <_strtod_l+0x79c>
 8007bdc:	4649      	mov	r1, r9
 8007bde:	9805      	ldr	r0, [sp, #20]
 8007be0:	4632      	mov	r2, r6
 8007be2:	f7ff f9bd 	bl	8006f60 <__lshift>
 8007be6:	4681      	mov	r9, r0
 8007be8:	2800      	cmp	r0, #0
 8007bea:	d0d8      	beq.n	8007b9e <_strtod_l+0x74e>
 8007bec:	2f00      	cmp	r7, #0
 8007bee:	dd08      	ble.n	8007c02 <_strtod_l+0x7b2>
 8007bf0:	4641      	mov	r1, r8
 8007bf2:	9805      	ldr	r0, [sp, #20]
 8007bf4:	463a      	mov	r2, r7
 8007bf6:	f7ff f9b3 	bl	8006f60 <__lshift>
 8007bfa:	4680      	mov	r8, r0
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	f43f ae46 	beq.w	800788e <_strtod_l+0x43e>
 8007c02:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c04:	9805      	ldr	r0, [sp, #20]
 8007c06:	464a      	mov	r2, r9
 8007c08:	f7ff fa32 	bl	8007070 <__mdiff>
 8007c0c:	4604      	mov	r4, r0
 8007c0e:	2800      	cmp	r0, #0
 8007c10:	f43f ae3d 	beq.w	800788e <_strtod_l+0x43e>
 8007c14:	68c3      	ldr	r3, [r0, #12]
 8007c16:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007c18:	2300      	movs	r3, #0
 8007c1a:	60c3      	str	r3, [r0, #12]
 8007c1c:	4641      	mov	r1, r8
 8007c1e:	f7ff fa0b 	bl	8007038 <__mcmp>
 8007c22:	2800      	cmp	r0, #0
 8007c24:	da46      	bge.n	8007cb4 <_strtod_l+0x864>
 8007c26:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c28:	ea53 030a 	orrs.w	r3, r3, sl
 8007c2c:	d16c      	bne.n	8007d08 <_strtod_l+0x8b8>
 8007c2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d168      	bne.n	8007d08 <_strtod_l+0x8b8>
 8007c36:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007c3a:	0d1b      	lsrs	r3, r3, #20
 8007c3c:	051b      	lsls	r3, r3, #20
 8007c3e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007c42:	d961      	bls.n	8007d08 <_strtod_l+0x8b8>
 8007c44:	6963      	ldr	r3, [r4, #20]
 8007c46:	b913      	cbnz	r3, 8007c4e <_strtod_l+0x7fe>
 8007c48:	6923      	ldr	r3, [r4, #16]
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	dd5c      	ble.n	8007d08 <_strtod_l+0x8b8>
 8007c4e:	4621      	mov	r1, r4
 8007c50:	2201      	movs	r2, #1
 8007c52:	9805      	ldr	r0, [sp, #20]
 8007c54:	f7ff f984 	bl	8006f60 <__lshift>
 8007c58:	4641      	mov	r1, r8
 8007c5a:	4604      	mov	r4, r0
 8007c5c:	f7ff f9ec 	bl	8007038 <__mcmp>
 8007c60:	2800      	cmp	r0, #0
 8007c62:	dd51      	ble.n	8007d08 <_strtod_l+0x8b8>
 8007c64:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007c68:	9a08      	ldr	r2, [sp, #32]
 8007c6a:	0d1b      	lsrs	r3, r3, #20
 8007c6c:	051b      	lsls	r3, r3, #20
 8007c6e:	2a00      	cmp	r2, #0
 8007c70:	d06b      	beq.n	8007d4a <_strtod_l+0x8fa>
 8007c72:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007c76:	d868      	bhi.n	8007d4a <_strtod_l+0x8fa>
 8007c78:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007c7c:	f67f ae9d 	bls.w	80079ba <_strtod_l+0x56a>
 8007c80:	4b0a      	ldr	r3, [pc, #40]	@ (8007cac <_strtod_l+0x85c>)
 8007c82:	4650      	mov	r0, sl
 8007c84:	4659      	mov	r1, fp
 8007c86:	2200      	movs	r2, #0
 8007c88:	f7f8 fcb6 	bl	80005f8 <__aeabi_dmul>
 8007c8c:	4b08      	ldr	r3, [pc, #32]	@ (8007cb0 <_strtod_l+0x860>)
 8007c8e:	400b      	ands	r3, r1
 8007c90:	4682      	mov	sl, r0
 8007c92:	468b      	mov	fp, r1
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	f47f ae05 	bne.w	80078a4 <_strtod_l+0x454>
 8007c9a:	9a05      	ldr	r2, [sp, #20]
 8007c9c:	2322      	movs	r3, #34	@ 0x22
 8007c9e:	6013      	str	r3, [r2, #0]
 8007ca0:	e600      	b.n	80078a4 <_strtod_l+0x454>
 8007ca2:	bf00      	nop
 8007ca4:	0800ccb8 	.word	0x0800ccb8
 8007ca8:	fffffc02 	.word	0xfffffc02
 8007cac:	39500000 	.word	0x39500000
 8007cb0:	7ff00000 	.word	0x7ff00000
 8007cb4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007cb8:	d165      	bne.n	8007d86 <_strtod_l+0x936>
 8007cba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007cbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007cc0:	b35a      	cbz	r2, 8007d1a <_strtod_l+0x8ca>
 8007cc2:	4a9f      	ldr	r2, [pc, #636]	@ (8007f40 <_strtod_l+0xaf0>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d12b      	bne.n	8007d20 <_strtod_l+0x8d0>
 8007cc8:	9b08      	ldr	r3, [sp, #32]
 8007cca:	4651      	mov	r1, sl
 8007ccc:	b303      	cbz	r3, 8007d10 <_strtod_l+0x8c0>
 8007cce:	4b9d      	ldr	r3, [pc, #628]	@ (8007f44 <_strtod_l+0xaf4>)
 8007cd0:	465a      	mov	r2, fp
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8007cdc:	d81b      	bhi.n	8007d16 <_strtod_l+0x8c6>
 8007cde:	0d1b      	lsrs	r3, r3, #20
 8007ce0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce8:	4299      	cmp	r1, r3
 8007cea:	d119      	bne.n	8007d20 <_strtod_l+0x8d0>
 8007cec:	4b96      	ldr	r3, [pc, #600]	@ (8007f48 <_strtod_l+0xaf8>)
 8007cee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d102      	bne.n	8007cfa <_strtod_l+0x8aa>
 8007cf4:	3101      	adds	r1, #1
 8007cf6:	f43f adca 	beq.w	800788e <_strtod_l+0x43e>
 8007cfa:	4b92      	ldr	r3, [pc, #584]	@ (8007f44 <_strtod_l+0xaf4>)
 8007cfc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007cfe:	401a      	ands	r2, r3
 8007d00:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007d04:	f04f 0a00 	mov.w	sl, #0
 8007d08:	9b08      	ldr	r3, [sp, #32]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1b8      	bne.n	8007c80 <_strtod_l+0x830>
 8007d0e:	e5c9      	b.n	80078a4 <_strtod_l+0x454>
 8007d10:	f04f 33ff 	mov.w	r3, #4294967295
 8007d14:	e7e8      	b.n	8007ce8 <_strtod_l+0x898>
 8007d16:	4613      	mov	r3, r2
 8007d18:	e7e6      	b.n	8007ce8 <_strtod_l+0x898>
 8007d1a:	ea53 030a 	orrs.w	r3, r3, sl
 8007d1e:	d0a1      	beq.n	8007c64 <_strtod_l+0x814>
 8007d20:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007d22:	b1db      	cbz	r3, 8007d5c <_strtod_l+0x90c>
 8007d24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d26:	4213      	tst	r3, r2
 8007d28:	d0ee      	beq.n	8007d08 <_strtod_l+0x8b8>
 8007d2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d2c:	9a08      	ldr	r2, [sp, #32]
 8007d2e:	4650      	mov	r0, sl
 8007d30:	4659      	mov	r1, fp
 8007d32:	b1bb      	cbz	r3, 8007d64 <_strtod_l+0x914>
 8007d34:	f7ff fb6e 	bl	8007414 <sulp>
 8007d38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d3c:	ec53 2b10 	vmov	r2, r3, d0
 8007d40:	f7f8 faa4 	bl	800028c <__adddf3>
 8007d44:	4682      	mov	sl, r0
 8007d46:	468b      	mov	fp, r1
 8007d48:	e7de      	b.n	8007d08 <_strtod_l+0x8b8>
 8007d4a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007d4e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007d52:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007d56:	f04f 3aff 	mov.w	sl, #4294967295
 8007d5a:	e7d5      	b.n	8007d08 <_strtod_l+0x8b8>
 8007d5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007d5e:	ea13 0f0a 	tst.w	r3, sl
 8007d62:	e7e1      	b.n	8007d28 <_strtod_l+0x8d8>
 8007d64:	f7ff fb56 	bl	8007414 <sulp>
 8007d68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d6c:	ec53 2b10 	vmov	r2, r3, d0
 8007d70:	f7f8 fa8a 	bl	8000288 <__aeabi_dsub>
 8007d74:	2200      	movs	r2, #0
 8007d76:	2300      	movs	r3, #0
 8007d78:	4682      	mov	sl, r0
 8007d7a:	468b      	mov	fp, r1
 8007d7c:	f7f8 fea4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d80:	2800      	cmp	r0, #0
 8007d82:	d0c1      	beq.n	8007d08 <_strtod_l+0x8b8>
 8007d84:	e619      	b.n	80079ba <_strtod_l+0x56a>
 8007d86:	4641      	mov	r1, r8
 8007d88:	4620      	mov	r0, r4
 8007d8a:	f7ff facd 	bl	8007328 <__ratio>
 8007d8e:	ec57 6b10 	vmov	r6, r7, d0
 8007d92:	2200      	movs	r2, #0
 8007d94:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007d98:	4630      	mov	r0, r6
 8007d9a:	4639      	mov	r1, r7
 8007d9c:	f7f8 fea8 	bl	8000af0 <__aeabi_dcmple>
 8007da0:	2800      	cmp	r0, #0
 8007da2:	d06f      	beq.n	8007e84 <_strtod_l+0xa34>
 8007da4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d17a      	bne.n	8007ea0 <_strtod_l+0xa50>
 8007daa:	f1ba 0f00 	cmp.w	sl, #0
 8007dae:	d158      	bne.n	8007e62 <_strtod_l+0xa12>
 8007db0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007db2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d15a      	bne.n	8007e70 <_strtod_l+0xa20>
 8007dba:	4b64      	ldr	r3, [pc, #400]	@ (8007f4c <_strtod_l+0xafc>)
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	4630      	mov	r0, r6
 8007dc0:	4639      	mov	r1, r7
 8007dc2:	f7f8 fe8b 	bl	8000adc <__aeabi_dcmplt>
 8007dc6:	2800      	cmp	r0, #0
 8007dc8:	d159      	bne.n	8007e7e <_strtod_l+0xa2e>
 8007dca:	4630      	mov	r0, r6
 8007dcc:	4639      	mov	r1, r7
 8007dce:	4b60      	ldr	r3, [pc, #384]	@ (8007f50 <_strtod_l+0xb00>)
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f7f8 fc11 	bl	80005f8 <__aeabi_dmul>
 8007dd6:	4606      	mov	r6, r0
 8007dd8:	460f      	mov	r7, r1
 8007dda:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007dde:	9606      	str	r6, [sp, #24]
 8007de0:	9307      	str	r3, [sp, #28]
 8007de2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007de6:	4d57      	ldr	r5, [pc, #348]	@ (8007f44 <_strtod_l+0xaf4>)
 8007de8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007dec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007dee:	401d      	ands	r5, r3
 8007df0:	4b58      	ldr	r3, [pc, #352]	@ (8007f54 <_strtod_l+0xb04>)
 8007df2:	429d      	cmp	r5, r3
 8007df4:	f040 80b2 	bne.w	8007f5c <_strtod_l+0xb0c>
 8007df8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007dfa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007dfe:	ec4b ab10 	vmov	d0, sl, fp
 8007e02:	f7ff f9c9 	bl	8007198 <__ulp>
 8007e06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e0a:	ec51 0b10 	vmov	r0, r1, d0
 8007e0e:	f7f8 fbf3 	bl	80005f8 <__aeabi_dmul>
 8007e12:	4652      	mov	r2, sl
 8007e14:	465b      	mov	r3, fp
 8007e16:	f7f8 fa39 	bl	800028c <__adddf3>
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	4949      	ldr	r1, [pc, #292]	@ (8007f44 <_strtod_l+0xaf4>)
 8007e1e:	4a4e      	ldr	r2, [pc, #312]	@ (8007f58 <_strtod_l+0xb08>)
 8007e20:	4019      	ands	r1, r3
 8007e22:	4291      	cmp	r1, r2
 8007e24:	4682      	mov	sl, r0
 8007e26:	d942      	bls.n	8007eae <_strtod_l+0xa5e>
 8007e28:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007e2a:	4b47      	ldr	r3, [pc, #284]	@ (8007f48 <_strtod_l+0xaf8>)
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d103      	bne.n	8007e38 <_strtod_l+0x9e8>
 8007e30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e32:	3301      	adds	r3, #1
 8007e34:	f43f ad2b 	beq.w	800788e <_strtod_l+0x43e>
 8007e38:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007f48 <_strtod_l+0xaf8>
 8007e3c:	f04f 3aff 	mov.w	sl, #4294967295
 8007e40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007e42:	9805      	ldr	r0, [sp, #20]
 8007e44:	f7fe fe74 	bl	8006b30 <_Bfree>
 8007e48:	9805      	ldr	r0, [sp, #20]
 8007e4a:	4649      	mov	r1, r9
 8007e4c:	f7fe fe70 	bl	8006b30 <_Bfree>
 8007e50:	9805      	ldr	r0, [sp, #20]
 8007e52:	4641      	mov	r1, r8
 8007e54:	f7fe fe6c 	bl	8006b30 <_Bfree>
 8007e58:	9805      	ldr	r0, [sp, #20]
 8007e5a:	4621      	mov	r1, r4
 8007e5c:	f7fe fe68 	bl	8006b30 <_Bfree>
 8007e60:	e618      	b.n	8007a94 <_strtod_l+0x644>
 8007e62:	f1ba 0f01 	cmp.w	sl, #1
 8007e66:	d103      	bne.n	8007e70 <_strtod_l+0xa20>
 8007e68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	f43f ada5 	beq.w	80079ba <_strtod_l+0x56a>
 8007e70:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007f20 <_strtod_l+0xad0>
 8007e74:	4f35      	ldr	r7, [pc, #212]	@ (8007f4c <_strtod_l+0xafc>)
 8007e76:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007e7a:	2600      	movs	r6, #0
 8007e7c:	e7b1      	b.n	8007de2 <_strtod_l+0x992>
 8007e7e:	4f34      	ldr	r7, [pc, #208]	@ (8007f50 <_strtod_l+0xb00>)
 8007e80:	2600      	movs	r6, #0
 8007e82:	e7aa      	b.n	8007dda <_strtod_l+0x98a>
 8007e84:	4b32      	ldr	r3, [pc, #200]	@ (8007f50 <_strtod_l+0xb00>)
 8007e86:	4630      	mov	r0, r6
 8007e88:	4639      	mov	r1, r7
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f7f8 fbb4 	bl	80005f8 <__aeabi_dmul>
 8007e90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e92:	4606      	mov	r6, r0
 8007e94:	460f      	mov	r7, r1
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d09f      	beq.n	8007dda <_strtod_l+0x98a>
 8007e9a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007e9e:	e7a0      	b.n	8007de2 <_strtod_l+0x992>
 8007ea0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007f28 <_strtod_l+0xad8>
 8007ea4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007ea8:	ec57 6b17 	vmov	r6, r7, d7
 8007eac:	e799      	b.n	8007de2 <_strtod_l+0x992>
 8007eae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007eb2:	9b08      	ldr	r3, [sp, #32]
 8007eb4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d1c1      	bne.n	8007e40 <_strtod_l+0x9f0>
 8007ebc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007ec0:	0d1b      	lsrs	r3, r3, #20
 8007ec2:	051b      	lsls	r3, r3, #20
 8007ec4:	429d      	cmp	r5, r3
 8007ec6:	d1bb      	bne.n	8007e40 <_strtod_l+0x9f0>
 8007ec8:	4630      	mov	r0, r6
 8007eca:	4639      	mov	r1, r7
 8007ecc:	f7f8 fef4 	bl	8000cb8 <__aeabi_d2lz>
 8007ed0:	f7f8 fb64 	bl	800059c <__aeabi_l2d>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	4630      	mov	r0, r6
 8007eda:	4639      	mov	r1, r7
 8007edc:	f7f8 f9d4 	bl	8000288 <__aeabi_dsub>
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007ee8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007eec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007eee:	ea46 060a 	orr.w	r6, r6, sl
 8007ef2:	431e      	orrs	r6, r3
 8007ef4:	d06f      	beq.n	8007fd6 <_strtod_l+0xb86>
 8007ef6:	a30e      	add	r3, pc, #56	@ (adr r3, 8007f30 <_strtod_l+0xae0>)
 8007ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efc:	f7f8 fdee 	bl	8000adc <__aeabi_dcmplt>
 8007f00:	2800      	cmp	r0, #0
 8007f02:	f47f accf 	bne.w	80078a4 <_strtod_l+0x454>
 8007f06:	a30c      	add	r3, pc, #48	@ (adr r3, 8007f38 <_strtod_l+0xae8>)
 8007f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f10:	f7f8 fe02 	bl	8000b18 <__aeabi_dcmpgt>
 8007f14:	2800      	cmp	r0, #0
 8007f16:	d093      	beq.n	8007e40 <_strtod_l+0x9f0>
 8007f18:	e4c4      	b.n	80078a4 <_strtod_l+0x454>
 8007f1a:	bf00      	nop
 8007f1c:	f3af 8000 	nop.w
 8007f20:	00000000 	.word	0x00000000
 8007f24:	bff00000 	.word	0xbff00000
 8007f28:	00000000 	.word	0x00000000
 8007f2c:	3ff00000 	.word	0x3ff00000
 8007f30:	94a03595 	.word	0x94a03595
 8007f34:	3fdfffff 	.word	0x3fdfffff
 8007f38:	35afe535 	.word	0x35afe535
 8007f3c:	3fe00000 	.word	0x3fe00000
 8007f40:	000fffff 	.word	0x000fffff
 8007f44:	7ff00000 	.word	0x7ff00000
 8007f48:	7fefffff 	.word	0x7fefffff
 8007f4c:	3ff00000 	.word	0x3ff00000
 8007f50:	3fe00000 	.word	0x3fe00000
 8007f54:	7fe00000 	.word	0x7fe00000
 8007f58:	7c9fffff 	.word	0x7c9fffff
 8007f5c:	9b08      	ldr	r3, [sp, #32]
 8007f5e:	b323      	cbz	r3, 8007faa <_strtod_l+0xb5a>
 8007f60:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007f64:	d821      	bhi.n	8007faa <_strtod_l+0xb5a>
 8007f66:	a328      	add	r3, pc, #160	@ (adr r3, 8008008 <_strtod_l+0xbb8>)
 8007f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6c:	4630      	mov	r0, r6
 8007f6e:	4639      	mov	r1, r7
 8007f70:	f7f8 fdbe 	bl	8000af0 <__aeabi_dcmple>
 8007f74:	b1a0      	cbz	r0, 8007fa0 <_strtod_l+0xb50>
 8007f76:	4639      	mov	r1, r7
 8007f78:	4630      	mov	r0, r6
 8007f7a:	f7f8 fe15 	bl	8000ba8 <__aeabi_d2uiz>
 8007f7e:	2801      	cmp	r0, #1
 8007f80:	bf38      	it	cc
 8007f82:	2001      	movcc	r0, #1
 8007f84:	f7f8 fabe 	bl	8000504 <__aeabi_ui2d>
 8007f88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f8a:	4606      	mov	r6, r0
 8007f8c:	460f      	mov	r7, r1
 8007f8e:	b9fb      	cbnz	r3, 8007fd0 <_strtod_l+0xb80>
 8007f90:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007f94:	9014      	str	r0, [sp, #80]	@ 0x50
 8007f96:	9315      	str	r3, [sp, #84]	@ 0x54
 8007f98:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007f9c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007fa0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007fa2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007fa6:	1b5b      	subs	r3, r3, r5
 8007fa8:	9311      	str	r3, [sp, #68]	@ 0x44
 8007faa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007fae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007fb2:	f7ff f8f1 	bl	8007198 <__ulp>
 8007fb6:	4650      	mov	r0, sl
 8007fb8:	ec53 2b10 	vmov	r2, r3, d0
 8007fbc:	4659      	mov	r1, fp
 8007fbe:	f7f8 fb1b 	bl	80005f8 <__aeabi_dmul>
 8007fc2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007fc6:	f7f8 f961 	bl	800028c <__adddf3>
 8007fca:	4682      	mov	sl, r0
 8007fcc:	468b      	mov	fp, r1
 8007fce:	e770      	b.n	8007eb2 <_strtod_l+0xa62>
 8007fd0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007fd4:	e7e0      	b.n	8007f98 <_strtod_l+0xb48>
 8007fd6:	a30e      	add	r3, pc, #56	@ (adr r3, 8008010 <_strtod_l+0xbc0>)
 8007fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fdc:	f7f8 fd7e 	bl	8000adc <__aeabi_dcmplt>
 8007fe0:	e798      	b.n	8007f14 <_strtod_l+0xac4>
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007fe6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007fe8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007fea:	6013      	str	r3, [r2, #0]
 8007fec:	f7ff ba6d 	b.w	80074ca <_strtod_l+0x7a>
 8007ff0:	2a65      	cmp	r2, #101	@ 0x65
 8007ff2:	f43f ab66 	beq.w	80076c2 <_strtod_l+0x272>
 8007ff6:	2a45      	cmp	r2, #69	@ 0x45
 8007ff8:	f43f ab63 	beq.w	80076c2 <_strtod_l+0x272>
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	f7ff bb9e 	b.w	800773e <_strtod_l+0x2ee>
 8008002:	bf00      	nop
 8008004:	f3af 8000 	nop.w
 8008008:	ffc00000 	.word	0xffc00000
 800800c:	41dfffff 	.word	0x41dfffff
 8008010:	94a03595 	.word	0x94a03595
 8008014:	3fcfffff 	.word	0x3fcfffff

08008018 <_strtod_r>:
 8008018:	4b01      	ldr	r3, [pc, #4]	@ (8008020 <_strtod_r+0x8>)
 800801a:	f7ff ba19 	b.w	8007450 <_strtod_l>
 800801e:	bf00      	nop
 8008020:	200000c8 	.word	0x200000c8

08008024 <_strtol_l.constprop.0>:
 8008024:	2b24      	cmp	r3, #36	@ 0x24
 8008026:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800802a:	4686      	mov	lr, r0
 800802c:	4690      	mov	r8, r2
 800802e:	d801      	bhi.n	8008034 <_strtol_l.constprop.0+0x10>
 8008030:	2b01      	cmp	r3, #1
 8008032:	d106      	bne.n	8008042 <_strtol_l.constprop.0+0x1e>
 8008034:	f7fd fdae 	bl	8005b94 <__errno>
 8008038:	2316      	movs	r3, #22
 800803a:	6003      	str	r3, [r0, #0]
 800803c:	2000      	movs	r0, #0
 800803e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008042:	4834      	ldr	r0, [pc, #208]	@ (8008114 <_strtol_l.constprop.0+0xf0>)
 8008044:	460d      	mov	r5, r1
 8008046:	462a      	mov	r2, r5
 8008048:	f815 4b01 	ldrb.w	r4, [r5], #1
 800804c:	5d06      	ldrb	r6, [r0, r4]
 800804e:	f016 0608 	ands.w	r6, r6, #8
 8008052:	d1f8      	bne.n	8008046 <_strtol_l.constprop.0+0x22>
 8008054:	2c2d      	cmp	r4, #45	@ 0x2d
 8008056:	d12d      	bne.n	80080b4 <_strtol_l.constprop.0+0x90>
 8008058:	782c      	ldrb	r4, [r5, #0]
 800805a:	2601      	movs	r6, #1
 800805c:	1c95      	adds	r5, r2, #2
 800805e:	f033 0210 	bics.w	r2, r3, #16
 8008062:	d109      	bne.n	8008078 <_strtol_l.constprop.0+0x54>
 8008064:	2c30      	cmp	r4, #48	@ 0x30
 8008066:	d12a      	bne.n	80080be <_strtol_l.constprop.0+0x9a>
 8008068:	782a      	ldrb	r2, [r5, #0]
 800806a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800806e:	2a58      	cmp	r2, #88	@ 0x58
 8008070:	d125      	bne.n	80080be <_strtol_l.constprop.0+0x9a>
 8008072:	786c      	ldrb	r4, [r5, #1]
 8008074:	2310      	movs	r3, #16
 8008076:	3502      	adds	r5, #2
 8008078:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800807c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008080:	2200      	movs	r2, #0
 8008082:	fbbc f9f3 	udiv	r9, ip, r3
 8008086:	4610      	mov	r0, r2
 8008088:	fb03 ca19 	mls	sl, r3, r9, ip
 800808c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008090:	2f09      	cmp	r7, #9
 8008092:	d81b      	bhi.n	80080cc <_strtol_l.constprop.0+0xa8>
 8008094:	463c      	mov	r4, r7
 8008096:	42a3      	cmp	r3, r4
 8008098:	dd27      	ble.n	80080ea <_strtol_l.constprop.0+0xc6>
 800809a:	1c57      	adds	r7, r2, #1
 800809c:	d007      	beq.n	80080ae <_strtol_l.constprop.0+0x8a>
 800809e:	4581      	cmp	r9, r0
 80080a0:	d320      	bcc.n	80080e4 <_strtol_l.constprop.0+0xc0>
 80080a2:	d101      	bne.n	80080a8 <_strtol_l.constprop.0+0x84>
 80080a4:	45a2      	cmp	sl, r4
 80080a6:	db1d      	blt.n	80080e4 <_strtol_l.constprop.0+0xc0>
 80080a8:	fb00 4003 	mla	r0, r0, r3, r4
 80080ac:	2201      	movs	r2, #1
 80080ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80080b2:	e7eb      	b.n	800808c <_strtol_l.constprop.0+0x68>
 80080b4:	2c2b      	cmp	r4, #43	@ 0x2b
 80080b6:	bf04      	itt	eq
 80080b8:	782c      	ldrbeq	r4, [r5, #0]
 80080ba:	1c95      	addeq	r5, r2, #2
 80080bc:	e7cf      	b.n	800805e <_strtol_l.constprop.0+0x3a>
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d1da      	bne.n	8008078 <_strtol_l.constprop.0+0x54>
 80080c2:	2c30      	cmp	r4, #48	@ 0x30
 80080c4:	bf0c      	ite	eq
 80080c6:	2308      	moveq	r3, #8
 80080c8:	230a      	movne	r3, #10
 80080ca:	e7d5      	b.n	8008078 <_strtol_l.constprop.0+0x54>
 80080cc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80080d0:	2f19      	cmp	r7, #25
 80080d2:	d801      	bhi.n	80080d8 <_strtol_l.constprop.0+0xb4>
 80080d4:	3c37      	subs	r4, #55	@ 0x37
 80080d6:	e7de      	b.n	8008096 <_strtol_l.constprop.0+0x72>
 80080d8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80080dc:	2f19      	cmp	r7, #25
 80080de:	d804      	bhi.n	80080ea <_strtol_l.constprop.0+0xc6>
 80080e0:	3c57      	subs	r4, #87	@ 0x57
 80080e2:	e7d8      	b.n	8008096 <_strtol_l.constprop.0+0x72>
 80080e4:	f04f 32ff 	mov.w	r2, #4294967295
 80080e8:	e7e1      	b.n	80080ae <_strtol_l.constprop.0+0x8a>
 80080ea:	1c53      	adds	r3, r2, #1
 80080ec:	d108      	bne.n	8008100 <_strtol_l.constprop.0+0xdc>
 80080ee:	2322      	movs	r3, #34	@ 0x22
 80080f0:	f8ce 3000 	str.w	r3, [lr]
 80080f4:	4660      	mov	r0, ip
 80080f6:	f1b8 0f00 	cmp.w	r8, #0
 80080fa:	d0a0      	beq.n	800803e <_strtol_l.constprop.0+0x1a>
 80080fc:	1e69      	subs	r1, r5, #1
 80080fe:	e006      	b.n	800810e <_strtol_l.constprop.0+0xea>
 8008100:	b106      	cbz	r6, 8008104 <_strtol_l.constprop.0+0xe0>
 8008102:	4240      	negs	r0, r0
 8008104:	f1b8 0f00 	cmp.w	r8, #0
 8008108:	d099      	beq.n	800803e <_strtol_l.constprop.0+0x1a>
 800810a:	2a00      	cmp	r2, #0
 800810c:	d1f6      	bne.n	80080fc <_strtol_l.constprop.0+0xd8>
 800810e:	f8c8 1000 	str.w	r1, [r8]
 8008112:	e794      	b.n	800803e <_strtol_l.constprop.0+0x1a>
 8008114:	0800cce1 	.word	0x0800cce1

08008118 <_strtol_r>:
 8008118:	f7ff bf84 	b.w	8008024 <_strtol_l.constprop.0>

0800811c <__ssputs_r>:
 800811c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008120:	688e      	ldr	r6, [r1, #8]
 8008122:	461f      	mov	r7, r3
 8008124:	42be      	cmp	r6, r7
 8008126:	680b      	ldr	r3, [r1, #0]
 8008128:	4682      	mov	sl, r0
 800812a:	460c      	mov	r4, r1
 800812c:	4690      	mov	r8, r2
 800812e:	d82d      	bhi.n	800818c <__ssputs_r+0x70>
 8008130:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008134:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008138:	d026      	beq.n	8008188 <__ssputs_r+0x6c>
 800813a:	6965      	ldr	r5, [r4, #20]
 800813c:	6909      	ldr	r1, [r1, #16]
 800813e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008142:	eba3 0901 	sub.w	r9, r3, r1
 8008146:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800814a:	1c7b      	adds	r3, r7, #1
 800814c:	444b      	add	r3, r9
 800814e:	106d      	asrs	r5, r5, #1
 8008150:	429d      	cmp	r5, r3
 8008152:	bf38      	it	cc
 8008154:	461d      	movcc	r5, r3
 8008156:	0553      	lsls	r3, r2, #21
 8008158:	d527      	bpl.n	80081aa <__ssputs_r+0x8e>
 800815a:	4629      	mov	r1, r5
 800815c:	f7fe fc1c 	bl	8006998 <_malloc_r>
 8008160:	4606      	mov	r6, r0
 8008162:	b360      	cbz	r0, 80081be <__ssputs_r+0xa2>
 8008164:	6921      	ldr	r1, [r4, #16]
 8008166:	464a      	mov	r2, r9
 8008168:	f7fd fd41 	bl	8005bee <memcpy>
 800816c:	89a3      	ldrh	r3, [r4, #12]
 800816e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008176:	81a3      	strh	r3, [r4, #12]
 8008178:	6126      	str	r6, [r4, #16]
 800817a:	6165      	str	r5, [r4, #20]
 800817c:	444e      	add	r6, r9
 800817e:	eba5 0509 	sub.w	r5, r5, r9
 8008182:	6026      	str	r6, [r4, #0]
 8008184:	60a5      	str	r5, [r4, #8]
 8008186:	463e      	mov	r6, r7
 8008188:	42be      	cmp	r6, r7
 800818a:	d900      	bls.n	800818e <__ssputs_r+0x72>
 800818c:	463e      	mov	r6, r7
 800818e:	6820      	ldr	r0, [r4, #0]
 8008190:	4632      	mov	r2, r6
 8008192:	4641      	mov	r1, r8
 8008194:	f7fd fc91 	bl	8005aba <memmove>
 8008198:	68a3      	ldr	r3, [r4, #8]
 800819a:	1b9b      	subs	r3, r3, r6
 800819c:	60a3      	str	r3, [r4, #8]
 800819e:	6823      	ldr	r3, [r4, #0]
 80081a0:	4433      	add	r3, r6
 80081a2:	6023      	str	r3, [r4, #0]
 80081a4:	2000      	movs	r0, #0
 80081a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081aa:	462a      	mov	r2, r5
 80081ac:	f000 fd61 	bl	8008c72 <_realloc_r>
 80081b0:	4606      	mov	r6, r0
 80081b2:	2800      	cmp	r0, #0
 80081b4:	d1e0      	bne.n	8008178 <__ssputs_r+0x5c>
 80081b6:	6921      	ldr	r1, [r4, #16]
 80081b8:	4650      	mov	r0, sl
 80081ba:	f7fe fb79 	bl	80068b0 <_free_r>
 80081be:	230c      	movs	r3, #12
 80081c0:	f8ca 3000 	str.w	r3, [sl]
 80081c4:	89a3      	ldrh	r3, [r4, #12]
 80081c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081ca:	81a3      	strh	r3, [r4, #12]
 80081cc:	f04f 30ff 	mov.w	r0, #4294967295
 80081d0:	e7e9      	b.n	80081a6 <__ssputs_r+0x8a>
	...

080081d4 <_svfiprintf_r>:
 80081d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d8:	4698      	mov	r8, r3
 80081da:	898b      	ldrh	r3, [r1, #12]
 80081dc:	061b      	lsls	r3, r3, #24
 80081de:	b09d      	sub	sp, #116	@ 0x74
 80081e0:	4607      	mov	r7, r0
 80081e2:	460d      	mov	r5, r1
 80081e4:	4614      	mov	r4, r2
 80081e6:	d510      	bpl.n	800820a <_svfiprintf_r+0x36>
 80081e8:	690b      	ldr	r3, [r1, #16]
 80081ea:	b973      	cbnz	r3, 800820a <_svfiprintf_r+0x36>
 80081ec:	2140      	movs	r1, #64	@ 0x40
 80081ee:	f7fe fbd3 	bl	8006998 <_malloc_r>
 80081f2:	6028      	str	r0, [r5, #0]
 80081f4:	6128      	str	r0, [r5, #16]
 80081f6:	b930      	cbnz	r0, 8008206 <_svfiprintf_r+0x32>
 80081f8:	230c      	movs	r3, #12
 80081fa:	603b      	str	r3, [r7, #0]
 80081fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008200:	b01d      	add	sp, #116	@ 0x74
 8008202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008206:	2340      	movs	r3, #64	@ 0x40
 8008208:	616b      	str	r3, [r5, #20]
 800820a:	2300      	movs	r3, #0
 800820c:	9309      	str	r3, [sp, #36]	@ 0x24
 800820e:	2320      	movs	r3, #32
 8008210:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008214:	f8cd 800c 	str.w	r8, [sp, #12]
 8008218:	2330      	movs	r3, #48	@ 0x30
 800821a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80083b8 <_svfiprintf_r+0x1e4>
 800821e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008222:	f04f 0901 	mov.w	r9, #1
 8008226:	4623      	mov	r3, r4
 8008228:	469a      	mov	sl, r3
 800822a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800822e:	b10a      	cbz	r2, 8008234 <_svfiprintf_r+0x60>
 8008230:	2a25      	cmp	r2, #37	@ 0x25
 8008232:	d1f9      	bne.n	8008228 <_svfiprintf_r+0x54>
 8008234:	ebba 0b04 	subs.w	fp, sl, r4
 8008238:	d00b      	beq.n	8008252 <_svfiprintf_r+0x7e>
 800823a:	465b      	mov	r3, fp
 800823c:	4622      	mov	r2, r4
 800823e:	4629      	mov	r1, r5
 8008240:	4638      	mov	r0, r7
 8008242:	f7ff ff6b 	bl	800811c <__ssputs_r>
 8008246:	3001      	adds	r0, #1
 8008248:	f000 80a7 	beq.w	800839a <_svfiprintf_r+0x1c6>
 800824c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800824e:	445a      	add	r2, fp
 8008250:	9209      	str	r2, [sp, #36]	@ 0x24
 8008252:	f89a 3000 	ldrb.w	r3, [sl]
 8008256:	2b00      	cmp	r3, #0
 8008258:	f000 809f 	beq.w	800839a <_svfiprintf_r+0x1c6>
 800825c:	2300      	movs	r3, #0
 800825e:	f04f 32ff 	mov.w	r2, #4294967295
 8008262:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008266:	f10a 0a01 	add.w	sl, sl, #1
 800826a:	9304      	str	r3, [sp, #16]
 800826c:	9307      	str	r3, [sp, #28]
 800826e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008272:	931a      	str	r3, [sp, #104]	@ 0x68
 8008274:	4654      	mov	r4, sl
 8008276:	2205      	movs	r2, #5
 8008278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800827c:	484e      	ldr	r0, [pc, #312]	@ (80083b8 <_svfiprintf_r+0x1e4>)
 800827e:	f7f7 ffa7 	bl	80001d0 <memchr>
 8008282:	9a04      	ldr	r2, [sp, #16]
 8008284:	b9d8      	cbnz	r0, 80082be <_svfiprintf_r+0xea>
 8008286:	06d0      	lsls	r0, r2, #27
 8008288:	bf44      	itt	mi
 800828a:	2320      	movmi	r3, #32
 800828c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008290:	0711      	lsls	r1, r2, #28
 8008292:	bf44      	itt	mi
 8008294:	232b      	movmi	r3, #43	@ 0x2b
 8008296:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800829a:	f89a 3000 	ldrb.w	r3, [sl]
 800829e:	2b2a      	cmp	r3, #42	@ 0x2a
 80082a0:	d015      	beq.n	80082ce <_svfiprintf_r+0xfa>
 80082a2:	9a07      	ldr	r2, [sp, #28]
 80082a4:	4654      	mov	r4, sl
 80082a6:	2000      	movs	r0, #0
 80082a8:	f04f 0c0a 	mov.w	ip, #10
 80082ac:	4621      	mov	r1, r4
 80082ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082b2:	3b30      	subs	r3, #48	@ 0x30
 80082b4:	2b09      	cmp	r3, #9
 80082b6:	d94b      	bls.n	8008350 <_svfiprintf_r+0x17c>
 80082b8:	b1b0      	cbz	r0, 80082e8 <_svfiprintf_r+0x114>
 80082ba:	9207      	str	r2, [sp, #28]
 80082bc:	e014      	b.n	80082e8 <_svfiprintf_r+0x114>
 80082be:	eba0 0308 	sub.w	r3, r0, r8
 80082c2:	fa09 f303 	lsl.w	r3, r9, r3
 80082c6:	4313      	orrs	r3, r2
 80082c8:	9304      	str	r3, [sp, #16]
 80082ca:	46a2      	mov	sl, r4
 80082cc:	e7d2      	b.n	8008274 <_svfiprintf_r+0xa0>
 80082ce:	9b03      	ldr	r3, [sp, #12]
 80082d0:	1d19      	adds	r1, r3, #4
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	9103      	str	r1, [sp, #12]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	bfbb      	ittet	lt
 80082da:	425b      	neglt	r3, r3
 80082dc:	f042 0202 	orrlt.w	r2, r2, #2
 80082e0:	9307      	strge	r3, [sp, #28]
 80082e2:	9307      	strlt	r3, [sp, #28]
 80082e4:	bfb8      	it	lt
 80082e6:	9204      	strlt	r2, [sp, #16]
 80082e8:	7823      	ldrb	r3, [r4, #0]
 80082ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80082ec:	d10a      	bne.n	8008304 <_svfiprintf_r+0x130>
 80082ee:	7863      	ldrb	r3, [r4, #1]
 80082f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80082f2:	d132      	bne.n	800835a <_svfiprintf_r+0x186>
 80082f4:	9b03      	ldr	r3, [sp, #12]
 80082f6:	1d1a      	adds	r2, r3, #4
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	9203      	str	r2, [sp, #12]
 80082fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008300:	3402      	adds	r4, #2
 8008302:	9305      	str	r3, [sp, #20]
 8008304:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80083c8 <_svfiprintf_r+0x1f4>
 8008308:	7821      	ldrb	r1, [r4, #0]
 800830a:	2203      	movs	r2, #3
 800830c:	4650      	mov	r0, sl
 800830e:	f7f7 ff5f 	bl	80001d0 <memchr>
 8008312:	b138      	cbz	r0, 8008324 <_svfiprintf_r+0x150>
 8008314:	9b04      	ldr	r3, [sp, #16]
 8008316:	eba0 000a 	sub.w	r0, r0, sl
 800831a:	2240      	movs	r2, #64	@ 0x40
 800831c:	4082      	lsls	r2, r0
 800831e:	4313      	orrs	r3, r2
 8008320:	3401      	adds	r4, #1
 8008322:	9304      	str	r3, [sp, #16]
 8008324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008328:	4824      	ldr	r0, [pc, #144]	@ (80083bc <_svfiprintf_r+0x1e8>)
 800832a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800832e:	2206      	movs	r2, #6
 8008330:	f7f7 ff4e 	bl	80001d0 <memchr>
 8008334:	2800      	cmp	r0, #0
 8008336:	d036      	beq.n	80083a6 <_svfiprintf_r+0x1d2>
 8008338:	4b21      	ldr	r3, [pc, #132]	@ (80083c0 <_svfiprintf_r+0x1ec>)
 800833a:	bb1b      	cbnz	r3, 8008384 <_svfiprintf_r+0x1b0>
 800833c:	9b03      	ldr	r3, [sp, #12]
 800833e:	3307      	adds	r3, #7
 8008340:	f023 0307 	bic.w	r3, r3, #7
 8008344:	3308      	adds	r3, #8
 8008346:	9303      	str	r3, [sp, #12]
 8008348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800834a:	4433      	add	r3, r6
 800834c:	9309      	str	r3, [sp, #36]	@ 0x24
 800834e:	e76a      	b.n	8008226 <_svfiprintf_r+0x52>
 8008350:	fb0c 3202 	mla	r2, ip, r2, r3
 8008354:	460c      	mov	r4, r1
 8008356:	2001      	movs	r0, #1
 8008358:	e7a8      	b.n	80082ac <_svfiprintf_r+0xd8>
 800835a:	2300      	movs	r3, #0
 800835c:	3401      	adds	r4, #1
 800835e:	9305      	str	r3, [sp, #20]
 8008360:	4619      	mov	r1, r3
 8008362:	f04f 0c0a 	mov.w	ip, #10
 8008366:	4620      	mov	r0, r4
 8008368:	f810 2b01 	ldrb.w	r2, [r0], #1
 800836c:	3a30      	subs	r2, #48	@ 0x30
 800836e:	2a09      	cmp	r2, #9
 8008370:	d903      	bls.n	800837a <_svfiprintf_r+0x1a6>
 8008372:	2b00      	cmp	r3, #0
 8008374:	d0c6      	beq.n	8008304 <_svfiprintf_r+0x130>
 8008376:	9105      	str	r1, [sp, #20]
 8008378:	e7c4      	b.n	8008304 <_svfiprintf_r+0x130>
 800837a:	fb0c 2101 	mla	r1, ip, r1, r2
 800837e:	4604      	mov	r4, r0
 8008380:	2301      	movs	r3, #1
 8008382:	e7f0      	b.n	8008366 <_svfiprintf_r+0x192>
 8008384:	ab03      	add	r3, sp, #12
 8008386:	9300      	str	r3, [sp, #0]
 8008388:	462a      	mov	r2, r5
 800838a:	4b0e      	ldr	r3, [pc, #56]	@ (80083c4 <_svfiprintf_r+0x1f0>)
 800838c:	a904      	add	r1, sp, #16
 800838e:	4638      	mov	r0, r7
 8008390:	f7fc fca2 	bl	8004cd8 <_printf_float>
 8008394:	1c42      	adds	r2, r0, #1
 8008396:	4606      	mov	r6, r0
 8008398:	d1d6      	bne.n	8008348 <_svfiprintf_r+0x174>
 800839a:	89ab      	ldrh	r3, [r5, #12]
 800839c:	065b      	lsls	r3, r3, #25
 800839e:	f53f af2d 	bmi.w	80081fc <_svfiprintf_r+0x28>
 80083a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083a4:	e72c      	b.n	8008200 <_svfiprintf_r+0x2c>
 80083a6:	ab03      	add	r3, sp, #12
 80083a8:	9300      	str	r3, [sp, #0]
 80083aa:	462a      	mov	r2, r5
 80083ac:	4b05      	ldr	r3, [pc, #20]	@ (80083c4 <_svfiprintf_r+0x1f0>)
 80083ae:	a904      	add	r1, sp, #16
 80083b0:	4638      	mov	r0, r7
 80083b2:	f7fc ff29 	bl	8005208 <_printf_i>
 80083b6:	e7ed      	b.n	8008394 <_svfiprintf_r+0x1c0>
 80083b8:	0800cde1 	.word	0x0800cde1
 80083bc:	0800cdeb 	.word	0x0800cdeb
 80083c0:	08004cd9 	.word	0x08004cd9
 80083c4:	0800811d 	.word	0x0800811d
 80083c8:	0800cde7 	.word	0x0800cde7

080083cc <__sflush_r>:
 80083cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80083d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083d4:	0716      	lsls	r6, r2, #28
 80083d6:	4605      	mov	r5, r0
 80083d8:	460c      	mov	r4, r1
 80083da:	d454      	bmi.n	8008486 <__sflush_r+0xba>
 80083dc:	684b      	ldr	r3, [r1, #4]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	dc02      	bgt.n	80083e8 <__sflush_r+0x1c>
 80083e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	dd48      	ble.n	800847a <__sflush_r+0xae>
 80083e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80083ea:	2e00      	cmp	r6, #0
 80083ec:	d045      	beq.n	800847a <__sflush_r+0xae>
 80083ee:	2300      	movs	r3, #0
 80083f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80083f4:	682f      	ldr	r7, [r5, #0]
 80083f6:	6a21      	ldr	r1, [r4, #32]
 80083f8:	602b      	str	r3, [r5, #0]
 80083fa:	d030      	beq.n	800845e <__sflush_r+0x92>
 80083fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80083fe:	89a3      	ldrh	r3, [r4, #12]
 8008400:	0759      	lsls	r1, r3, #29
 8008402:	d505      	bpl.n	8008410 <__sflush_r+0x44>
 8008404:	6863      	ldr	r3, [r4, #4]
 8008406:	1ad2      	subs	r2, r2, r3
 8008408:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800840a:	b10b      	cbz	r3, 8008410 <__sflush_r+0x44>
 800840c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800840e:	1ad2      	subs	r2, r2, r3
 8008410:	2300      	movs	r3, #0
 8008412:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008414:	6a21      	ldr	r1, [r4, #32]
 8008416:	4628      	mov	r0, r5
 8008418:	47b0      	blx	r6
 800841a:	1c43      	adds	r3, r0, #1
 800841c:	89a3      	ldrh	r3, [r4, #12]
 800841e:	d106      	bne.n	800842e <__sflush_r+0x62>
 8008420:	6829      	ldr	r1, [r5, #0]
 8008422:	291d      	cmp	r1, #29
 8008424:	d82b      	bhi.n	800847e <__sflush_r+0xb2>
 8008426:	4a2a      	ldr	r2, [pc, #168]	@ (80084d0 <__sflush_r+0x104>)
 8008428:	410a      	asrs	r2, r1
 800842a:	07d6      	lsls	r6, r2, #31
 800842c:	d427      	bmi.n	800847e <__sflush_r+0xb2>
 800842e:	2200      	movs	r2, #0
 8008430:	6062      	str	r2, [r4, #4]
 8008432:	04d9      	lsls	r1, r3, #19
 8008434:	6922      	ldr	r2, [r4, #16]
 8008436:	6022      	str	r2, [r4, #0]
 8008438:	d504      	bpl.n	8008444 <__sflush_r+0x78>
 800843a:	1c42      	adds	r2, r0, #1
 800843c:	d101      	bne.n	8008442 <__sflush_r+0x76>
 800843e:	682b      	ldr	r3, [r5, #0]
 8008440:	b903      	cbnz	r3, 8008444 <__sflush_r+0x78>
 8008442:	6560      	str	r0, [r4, #84]	@ 0x54
 8008444:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008446:	602f      	str	r7, [r5, #0]
 8008448:	b1b9      	cbz	r1, 800847a <__sflush_r+0xae>
 800844a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800844e:	4299      	cmp	r1, r3
 8008450:	d002      	beq.n	8008458 <__sflush_r+0x8c>
 8008452:	4628      	mov	r0, r5
 8008454:	f7fe fa2c 	bl	80068b0 <_free_r>
 8008458:	2300      	movs	r3, #0
 800845a:	6363      	str	r3, [r4, #52]	@ 0x34
 800845c:	e00d      	b.n	800847a <__sflush_r+0xae>
 800845e:	2301      	movs	r3, #1
 8008460:	4628      	mov	r0, r5
 8008462:	47b0      	blx	r6
 8008464:	4602      	mov	r2, r0
 8008466:	1c50      	adds	r0, r2, #1
 8008468:	d1c9      	bne.n	80083fe <__sflush_r+0x32>
 800846a:	682b      	ldr	r3, [r5, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d0c6      	beq.n	80083fe <__sflush_r+0x32>
 8008470:	2b1d      	cmp	r3, #29
 8008472:	d001      	beq.n	8008478 <__sflush_r+0xac>
 8008474:	2b16      	cmp	r3, #22
 8008476:	d11e      	bne.n	80084b6 <__sflush_r+0xea>
 8008478:	602f      	str	r7, [r5, #0]
 800847a:	2000      	movs	r0, #0
 800847c:	e022      	b.n	80084c4 <__sflush_r+0xf8>
 800847e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008482:	b21b      	sxth	r3, r3
 8008484:	e01b      	b.n	80084be <__sflush_r+0xf2>
 8008486:	690f      	ldr	r7, [r1, #16]
 8008488:	2f00      	cmp	r7, #0
 800848a:	d0f6      	beq.n	800847a <__sflush_r+0xae>
 800848c:	0793      	lsls	r3, r2, #30
 800848e:	680e      	ldr	r6, [r1, #0]
 8008490:	bf08      	it	eq
 8008492:	694b      	ldreq	r3, [r1, #20]
 8008494:	600f      	str	r7, [r1, #0]
 8008496:	bf18      	it	ne
 8008498:	2300      	movne	r3, #0
 800849a:	eba6 0807 	sub.w	r8, r6, r7
 800849e:	608b      	str	r3, [r1, #8]
 80084a0:	f1b8 0f00 	cmp.w	r8, #0
 80084a4:	dde9      	ble.n	800847a <__sflush_r+0xae>
 80084a6:	6a21      	ldr	r1, [r4, #32]
 80084a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80084aa:	4643      	mov	r3, r8
 80084ac:	463a      	mov	r2, r7
 80084ae:	4628      	mov	r0, r5
 80084b0:	47b0      	blx	r6
 80084b2:	2800      	cmp	r0, #0
 80084b4:	dc08      	bgt.n	80084c8 <__sflush_r+0xfc>
 80084b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084be:	81a3      	strh	r3, [r4, #12]
 80084c0:	f04f 30ff 	mov.w	r0, #4294967295
 80084c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084c8:	4407      	add	r7, r0
 80084ca:	eba8 0800 	sub.w	r8, r8, r0
 80084ce:	e7e7      	b.n	80084a0 <__sflush_r+0xd4>
 80084d0:	dfbffffe 	.word	0xdfbffffe

080084d4 <_fflush_r>:
 80084d4:	b538      	push	{r3, r4, r5, lr}
 80084d6:	690b      	ldr	r3, [r1, #16]
 80084d8:	4605      	mov	r5, r0
 80084da:	460c      	mov	r4, r1
 80084dc:	b913      	cbnz	r3, 80084e4 <_fflush_r+0x10>
 80084de:	2500      	movs	r5, #0
 80084e0:	4628      	mov	r0, r5
 80084e2:	bd38      	pop	{r3, r4, r5, pc}
 80084e4:	b118      	cbz	r0, 80084ee <_fflush_r+0x1a>
 80084e6:	6a03      	ldr	r3, [r0, #32]
 80084e8:	b90b      	cbnz	r3, 80084ee <_fflush_r+0x1a>
 80084ea:	f7fd fa4d 	bl	8005988 <__sinit>
 80084ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d0f3      	beq.n	80084de <_fflush_r+0xa>
 80084f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80084f8:	07d0      	lsls	r0, r2, #31
 80084fa:	d404      	bmi.n	8008506 <_fflush_r+0x32>
 80084fc:	0599      	lsls	r1, r3, #22
 80084fe:	d402      	bmi.n	8008506 <_fflush_r+0x32>
 8008500:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008502:	f7fd fb72 	bl	8005bea <__retarget_lock_acquire_recursive>
 8008506:	4628      	mov	r0, r5
 8008508:	4621      	mov	r1, r4
 800850a:	f7ff ff5f 	bl	80083cc <__sflush_r>
 800850e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008510:	07da      	lsls	r2, r3, #31
 8008512:	4605      	mov	r5, r0
 8008514:	d4e4      	bmi.n	80084e0 <_fflush_r+0xc>
 8008516:	89a3      	ldrh	r3, [r4, #12]
 8008518:	059b      	lsls	r3, r3, #22
 800851a:	d4e1      	bmi.n	80084e0 <_fflush_r+0xc>
 800851c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800851e:	f7fd fb65 	bl	8005bec <__retarget_lock_release_recursive>
 8008522:	e7dd      	b.n	80084e0 <_fflush_r+0xc>

08008524 <strncmp>:
 8008524:	b510      	push	{r4, lr}
 8008526:	b16a      	cbz	r2, 8008544 <strncmp+0x20>
 8008528:	3901      	subs	r1, #1
 800852a:	1884      	adds	r4, r0, r2
 800852c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008530:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008534:	429a      	cmp	r2, r3
 8008536:	d103      	bne.n	8008540 <strncmp+0x1c>
 8008538:	42a0      	cmp	r0, r4
 800853a:	d001      	beq.n	8008540 <strncmp+0x1c>
 800853c:	2a00      	cmp	r2, #0
 800853e:	d1f5      	bne.n	800852c <strncmp+0x8>
 8008540:	1ad0      	subs	r0, r2, r3
 8008542:	bd10      	pop	{r4, pc}
 8008544:	4610      	mov	r0, r2
 8008546:	e7fc      	b.n	8008542 <strncmp+0x1e>

08008548 <_sbrk_r>:
 8008548:	b538      	push	{r3, r4, r5, lr}
 800854a:	4d06      	ldr	r5, [pc, #24]	@ (8008564 <_sbrk_r+0x1c>)
 800854c:	2300      	movs	r3, #0
 800854e:	4604      	mov	r4, r0
 8008550:	4608      	mov	r0, r1
 8008552:	602b      	str	r3, [r5, #0]
 8008554:	f7f9 fd08 	bl	8001f68 <_sbrk>
 8008558:	1c43      	adds	r3, r0, #1
 800855a:	d102      	bne.n	8008562 <_sbrk_r+0x1a>
 800855c:	682b      	ldr	r3, [r5, #0]
 800855e:	b103      	cbz	r3, 8008562 <_sbrk_r+0x1a>
 8008560:	6023      	str	r3, [r4, #0]
 8008562:	bd38      	pop	{r3, r4, r5, pc}
 8008564:	20000888 	.word	0x20000888

08008568 <nan>:
 8008568:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008570 <nan+0x8>
 800856c:	4770      	bx	lr
 800856e:	bf00      	nop
 8008570:	00000000 	.word	0x00000000
 8008574:	7ff80000 	.word	0x7ff80000

08008578 <__assert_func>:
 8008578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800857a:	4614      	mov	r4, r2
 800857c:	461a      	mov	r2, r3
 800857e:	4b09      	ldr	r3, [pc, #36]	@ (80085a4 <__assert_func+0x2c>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4605      	mov	r5, r0
 8008584:	68d8      	ldr	r0, [r3, #12]
 8008586:	b954      	cbnz	r4, 800859e <__assert_func+0x26>
 8008588:	4b07      	ldr	r3, [pc, #28]	@ (80085a8 <__assert_func+0x30>)
 800858a:	461c      	mov	r4, r3
 800858c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008590:	9100      	str	r1, [sp, #0]
 8008592:	462b      	mov	r3, r5
 8008594:	4905      	ldr	r1, [pc, #20]	@ (80085ac <__assert_func+0x34>)
 8008596:	f000 fba7 	bl	8008ce8 <fiprintf>
 800859a:	f000 fbb7 	bl	8008d0c <abort>
 800859e:	4b04      	ldr	r3, [pc, #16]	@ (80085b0 <__assert_func+0x38>)
 80085a0:	e7f4      	b.n	800858c <__assert_func+0x14>
 80085a2:	bf00      	nop
 80085a4:	20000078 	.word	0x20000078
 80085a8:	0800ce35 	.word	0x0800ce35
 80085ac:	0800ce07 	.word	0x0800ce07
 80085b0:	0800cdfa 	.word	0x0800cdfa

080085b4 <_calloc_r>:
 80085b4:	b570      	push	{r4, r5, r6, lr}
 80085b6:	fba1 5402 	umull	r5, r4, r1, r2
 80085ba:	b93c      	cbnz	r4, 80085cc <_calloc_r+0x18>
 80085bc:	4629      	mov	r1, r5
 80085be:	f7fe f9eb 	bl	8006998 <_malloc_r>
 80085c2:	4606      	mov	r6, r0
 80085c4:	b928      	cbnz	r0, 80085d2 <_calloc_r+0x1e>
 80085c6:	2600      	movs	r6, #0
 80085c8:	4630      	mov	r0, r6
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	220c      	movs	r2, #12
 80085ce:	6002      	str	r2, [r0, #0]
 80085d0:	e7f9      	b.n	80085c6 <_calloc_r+0x12>
 80085d2:	462a      	mov	r2, r5
 80085d4:	4621      	mov	r1, r4
 80085d6:	f7fd fa8a 	bl	8005aee <memset>
 80085da:	e7f5      	b.n	80085c8 <_calloc_r+0x14>

080085dc <rshift>:
 80085dc:	6903      	ldr	r3, [r0, #16]
 80085de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80085e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80085e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80085ea:	f100 0414 	add.w	r4, r0, #20
 80085ee:	dd45      	ble.n	800867c <rshift+0xa0>
 80085f0:	f011 011f 	ands.w	r1, r1, #31
 80085f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80085f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80085fc:	d10c      	bne.n	8008618 <rshift+0x3c>
 80085fe:	f100 0710 	add.w	r7, r0, #16
 8008602:	4629      	mov	r1, r5
 8008604:	42b1      	cmp	r1, r6
 8008606:	d334      	bcc.n	8008672 <rshift+0x96>
 8008608:	1a9b      	subs	r3, r3, r2
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	1eea      	subs	r2, r5, #3
 800860e:	4296      	cmp	r6, r2
 8008610:	bf38      	it	cc
 8008612:	2300      	movcc	r3, #0
 8008614:	4423      	add	r3, r4
 8008616:	e015      	b.n	8008644 <rshift+0x68>
 8008618:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800861c:	f1c1 0820 	rsb	r8, r1, #32
 8008620:	40cf      	lsrs	r7, r1
 8008622:	f105 0e04 	add.w	lr, r5, #4
 8008626:	46a1      	mov	r9, r4
 8008628:	4576      	cmp	r6, lr
 800862a:	46f4      	mov	ip, lr
 800862c:	d815      	bhi.n	800865a <rshift+0x7e>
 800862e:	1a9a      	subs	r2, r3, r2
 8008630:	0092      	lsls	r2, r2, #2
 8008632:	3a04      	subs	r2, #4
 8008634:	3501      	adds	r5, #1
 8008636:	42ae      	cmp	r6, r5
 8008638:	bf38      	it	cc
 800863a:	2200      	movcc	r2, #0
 800863c:	18a3      	adds	r3, r4, r2
 800863e:	50a7      	str	r7, [r4, r2]
 8008640:	b107      	cbz	r7, 8008644 <rshift+0x68>
 8008642:	3304      	adds	r3, #4
 8008644:	1b1a      	subs	r2, r3, r4
 8008646:	42a3      	cmp	r3, r4
 8008648:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800864c:	bf08      	it	eq
 800864e:	2300      	moveq	r3, #0
 8008650:	6102      	str	r2, [r0, #16]
 8008652:	bf08      	it	eq
 8008654:	6143      	streq	r3, [r0, #20]
 8008656:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800865a:	f8dc c000 	ldr.w	ip, [ip]
 800865e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008662:	ea4c 0707 	orr.w	r7, ip, r7
 8008666:	f849 7b04 	str.w	r7, [r9], #4
 800866a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800866e:	40cf      	lsrs	r7, r1
 8008670:	e7da      	b.n	8008628 <rshift+0x4c>
 8008672:	f851 cb04 	ldr.w	ip, [r1], #4
 8008676:	f847 cf04 	str.w	ip, [r7, #4]!
 800867a:	e7c3      	b.n	8008604 <rshift+0x28>
 800867c:	4623      	mov	r3, r4
 800867e:	e7e1      	b.n	8008644 <rshift+0x68>

08008680 <__hexdig_fun>:
 8008680:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008684:	2b09      	cmp	r3, #9
 8008686:	d802      	bhi.n	800868e <__hexdig_fun+0xe>
 8008688:	3820      	subs	r0, #32
 800868a:	b2c0      	uxtb	r0, r0
 800868c:	4770      	bx	lr
 800868e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008692:	2b05      	cmp	r3, #5
 8008694:	d801      	bhi.n	800869a <__hexdig_fun+0x1a>
 8008696:	3847      	subs	r0, #71	@ 0x47
 8008698:	e7f7      	b.n	800868a <__hexdig_fun+0xa>
 800869a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800869e:	2b05      	cmp	r3, #5
 80086a0:	d801      	bhi.n	80086a6 <__hexdig_fun+0x26>
 80086a2:	3827      	subs	r0, #39	@ 0x27
 80086a4:	e7f1      	b.n	800868a <__hexdig_fun+0xa>
 80086a6:	2000      	movs	r0, #0
 80086a8:	4770      	bx	lr
	...

080086ac <__gethex>:
 80086ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086b0:	b085      	sub	sp, #20
 80086b2:	468a      	mov	sl, r1
 80086b4:	9302      	str	r3, [sp, #8]
 80086b6:	680b      	ldr	r3, [r1, #0]
 80086b8:	9001      	str	r0, [sp, #4]
 80086ba:	4690      	mov	r8, r2
 80086bc:	1c9c      	adds	r4, r3, #2
 80086be:	46a1      	mov	r9, r4
 80086c0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80086c4:	2830      	cmp	r0, #48	@ 0x30
 80086c6:	d0fa      	beq.n	80086be <__gethex+0x12>
 80086c8:	eba9 0303 	sub.w	r3, r9, r3
 80086cc:	f1a3 0b02 	sub.w	fp, r3, #2
 80086d0:	f7ff ffd6 	bl	8008680 <__hexdig_fun>
 80086d4:	4605      	mov	r5, r0
 80086d6:	2800      	cmp	r0, #0
 80086d8:	d168      	bne.n	80087ac <__gethex+0x100>
 80086da:	49a0      	ldr	r1, [pc, #640]	@ (800895c <__gethex+0x2b0>)
 80086dc:	2201      	movs	r2, #1
 80086de:	4648      	mov	r0, r9
 80086e0:	f7ff ff20 	bl	8008524 <strncmp>
 80086e4:	4607      	mov	r7, r0
 80086e6:	2800      	cmp	r0, #0
 80086e8:	d167      	bne.n	80087ba <__gethex+0x10e>
 80086ea:	f899 0001 	ldrb.w	r0, [r9, #1]
 80086ee:	4626      	mov	r6, r4
 80086f0:	f7ff ffc6 	bl	8008680 <__hexdig_fun>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	d062      	beq.n	80087be <__gethex+0x112>
 80086f8:	4623      	mov	r3, r4
 80086fa:	7818      	ldrb	r0, [r3, #0]
 80086fc:	2830      	cmp	r0, #48	@ 0x30
 80086fe:	4699      	mov	r9, r3
 8008700:	f103 0301 	add.w	r3, r3, #1
 8008704:	d0f9      	beq.n	80086fa <__gethex+0x4e>
 8008706:	f7ff ffbb 	bl	8008680 <__hexdig_fun>
 800870a:	fab0 f580 	clz	r5, r0
 800870e:	096d      	lsrs	r5, r5, #5
 8008710:	f04f 0b01 	mov.w	fp, #1
 8008714:	464a      	mov	r2, r9
 8008716:	4616      	mov	r6, r2
 8008718:	3201      	adds	r2, #1
 800871a:	7830      	ldrb	r0, [r6, #0]
 800871c:	f7ff ffb0 	bl	8008680 <__hexdig_fun>
 8008720:	2800      	cmp	r0, #0
 8008722:	d1f8      	bne.n	8008716 <__gethex+0x6a>
 8008724:	498d      	ldr	r1, [pc, #564]	@ (800895c <__gethex+0x2b0>)
 8008726:	2201      	movs	r2, #1
 8008728:	4630      	mov	r0, r6
 800872a:	f7ff fefb 	bl	8008524 <strncmp>
 800872e:	2800      	cmp	r0, #0
 8008730:	d13f      	bne.n	80087b2 <__gethex+0x106>
 8008732:	b944      	cbnz	r4, 8008746 <__gethex+0x9a>
 8008734:	1c74      	adds	r4, r6, #1
 8008736:	4622      	mov	r2, r4
 8008738:	4616      	mov	r6, r2
 800873a:	3201      	adds	r2, #1
 800873c:	7830      	ldrb	r0, [r6, #0]
 800873e:	f7ff ff9f 	bl	8008680 <__hexdig_fun>
 8008742:	2800      	cmp	r0, #0
 8008744:	d1f8      	bne.n	8008738 <__gethex+0x8c>
 8008746:	1ba4      	subs	r4, r4, r6
 8008748:	00a7      	lsls	r7, r4, #2
 800874a:	7833      	ldrb	r3, [r6, #0]
 800874c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008750:	2b50      	cmp	r3, #80	@ 0x50
 8008752:	d13e      	bne.n	80087d2 <__gethex+0x126>
 8008754:	7873      	ldrb	r3, [r6, #1]
 8008756:	2b2b      	cmp	r3, #43	@ 0x2b
 8008758:	d033      	beq.n	80087c2 <__gethex+0x116>
 800875a:	2b2d      	cmp	r3, #45	@ 0x2d
 800875c:	d034      	beq.n	80087c8 <__gethex+0x11c>
 800875e:	1c71      	adds	r1, r6, #1
 8008760:	2400      	movs	r4, #0
 8008762:	7808      	ldrb	r0, [r1, #0]
 8008764:	f7ff ff8c 	bl	8008680 <__hexdig_fun>
 8008768:	1e43      	subs	r3, r0, #1
 800876a:	b2db      	uxtb	r3, r3
 800876c:	2b18      	cmp	r3, #24
 800876e:	d830      	bhi.n	80087d2 <__gethex+0x126>
 8008770:	f1a0 0210 	sub.w	r2, r0, #16
 8008774:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008778:	f7ff ff82 	bl	8008680 <__hexdig_fun>
 800877c:	f100 3cff 	add.w	ip, r0, #4294967295
 8008780:	fa5f fc8c 	uxtb.w	ip, ip
 8008784:	f1bc 0f18 	cmp.w	ip, #24
 8008788:	f04f 030a 	mov.w	r3, #10
 800878c:	d91e      	bls.n	80087cc <__gethex+0x120>
 800878e:	b104      	cbz	r4, 8008792 <__gethex+0xe6>
 8008790:	4252      	negs	r2, r2
 8008792:	4417      	add	r7, r2
 8008794:	f8ca 1000 	str.w	r1, [sl]
 8008798:	b1ed      	cbz	r5, 80087d6 <__gethex+0x12a>
 800879a:	f1bb 0f00 	cmp.w	fp, #0
 800879e:	bf0c      	ite	eq
 80087a0:	2506      	moveq	r5, #6
 80087a2:	2500      	movne	r5, #0
 80087a4:	4628      	mov	r0, r5
 80087a6:	b005      	add	sp, #20
 80087a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ac:	2500      	movs	r5, #0
 80087ae:	462c      	mov	r4, r5
 80087b0:	e7b0      	b.n	8008714 <__gethex+0x68>
 80087b2:	2c00      	cmp	r4, #0
 80087b4:	d1c7      	bne.n	8008746 <__gethex+0x9a>
 80087b6:	4627      	mov	r7, r4
 80087b8:	e7c7      	b.n	800874a <__gethex+0x9e>
 80087ba:	464e      	mov	r6, r9
 80087bc:	462f      	mov	r7, r5
 80087be:	2501      	movs	r5, #1
 80087c0:	e7c3      	b.n	800874a <__gethex+0x9e>
 80087c2:	2400      	movs	r4, #0
 80087c4:	1cb1      	adds	r1, r6, #2
 80087c6:	e7cc      	b.n	8008762 <__gethex+0xb6>
 80087c8:	2401      	movs	r4, #1
 80087ca:	e7fb      	b.n	80087c4 <__gethex+0x118>
 80087cc:	fb03 0002 	mla	r0, r3, r2, r0
 80087d0:	e7ce      	b.n	8008770 <__gethex+0xc4>
 80087d2:	4631      	mov	r1, r6
 80087d4:	e7de      	b.n	8008794 <__gethex+0xe8>
 80087d6:	eba6 0309 	sub.w	r3, r6, r9
 80087da:	3b01      	subs	r3, #1
 80087dc:	4629      	mov	r1, r5
 80087de:	2b07      	cmp	r3, #7
 80087e0:	dc0a      	bgt.n	80087f8 <__gethex+0x14c>
 80087e2:	9801      	ldr	r0, [sp, #4]
 80087e4:	f7fe f964 	bl	8006ab0 <_Balloc>
 80087e8:	4604      	mov	r4, r0
 80087ea:	b940      	cbnz	r0, 80087fe <__gethex+0x152>
 80087ec:	4b5c      	ldr	r3, [pc, #368]	@ (8008960 <__gethex+0x2b4>)
 80087ee:	4602      	mov	r2, r0
 80087f0:	21e4      	movs	r1, #228	@ 0xe4
 80087f2:	485c      	ldr	r0, [pc, #368]	@ (8008964 <__gethex+0x2b8>)
 80087f4:	f7ff fec0 	bl	8008578 <__assert_func>
 80087f8:	3101      	adds	r1, #1
 80087fa:	105b      	asrs	r3, r3, #1
 80087fc:	e7ef      	b.n	80087de <__gethex+0x132>
 80087fe:	f100 0a14 	add.w	sl, r0, #20
 8008802:	2300      	movs	r3, #0
 8008804:	4655      	mov	r5, sl
 8008806:	469b      	mov	fp, r3
 8008808:	45b1      	cmp	r9, r6
 800880a:	d337      	bcc.n	800887c <__gethex+0x1d0>
 800880c:	f845 bb04 	str.w	fp, [r5], #4
 8008810:	eba5 050a 	sub.w	r5, r5, sl
 8008814:	10ad      	asrs	r5, r5, #2
 8008816:	6125      	str	r5, [r4, #16]
 8008818:	4658      	mov	r0, fp
 800881a:	f7fe fa3b 	bl	8006c94 <__hi0bits>
 800881e:	016d      	lsls	r5, r5, #5
 8008820:	f8d8 6000 	ldr.w	r6, [r8]
 8008824:	1a2d      	subs	r5, r5, r0
 8008826:	42b5      	cmp	r5, r6
 8008828:	dd54      	ble.n	80088d4 <__gethex+0x228>
 800882a:	1bad      	subs	r5, r5, r6
 800882c:	4629      	mov	r1, r5
 800882e:	4620      	mov	r0, r4
 8008830:	f7fe fdcf 	bl	80073d2 <__any_on>
 8008834:	4681      	mov	r9, r0
 8008836:	b178      	cbz	r0, 8008858 <__gethex+0x1ac>
 8008838:	1e6b      	subs	r3, r5, #1
 800883a:	1159      	asrs	r1, r3, #5
 800883c:	f003 021f 	and.w	r2, r3, #31
 8008840:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008844:	f04f 0901 	mov.w	r9, #1
 8008848:	fa09 f202 	lsl.w	r2, r9, r2
 800884c:	420a      	tst	r2, r1
 800884e:	d003      	beq.n	8008858 <__gethex+0x1ac>
 8008850:	454b      	cmp	r3, r9
 8008852:	dc36      	bgt.n	80088c2 <__gethex+0x216>
 8008854:	f04f 0902 	mov.w	r9, #2
 8008858:	4629      	mov	r1, r5
 800885a:	4620      	mov	r0, r4
 800885c:	f7ff febe 	bl	80085dc <rshift>
 8008860:	442f      	add	r7, r5
 8008862:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008866:	42bb      	cmp	r3, r7
 8008868:	da42      	bge.n	80088f0 <__gethex+0x244>
 800886a:	9801      	ldr	r0, [sp, #4]
 800886c:	4621      	mov	r1, r4
 800886e:	f7fe f95f 	bl	8006b30 <_Bfree>
 8008872:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008874:	2300      	movs	r3, #0
 8008876:	6013      	str	r3, [r2, #0]
 8008878:	25a3      	movs	r5, #163	@ 0xa3
 800887a:	e793      	b.n	80087a4 <__gethex+0xf8>
 800887c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008880:	2a2e      	cmp	r2, #46	@ 0x2e
 8008882:	d012      	beq.n	80088aa <__gethex+0x1fe>
 8008884:	2b20      	cmp	r3, #32
 8008886:	d104      	bne.n	8008892 <__gethex+0x1e6>
 8008888:	f845 bb04 	str.w	fp, [r5], #4
 800888c:	f04f 0b00 	mov.w	fp, #0
 8008890:	465b      	mov	r3, fp
 8008892:	7830      	ldrb	r0, [r6, #0]
 8008894:	9303      	str	r3, [sp, #12]
 8008896:	f7ff fef3 	bl	8008680 <__hexdig_fun>
 800889a:	9b03      	ldr	r3, [sp, #12]
 800889c:	f000 000f 	and.w	r0, r0, #15
 80088a0:	4098      	lsls	r0, r3
 80088a2:	ea4b 0b00 	orr.w	fp, fp, r0
 80088a6:	3304      	adds	r3, #4
 80088a8:	e7ae      	b.n	8008808 <__gethex+0x15c>
 80088aa:	45b1      	cmp	r9, r6
 80088ac:	d8ea      	bhi.n	8008884 <__gethex+0x1d8>
 80088ae:	492b      	ldr	r1, [pc, #172]	@ (800895c <__gethex+0x2b0>)
 80088b0:	9303      	str	r3, [sp, #12]
 80088b2:	2201      	movs	r2, #1
 80088b4:	4630      	mov	r0, r6
 80088b6:	f7ff fe35 	bl	8008524 <strncmp>
 80088ba:	9b03      	ldr	r3, [sp, #12]
 80088bc:	2800      	cmp	r0, #0
 80088be:	d1e1      	bne.n	8008884 <__gethex+0x1d8>
 80088c0:	e7a2      	b.n	8008808 <__gethex+0x15c>
 80088c2:	1ea9      	subs	r1, r5, #2
 80088c4:	4620      	mov	r0, r4
 80088c6:	f7fe fd84 	bl	80073d2 <__any_on>
 80088ca:	2800      	cmp	r0, #0
 80088cc:	d0c2      	beq.n	8008854 <__gethex+0x1a8>
 80088ce:	f04f 0903 	mov.w	r9, #3
 80088d2:	e7c1      	b.n	8008858 <__gethex+0x1ac>
 80088d4:	da09      	bge.n	80088ea <__gethex+0x23e>
 80088d6:	1b75      	subs	r5, r6, r5
 80088d8:	4621      	mov	r1, r4
 80088da:	9801      	ldr	r0, [sp, #4]
 80088dc:	462a      	mov	r2, r5
 80088de:	f7fe fb3f 	bl	8006f60 <__lshift>
 80088e2:	1b7f      	subs	r7, r7, r5
 80088e4:	4604      	mov	r4, r0
 80088e6:	f100 0a14 	add.w	sl, r0, #20
 80088ea:	f04f 0900 	mov.w	r9, #0
 80088ee:	e7b8      	b.n	8008862 <__gethex+0x1b6>
 80088f0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80088f4:	42bd      	cmp	r5, r7
 80088f6:	dd6f      	ble.n	80089d8 <__gethex+0x32c>
 80088f8:	1bed      	subs	r5, r5, r7
 80088fa:	42ae      	cmp	r6, r5
 80088fc:	dc34      	bgt.n	8008968 <__gethex+0x2bc>
 80088fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008902:	2b02      	cmp	r3, #2
 8008904:	d022      	beq.n	800894c <__gethex+0x2a0>
 8008906:	2b03      	cmp	r3, #3
 8008908:	d024      	beq.n	8008954 <__gethex+0x2a8>
 800890a:	2b01      	cmp	r3, #1
 800890c:	d115      	bne.n	800893a <__gethex+0x28e>
 800890e:	42ae      	cmp	r6, r5
 8008910:	d113      	bne.n	800893a <__gethex+0x28e>
 8008912:	2e01      	cmp	r6, #1
 8008914:	d10b      	bne.n	800892e <__gethex+0x282>
 8008916:	9a02      	ldr	r2, [sp, #8]
 8008918:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800891c:	6013      	str	r3, [r2, #0]
 800891e:	2301      	movs	r3, #1
 8008920:	6123      	str	r3, [r4, #16]
 8008922:	f8ca 3000 	str.w	r3, [sl]
 8008926:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008928:	2562      	movs	r5, #98	@ 0x62
 800892a:	601c      	str	r4, [r3, #0]
 800892c:	e73a      	b.n	80087a4 <__gethex+0xf8>
 800892e:	1e71      	subs	r1, r6, #1
 8008930:	4620      	mov	r0, r4
 8008932:	f7fe fd4e 	bl	80073d2 <__any_on>
 8008936:	2800      	cmp	r0, #0
 8008938:	d1ed      	bne.n	8008916 <__gethex+0x26a>
 800893a:	9801      	ldr	r0, [sp, #4]
 800893c:	4621      	mov	r1, r4
 800893e:	f7fe f8f7 	bl	8006b30 <_Bfree>
 8008942:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008944:	2300      	movs	r3, #0
 8008946:	6013      	str	r3, [r2, #0]
 8008948:	2550      	movs	r5, #80	@ 0x50
 800894a:	e72b      	b.n	80087a4 <__gethex+0xf8>
 800894c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800894e:	2b00      	cmp	r3, #0
 8008950:	d1f3      	bne.n	800893a <__gethex+0x28e>
 8008952:	e7e0      	b.n	8008916 <__gethex+0x26a>
 8008954:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1dd      	bne.n	8008916 <__gethex+0x26a>
 800895a:	e7ee      	b.n	800893a <__gethex+0x28e>
 800895c:	0800cc88 	.word	0x0800cc88
 8008960:	0800cb21 	.word	0x0800cb21
 8008964:	0800ce36 	.word	0x0800ce36
 8008968:	1e6f      	subs	r7, r5, #1
 800896a:	f1b9 0f00 	cmp.w	r9, #0
 800896e:	d130      	bne.n	80089d2 <__gethex+0x326>
 8008970:	b127      	cbz	r7, 800897c <__gethex+0x2d0>
 8008972:	4639      	mov	r1, r7
 8008974:	4620      	mov	r0, r4
 8008976:	f7fe fd2c 	bl	80073d2 <__any_on>
 800897a:	4681      	mov	r9, r0
 800897c:	117a      	asrs	r2, r7, #5
 800897e:	2301      	movs	r3, #1
 8008980:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008984:	f007 071f 	and.w	r7, r7, #31
 8008988:	40bb      	lsls	r3, r7
 800898a:	4213      	tst	r3, r2
 800898c:	4629      	mov	r1, r5
 800898e:	4620      	mov	r0, r4
 8008990:	bf18      	it	ne
 8008992:	f049 0902 	orrne.w	r9, r9, #2
 8008996:	f7ff fe21 	bl	80085dc <rshift>
 800899a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800899e:	1b76      	subs	r6, r6, r5
 80089a0:	2502      	movs	r5, #2
 80089a2:	f1b9 0f00 	cmp.w	r9, #0
 80089a6:	d047      	beq.n	8008a38 <__gethex+0x38c>
 80089a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	d015      	beq.n	80089dc <__gethex+0x330>
 80089b0:	2b03      	cmp	r3, #3
 80089b2:	d017      	beq.n	80089e4 <__gethex+0x338>
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d109      	bne.n	80089cc <__gethex+0x320>
 80089b8:	f019 0f02 	tst.w	r9, #2
 80089bc:	d006      	beq.n	80089cc <__gethex+0x320>
 80089be:	f8da 3000 	ldr.w	r3, [sl]
 80089c2:	ea49 0903 	orr.w	r9, r9, r3
 80089c6:	f019 0f01 	tst.w	r9, #1
 80089ca:	d10e      	bne.n	80089ea <__gethex+0x33e>
 80089cc:	f045 0510 	orr.w	r5, r5, #16
 80089d0:	e032      	b.n	8008a38 <__gethex+0x38c>
 80089d2:	f04f 0901 	mov.w	r9, #1
 80089d6:	e7d1      	b.n	800897c <__gethex+0x2d0>
 80089d8:	2501      	movs	r5, #1
 80089da:	e7e2      	b.n	80089a2 <__gethex+0x2f6>
 80089dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089de:	f1c3 0301 	rsb	r3, r3, #1
 80089e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80089e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d0f0      	beq.n	80089cc <__gethex+0x320>
 80089ea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80089ee:	f104 0314 	add.w	r3, r4, #20
 80089f2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80089f6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80089fa:	f04f 0c00 	mov.w	ip, #0
 80089fe:	4618      	mov	r0, r3
 8008a00:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a04:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008a08:	d01b      	beq.n	8008a42 <__gethex+0x396>
 8008a0a:	3201      	adds	r2, #1
 8008a0c:	6002      	str	r2, [r0, #0]
 8008a0e:	2d02      	cmp	r5, #2
 8008a10:	f104 0314 	add.w	r3, r4, #20
 8008a14:	d13c      	bne.n	8008a90 <__gethex+0x3e4>
 8008a16:	f8d8 2000 	ldr.w	r2, [r8]
 8008a1a:	3a01      	subs	r2, #1
 8008a1c:	42b2      	cmp	r2, r6
 8008a1e:	d109      	bne.n	8008a34 <__gethex+0x388>
 8008a20:	1171      	asrs	r1, r6, #5
 8008a22:	2201      	movs	r2, #1
 8008a24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008a28:	f006 061f 	and.w	r6, r6, #31
 8008a2c:	fa02 f606 	lsl.w	r6, r2, r6
 8008a30:	421e      	tst	r6, r3
 8008a32:	d13a      	bne.n	8008aaa <__gethex+0x3fe>
 8008a34:	f045 0520 	orr.w	r5, r5, #32
 8008a38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a3a:	601c      	str	r4, [r3, #0]
 8008a3c:	9b02      	ldr	r3, [sp, #8]
 8008a3e:	601f      	str	r7, [r3, #0]
 8008a40:	e6b0      	b.n	80087a4 <__gethex+0xf8>
 8008a42:	4299      	cmp	r1, r3
 8008a44:	f843 cc04 	str.w	ip, [r3, #-4]
 8008a48:	d8d9      	bhi.n	80089fe <__gethex+0x352>
 8008a4a:	68a3      	ldr	r3, [r4, #8]
 8008a4c:	459b      	cmp	fp, r3
 8008a4e:	db17      	blt.n	8008a80 <__gethex+0x3d4>
 8008a50:	6861      	ldr	r1, [r4, #4]
 8008a52:	9801      	ldr	r0, [sp, #4]
 8008a54:	3101      	adds	r1, #1
 8008a56:	f7fe f82b 	bl	8006ab0 <_Balloc>
 8008a5a:	4681      	mov	r9, r0
 8008a5c:	b918      	cbnz	r0, 8008a66 <__gethex+0x3ba>
 8008a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8008ac8 <__gethex+0x41c>)
 8008a60:	4602      	mov	r2, r0
 8008a62:	2184      	movs	r1, #132	@ 0x84
 8008a64:	e6c5      	b.n	80087f2 <__gethex+0x146>
 8008a66:	6922      	ldr	r2, [r4, #16]
 8008a68:	3202      	adds	r2, #2
 8008a6a:	f104 010c 	add.w	r1, r4, #12
 8008a6e:	0092      	lsls	r2, r2, #2
 8008a70:	300c      	adds	r0, #12
 8008a72:	f7fd f8bc 	bl	8005bee <memcpy>
 8008a76:	4621      	mov	r1, r4
 8008a78:	9801      	ldr	r0, [sp, #4]
 8008a7a:	f7fe f859 	bl	8006b30 <_Bfree>
 8008a7e:	464c      	mov	r4, r9
 8008a80:	6923      	ldr	r3, [r4, #16]
 8008a82:	1c5a      	adds	r2, r3, #1
 8008a84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008a88:	6122      	str	r2, [r4, #16]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	615a      	str	r2, [r3, #20]
 8008a8e:	e7be      	b.n	8008a0e <__gethex+0x362>
 8008a90:	6922      	ldr	r2, [r4, #16]
 8008a92:	455a      	cmp	r2, fp
 8008a94:	dd0b      	ble.n	8008aae <__gethex+0x402>
 8008a96:	2101      	movs	r1, #1
 8008a98:	4620      	mov	r0, r4
 8008a9a:	f7ff fd9f 	bl	80085dc <rshift>
 8008a9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008aa2:	3701      	adds	r7, #1
 8008aa4:	42bb      	cmp	r3, r7
 8008aa6:	f6ff aee0 	blt.w	800886a <__gethex+0x1be>
 8008aaa:	2501      	movs	r5, #1
 8008aac:	e7c2      	b.n	8008a34 <__gethex+0x388>
 8008aae:	f016 061f 	ands.w	r6, r6, #31
 8008ab2:	d0fa      	beq.n	8008aaa <__gethex+0x3fe>
 8008ab4:	4453      	add	r3, sl
 8008ab6:	f1c6 0620 	rsb	r6, r6, #32
 8008aba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008abe:	f7fe f8e9 	bl	8006c94 <__hi0bits>
 8008ac2:	42b0      	cmp	r0, r6
 8008ac4:	dbe7      	blt.n	8008a96 <__gethex+0x3ea>
 8008ac6:	e7f0      	b.n	8008aaa <__gethex+0x3fe>
 8008ac8:	0800cb21 	.word	0x0800cb21

08008acc <L_shift>:
 8008acc:	f1c2 0208 	rsb	r2, r2, #8
 8008ad0:	0092      	lsls	r2, r2, #2
 8008ad2:	b570      	push	{r4, r5, r6, lr}
 8008ad4:	f1c2 0620 	rsb	r6, r2, #32
 8008ad8:	6843      	ldr	r3, [r0, #4]
 8008ada:	6804      	ldr	r4, [r0, #0]
 8008adc:	fa03 f506 	lsl.w	r5, r3, r6
 8008ae0:	432c      	orrs	r4, r5
 8008ae2:	40d3      	lsrs	r3, r2
 8008ae4:	6004      	str	r4, [r0, #0]
 8008ae6:	f840 3f04 	str.w	r3, [r0, #4]!
 8008aea:	4288      	cmp	r0, r1
 8008aec:	d3f4      	bcc.n	8008ad8 <L_shift+0xc>
 8008aee:	bd70      	pop	{r4, r5, r6, pc}

08008af0 <__match>:
 8008af0:	b530      	push	{r4, r5, lr}
 8008af2:	6803      	ldr	r3, [r0, #0]
 8008af4:	3301      	adds	r3, #1
 8008af6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008afa:	b914      	cbnz	r4, 8008b02 <__match+0x12>
 8008afc:	6003      	str	r3, [r0, #0]
 8008afe:	2001      	movs	r0, #1
 8008b00:	bd30      	pop	{r4, r5, pc}
 8008b02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b06:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008b0a:	2d19      	cmp	r5, #25
 8008b0c:	bf98      	it	ls
 8008b0e:	3220      	addls	r2, #32
 8008b10:	42a2      	cmp	r2, r4
 8008b12:	d0f0      	beq.n	8008af6 <__match+0x6>
 8008b14:	2000      	movs	r0, #0
 8008b16:	e7f3      	b.n	8008b00 <__match+0x10>

08008b18 <__hexnan>:
 8008b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b1c:	680b      	ldr	r3, [r1, #0]
 8008b1e:	6801      	ldr	r1, [r0, #0]
 8008b20:	115e      	asrs	r6, r3, #5
 8008b22:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008b26:	f013 031f 	ands.w	r3, r3, #31
 8008b2a:	b087      	sub	sp, #28
 8008b2c:	bf18      	it	ne
 8008b2e:	3604      	addne	r6, #4
 8008b30:	2500      	movs	r5, #0
 8008b32:	1f37      	subs	r7, r6, #4
 8008b34:	4682      	mov	sl, r0
 8008b36:	4690      	mov	r8, r2
 8008b38:	9301      	str	r3, [sp, #4]
 8008b3a:	f846 5c04 	str.w	r5, [r6, #-4]
 8008b3e:	46b9      	mov	r9, r7
 8008b40:	463c      	mov	r4, r7
 8008b42:	9502      	str	r5, [sp, #8]
 8008b44:	46ab      	mov	fp, r5
 8008b46:	784a      	ldrb	r2, [r1, #1]
 8008b48:	1c4b      	adds	r3, r1, #1
 8008b4a:	9303      	str	r3, [sp, #12]
 8008b4c:	b342      	cbz	r2, 8008ba0 <__hexnan+0x88>
 8008b4e:	4610      	mov	r0, r2
 8008b50:	9105      	str	r1, [sp, #20]
 8008b52:	9204      	str	r2, [sp, #16]
 8008b54:	f7ff fd94 	bl	8008680 <__hexdig_fun>
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	d151      	bne.n	8008c00 <__hexnan+0xe8>
 8008b5c:	9a04      	ldr	r2, [sp, #16]
 8008b5e:	9905      	ldr	r1, [sp, #20]
 8008b60:	2a20      	cmp	r2, #32
 8008b62:	d818      	bhi.n	8008b96 <__hexnan+0x7e>
 8008b64:	9b02      	ldr	r3, [sp, #8]
 8008b66:	459b      	cmp	fp, r3
 8008b68:	dd13      	ble.n	8008b92 <__hexnan+0x7a>
 8008b6a:	454c      	cmp	r4, r9
 8008b6c:	d206      	bcs.n	8008b7c <__hexnan+0x64>
 8008b6e:	2d07      	cmp	r5, #7
 8008b70:	dc04      	bgt.n	8008b7c <__hexnan+0x64>
 8008b72:	462a      	mov	r2, r5
 8008b74:	4649      	mov	r1, r9
 8008b76:	4620      	mov	r0, r4
 8008b78:	f7ff ffa8 	bl	8008acc <L_shift>
 8008b7c:	4544      	cmp	r4, r8
 8008b7e:	d952      	bls.n	8008c26 <__hexnan+0x10e>
 8008b80:	2300      	movs	r3, #0
 8008b82:	f1a4 0904 	sub.w	r9, r4, #4
 8008b86:	f844 3c04 	str.w	r3, [r4, #-4]
 8008b8a:	f8cd b008 	str.w	fp, [sp, #8]
 8008b8e:	464c      	mov	r4, r9
 8008b90:	461d      	mov	r5, r3
 8008b92:	9903      	ldr	r1, [sp, #12]
 8008b94:	e7d7      	b.n	8008b46 <__hexnan+0x2e>
 8008b96:	2a29      	cmp	r2, #41	@ 0x29
 8008b98:	d157      	bne.n	8008c4a <__hexnan+0x132>
 8008b9a:	3102      	adds	r1, #2
 8008b9c:	f8ca 1000 	str.w	r1, [sl]
 8008ba0:	f1bb 0f00 	cmp.w	fp, #0
 8008ba4:	d051      	beq.n	8008c4a <__hexnan+0x132>
 8008ba6:	454c      	cmp	r4, r9
 8008ba8:	d206      	bcs.n	8008bb8 <__hexnan+0xa0>
 8008baa:	2d07      	cmp	r5, #7
 8008bac:	dc04      	bgt.n	8008bb8 <__hexnan+0xa0>
 8008bae:	462a      	mov	r2, r5
 8008bb0:	4649      	mov	r1, r9
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	f7ff ff8a 	bl	8008acc <L_shift>
 8008bb8:	4544      	cmp	r4, r8
 8008bba:	d936      	bls.n	8008c2a <__hexnan+0x112>
 8008bbc:	f1a8 0204 	sub.w	r2, r8, #4
 8008bc0:	4623      	mov	r3, r4
 8008bc2:	f853 1b04 	ldr.w	r1, [r3], #4
 8008bc6:	f842 1f04 	str.w	r1, [r2, #4]!
 8008bca:	429f      	cmp	r7, r3
 8008bcc:	d2f9      	bcs.n	8008bc2 <__hexnan+0xaa>
 8008bce:	1b3b      	subs	r3, r7, r4
 8008bd0:	f023 0303 	bic.w	r3, r3, #3
 8008bd4:	3304      	adds	r3, #4
 8008bd6:	3401      	adds	r4, #1
 8008bd8:	3e03      	subs	r6, #3
 8008bda:	42b4      	cmp	r4, r6
 8008bdc:	bf88      	it	hi
 8008bde:	2304      	movhi	r3, #4
 8008be0:	4443      	add	r3, r8
 8008be2:	2200      	movs	r2, #0
 8008be4:	f843 2b04 	str.w	r2, [r3], #4
 8008be8:	429f      	cmp	r7, r3
 8008bea:	d2fb      	bcs.n	8008be4 <__hexnan+0xcc>
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	b91b      	cbnz	r3, 8008bf8 <__hexnan+0xe0>
 8008bf0:	4547      	cmp	r7, r8
 8008bf2:	d128      	bne.n	8008c46 <__hexnan+0x12e>
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	603b      	str	r3, [r7, #0]
 8008bf8:	2005      	movs	r0, #5
 8008bfa:	b007      	add	sp, #28
 8008bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c00:	3501      	adds	r5, #1
 8008c02:	2d08      	cmp	r5, #8
 8008c04:	f10b 0b01 	add.w	fp, fp, #1
 8008c08:	dd06      	ble.n	8008c18 <__hexnan+0x100>
 8008c0a:	4544      	cmp	r4, r8
 8008c0c:	d9c1      	bls.n	8008b92 <__hexnan+0x7a>
 8008c0e:	2300      	movs	r3, #0
 8008c10:	f844 3c04 	str.w	r3, [r4, #-4]
 8008c14:	2501      	movs	r5, #1
 8008c16:	3c04      	subs	r4, #4
 8008c18:	6822      	ldr	r2, [r4, #0]
 8008c1a:	f000 000f 	and.w	r0, r0, #15
 8008c1e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008c22:	6020      	str	r0, [r4, #0]
 8008c24:	e7b5      	b.n	8008b92 <__hexnan+0x7a>
 8008c26:	2508      	movs	r5, #8
 8008c28:	e7b3      	b.n	8008b92 <__hexnan+0x7a>
 8008c2a:	9b01      	ldr	r3, [sp, #4]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d0dd      	beq.n	8008bec <__hexnan+0xd4>
 8008c30:	f1c3 0320 	rsb	r3, r3, #32
 8008c34:	f04f 32ff 	mov.w	r2, #4294967295
 8008c38:	40da      	lsrs	r2, r3
 8008c3a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008c3e:	4013      	ands	r3, r2
 8008c40:	f846 3c04 	str.w	r3, [r6, #-4]
 8008c44:	e7d2      	b.n	8008bec <__hexnan+0xd4>
 8008c46:	3f04      	subs	r7, #4
 8008c48:	e7d0      	b.n	8008bec <__hexnan+0xd4>
 8008c4a:	2004      	movs	r0, #4
 8008c4c:	e7d5      	b.n	8008bfa <__hexnan+0xe2>

08008c4e <__ascii_mbtowc>:
 8008c4e:	b082      	sub	sp, #8
 8008c50:	b901      	cbnz	r1, 8008c54 <__ascii_mbtowc+0x6>
 8008c52:	a901      	add	r1, sp, #4
 8008c54:	b142      	cbz	r2, 8008c68 <__ascii_mbtowc+0x1a>
 8008c56:	b14b      	cbz	r3, 8008c6c <__ascii_mbtowc+0x1e>
 8008c58:	7813      	ldrb	r3, [r2, #0]
 8008c5a:	600b      	str	r3, [r1, #0]
 8008c5c:	7812      	ldrb	r2, [r2, #0]
 8008c5e:	1e10      	subs	r0, r2, #0
 8008c60:	bf18      	it	ne
 8008c62:	2001      	movne	r0, #1
 8008c64:	b002      	add	sp, #8
 8008c66:	4770      	bx	lr
 8008c68:	4610      	mov	r0, r2
 8008c6a:	e7fb      	b.n	8008c64 <__ascii_mbtowc+0x16>
 8008c6c:	f06f 0001 	mvn.w	r0, #1
 8008c70:	e7f8      	b.n	8008c64 <__ascii_mbtowc+0x16>

08008c72 <_realloc_r>:
 8008c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c76:	4680      	mov	r8, r0
 8008c78:	4615      	mov	r5, r2
 8008c7a:	460c      	mov	r4, r1
 8008c7c:	b921      	cbnz	r1, 8008c88 <_realloc_r+0x16>
 8008c7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c82:	4611      	mov	r1, r2
 8008c84:	f7fd be88 	b.w	8006998 <_malloc_r>
 8008c88:	b92a      	cbnz	r2, 8008c96 <_realloc_r+0x24>
 8008c8a:	f7fd fe11 	bl	80068b0 <_free_r>
 8008c8e:	2400      	movs	r4, #0
 8008c90:	4620      	mov	r0, r4
 8008c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c96:	f000 f840 	bl	8008d1a <_malloc_usable_size_r>
 8008c9a:	4285      	cmp	r5, r0
 8008c9c:	4606      	mov	r6, r0
 8008c9e:	d802      	bhi.n	8008ca6 <_realloc_r+0x34>
 8008ca0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008ca4:	d8f4      	bhi.n	8008c90 <_realloc_r+0x1e>
 8008ca6:	4629      	mov	r1, r5
 8008ca8:	4640      	mov	r0, r8
 8008caa:	f7fd fe75 	bl	8006998 <_malloc_r>
 8008cae:	4607      	mov	r7, r0
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	d0ec      	beq.n	8008c8e <_realloc_r+0x1c>
 8008cb4:	42b5      	cmp	r5, r6
 8008cb6:	462a      	mov	r2, r5
 8008cb8:	4621      	mov	r1, r4
 8008cba:	bf28      	it	cs
 8008cbc:	4632      	movcs	r2, r6
 8008cbe:	f7fc ff96 	bl	8005bee <memcpy>
 8008cc2:	4621      	mov	r1, r4
 8008cc4:	4640      	mov	r0, r8
 8008cc6:	f7fd fdf3 	bl	80068b0 <_free_r>
 8008cca:	463c      	mov	r4, r7
 8008ccc:	e7e0      	b.n	8008c90 <_realloc_r+0x1e>

08008cce <__ascii_wctomb>:
 8008cce:	4603      	mov	r3, r0
 8008cd0:	4608      	mov	r0, r1
 8008cd2:	b141      	cbz	r1, 8008ce6 <__ascii_wctomb+0x18>
 8008cd4:	2aff      	cmp	r2, #255	@ 0xff
 8008cd6:	d904      	bls.n	8008ce2 <__ascii_wctomb+0x14>
 8008cd8:	228a      	movs	r2, #138	@ 0x8a
 8008cda:	601a      	str	r2, [r3, #0]
 8008cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce0:	4770      	bx	lr
 8008ce2:	700a      	strb	r2, [r1, #0]
 8008ce4:	2001      	movs	r0, #1
 8008ce6:	4770      	bx	lr

08008ce8 <fiprintf>:
 8008ce8:	b40e      	push	{r1, r2, r3}
 8008cea:	b503      	push	{r0, r1, lr}
 8008cec:	4601      	mov	r1, r0
 8008cee:	ab03      	add	r3, sp, #12
 8008cf0:	4805      	ldr	r0, [pc, #20]	@ (8008d08 <fiprintf+0x20>)
 8008cf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cf6:	6800      	ldr	r0, [r0, #0]
 8008cf8:	9301      	str	r3, [sp, #4]
 8008cfa:	f000 f83f 	bl	8008d7c <_vfiprintf_r>
 8008cfe:	b002      	add	sp, #8
 8008d00:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d04:	b003      	add	sp, #12
 8008d06:	4770      	bx	lr
 8008d08:	20000078 	.word	0x20000078

08008d0c <abort>:
 8008d0c:	b508      	push	{r3, lr}
 8008d0e:	2006      	movs	r0, #6
 8008d10:	f000 fa08 	bl	8009124 <raise>
 8008d14:	2001      	movs	r0, #1
 8008d16:	f7f9 f8ae 	bl	8001e76 <_exit>

08008d1a <_malloc_usable_size_r>:
 8008d1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d1e:	1f18      	subs	r0, r3, #4
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	bfbc      	itt	lt
 8008d24:	580b      	ldrlt	r3, [r1, r0]
 8008d26:	18c0      	addlt	r0, r0, r3
 8008d28:	4770      	bx	lr

08008d2a <__sfputc_r>:
 8008d2a:	6893      	ldr	r3, [r2, #8]
 8008d2c:	3b01      	subs	r3, #1
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	b410      	push	{r4}
 8008d32:	6093      	str	r3, [r2, #8]
 8008d34:	da08      	bge.n	8008d48 <__sfputc_r+0x1e>
 8008d36:	6994      	ldr	r4, [r2, #24]
 8008d38:	42a3      	cmp	r3, r4
 8008d3a:	db01      	blt.n	8008d40 <__sfputc_r+0x16>
 8008d3c:	290a      	cmp	r1, #10
 8008d3e:	d103      	bne.n	8008d48 <__sfputc_r+0x1e>
 8008d40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d44:	f000 b932 	b.w	8008fac <__swbuf_r>
 8008d48:	6813      	ldr	r3, [r2, #0]
 8008d4a:	1c58      	adds	r0, r3, #1
 8008d4c:	6010      	str	r0, [r2, #0]
 8008d4e:	7019      	strb	r1, [r3, #0]
 8008d50:	4608      	mov	r0, r1
 8008d52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <__sfputs_r>:
 8008d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d5a:	4606      	mov	r6, r0
 8008d5c:	460f      	mov	r7, r1
 8008d5e:	4614      	mov	r4, r2
 8008d60:	18d5      	adds	r5, r2, r3
 8008d62:	42ac      	cmp	r4, r5
 8008d64:	d101      	bne.n	8008d6a <__sfputs_r+0x12>
 8008d66:	2000      	movs	r0, #0
 8008d68:	e007      	b.n	8008d7a <__sfputs_r+0x22>
 8008d6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d6e:	463a      	mov	r2, r7
 8008d70:	4630      	mov	r0, r6
 8008d72:	f7ff ffda 	bl	8008d2a <__sfputc_r>
 8008d76:	1c43      	adds	r3, r0, #1
 8008d78:	d1f3      	bne.n	8008d62 <__sfputs_r+0xa>
 8008d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008d7c <_vfiprintf_r>:
 8008d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d80:	460d      	mov	r5, r1
 8008d82:	b09d      	sub	sp, #116	@ 0x74
 8008d84:	4614      	mov	r4, r2
 8008d86:	4698      	mov	r8, r3
 8008d88:	4606      	mov	r6, r0
 8008d8a:	b118      	cbz	r0, 8008d94 <_vfiprintf_r+0x18>
 8008d8c:	6a03      	ldr	r3, [r0, #32]
 8008d8e:	b90b      	cbnz	r3, 8008d94 <_vfiprintf_r+0x18>
 8008d90:	f7fc fdfa 	bl	8005988 <__sinit>
 8008d94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d96:	07d9      	lsls	r1, r3, #31
 8008d98:	d405      	bmi.n	8008da6 <_vfiprintf_r+0x2a>
 8008d9a:	89ab      	ldrh	r3, [r5, #12]
 8008d9c:	059a      	lsls	r2, r3, #22
 8008d9e:	d402      	bmi.n	8008da6 <_vfiprintf_r+0x2a>
 8008da0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008da2:	f7fc ff22 	bl	8005bea <__retarget_lock_acquire_recursive>
 8008da6:	89ab      	ldrh	r3, [r5, #12]
 8008da8:	071b      	lsls	r3, r3, #28
 8008daa:	d501      	bpl.n	8008db0 <_vfiprintf_r+0x34>
 8008dac:	692b      	ldr	r3, [r5, #16]
 8008dae:	b99b      	cbnz	r3, 8008dd8 <_vfiprintf_r+0x5c>
 8008db0:	4629      	mov	r1, r5
 8008db2:	4630      	mov	r0, r6
 8008db4:	f000 f938 	bl	8009028 <__swsetup_r>
 8008db8:	b170      	cbz	r0, 8008dd8 <_vfiprintf_r+0x5c>
 8008dba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008dbc:	07dc      	lsls	r4, r3, #31
 8008dbe:	d504      	bpl.n	8008dca <_vfiprintf_r+0x4e>
 8008dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008dc4:	b01d      	add	sp, #116	@ 0x74
 8008dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dca:	89ab      	ldrh	r3, [r5, #12]
 8008dcc:	0598      	lsls	r0, r3, #22
 8008dce:	d4f7      	bmi.n	8008dc0 <_vfiprintf_r+0x44>
 8008dd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008dd2:	f7fc ff0b 	bl	8005bec <__retarget_lock_release_recursive>
 8008dd6:	e7f3      	b.n	8008dc0 <_vfiprintf_r+0x44>
 8008dd8:	2300      	movs	r3, #0
 8008dda:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ddc:	2320      	movs	r3, #32
 8008dde:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008de2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008de6:	2330      	movs	r3, #48	@ 0x30
 8008de8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008f98 <_vfiprintf_r+0x21c>
 8008dec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008df0:	f04f 0901 	mov.w	r9, #1
 8008df4:	4623      	mov	r3, r4
 8008df6:	469a      	mov	sl, r3
 8008df8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dfc:	b10a      	cbz	r2, 8008e02 <_vfiprintf_r+0x86>
 8008dfe:	2a25      	cmp	r2, #37	@ 0x25
 8008e00:	d1f9      	bne.n	8008df6 <_vfiprintf_r+0x7a>
 8008e02:	ebba 0b04 	subs.w	fp, sl, r4
 8008e06:	d00b      	beq.n	8008e20 <_vfiprintf_r+0xa4>
 8008e08:	465b      	mov	r3, fp
 8008e0a:	4622      	mov	r2, r4
 8008e0c:	4629      	mov	r1, r5
 8008e0e:	4630      	mov	r0, r6
 8008e10:	f7ff ffa2 	bl	8008d58 <__sfputs_r>
 8008e14:	3001      	adds	r0, #1
 8008e16:	f000 80a7 	beq.w	8008f68 <_vfiprintf_r+0x1ec>
 8008e1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e1c:	445a      	add	r2, fp
 8008e1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e20:	f89a 3000 	ldrb.w	r3, [sl]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	f000 809f 	beq.w	8008f68 <_vfiprintf_r+0x1ec>
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e34:	f10a 0a01 	add.w	sl, sl, #1
 8008e38:	9304      	str	r3, [sp, #16]
 8008e3a:	9307      	str	r3, [sp, #28]
 8008e3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e40:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e42:	4654      	mov	r4, sl
 8008e44:	2205      	movs	r2, #5
 8008e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e4a:	4853      	ldr	r0, [pc, #332]	@ (8008f98 <_vfiprintf_r+0x21c>)
 8008e4c:	f7f7 f9c0 	bl	80001d0 <memchr>
 8008e50:	9a04      	ldr	r2, [sp, #16]
 8008e52:	b9d8      	cbnz	r0, 8008e8c <_vfiprintf_r+0x110>
 8008e54:	06d1      	lsls	r1, r2, #27
 8008e56:	bf44      	itt	mi
 8008e58:	2320      	movmi	r3, #32
 8008e5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e5e:	0713      	lsls	r3, r2, #28
 8008e60:	bf44      	itt	mi
 8008e62:	232b      	movmi	r3, #43	@ 0x2b
 8008e64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e68:	f89a 3000 	ldrb.w	r3, [sl]
 8008e6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e6e:	d015      	beq.n	8008e9c <_vfiprintf_r+0x120>
 8008e70:	9a07      	ldr	r2, [sp, #28]
 8008e72:	4654      	mov	r4, sl
 8008e74:	2000      	movs	r0, #0
 8008e76:	f04f 0c0a 	mov.w	ip, #10
 8008e7a:	4621      	mov	r1, r4
 8008e7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e80:	3b30      	subs	r3, #48	@ 0x30
 8008e82:	2b09      	cmp	r3, #9
 8008e84:	d94b      	bls.n	8008f1e <_vfiprintf_r+0x1a2>
 8008e86:	b1b0      	cbz	r0, 8008eb6 <_vfiprintf_r+0x13a>
 8008e88:	9207      	str	r2, [sp, #28]
 8008e8a:	e014      	b.n	8008eb6 <_vfiprintf_r+0x13a>
 8008e8c:	eba0 0308 	sub.w	r3, r0, r8
 8008e90:	fa09 f303 	lsl.w	r3, r9, r3
 8008e94:	4313      	orrs	r3, r2
 8008e96:	9304      	str	r3, [sp, #16]
 8008e98:	46a2      	mov	sl, r4
 8008e9a:	e7d2      	b.n	8008e42 <_vfiprintf_r+0xc6>
 8008e9c:	9b03      	ldr	r3, [sp, #12]
 8008e9e:	1d19      	adds	r1, r3, #4
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	9103      	str	r1, [sp, #12]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	bfbb      	ittet	lt
 8008ea8:	425b      	neglt	r3, r3
 8008eaa:	f042 0202 	orrlt.w	r2, r2, #2
 8008eae:	9307      	strge	r3, [sp, #28]
 8008eb0:	9307      	strlt	r3, [sp, #28]
 8008eb2:	bfb8      	it	lt
 8008eb4:	9204      	strlt	r2, [sp, #16]
 8008eb6:	7823      	ldrb	r3, [r4, #0]
 8008eb8:	2b2e      	cmp	r3, #46	@ 0x2e
 8008eba:	d10a      	bne.n	8008ed2 <_vfiprintf_r+0x156>
 8008ebc:	7863      	ldrb	r3, [r4, #1]
 8008ebe:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ec0:	d132      	bne.n	8008f28 <_vfiprintf_r+0x1ac>
 8008ec2:	9b03      	ldr	r3, [sp, #12]
 8008ec4:	1d1a      	adds	r2, r3, #4
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	9203      	str	r2, [sp, #12]
 8008eca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ece:	3402      	adds	r4, #2
 8008ed0:	9305      	str	r3, [sp, #20]
 8008ed2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008fa8 <_vfiprintf_r+0x22c>
 8008ed6:	7821      	ldrb	r1, [r4, #0]
 8008ed8:	2203      	movs	r2, #3
 8008eda:	4650      	mov	r0, sl
 8008edc:	f7f7 f978 	bl	80001d0 <memchr>
 8008ee0:	b138      	cbz	r0, 8008ef2 <_vfiprintf_r+0x176>
 8008ee2:	9b04      	ldr	r3, [sp, #16]
 8008ee4:	eba0 000a 	sub.w	r0, r0, sl
 8008ee8:	2240      	movs	r2, #64	@ 0x40
 8008eea:	4082      	lsls	r2, r0
 8008eec:	4313      	orrs	r3, r2
 8008eee:	3401      	adds	r4, #1
 8008ef0:	9304      	str	r3, [sp, #16]
 8008ef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ef6:	4829      	ldr	r0, [pc, #164]	@ (8008f9c <_vfiprintf_r+0x220>)
 8008ef8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008efc:	2206      	movs	r2, #6
 8008efe:	f7f7 f967 	bl	80001d0 <memchr>
 8008f02:	2800      	cmp	r0, #0
 8008f04:	d03f      	beq.n	8008f86 <_vfiprintf_r+0x20a>
 8008f06:	4b26      	ldr	r3, [pc, #152]	@ (8008fa0 <_vfiprintf_r+0x224>)
 8008f08:	bb1b      	cbnz	r3, 8008f52 <_vfiprintf_r+0x1d6>
 8008f0a:	9b03      	ldr	r3, [sp, #12]
 8008f0c:	3307      	adds	r3, #7
 8008f0e:	f023 0307 	bic.w	r3, r3, #7
 8008f12:	3308      	adds	r3, #8
 8008f14:	9303      	str	r3, [sp, #12]
 8008f16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f18:	443b      	add	r3, r7
 8008f1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f1c:	e76a      	b.n	8008df4 <_vfiprintf_r+0x78>
 8008f1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f22:	460c      	mov	r4, r1
 8008f24:	2001      	movs	r0, #1
 8008f26:	e7a8      	b.n	8008e7a <_vfiprintf_r+0xfe>
 8008f28:	2300      	movs	r3, #0
 8008f2a:	3401      	adds	r4, #1
 8008f2c:	9305      	str	r3, [sp, #20]
 8008f2e:	4619      	mov	r1, r3
 8008f30:	f04f 0c0a 	mov.w	ip, #10
 8008f34:	4620      	mov	r0, r4
 8008f36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f3a:	3a30      	subs	r2, #48	@ 0x30
 8008f3c:	2a09      	cmp	r2, #9
 8008f3e:	d903      	bls.n	8008f48 <_vfiprintf_r+0x1cc>
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d0c6      	beq.n	8008ed2 <_vfiprintf_r+0x156>
 8008f44:	9105      	str	r1, [sp, #20]
 8008f46:	e7c4      	b.n	8008ed2 <_vfiprintf_r+0x156>
 8008f48:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f4c:	4604      	mov	r4, r0
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e7f0      	b.n	8008f34 <_vfiprintf_r+0x1b8>
 8008f52:	ab03      	add	r3, sp, #12
 8008f54:	9300      	str	r3, [sp, #0]
 8008f56:	462a      	mov	r2, r5
 8008f58:	4b12      	ldr	r3, [pc, #72]	@ (8008fa4 <_vfiprintf_r+0x228>)
 8008f5a:	a904      	add	r1, sp, #16
 8008f5c:	4630      	mov	r0, r6
 8008f5e:	f7fb febb 	bl	8004cd8 <_printf_float>
 8008f62:	4607      	mov	r7, r0
 8008f64:	1c78      	adds	r0, r7, #1
 8008f66:	d1d6      	bne.n	8008f16 <_vfiprintf_r+0x19a>
 8008f68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f6a:	07d9      	lsls	r1, r3, #31
 8008f6c:	d405      	bmi.n	8008f7a <_vfiprintf_r+0x1fe>
 8008f6e:	89ab      	ldrh	r3, [r5, #12]
 8008f70:	059a      	lsls	r2, r3, #22
 8008f72:	d402      	bmi.n	8008f7a <_vfiprintf_r+0x1fe>
 8008f74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f76:	f7fc fe39 	bl	8005bec <__retarget_lock_release_recursive>
 8008f7a:	89ab      	ldrh	r3, [r5, #12]
 8008f7c:	065b      	lsls	r3, r3, #25
 8008f7e:	f53f af1f 	bmi.w	8008dc0 <_vfiprintf_r+0x44>
 8008f82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f84:	e71e      	b.n	8008dc4 <_vfiprintf_r+0x48>
 8008f86:	ab03      	add	r3, sp, #12
 8008f88:	9300      	str	r3, [sp, #0]
 8008f8a:	462a      	mov	r2, r5
 8008f8c:	4b05      	ldr	r3, [pc, #20]	@ (8008fa4 <_vfiprintf_r+0x228>)
 8008f8e:	a904      	add	r1, sp, #16
 8008f90:	4630      	mov	r0, r6
 8008f92:	f7fc f939 	bl	8005208 <_printf_i>
 8008f96:	e7e4      	b.n	8008f62 <_vfiprintf_r+0x1e6>
 8008f98:	0800cde1 	.word	0x0800cde1
 8008f9c:	0800cdeb 	.word	0x0800cdeb
 8008fa0:	08004cd9 	.word	0x08004cd9
 8008fa4:	08008d59 	.word	0x08008d59
 8008fa8:	0800cde7 	.word	0x0800cde7

08008fac <__swbuf_r>:
 8008fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fae:	460e      	mov	r6, r1
 8008fb0:	4614      	mov	r4, r2
 8008fb2:	4605      	mov	r5, r0
 8008fb4:	b118      	cbz	r0, 8008fbe <__swbuf_r+0x12>
 8008fb6:	6a03      	ldr	r3, [r0, #32]
 8008fb8:	b90b      	cbnz	r3, 8008fbe <__swbuf_r+0x12>
 8008fba:	f7fc fce5 	bl	8005988 <__sinit>
 8008fbe:	69a3      	ldr	r3, [r4, #24]
 8008fc0:	60a3      	str	r3, [r4, #8]
 8008fc2:	89a3      	ldrh	r3, [r4, #12]
 8008fc4:	071a      	lsls	r2, r3, #28
 8008fc6:	d501      	bpl.n	8008fcc <__swbuf_r+0x20>
 8008fc8:	6923      	ldr	r3, [r4, #16]
 8008fca:	b943      	cbnz	r3, 8008fde <__swbuf_r+0x32>
 8008fcc:	4621      	mov	r1, r4
 8008fce:	4628      	mov	r0, r5
 8008fd0:	f000 f82a 	bl	8009028 <__swsetup_r>
 8008fd4:	b118      	cbz	r0, 8008fde <__swbuf_r+0x32>
 8008fd6:	f04f 37ff 	mov.w	r7, #4294967295
 8008fda:	4638      	mov	r0, r7
 8008fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fde:	6823      	ldr	r3, [r4, #0]
 8008fe0:	6922      	ldr	r2, [r4, #16]
 8008fe2:	1a98      	subs	r0, r3, r2
 8008fe4:	6963      	ldr	r3, [r4, #20]
 8008fe6:	b2f6      	uxtb	r6, r6
 8008fe8:	4283      	cmp	r3, r0
 8008fea:	4637      	mov	r7, r6
 8008fec:	dc05      	bgt.n	8008ffa <__swbuf_r+0x4e>
 8008fee:	4621      	mov	r1, r4
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	f7ff fa6f 	bl	80084d4 <_fflush_r>
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	d1ed      	bne.n	8008fd6 <__swbuf_r+0x2a>
 8008ffa:	68a3      	ldr	r3, [r4, #8]
 8008ffc:	3b01      	subs	r3, #1
 8008ffe:	60a3      	str	r3, [r4, #8]
 8009000:	6823      	ldr	r3, [r4, #0]
 8009002:	1c5a      	adds	r2, r3, #1
 8009004:	6022      	str	r2, [r4, #0]
 8009006:	701e      	strb	r6, [r3, #0]
 8009008:	6962      	ldr	r2, [r4, #20]
 800900a:	1c43      	adds	r3, r0, #1
 800900c:	429a      	cmp	r2, r3
 800900e:	d004      	beq.n	800901a <__swbuf_r+0x6e>
 8009010:	89a3      	ldrh	r3, [r4, #12]
 8009012:	07db      	lsls	r3, r3, #31
 8009014:	d5e1      	bpl.n	8008fda <__swbuf_r+0x2e>
 8009016:	2e0a      	cmp	r6, #10
 8009018:	d1df      	bne.n	8008fda <__swbuf_r+0x2e>
 800901a:	4621      	mov	r1, r4
 800901c:	4628      	mov	r0, r5
 800901e:	f7ff fa59 	bl	80084d4 <_fflush_r>
 8009022:	2800      	cmp	r0, #0
 8009024:	d0d9      	beq.n	8008fda <__swbuf_r+0x2e>
 8009026:	e7d6      	b.n	8008fd6 <__swbuf_r+0x2a>

08009028 <__swsetup_r>:
 8009028:	b538      	push	{r3, r4, r5, lr}
 800902a:	4b29      	ldr	r3, [pc, #164]	@ (80090d0 <__swsetup_r+0xa8>)
 800902c:	4605      	mov	r5, r0
 800902e:	6818      	ldr	r0, [r3, #0]
 8009030:	460c      	mov	r4, r1
 8009032:	b118      	cbz	r0, 800903c <__swsetup_r+0x14>
 8009034:	6a03      	ldr	r3, [r0, #32]
 8009036:	b90b      	cbnz	r3, 800903c <__swsetup_r+0x14>
 8009038:	f7fc fca6 	bl	8005988 <__sinit>
 800903c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009040:	0719      	lsls	r1, r3, #28
 8009042:	d422      	bmi.n	800908a <__swsetup_r+0x62>
 8009044:	06da      	lsls	r2, r3, #27
 8009046:	d407      	bmi.n	8009058 <__swsetup_r+0x30>
 8009048:	2209      	movs	r2, #9
 800904a:	602a      	str	r2, [r5, #0]
 800904c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009050:	81a3      	strh	r3, [r4, #12]
 8009052:	f04f 30ff 	mov.w	r0, #4294967295
 8009056:	e033      	b.n	80090c0 <__swsetup_r+0x98>
 8009058:	0758      	lsls	r0, r3, #29
 800905a:	d512      	bpl.n	8009082 <__swsetup_r+0x5a>
 800905c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800905e:	b141      	cbz	r1, 8009072 <__swsetup_r+0x4a>
 8009060:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009064:	4299      	cmp	r1, r3
 8009066:	d002      	beq.n	800906e <__swsetup_r+0x46>
 8009068:	4628      	mov	r0, r5
 800906a:	f7fd fc21 	bl	80068b0 <_free_r>
 800906e:	2300      	movs	r3, #0
 8009070:	6363      	str	r3, [r4, #52]	@ 0x34
 8009072:	89a3      	ldrh	r3, [r4, #12]
 8009074:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009078:	81a3      	strh	r3, [r4, #12]
 800907a:	2300      	movs	r3, #0
 800907c:	6063      	str	r3, [r4, #4]
 800907e:	6923      	ldr	r3, [r4, #16]
 8009080:	6023      	str	r3, [r4, #0]
 8009082:	89a3      	ldrh	r3, [r4, #12]
 8009084:	f043 0308 	orr.w	r3, r3, #8
 8009088:	81a3      	strh	r3, [r4, #12]
 800908a:	6923      	ldr	r3, [r4, #16]
 800908c:	b94b      	cbnz	r3, 80090a2 <__swsetup_r+0x7a>
 800908e:	89a3      	ldrh	r3, [r4, #12]
 8009090:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009094:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009098:	d003      	beq.n	80090a2 <__swsetup_r+0x7a>
 800909a:	4621      	mov	r1, r4
 800909c:	4628      	mov	r0, r5
 800909e:	f000 f883 	bl	80091a8 <__smakebuf_r>
 80090a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090a6:	f013 0201 	ands.w	r2, r3, #1
 80090aa:	d00a      	beq.n	80090c2 <__swsetup_r+0x9a>
 80090ac:	2200      	movs	r2, #0
 80090ae:	60a2      	str	r2, [r4, #8]
 80090b0:	6962      	ldr	r2, [r4, #20]
 80090b2:	4252      	negs	r2, r2
 80090b4:	61a2      	str	r2, [r4, #24]
 80090b6:	6922      	ldr	r2, [r4, #16]
 80090b8:	b942      	cbnz	r2, 80090cc <__swsetup_r+0xa4>
 80090ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80090be:	d1c5      	bne.n	800904c <__swsetup_r+0x24>
 80090c0:	bd38      	pop	{r3, r4, r5, pc}
 80090c2:	0799      	lsls	r1, r3, #30
 80090c4:	bf58      	it	pl
 80090c6:	6962      	ldrpl	r2, [r4, #20]
 80090c8:	60a2      	str	r2, [r4, #8]
 80090ca:	e7f4      	b.n	80090b6 <__swsetup_r+0x8e>
 80090cc:	2000      	movs	r0, #0
 80090ce:	e7f7      	b.n	80090c0 <__swsetup_r+0x98>
 80090d0:	20000078 	.word	0x20000078

080090d4 <_raise_r>:
 80090d4:	291f      	cmp	r1, #31
 80090d6:	b538      	push	{r3, r4, r5, lr}
 80090d8:	4605      	mov	r5, r0
 80090da:	460c      	mov	r4, r1
 80090dc:	d904      	bls.n	80090e8 <_raise_r+0x14>
 80090de:	2316      	movs	r3, #22
 80090e0:	6003      	str	r3, [r0, #0]
 80090e2:	f04f 30ff 	mov.w	r0, #4294967295
 80090e6:	bd38      	pop	{r3, r4, r5, pc}
 80090e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80090ea:	b112      	cbz	r2, 80090f2 <_raise_r+0x1e>
 80090ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090f0:	b94b      	cbnz	r3, 8009106 <_raise_r+0x32>
 80090f2:	4628      	mov	r0, r5
 80090f4:	f000 f830 	bl	8009158 <_getpid_r>
 80090f8:	4622      	mov	r2, r4
 80090fa:	4601      	mov	r1, r0
 80090fc:	4628      	mov	r0, r5
 80090fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009102:	f000 b817 	b.w	8009134 <_kill_r>
 8009106:	2b01      	cmp	r3, #1
 8009108:	d00a      	beq.n	8009120 <_raise_r+0x4c>
 800910a:	1c59      	adds	r1, r3, #1
 800910c:	d103      	bne.n	8009116 <_raise_r+0x42>
 800910e:	2316      	movs	r3, #22
 8009110:	6003      	str	r3, [r0, #0]
 8009112:	2001      	movs	r0, #1
 8009114:	e7e7      	b.n	80090e6 <_raise_r+0x12>
 8009116:	2100      	movs	r1, #0
 8009118:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800911c:	4620      	mov	r0, r4
 800911e:	4798      	blx	r3
 8009120:	2000      	movs	r0, #0
 8009122:	e7e0      	b.n	80090e6 <_raise_r+0x12>

08009124 <raise>:
 8009124:	4b02      	ldr	r3, [pc, #8]	@ (8009130 <raise+0xc>)
 8009126:	4601      	mov	r1, r0
 8009128:	6818      	ldr	r0, [r3, #0]
 800912a:	f7ff bfd3 	b.w	80090d4 <_raise_r>
 800912e:	bf00      	nop
 8009130:	20000078 	.word	0x20000078

08009134 <_kill_r>:
 8009134:	b538      	push	{r3, r4, r5, lr}
 8009136:	4d07      	ldr	r5, [pc, #28]	@ (8009154 <_kill_r+0x20>)
 8009138:	2300      	movs	r3, #0
 800913a:	4604      	mov	r4, r0
 800913c:	4608      	mov	r0, r1
 800913e:	4611      	mov	r1, r2
 8009140:	602b      	str	r3, [r5, #0]
 8009142:	f7f8 fe88 	bl	8001e56 <_kill>
 8009146:	1c43      	adds	r3, r0, #1
 8009148:	d102      	bne.n	8009150 <_kill_r+0x1c>
 800914a:	682b      	ldr	r3, [r5, #0]
 800914c:	b103      	cbz	r3, 8009150 <_kill_r+0x1c>
 800914e:	6023      	str	r3, [r4, #0]
 8009150:	bd38      	pop	{r3, r4, r5, pc}
 8009152:	bf00      	nop
 8009154:	20000888 	.word	0x20000888

08009158 <_getpid_r>:
 8009158:	f7f8 be75 	b.w	8001e46 <_getpid>

0800915c <__swhatbuf_r>:
 800915c:	b570      	push	{r4, r5, r6, lr}
 800915e:	460c      	mov	r4, r1
 8009160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009164:	2900      	cmp	r1, #0
 8009166:	b096      	sub	sp, #88	@ 0x58
 8009168:	4615      	mov	r5, r2
 800916a:	461e      	mov	r6, r3
 800916c:	da0d      	bge.n	800918a <__swhatbuf_r+0x2e>
 800916e:	89a3      	ldrh	r3, [r4, #12]
 8009170:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009174:	f04f 0100 	mov.w	r1, #0
 8009178:	bf14      	ite	ne
 800917a:	2340      	movne	r3, #64	@ 0x40
 800917c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009180:	2000      	movs	r0, #0
 8009182:	6031      	str	r1, [r6, #0]
 8009184:	602b      	str	r3, [r5, #0]
 8009186:	b016      	add	sp, #88	@ 0x58
 8009188:	bd70      	pop	{r4, r5, r6, pc}
 800918a:	466a      	mov	r2, sp
 800918c:	f000 f848 	bl	8009220 <_fstat_r>
 8009190:	2800      	cmp	r0, #0
 8009192:	dbec      	blt.n	800916e <__swhatbuf_r+0x12>
 8009194:	9901      	ldr	r1, [sp, #4]
 8009196:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800919a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800919e:	4259      	negs	r1, r3
 80091a0:	4159      	adcs	r1, r3
 80091a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80091a6:	e7eb      	b.n	8009180 <__swhatbuf_r+0x24>

080091a8 <__smakebuf_r>:
 80091a8:	898b      	ldrh	r3, [r1, #12]
 80091aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091ac:	079d      	lsls	r5, r3, #30
 80091ae:	4606      	mov	r6, r0
 80091b0:	460c      	mov	r4, r1
 80091b2:	d507      	bpl.n	80091c4 <__smakebuf_r+0x1c>
 80091b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80091b8:	6023      	str	r3, [r4, #0]
 80091ba:	6123      	str	r3, [r4, #16]
 80091bc:	2301      	movs	r3, #1
 80091be:	6163      	str	r3, [r4, #20]
 80091c0:	b003      	add	sp, #12
 80091c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091c4:	ab01      	add	r3, sp, #4
 80091c6:	466a      	mov	r2, sp
 80091c8:	f7ff ffc8 	bl	800915c <__swhatbuf_r>
 80091cc:	9f00      	ldr	r7, [sp, #0]
 80091ce:	4605      	mov	r5, r0
 80091d0:	4639      	mov	r1, r7
 80091d2:	4630      	mov	r0, r6
 80091d4:	f7fd fbe0 	bl	8006998 <_malloc_r>
 80091d8:	b948      	cbnz	r0, 80091ee <__smakebuf_r+0x46>
 80091da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091de:	059a      	lsls	r2, r3, #22
 80091e0:	d4ee      	bmi.n	80091c0 <__smakebuf_r+0x18>
 80091e2:	f023 0303 	bic.w	r3, r3, #3
 80091e6:	f043 0302 	orr.w	r3, r3, #2
 80091ea:	81a3      	strh	r3, [r4, #12]
 80091ec:	e7e2      	b.n	80091b4 <__smakebuf_r+0xc>
 80091ee:	89a3      	ldrh	r3, [r4, #12]
 80091f0:	6020      	str	r0, [r4, #0]
 80091f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091f6:	81a3      	strh	r3, [r4, #12]
 80091f8:	9b01      	ldr	r3, [sp, #4]
 80091fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80091fe:	b15b      	cbz	r3, 8009218 <__smakebuf_r+0x70>
 8009200:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009204:	4630      	mov	r0, r6
 8009206:	f000 f81d 	bl	8009244 <_isatty_r>
 800920a:	b128      	cbz	r0, 8009218 <__smakebuf_r+0x70>
 800920c:	89a3      	ldrh	r3, [r4, #12]
 800920e:	f023 0303 	bic.w	r3, r3, #3
 8009212:	f043 0301 	orr.w	r3, r3, #1
 8009216:	81a3      	strh	r3, [r4, #12]
 8009218:	89a3      	ldrh	r3, [r4, #12]
 800921a:	431d      	orrs	r5, r3
 800921c:	81a5      	strh	r5, [r4, #12]
 800921e:	e7cf      	b.n	80091c0 <__smakebuf_r+0x18>

08009220 <_fstat_r>:
 8009220:	b538      	push	{r3, r4, r5, lr}
 8009222:	4d07      	ldr	r5, [pc, #28]	@ (8009240 <_fstat_r+0x20>)
 8009224:	2300      	movs	r3, #0
 8009226:	4604      	mov	r4, r0
 8009228:	4608      	mov	r0, r1
 800922a:	4611      	mov	r1, r2
 800922c:	602b      	str	r3, [r5, #0]
 800922e:	f7f8 fe72 	bl	8001f16 <_fstat>
 8009232:	1c43      	adds	r3, r0, #1
 8009234:	d102      	bne.n	800923c <_fstat_r+0x1c>
 8009236:	682b      	ldr	r3, [r5, #0]
 8009238:	b103      	cbz	r3, 800923c <_fstat_r+0x1c>
 800923a:	6023      	str	r3, [r4, #0]
 800923c:	bd38      	pop	{r3, r4, r5, pc}
 800923e:	bf00      	nop
 8009240:	20000888 	.word	0x20000888

08009244 <_isatty_r>:
 8009244:	b538      	push	{r3, r4, r5, lr}
 8009246:	4d06      	ldr	r5, [pc, #24]	@ (8009260 <_isatty_r+0x1c>)
 8009248:	2300      	movs	r3, #0
 800924a:	4604      	mov	r4, r0
 800924c:	4608      	mov	r0, r1
 800924e:	602b      	str	r3, [r5, #0]
 8009250:	f7f8 fe71 	bl	8001f36 <_isatty>
 8009254:	1c43      	adds	r3, r0, #1
 8009256:	d102      	bne.n	800925e <_isatty_r+0x1a>
 8009258:	682b      	ldr	r3, [r5, #0]
 800925a:	b103      	cbz	r3, 800925e <_isatty_r+0x1a>
 800925c:	6023      	str	r3, [r4, #0]
 800925e:	bd38      	pop	{r3, r4, r5, pc}
 8009260:	20000888 	.word	0x20000888

08009264 <_init>:
 8009264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009266:	bf00      	nop
 8009268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800926a:	bc08      	pop	{r3}
 800926c:	469e      	mov	lr, r3
 800926e:	4770      	bx	lr

08009270 <_fini>:
 8009270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009272:	bf00      	nop
 8009274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009276:	bc08      	pop	{r3}
 8009278:	469e      	mov	lr, r3
 800927a:	4770      	bx	lr
